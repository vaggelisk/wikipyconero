(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["vendors~editor-asciidoc"],{

/***/ "./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js":
/*!********************************************************************!*\
  !*** ./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process, Buffer, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license Asciidoctor.js 2.2.6 | MIT | https://github.com/asciidoctor/asciidoctor.js\n */\n(function(undefined) {\n  // @note\n  //   A few conventions for the documentation of this file:\n  //   1. Always use \"//\" (in contrast with \"/**/\")\n  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)\n  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to\n  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.\n  //   4. `nil` and `null` being unambiguous refer to the respective\n  //      objects/values in Ruby and JavaScript\n  //   5. This is still WIP :) so please give feedback and suggestions on how\n  //      to improve or for alternative solutions\n  //\n  //   The way the code is digested before going through Yardoc is a secret kept\n  //   in the docs repo (https://github.com/opal/docs/tree/master).\n\n  var global_object = this, console;\n\n  // Detect the global object\n  if (typeof(global) !== 'undefined') { global_object = global; }\n  if (typeof(window) !== 'undefined') { global_object = window; }\n\n  // Setup a dummy console object if missing\n  if (typeof(global_object.console) === 'object') {\n    console = global_object.console;\n  } else if (global_object.console == null) {\n    console = global_object.console = {};\n  } else {\n    console = {};\n  }\n\n  if (!('log' in console)) { console.log = function () {}; }\n  if (!('warn' in console)) { console.warn = console.log; }\n\n  if (typeof(global_object.Opal) !== 'undefined') {\n    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');\n    return global_object.Opal;\n  }\n\n  var nil;\n\n  // The actual class for BasicObject\n  var BasicObject;\n\n  // The actual Object class.\n  // The leading underscore is to avoid confusion with window.Object()\n  var _Object;\n\n  // The actual Module class\n  var Module;\n\n  // The actual Class class\n  var Class;\n\n  // The Opal object that is exposed globally\n  var Opal = this.Opal = {};\n\n  // This is a useful reference to global object inside ruby files\n  Opal.global = global_object;\n  global_object.Opal = Opal;\n\n  // Configure runtime behavior with regards to require and unsupported fearures\n  Opal.config = {\n    missing_require_severity: 'error',        // error, warning, ignore\n    unsupported_features_severity: 'warning', // error, warning, ignore\n    enable_stack_trace: true                  // true, false\n  }\n\n  // Minify common function calls\n  var $hasOwn       = Object.hasOwnProperty;\n  var $bind         = Function.prototype.bind;\n  var $setPrototype = Object.setPrototypeOf;\n  var $slice        = Array.prototype.slice;\n  var $splice       = Array.prototype.splice;\n\n  // Nil object id is always 4\n  var nil_id = 4;\n\n  // Generates even sequential numbers greater than 4\n  // (nil_id) to serve as unique ids for ruby objects\n  var unique_id = nil_id;\n\n  // Return next unique id\n  Opal.uid = function() {\n    unique_id += 2;\n    return unique_id;\n  };\n\n  // Retrieve or assign the id of an object\n  Opal.id = function(obj) {\n    if (obj.$$is_number) return (obj * 2)+1;\n    if (obj.$$id != null) {\n      return obj.$$id;\n    };\n    $defineProperty(obj, '$$id', Opal.uid());\n    return obj.$$id;\n  };\n\n  // Globals table\n  Opal.gvars = {};\n\n  // Exit function, this should be replaced by platform specific implementation\n  // (See nodejs and chrome for examples)\n  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };\n\n  // keeps track of exceptions for $!\n  Opal.exceptions = [];\n\n  // @private\n  // Pops an exception from the stack and updates `$!`.\n  Opal.pop_exception = function() {\n    Opal.gvars[\"!\"] = Opal.exceptions.pop() || nil;\n  }\n\n  // Inspect any kind of object, including non Ruby ones\n  Opal.inspect = function(obj) {\n    if (obj === undefined) {\n      return \"undefined\";\n    }\n    else if (obj === null) {\n      return \"null\";\n    }\n    else if (!obj.$$class) {\n      return obj.toString();\n    }\n    else {\n      return obj.$inspect();\n    }\n  }\n\n  function $defineProperty(object, name, initialValue) {\n    if (typeof(object) === \"string\") {\n      // Special case for:\n      //   s = \"string\"\n      //   def s.m; end\n      // String class is the only class that:\n      // + compiles to JS primitive\n      // + allows method definition directly on instances\n      // numbers, true, false and nil do not support it.\n      object[name] = initialValue;\n    } else {\n      Object.defineProperty(object, name, {\n        value: initialValue,\n        enumerable: false,\n        configurable: true,\n        writable: true\n      });\n    }\n  }\n\n  Opal.defineProperty = $defineProperty;\n\n  Opal.slice = $slice;\n\n\n  // Truth\n  // -----\n\n  Opal.truthy = function(val) {\n    return (val !== nil && val != null && (!val.$$is_boolean || val == true));\n  };\n\n  Opal.falsy = function(val) {\n    return (val === nil || val == null || (val.$$is_boolean && val == false))\n  };\n\n\n  // Constants\n  // ---------\n  //\n  // For future reference:\n  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)\n  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)\n  //\n  // Legend of MRI concepts/names:\n  // - constant reference (cref): the module/class that acts as a namespace\n  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside\n  //            `module A; module B::C; end; end` is `[B::C, A]`\n\n  // Get the constant in the scope of the current cref\n  function const_get_name(cref, name) {\n    if (cref) return cref.$$const[name];\n  }\n\n  // Walk up the nesting array looking for the constant\n  function const_lookup_nesting(nesting, name) {\n    var i, ii, result, constant;\n\n    if (nesting.length === 0) return;\n\n    // If the nesting is not empty the constant is looked up in its elements\n    // and in order. The ancestors of those elements are ignored.\n    for (i = 0, ii = nesting.length; i < ii; i++) {\n      constant = nesting[i].$$const[name];\n      if (constant != null) return constant;\n    }\n  }\n\n  // Walk up the ancestors chain looking for the constant\n  function const_lookup_ancestors(cref, name) {\n    var i, ii, result, ancestors;\n\n    if (cref == null) return;\n\n    ancestors = Opal.ancestors(cref);\n\n    for (i = 0, ii = ancestors.length; i < ii; i++) {\n      if (ancestors[i].$$const && $hasOwn.call(ancestors[i].$$const, name)) {\n        return ancestors[i].$$const[name];\n      }\n    }\n  }\n\n  // Walk up Object's ancestors chain looking for the constant,\n  // but only if cref is missing or a module.\n  function const_lookup_Object(cref, name) {\n    if (cref == null || cref.$$is_module) {\n      return const_lookup_ancestors(_Object, name);\n    }\n  }\n\n  // Call const_missing if nothing else worked\n  function const_missing(cref, name, skip_missing) {\n    if (!skip_missing) {\n      return (cref || _Object).$const_missing(name);\n    }\n  }\n\n  // Look for the constant just in the current cref or call `#const_missing`\n  Opal.const_get_local = function(cref, name, skip_missing) {\n    var result;\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      throw new Opal.TypeError(cref.toString() + \" is not a class/module\");\n    }\n\n    result = const_get_name(cref, name);              if (result != null) return result;\n    result = const_missing(cref, name, skip_missing); if (result != null) return result;\n  }\n\n  // Look for the constant relative to a cref or call `#const_missing` (when the\n  // constant is prefixed by `::`).\n  Opal.const_get_qualified = function(cref, name, skip_missing) {\n    var result, cache, cached, current_version = Opal.const_cache_version;\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      throw new Opal.TypeError(cref.toString() + \" is not a class/module\");\n    }\n\n    if ((cache = cref.$$const_cache) == null) {\n      $defineProperty(cref, '$$const_cache', Object.create(null));\n      cache = cref.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null);\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null ? result : const_missing(cref, name, skip_missing);\n  };\n\n  // Initialize the top level constant cache generation counter\n  Opal.const_cache_version = 1;\n\n  // Look for the constant in the open using the current nesting and the nearest\n  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).\n  Opal.const_get_relative = function(nesting, name, skip_missing) {\n    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;\n\n    if ((cache = nesting.$$const_cache) == null) {\n      $defineProperty(nesting, '$$const_cache', Object.create(null));\n      cache = nesting.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_nesting(nesting, name))     != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null) ||\n      ((result = const_lookup_Object(cref, name))         != null);\n\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null ? result : const_missing(cref, name, skip_missing);\n  };\n\n  // Register the constant on a cref and opportunistically set the name of\n  // unnamed classes/modules.\n  Opal.const_set = function(cref, name, value) {\n    if (cref == null || cref === '::') cref = _Object;\n\n    if (value.$$is_a_module) {\n      if (value.$$name == null || value.$$name === nil) value.$$name = name;\n      if (value.$$base_module == null) value.$$base_module = cref;\n    }\n\n    cref.$$const = (cref.$$const || Object.create(null));\n    cref.$$const[name] = value;\n\n    // Add a short helper to navigate constants manually.\n    // @example\n    //   Opal.$$.Regexp.$$.IGNORECASE\n    cref.$$ = cref.$$const;\n\n    Opal.const_cache_version++;\n\n    // Expose top level constants onto the Opal object\n    if (cref === _Object) Opal[name] = value;\n\n    // Name new class directly onto current scope (Opal.Foo.Baz = klass)\n    $defineProperty(cref, name, value);\n\n    return value;\n  };\n\n  // Get all the constants reachable from a given cref, by default will include\n  // inherited constants.\n  Opal.constants = function(cref, inherit) {\n    if (inherit == null) inherit = true;\n\n    var module, modules = [cref], module_constants, i, ii, constants = {}, constant;\n\n    if (inherit) modules = modules.concat(Opal.ancestors(cref));\n    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));\n\n    for (i = 0, ii = modules.length; i < ii; i++) {\n      module = modules[i];\n\n      // Don not show Objects constants unless we're querying Object itself\n      if (cref !== _Object && module == _Object) break;\n\n      for (constant in module.$$const) {\n        constants[constant] = true;\n      }\n    }\n\n    return Object.keys(constants);\n  };\n\n  // Remove a constant from a cref.\n  Opal.const_remove = function(cref, name) {\n    Opal.const_cache_version++;\n\n    if (cref.$$const[name] != null) {\n      var old = cref.$$const[name];\n      delete cref.$$const[name];\n      return old;\n    }\n\n    if (cref.$$autoload != null && cref.$$autoload[name] != null) {\n      delete cref.$$autoload[name];\n      return nil;\n    }\n\n    throw Opal.NameError.$new(\"constant \"+cref+\"::\"+cref.$name()+\" not defined\");\n  };\n\n\n  // Modules & Classes\n  // -----------------\n\n  // A `class Foo; end` expression in ruby is compiled to call this runtime\n  // method which either returns an existing class of the given name, or creates\n  // a new class in the given `base` scope.\n  //\n  // If a constant with the given name exists, then we check to make sure that\n  // it is a class and also that the superclasses match. If either of these\n  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one\n  // was not specified in the ruby code.\n  //\n  // We pass a constructor to this method of the form `function ClassName() {}`\n  // simply so that classes show up with nicely formatted names inside debuggers\n  // in the web browser (or node/sprockets).\n  //\n  // The `scope` is the current `self` value where the class is being created\n  // from. We use this to get the scope for where the class should be created.\n  // If `scope` is an object (not a class/module), we simple get its class and\n  // use that as the scope instead.\n  //\n  // @param scope        [Object] where the class is being created\n  // @param superclass  [Class,null] superclass of the new class (may be null)\n  // @param id          [String] the name of the class to be created\n  // @param constructor [JS.Function] function to use as constructor\n  //\n  // @return new [Class]  or existing ruby class\n  //\n  Opal.allocate_class = function(name, superclass) {\n    var klass, constructor;\n\n    if (superclass != null && superclass.$$bridge) {\n      // Inheritance from bridged classes requires\n      // calling original JS constructors\n      constructor = function() {\n        var args = $slice.call(arguments),\n            self = new ($bind.apply(superclass.$$constructor, [null].concat(args)))();\n\n        // and replacing a __proto__ manually\n        $setPrototype(self, klass.$$prototype);\n        return self;\n      }\n    } else {\n      constructor = function(){};\n    }\n\n    if (name) {\n      $defineProperty(constructor, 'displayName', '::'+name);\n    }\n\n    klass = constructor;\n\n    $defineProperty(klass, '$$name', name);\n    $defineProperty(klass, '$$constructor', constructor);\n    $defineProperty(klass, '$$prototype', constructor.prototype);\n    $defineProperty(klass, '$$const', {});\n    $defineProperty(klass, '$$is_class', true);\n    $defineProperty(klass, '$$is_a_module', true);\n    $defineProperty(klass, '$$super', superclass);\n    $defineProperty(klass, '$$cvars', {});\n    $defineProperty(klass, '$$own_included_modules', []);\n    $defineProperty(klass, '$$own_prepended_modules', []);\n    $defineProperty(klass, '$$ancestors', []);\n    $defineProperty(klass, '$$ancestors_cache_version', null);\n\n    $defineProperty(klass.$$prototype, '$$class', klass);\n\n    // By default if there are no singleton class methods\n    // __proto__ is Class.prototype\n    // Later singleton methods generate a singleton_class\n    // and inject it into ancestors chain\n    if (Opal.Class) {\n      $setPrototype(klass, Opal.Class.prototype);\n    }\n\n    if (superclass != null) {\n      $setPrototype(klass.$$prototype, superclass.$$prototype);\n\n      if (superclass.$$meta) {\n        // If superclass has metaclass then we have explicitely inherit it.\n        Opal.build_class_singleton_class(klass);\n      }\n    };\n\n    return klass;\n  }\n\n\n  function find_existing_class(scope, name) {\n    // Try to find the class in the current scope\n    var klass = const_get_name(scope, name);\n\n    // If the class exists in the scope, then we must use that\n    if (klass) {\n      // Make sure the existing constant is a class, or raise error\n      if (!klass.$$is_class) {\n        throw Opal.TypeError.$new(name + \" is not a class\");\n      }\n\n      return klass;\n    }\n  }\n\n  function ensureSuperclassMatch(klass, superclass) {\n    if (klass.$$super !== superclass) {\n      throw Opal.TypeError.$new(\"superclass mismatch for class \" + klass.$$name);\n    }\n  }\n\n  Opal.klass = function(scope, superclass, name) {\n    var bridged;\n\n    if (scope == null) {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    // If the superclass is not an Opal-generated class then we're bridging a native JS class\n    if (superclass != null && !superclass.hasOwnProperty('$$is_class')) {\n      bridged = superclass;\n      superclass = _Object;\n    }\n\n    var klass = find_existing_class(scope, name);\n\n    if (klass) {\n      if (superclass) {\n        // Make sure existing class has same superclass\n        ensureSuperclassMatch(klass, superclass);\n      }\n      return klass;\n    }\n\n    // Class doesn't exist, create a new one with given superclass...\n\n    // Not specifying a superclass means we can assume it to be Object\n    if (superclass == null) {\n      superclass = _Object;\n    }\n\n    // Create the class object (instance of Class)\n    klass = Opal.allocate_class(name, superclass);\n    Opal.const_set(scope, name, klass);\n\n    // Call .inherited() hook with new class on the superclass\n    if (superclass.$inherited) {\n      superclass.$inherited(klass);\n    }\n\n    if (bridged) {\n      Opal.bridge(bridged, klass);\n    }\n\n    return klass;\n  }\n\n  // Define new module (or return existing module). The given `scope` is basically\n  // the current `self` value the `module` statement was defined in. If this is\n  // a ruby module or class, then it is used, otherwise if the scope is a ruby\n  // object then that objects real ruby class is used (e.g. if the scope is the\n  // main object, then the top level `Object` class is used as the scope).\n  //\n  // If a module of the given name is already defined in the scope, then that\n  // instance is just returned.\n  //\n  // If there is a class of the given name in the scope, then an error is\n  // generated instead (cannot have a class and module of same name in same scope).\n  //\n  // Otherwise, a new module is created in the scope with the given name, and that\n  // new instance is returned back (to be referenced at runtime).\n  //\n  // @param  scope [Module, Class] class or module this definition is inside\n  // @param  id   [String] the name of the new (or existing) module\n  //\n  // @return [Module]\n  Opal.allocate_module = function(name) {\n    var constructor = function(){};\n    if (name) {\n      $defineProperty(constructor, 'displayName', name+'.$$constructor');\n    }\n\n    var module = constructor;\n\n    if (name)\n      $defineProperty(constructor, 'displayName', name+'.constructor');\n\n    $defineProperty(module, '$$name', name);\n    $defineProperty(module, '$$prototype', constructor.prototype);\n    $defineProperty(module, '$$const', {});\n    $defineProperty(module, '$$is_module', true);\n    $defineProperty(module, '$$is_a_module', true);\n    $defineProperty(module, '$$cvars', {});\n    $defineProperty(module, '$$iclasses', []);\n    $defineProperty(module, '$$own_included_modules', []);\n    $defineProperty(module, '$$own_prepended_modules', []);\n    $defineProperty(module, '$$ancestors', [module]);\n    $defineProperty(module, '$$ancestors_cache_version', null);\n\n    $setPrototype(module, Opal.Module.prototype);\n\n    return module;\n  }\n\n  function find_existing_module(scope, name) {\n    var module = const_get_name(scope, name);\n    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);\n\n    if (module) {\n      if (!module.$$is_module && module !== _Object) {\n        throw Opal.TypeError.$new(name + \" is not a module\");\n      }\n    }\n\n    return module;\n  }\n\n  Opal.module = function(scope, name) {\n    var module;\n\n    if (scope == null) {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    module = find_existing_module(scope, name);\n\n    if (module) {\n      return module;\n    }\n\n    // Module doesnt exist, create a new one...\n    module = Opal.allocate_module(name);\n    Opal.const_set(scope, name, module);\n\n    return module;\n  }\n\n  // Return the singleton class for the passed object.\n  //\n  // If the given object alredy has a singleton class, then it will be stored on\n  // the object as the `$$meta` property. If this exists, then it is simply\n  // returned back.\n  //\n  // Otherwise, a new singleton object for the class or object is created, set on\n  // the object at `$$meta` for future use, and then returned.\n  //\n  // @param object [Object] the ruby object\n  // @return [Class] the singleton class for object\n  Opal.get_singleton_class = function(object) {\n    if (object.$$meta) {\n      return object.$$meta;\n    }\n\n    if (object.hasOwnProperty('$$is_class')) {\n      return Opal.build_class_singleton_class(object);\n    } else if (object.hasOwnProperty('$$is_module')) {\n      return Opal.build_module_singletin_class(object);\n    } else {\n      return Opal.build_object_singleton_class(object);\n    }\n  };\n\n  // Build the singleton class for an existing class. Class object are built\n  // with their singleton class already in the prototype chain and inheriting\n  // from their superclass object (up to `Class` itself).\n  //\n  // NOTE: Actually in MRI a class' singleton class inherits from its\n  // superclass' singleton class which in turn inherits from Class.\n  //\n  // @param klass [Class]\n  // @return [Class]\n  Opal.build_class_singleton_class = function(klass) {\n    var superclass, meta;\n\n    if (klass.$$meta) {\n      return klass.$$meta;\n    }\n\n    // The singleton_class superclass is the singleton_class of its superclass;\n    // but BasicObject has no superclass (its `$$super` is null), thus we\n    // fallback on `Class`.\n    superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);\n\n    meta = Opal.allocate_class(null, superclass, function(){});\n\n    $defineProperty(meta, '$$is_singleton', true);\n    $defineProperty(meta, '$$singleton_of', klass);\n    $defineProperty(klass, '$$meta', meta);\n    $setPrototype(klass, meta.$$prototype);\n    // Restoring ClassName.class\n    $defineProperty(klass, '$$class', Opal.Class);\n\n    return meta;\n  };\n\n  Opal.build_module_singletin_class = function(mod) {\n    if (mod.$$meta) {\n      return mod.$$meta;\n    }\n\n    var meta = Opal.allocate_class(null, Opal.Module, function(){});\n\n    $defineProperty(meta, '$$is_singleton', true);\n    $defineProperty(meta, '$$singleton_of', mod);\n    $defineProperty(mod, '$$meta', meta);\n    $setPrototype(mod, meta.$$prototype);\n    // Restoring ModuleName.class\n    $defineProperty(mod, '$$class', Opal.Module);\n\n    return meta;\n  }\n\n  // Build the singleton class for a Ruby (non class) Object.\n  //\n  // @param object [Object]\n  // @return [Class]\n  Opal.build_object_singleton_class = function(object) {\n    var superclass = object.$$class,\n        klass = Opal.allocate_class(nil, superclass, function(){});\n\n    $defineProperty(klass, '$$is_singleton', true);\n    $defineProperty(klass, '$$singleton_of', object);\n\n    delete klass.$$prototype.$$class;\n\n    $defineProperty(object, '$$meta', klass);\n\n    $setPrototype(object, object.$$meta.$$prototype);\n\n    return klass;\n  };\n\n  Opal.is_method = function(prop) {\n    return (prop[0] === '$' && prop[1] !== '$');\n  }\n\n  Opal.instance_methods = function(mod) {\n    var exclude = [], results = [], ancestors = Opal.ancestors(mod);\n\n    for (var i = 0, l = ancestors.length; i < l; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      var props = Object.getOwnPropertyNames(proto);\n\n      for (var j = 0, ll = props.length; j < ll; j++) {\n        var prop = props[j];\n\n        if (Opal.is_method(prop)) {\n          var method_name = prop.slice(1),\n              method = proto[prop];\n\n          if (method.$$stub && exclude.indexOf(method_name) === -1) {\n            exclude.push(method_name);\n          }\n\n          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {\n            results.push(method_name);\n          }\n        }\n      }\n    }\n\n    return results;\n  }\n\n  Opal.own_instance_methods = function(mod) {\n    var results = [],\n        proto = mod.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0, length = props.length; i < length; i++) {\n      var prop = props[i];\n\n      if (Opal.is_method(prop)) {\n        var method = proto[prop];\n\n        if (!method.$$stub) {\n          var method_name = prop.slice(1);\n          results.push(method_name);\n        }\n      }\n    }\n\n    return results;\n  }\n\n  Opal.methods = function(obj) {\n    return Opal.instance_methods(Opal.get_singleton_class(obj));\n  }\n\n  Opal.own_methods = function(obj) {\n    return Opal.own_instance_methods(Opal.get_singleton_class(obj));\n  }\n\n  Opal.receiver_methods = function(obj) {\n    var mod = Opal.get_singleton_class(obj);\n    var singleton_methods = Opal.own_instance_methods(mod);\n    var instance_methods = Opal.own_instance_methods(mod.$$super);\n    return singleton_methods.concat(instance_methods);\n  }\n\n  // Returns an object containing all pairs of names/values\n  // for all class variables defined in provided +module+\n  // and its ancestors.\n  //\n  // @param module [Module]\n  // @return [Object]\n  Opal.class_variables = function(module) {\n    var ancestors = Opal.ancestors(module),\n        i, length = ancestors.length,\n        result = {};\n\n    for (i = length - 1; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      for (var cvar in ancestor.$$cvars) {\n        result[cvar] = ancestor.$$cvars[cvar];\n      }\n    }\n\n    return result;\n  }\n\n  // Sets class variable with specified +name+ to +value+\n  // in provided +module+\n  //\n  // @param module [Module]\n  // @param name [String]\n  // @param value [Object]\n  Opal.class_variable_set = function(module, name, value) {\n    var ancestors = Opal.ancestors(module),\n        i, length = ancestors.length;\n\n    for (i = length - 2; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      if ($hasOwn.call(ancestor.$$cvars, name)) {\n        ancestor.$$cvars[name] = value;\n        return value;\n      }\n    }\n\n    module.$$cvars[name] = value;\n\n    return value;\n  }\n\n  function isRoot(proto) {\n    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');\n  }\n\n  function own_included_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    while (proto) {\n      if (proto.hasOwnProperty('$$class')) {\n        // superclass\n        break;\n      }\n      mod = protoToModule(proto);\n      if (mod) {\n        result.push(mod);\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return result;\n  }\n\n  function own_prepended_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    if (module.$$prototype.hasOwnProperty('$$dummy')) {\n      while (proto) {\n        if (proto === module.$$prototype.$$define_methods_on) {\n          break;\n        }\n\n        mod = protoToModule(proto);\n        if (mod) {\n          result.push(mod);\n        }\n\n        proto = Object.getPrototypeOf(proto);\n      }\n    }\n\n    return result;\n  }\n\n\n  // The actual inclusion of a module into a class.\n  //\n  // ## Class `$$parent` and `iclass`\n  //\n  // To handle `super` calls, every class has a `$$parent`. This parent is\n  // used to resolve the next class for a super call. A normal class would\n  // have this point to its superclass. However, if a class includes a module\n  // then this would need to take into account the module. The module would\n  // also have to then point its `$$parent` to the actual superclass. We\n  // cannot modify modules like this, because it might be included in more\n  // then one class. To fix this, we actually insert an `iclass` as the class'\n  // `$$parent` which can then point to the superclass. The `iclass` acts as\n  // a proxy to the actual module, so the `super` chain can then search it for\n  // the required method.\n  //\n  // @param module [Module] the module to include\n  // @param includer [Module] the target class to include module into\n  // @return [null]\n  Opal.append_features = function(module, includer) {\n    var module_ancestors = Opal.ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(includer) !== -1) {\n      throw Opal.ArgumentError.$new('cyclic include detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $defineProperty(iclass, '$$included', true);\n      iclasses.push(iclass);\n    }\n    var includer_ancestors = Opal.ancestors(includer),\n        chain = chain_iclasses(iclasses),\n        start_chain_after,\n        end_chain_on;\n\n    if (includer_ancestors.indexOf(module) === -1) {\n      // first time include\n\n      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent\n      start_chain_after = includer.$$prototype;\n      end_chain_on = Object.getPrototypeOf(includer.$$prototype);\n    } else {\n      // The module has been already included,\n      // we don't need to put it into the ancestors chain again,\n      // but this module may have new included modules.\n      // If it's true we need to copy them.\n      //\n      // The simplest way is to replace ancestors chain from\n      //          parent\n      //            |\n      //   `module` iclass (has a $$root flag)\n      //            |\n      //   ...previos chain of module.included_modules ...\n      //            |\n      //  \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // to\n      //          parent\n      //            |\n      //    `module` iclass (has a $$root flag)\n      //            |\n      //   ...regenerated chain of module.included_modules\n      //            |\n      //   \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // because there are no intermediate classes between `parent` and `next ancestor`.\n      // It doesn't break any prototypes of other objects as we don't change class references.\n\n      var proto = includer.$$prototype, parent = proto, module_iclass = Object.getPrototypeOf(parent);\n\n      while (module_iclass != null) {\n        if (isRoot(module_iclass) && module_iclass.$$module === module) {\n          break;\n        }\n\n        parent = module_iclass;\n        module_iclass = Object.getPrototypeOf(module_iclass);\n      }\n\n      var next_ancestor = Object.getPrototypeOf(module_iclass);\n\n      // skip non-root iclasses (that were recursively included)\n      while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {\n        next_ancestor = Object.getPrototypeOf(next_ancestor);\n      }\n\n      start_chain_after = parent;\n      end_chain_on = next_ancestor;\n    }\n\n    $setPrototype(start_chain_after, chain.first);\n    $setPrototype(chain.last, end_chain_on);\n\n    // recalculate own_included_modules cache\n    includer.$$own_included_modules = own_included_modules(includer);\n\n    Opal.const_cache_version++;\n  }\n\n  Opal.prepend_features = function(module, prepender) {\n    // Here we change the ancestors chain from\n    //\n    //   prepender\n    //      |\n    //    parent\n    //\n    // to:\n    //\n    // dummy(prepender)\n    //      |\n    //  iclass(module)\n    //      |\n    // iclass(prepender)\n    //      |\n    //    parent\n    var module_ancestors = Opal.ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(prepender) !== -1) {\n      throw Opal.ArgumentError.$new('cyclic prepend detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $defineProperty(iclass, '$$prepended', true);\n      iclasses.push(iclass);\n    }\n\n    var chain = chain_iclasses(iclasses),\n        dummy_prepender = prepender.$$prototype,\n        previous_parent = Object.getPrototypeOf(dummy_prepender),\n        prepender_iclass,\n        start_chain_after,\n        end_chain_on;\n\n    if (dummy_prepender.hasOwnProperty('$$dummy')) {\n      // The module already has some prepended modules\n      // which means that we don't need to make it \"dummy\"\n      prepender_iclass = dummy_prepender.$$define_methods_on;\n    } else {\n      // Making the module \"dummy\"\n      prepender_iclass = create_dummy_iclass(prepender);\n      flush_methods_in(prepender);\n      $defineProperty(dummy_prepender, '$$dummy', true);\n      $defineProperty(dummy_prepender, '$$define_methods_on', prepender_iclass);\n\n      // Converting\n      //   dummy(prepender) -> previous_parent\n      // to\n      //   dummy(prepender) -> iclass(prepender) -> previous_parent\n      $setPrototype(dummy_prepender, prepender_iclass);\n      $setPrototype(prepender_iclass, previous_parent);\n    }\n\n    var prepender_ancestors = Opal.ancestors(prepender);\n\n    if (prepender_ancestors.indexOf(module) === -1) {\n      // first time prepend\n\n      start_chain_after = dummy_prepender;\n\n      // next $$root or prepender_iclass or non-$$iclass\n      end_chain_on = Object.getPrototypeOf(dummy_prepender);\n      while (end_chain_on != null) {\n        if (\n          end_chain_on.hasOwnProperty('$$root') ||\n          end_chain_on === prepender_iclass ||\n          !end_chain_on.hasOwnProperty('$$iclass')\n        ) {\n          break;\n        }\n\n        end_chain_on = Object.getPrototypeOf(end_chain_on);\n      }\n    } else {\n      throw Opal.RuntimeError.$new(\"Prepending a module multiple times is not supported\");\n    }\n\n    $setPrototype(start_chain_after, chain.first);\n    $setPrototype(chain.last, end_chain_on);\n\n    // recalculate own_prepended_modules cache\n    prepender.$$own_prepended_modules = own_prepended_modules(prepender);\n\n    Opal.const_cache_version++;\n  }\n\n  function flush_methods_in(module) {\n    var proto = module.$$prototype,\n        props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n      if (Opal.is_method(prop)) {\n        delete proto[prop];\n      }\n    }\n  }\n\n  function create_iclass(module) {\n    var iclass = create_dummy_iclass(module);\n\n    if (module.$$is_module) {\n      module.$$iclasses.push(iclass);\n    }\n\n    return iclass;\n  }\n\n  // Dummy iclass doesn't receive updates when the module gets a new method.\n  function create_dummy_iclass(module) {\n    var iclass = {},\n        proto = module.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto),\n        length = props.length, i;\n\n    for (i = 0; i < length; i++) {\n      var prop = props[i];\n      $defineProperty(iclass, prop, proto[prop]);\n    }\n\n    $defineProperty(iclass, '$$iclass', true);\n    $defineProperty(iclass, '$$module', module);\n\n    return iclass;\n  }\n\n  function chain_iclasses(iclasses) {\n    var length = iclasses.length, first = iclasses[0];\n\n    $defineProperty(first, '$$root', true);\n\n    if (length === 1) {\n      return { first: first, last: first };\n    }\n\n    var previous = first;\n\n    for (var i = 1; i < length; i++) {\n      var current = iclasses[i];\n      $setPrototype(previous, current);\n      previous = current;\n    }\n\n\n    return { first: iclasses[0], last: iclasses[length - 1] };\n  }\n\n  // For performance, some core Ruby classes are toll-free bridged to their\n  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).\n  //\n  // This method is used to setup a native constructor (e.g. Array), to have\n  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is\n  // created using the native constructor so that its prototype is set as the\n  // target for the new class. Note: all bridged classes are set to inherit\n  // from Object.\n  //\n  // Example:\n  //\n  //    Opal.bridge(self, Function);\n  //\n  // @param klass       [Class] the Ruby class to bridge\n  // @param constructor [JS.Function] native JavaScript constructor to use\n  // @return [Class] returns the passed Ruby class\n  //\n  Opal.bridge = function(native_klass, klass) {\n    if (native_klass.hasOwnProperty('$$bridge')) {\n      throw Opal.ArgumentError.$new(\"already bridged\");\n    }\n\n    var klass_to_inject, klass_reference;\n\n    klass_to_inject = klass.$$super || Opal.Object;\n    klass_reference = klass;\n    var original_prototype = klass.$$prototype;\n\n    // constructor is a JS function with a prototype chain like:\n    // - constructor\n    //   - super\n    //\n    // What we need to do is to inject our class (with its prototype chain)\n    // between constructor and super. For example, after injecting ::Object\n    // into JS String we get:\n    //\n    // - constructor (window.String)\n    //   - Opal.Object\n    //     - Opal.Kernel\n    //       - Opal.BasicObject\n    //         - super (window.Object)\n    //           - null\n    //\n    $defineProperty(native_klass, '$$bridge', klass);\n    $setPrototype(native_klass.prototype, (klass.$$super || Opal.Object).$$prototype);\n    $defineProperty(klass, '$$prototype', native_klass.prototype);\n\n    $defineProperty(klass.$$prototype, '$$class', klass);\n    $defineProperty(klass, '$$constructor', native_klass);\n    $defineProperty(klass, '$$bridge', true);\n  };\n\n  function protoToModule(proto) {\n    if (proto.hasOwnProperty('$$dummy')) {\n      return;\n    } else if (proto.hasOwnProperty('$$iclass')) {\n      return proto.$$module;\n    } else if (proto.hasOwnProperty('$$class')) {\n      return proto.$$class;\n    }\n  }\n\n  function own_ancestors(module) {\n    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);\n  }\n\n  // The Array of ancestors for a given module/class\n  Opal.ancestors = function(module) {\n    if (!module) { return []; }\n\n    if (module.$$ancestors_cache_version === Opal.const_cache_version) {\n      return module.$$ancestors;\n    }\n\n    var result = [], i, mods, length;\n\n    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {\n      result.push(mods[i]);\n    }\n\n    if (module.$$super) {\n      for (i = 0, mods = Opal.ancestors(module.$$super), length = mods.length; i < length; i++) {\n        result.push(mods[i]);\n      }\n    }\n\n    module.$$ancestors_cache_version = Opal.const_cache_version;\n    module.$$ancestors = result;\n\n    return result;\n  }\n\n  Opal.included_modules = function(module) {\n    var result = [], mod = null, proto = Object.getPrototypeOf(module.$$prototype);\n\n    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {\n      mod = protoToModule(proto);\n      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {\n        result.push(mod);\n      }\n    }\n\n    return result;\n  }\n\n\n  // Method Missing\n  // --------------\n\n  // Methods stubs are used to facilitate method_missing in opal. A stub is a\n  // placeholder function which just calls `method_missing` on the receiver.\n  // If no method with the given name is actually defined on an object, then it\n  // is obvious to say that the stub will be called instead, and then in turn\n  // method_missing will be called.\n  //\n  // When a file in ruby gets compiled to javascript, it includes a call to\n  // this function which adds stubs for every method name in the compiled file.\n  // It should then be safe to assume that method_missing will work for any\n  // method call detected.\n  //\n  // Method stubs are added to the BasicObject prototype, which every other\n  // ruby object inherits, so all objects should handle method missing. A stub\n  // is only added if the given property name (method name) is not already\n  // defined.\n  //\n  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will\n  // have this prefix as well (to make this method more performant).\n  //\n  //    Opal.add_stubs([\"$foo\", \"$bar\", \"$baz=\"]);\n  //\n  // All stub functions will have a private `$$stub` property set to true so\n  // that other internal methods can detect if a method is just a stub or not.\n  // `Kernel#respond_to?` uses this property to detect a methods presence.\n  //\n  // @param stubs [Array] an array of method stubs to add\n  // @return [undefined]\n  Opal.add_stubs = function(stubs) {\n    var proto = Opal.BasicObject.$$prototype;\n\n    for (var i = 0, length = stubs.length; i < length; i++) {\n      var stub = stubs[i], existing_method = proto[stub];\n\n      if (existing_method == null || existing_method.$$stub) {\n        Opal.add_stub_for(proto, stub);\n      }\n    }\n  };\n\n  // Add a method_missing stub function to the given prototype for the\n  // given name.\n  //\n  // @param prototype [Prototype] the target prototype\n  // @param stub [String] stub name to add (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.add_stub_for = function(prototype, stub) {\n    var method_missing_stub = Opal.stub_for(stub);\n    $defineProperty(prototype, stub, method_missing_stub);\n  };\n\n  // Generate the method_missing stub for a given method name.\n  //\n  // @param method_name [String] The js-name of the method to stub (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.stub_for = function(method_name) {\n    function method_missing_stub() {\n      // Copy any given block onto the method_missing dispatcher\n      this.$method_missing.$$p = method_missing_stub.$$p;\n\n      // Set block property to null ready for the next call (stop false-positives)\n      method_missing_stub.$$p = null;\n\n      // call method missing with correct args (remove '$' prefix on method name)\n      var args_ary = new Array(arguments.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }\n\n      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));\n    }\n\n    method_missing_stub.$$stub = true;\n\n    return method_missing_stub;\n  };\n\n\n  // Methods\n  // -------\n\n  // Arity count error dispatcher for methods\n  //\n  // @param actual [Fixnum] number of arguments given to method\n  // @param expected [Fixnum] expected number of arguments\n  // @param object [Object] owner of the method +meth+\n  // @param meth [String] method name that got wrong number of arguments\n  // @raise [ArgumentError]\n  Opal.ac = function(actual, expected, object, meth) {\n    var inspect = '';\n    if (object.$$is_a_module) {\n      inspect += object.$$name + '.';\n    }\n    else {\n      inspect += object.$$class.$$name + '#';\n    }\n    inspect += meth;\n\n    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');\n  };\n\n  // Arity count error dispatcher for blocks\n  //\n  // @param actual [Fixnum] number of arguments given to block\n  // @param expected [Fixnum] expected number of arguments\n  // @param context [Object] context of the block definition\n  // @raise [ArgumentError]\n  Opal.block_ac = function(actual, expected, context) {\n    var inspect = \"`block in \" + context + \"'\";\n\n    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');\n  };\n\n  // Super dispatcher\n  Opal.find_super_dispatcher = function(obj, mid, current_func, defcheck, defs) {\n    var jsid = '$' + mid, ancestors, super_method;\n\n    if (obj.hasOwnProperty('$$meta')) {\n      ancestors = Opal.ancestors(obj.$$meta);\n    } else {\n      ancestors = Opal.ancestors(obj.$$class);\n    }\n\n    var current_index = ancestors.indexOf(current_func.$$owner);\n\n    for (var i = current_index + 1; i < ancestors.length; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      if (proto.hasOwnProperty(jsid)) {\n        var method = proto[jsid];\n\n        if (!method.$$stub) {\n          super_method = method;\n        }\n        break;\n      }\n    }\n\n    if (!defcheck && super_method == null && Opal.Kernel.$method_missing === obj.$method_missing) {\n      // method_missing hasn't been explicitly defined\n      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+\"' for \"+obj, mid);\n    }\n\n    return super_method;\n  };\n\n  // Iter dispatcher for super in a block\n  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {\n    var call_jsid = jsid;\n\n    if (!current_func) {\n      throw Opal.RuntimeError.$new(\"super called outside of method\");\n    }\n\n    if (implicit && current_func.$$define_meth) {\n      throw Opal.RuntimeError.$new(\"implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly\");\n    }\n\n    if (current_func.$$def) {\n      call_jsid = current_func.$$jsid;\n    }\n\n    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);\n  };\n\n  // Used to return as an expression. Sometimes, we can't simply return from\n  // a javascript function as if we were a method, as the return is used as\n  // an expression, or even inside a block which must \"return\" to the outer\n  // method. This helper simply throws an error which is then caught by the\n  // method. This approach is expensive, so it is only used when absolutely\n  // needed.\n  //\n  Opal.ret = function(val) {\n    Opal.returner.$v = val;\n    throw Opal.returner;\n  };\n\n  // Used to break out of a block.\n  Opal.brk = function(val, breaker) {\n    breaker.$v = val;\n    throw breaker;\n  };\n\n  // Builds a new unique breaker, this is to avoid multiple nested breaks to get\n  // in the way of each other.\n  Opal.new_brk = function() {\n    return new Error('unexpected break');\n  };\n\n  // handles yield calls for 1 yielded arg\n  Opal.yield1 = function(block, arg) {\n    if (typeof(block) !== \"function\") {\n      throw Opal.LocalJumpError.$new(\"no block given\");\n    }\n\n    var has_mlhs = block.$$has_top_level_mlhs_arg,\n        has_trailing_comma = block.$$has_trailing_comma_in_args;\n\n    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {\n      arg = Opal.to_ary(arg);\n    }\n\n    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {\n      return block.apply(null, arg);\n    }\n    else {\n      return block(arg);\n    }\n  };\n\n  // handles yield for > 1 yielded arg\n  Opal.yieldX = function(block, args) {\n    if (typeof(block) !== \"function\") {\n      throw Opal.LocalJumpError.$new(\"no block given\");\n    }\n\n    if (block.length > 1 && args.length === 1) {\n      if (args[0].$$is_array) {\n        return block.apply(null, args[0]);\n      }\n    }\n\n    if (!args.$$is_array) {\n      var args_ary = new Array(args.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n      return block.apply(null, args_ary);\n    }\n\n    return block.apply(null, args);\n  };\n\n  // Finds the corresponding exception match in candidates.  Each candidate can\n  // be a value, or an array of values.  Returns null if not found.\n  Opal.rescue = function(exception, candidates) {\n    for (var i = 0; i < candidates.length; i++) {\n      var candidate = candidates[i];\n\n      if (candidate.$$is_array) {\n        var result = Opal.rescue(exception, candidate);\n\n        if (result) {\n          return result;\n        }\n      }\n      else if (candidate === Opal.JS.Error) {\n        return candidate;\n      }\n      else if (candidate['$==='](exception)) {\n        return candidate;\n      }\n    }\n\n    return null;\n  };\n\n  Opal.is_a = function(object, klass) {\n    if (klass != null && object.$$meta === klass || object.$$class === klass) {\n      return true;\n    }\n\n    if (object.$$is_number && klass.$$is_number_class) {\n      return true;\n    }\n\n    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));\n\n    for (i = 0, length = ancestors.length; i < length; i++) {\n      if (ancestors[i] === klass) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  // Helpers for extracting kwsplats\n  // Used for: { **h }\n  Opal.to_hash = function(value) {\n    if (value.$$is_hash) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_hash', true)) {\n      var hash = value.$to_hash();\n      if (hash.$$is_hash) {\n        return hash;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Hash (\" + value.$$class + \"#to_hash gives \" + hash.$$class + \")\");\n      }\n    }\n    else {\n      throw Opal.TypeError.$new(\"no implicit conversion of \" + value.$$class + \" into Hash\");\n    }\n  };\n\n  // Helpers for implementing multiple assignment\n  // Our code for extracting the values and assigning them only works if the\n  // return value is a JS array.\n  // So if we get an Array subclass, extract the wrapped JS array from it\n\n  // Used for: a, b = something (no splat)\n  Opal.to_ary = function(value) {\n    if (value.$$is_array) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_ary', true)) {\n      var ary = value.$to_ary();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_ary gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for: a, b = *something (with splat)\n  Opal.to_a = function(value) {\n    if (value.$$is_array) {\n      // A splatted array must be copied\n      return value.slice();\n    }\n    else if (value['$respond_to?']('to_a', true)) {\n      var ary = value.$to_a();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_a gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for extracting keyword arguments from arguments passed to\n  // JS function. If provided +arguments+ list doesn't have a Hash\n  // as a last item, returns a blank Hash.\n  //\n  // @param parameters [Array]\n  // @return [Hash]\n  //\n  Opal.extract_kwargs = function(parameters) {\n    var kwargs = parameters[parameters.length - 1];\n    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {\n      $splice.call(parameters, parameters.length - 1, 1);\n      return kwargs.$to_hash();\n    }\n    else {\n      return Opal.hash2([], {});\n    }\n  }\n\n  // Used to get a list of rest keyword arguments. Method takes the given\n  // keyword args, i.e. the hash literal passed to the method containing all\n  // keyword arguemnts passed to method, as well as the used args which are\n  // the names of required and optional arguments defined. This method then\n  // just returns all key/value pairs which have not been used, in a new\n  // hash literal.\n  //\n  // @param given_args [Hash] all kwargs given to method\n  // @param used_args [Object<String: true>] all keys used as named kwargs\n  // @return [Hash]\n  //\n  Opal.kwrestargs = function(given_args, used_args) {\n    var keys      = [],\n        map       = {},\n        key       = null,\n        given_map = given_args.$$smap;\n\n    for (key in given_map) {\n      if (!used_args[key]) {\n        keys.push(key);\n        map[key] = given_map[key];\n      }\n    }\n\n    return Opal.hash2(keys, map);\n  };\n\n  // Calls passed method on a ruby object with arguments and block:\n  //\n  // Can take a method or a method name.\n  //\n  // 1. When method name gets passed it invokes it by its name\n  //    and calls 'method_missing' when object doesn't have this method.\n  //    Used internally by Opal to invoke method that takes a block or a splat.\n  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'\n  //    because it doesn't know the name of the actual method.\n  //    Used internally by Opal to invoke 'super'.\n  //\n  // @example\n  //   var my_array = [1, 2, 3, 4]\n  //   Opal.send(my_array, 'length')                    # => 4\n  //   Opal.send(my_array, my_array.$length)            # => 4\n  //\n  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]\n  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]\n  //\n  // @param recv [Object] ruby object\n  // @param method [Function, String] method body or name of the method\n  // @param args [Array] arguments that will be passed to the method call\n  // @param block [Function] ruby block\n  // @return [Object] returning value of the method call\n  Opal.send = function(recv, method, args, block) {\n    var body = (typeof(method) === 'string') ? recv['$'+method] : method;\n\n    if (body != null) {\n      if (typeof block === 'function') {\n        body.$$p = block;\n      }\n      return body.apply(recv, args);\n    }\n\n    return recv.$method_missing.apply(recv, [method].concat(args));\n  }\n\n  Opal.lambda = function(block) {\n    block.$$is_lambda = true;\n    return block;\n  }\n\n  // Used to define methods on an object. This is a helper method, used by the\n  // compiled source to define methods on special case objects when the compiler\n  // can not determine the destination object, or the object is a Module\n  // instance. This can get called by `Module#define_method` as well.\n  //\n  // ## Modules\n  //\n  // Any method defined on a module will come through this runtime helper.\n  // The method is added to the module body, and the owner of the method is\n  // set to be the module itself. This is used later when choosing which\n  // method should show on a class if more than 1 included modules define\n  // the same method. Finally, if the module is in `module_function` mode,\n  // then the method is also defined onto the module itself.\n  //\n  // ## Classes\n  //\n  // This helper will only be called for classes when a method is being\n  // defined indirectly; either through `Module#define_method`, or by a\n  // literal `def` method inside an `instance_eval` or `class_eval` body. In\n  // either case, the method is simply added to the class' prototype. A special\n  // exception exists for `BasicObject` and `Object`. These two classes are\n  // special because they are used in toll-free bridged classes. In each of\n  // these two cases, extra work is required to define the methods on toll-free\n  // bridged class' prototypes as well.\n  //\n  // ## Objects\n  //\n  // If a simple ruby object is the object, then the method is simply just\n  // defined on the object as a singleton method. This would be the case when\n  // a method is defined inside an `instance_eval` block.\n  //\n  // @param obj  [Object, Class] the actual obj to define method for\n  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')\n  // @param body [JS.Function] the literal JavaScript function used as method\n  // @return [null]\n  //\n  Opal.def = function(obj, jsid, body) {\n    // Special case for a method definition in the\n    // top-level namespace\n    if (obj === Opal.top) {\n      Opal.defn(Opal.Object, jsid, body)\n    }\n    // if instance_eval is invoked on a module/class, it sets inst_eval_mod\n    else if (!obj.$$eval && obj.$$is_a_module) {\n      Opal.defn(obj, jsid, body);\n    }\n    else {\n      Opal.defs(obj, jsid, body);\n    }\n  };\n\n  // Define method on a module or class (see Opal.def).\n  Opal.defn = function(module, jsid, body) {\n    body.displayName = jsid;\n    body.$$owner = module;\n\n    var proto = module.$$prototype;\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n    $defineProperty(proto, jsid, body);\n\n    if (module.$$is_module) {\n      if (module.$$module_function) {\n        Opal.defs(module, jsid, body)\n      }\n\n      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {\n        var iclass = iclasses[i];\n        $defineProperty(iclass, jsid, body);\n      }\n    }\n\n    var singleton_of = module.$$singleton_of;\n    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {\n      module.$method_added(jsid.substr(1));\n    }\n    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {\n      singleton_of.$singleton_method_added(jsid.substr(1));\n    }\n  }\n\n  // Define a singleton method on the given object (see Opal.def).\n  Opal.defs = function(obj, jsid, body) {\n    if (obj.$$is_string || obj.$$is_number) {\n      throw Opal.TypeError.$new(\"can't define singleton\");\n    }\n    Opal.defn(Opal.get_singleton_class(obj), jsid, body)\n  };\n\n  // Called from #remove_method.\n  Opal.rdef = function(obj, jsid) {\n    if (!$hasOwn.call(obj.$$prototype, jsid)) {\n      throw Opal.NameError.$new(\"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    delete obj.$$prototype[jsid];\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {\n        obj.$$prototype.$singleton_method_removed(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_removed && !obj.$method_removed.$$stub) {\n        obj.$method_removed(jsid.substr(1));\n      }\n    }\n  };\n\n  // Called from #undef_method.\n  Opal.udef = function(obj, jsid) {\n    if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {\n      throw Opal.NameError.$new(\"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    Opal.add_stub_for(obj.$$prototype, jsid);\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {\n        obj.$$prototype.$singleton_method_undefined(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {\n        obj.$method_undefined(jsid.substr(1));\n      }\n    }\n  };\n\n  function is_method_body(body) {\n    return (typeof(body) === \"function\" && !body.$$stub);\n  }\n\n  Opal.alias = function(obj, name, old) {\n    var id     = '$' + name,\n        old_id = '$' + old,\n        body   = obj.$$prototype['$' + old],\n        alias;\n\n    // When running inside #instance_eval the alias refers to class methods.\n    if (obj.$$eval) {\n      return Opal.alias(Opal.get_singleton_class(obj), name, old);\n    }\n\n    if (!is_method_body(body)) {\n      var ancestor = obj.$$super;\n\n      while (typeof(body) !== \"function\" && ancestor) {\n        body     = ancestor[old_id];\n        ancestor = ancestor.$$super;\n      }\n\n      if (!is_method_body(body) && obj.$$is_module) {\n        // try to look into Object\n        body = Opal.Object.$$prototype[old_id]\n      }\n\n      if (!is_method_body(body)) {\n        throw Opal.NameError.$new(\"undefined method `\" + old + \"' for class `\" + obj.$name() + \"'\")\n      }\n    }\n\n    // If the body is itself an alias use the original body\n    // to keep the max depth at 1.\n    if (body.$$alias_of) body = body.$$alias_of;\n\n    // We need a wrapper because otherwise properties\n    // would be ovrewritten on the original body.\n    alias = function() {\n      var block = alias.$$p, args, i, ii;\n\n      args = new Array(arguments.length);\n      for(i = 0, ii = arguments.length; i < ii; i++) {\n        args[i] = arguments[i];\n      }\n\n      if (block != null) { alias.$$p = null }\n\n      return Opal.send(this, body, args, block);\n    };\n\n    // Try to make the browser pick the right name\n    alias.displayName       = name;\n    alias.length            = body.length;\n    alias.$$arity           = body.$$arity;\n    alias.$$parameters      = body.$$parameters;\n    alias.$$source_location = body.$$source_location;\n    alias.$$alias_of        = body;\n    alias.$$alias_name      = name;\n\n    Opal.defn(obj, id, alias);\n\n    return obj;\n  };\n\n  Opal.alias_native = function(obj, name, native_name) {\n    var id   = '$' + name,\n        body = obj.$$prototype[native_name];\n\n    if (typeof(body) !== \"function\" || body.$$stub) {\n      throw Opal.NameError.$new(\"undefined native method `\" + native_name + \"' for class `\" + obj.$name() + \"'\")\n    }\n\n    Opal.defn(obj, id, body);\n\n    return obj;\n  };\n\n\n  // Hashes\n  // ------\n\n  Opal.hash_init = function(hash) {\n    hash.$$smap = Object.create(null);\n    hash.$$map  = Object.create(null);\n    hash.$$keys = [];\n  };\n\n  Opal.hash_clone = function(from_hash, to_hash) {\n    to_hash.$$none = from_hash.$$none;\n    to_hash.$$proc = from_hash.$$proc;\n\n    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {\n      key = keys[i];\n\n      if (key.$$is_string) {\n        value = smap[key];\n      } else {\n        value = key.value;\n        key = key.key;\n      }\n\n      Opal.hash_put(to_hash, key, value);\n    }\n  };\n\n  Opal.hash_put = function(hash, key, value) {\n    if (key.$$is_string) {\n      if (!$hasOwn.call(hash.$$smap, key)) {\n        hash.$$keys.push(key);\n      }\n      hash.$$smap[key] = value;\n      return;\n    }\n\n    var key_hash, bucket, last_bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if (!$hasOwn.call(hash.$$map, key_hash)) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      hash.$$map[key_hash] = bucket;\n      return;\n    }\n\n    bucket = hash.$$map[key_hash];\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        last_bucket = undefined;\n        bucket.value = value;\n        break;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n\n    if (last_bucket) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      last_bucket.next = bucket;\n    }\n  };\n\n  Opal.hash_get = function(hash, key) {\n    if (key.$$is_string) {\n      if ($hasOwn.call(hash.$$smap, key)) {\n        return hash.$$smap[key];\n      }\n      return;\n    }\n\n    var key_hash, bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if ($hasOwn.call(hash.$$map, key_hash)) {\n      bucket = hash.$$map[key_hash];\n\n      while (bucket) {\n        if (key === bucket.key || key['$eql?'](bucket.key)) {\n          return bucket.value;\n        }\n        bucket = bucket.next;\n      }\n    }\n  };\n\n  Opal.hash_delete = function(hash, key) {\n    var i, keys = hash.$$keys, length = keys.length, value;\n\n    if (key.$$is_string) {\n      if (!$hasOwn.call(hash.$$smap, key)) {\n        return;\n      }\n\n      for (i = 0; i < length; i++) {\n        if (keys[i] === key) {\n          keys.splice(i, 1);\n          break;\n        }\n      }\n\n      value = hash.$$smap[key];\n      delete hash.$$smap[key];\n      return value;\n    }\n\n    var key_hash = key.$hash();\n\n    if (!$hasOwn.call(hash.$$map, key_hash)) {\n      return;\n    }\n\n    var bucket = hash.$$map[key_hash], last_bucket;\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        value = bucket.value;\n\n        for (i = 0; i < length; i++) {\n          if (keys[i] === bucket) {\n            keys.splice(i, 1);\n            break;\n          }\n        }\n\n        if (last_bucket && bucket.next) {\n          last_bucket.next = bucket.next;\n        }\n        else if (last_bucket) {\n          delete last_bucket.next;\n        }\n        else if (bucket.next) {\n          hash.$$map[key_hash] = bucket.next;\n        }\n        else {\n          delete hash.$$map[key_hash];\n        }\n\n        return value;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n  };\n\n  Opal.hash_rehash = function(hash) {\n    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {\n\n      if (hash.$$keys[i].$$is_string) {\n        continue;\n      }\n\n      key_hash = hash.$$keys[i].key.$hash();\n\n      if (key_hash === hash.$$keys[i].key_hash) {\n        continue;\n      }\n\n      bucket = hash.$$map[hash.$$keys[i].key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          if (last_bucket && bucket.next) {\n            last_bucket.next = bucket.next;\n          }\n          else if (last_bucket) {\n            delete last_bucket.next;\n          }\n          else if (bucket.next) {\n            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;\n          }\n          else {\n            delete hash.$$map[hash.$$keys[i].key_hash];\n          }\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      hash.$$keys[i].key_hash = key_hash;\n\n      if (!$hasOwn.call(hash.$$map, key_hash)) {\n        hash.$$map[key_hash] = hash.$$keys[i];\n        continue;\n      }\n\n      bucket = hash.$$map[key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          last_bucket = undefined;\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      if (last_bucket) {\n        last_bucket.next = hash.$$keys[i];\n      }\n    }\n  };\n\n  Opal.hash = function() {\n    var arguments_length = arguments.length, args, hash, i, length, key, value;\n\n    if (arguments_length === 1 && arguments[0].$$is_hash) {\n      return arguments[0];\n    }\n\n    hash = new Opal.Hash();\n    Opal.hash_init(hash);\n\n    if (arguments_length === 1 && arguments[0].$$is_array) {\n      args = arguments[0];\n      length = args.length;\n\n      for (i = 0; i < length; i++) {\n        if (args[i].length !== 2) {\n          throw Opal.ArgumentError.$new(\"value not of length 2: \" + args[i].$inspect());\n        }\n\n        key = args[i][0];\n        value = args[i][1];\n\n        Opal.hash_put(hash, key, value);\n      }\n\n      return hash;\n    }\n\n    if (arguments_length === 1) {\n      args = arguments[0];\n      for (key in args) {\n        if ($hasOwn.call(args, key)) {\n          value = args[key];\n\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    }\n\n    if (arguments_length % 2 !== 0) {\n      throw Opal.ArgumentError.$new(\"odd number of arguments for Hash\");\n    }\n\n    for (i = 0; i < arguments_length; i += 2) {\n      key = arguments[i];\n      value = arguments[i + 1];\n\n      Opal.hash_put(hash, key, value);\n    }\n\n    return hash;\n  };\n\n  // A faster Hash creator for hashes that just use symbols and\n  // strings as keys. The map and keys array can be constructed at\n  // compile time, so they are just added here by the constructor\n  // function.\n  //\n  Opal.hash2 = function(keys, smap) {\n    var hash = new Opal.Hash();\n\n    hash.$$smap = smap;\n    hash.$$map  = Object.create(null);\n    hash.$$keys = keys;\n\n    return hash;\n  };\n\n  // Create a new range instance with first and last values, and whether the\n  // range excludes the last value.\n  //\n  Opal.range = function(first, last, exc) {\n    var range         = new Opal.Range();\n        range.begin   = first;\n        range.end     = last;\n        range.excl    = exc;\n\n    return range;\n  };\n\n  // Get the ivar name for a given name.\n  // Mostly adds a trailing $ to reserved names.\n  //\n  Opal.ivar = function(name) {\n    if (\n        // properties\n        name === \"constructor\" ||\n        name === \"displayName\" ||\n        name === \"__count__\" ||\n        name === \"__noSuchMethod__\" ||\n        name === \"__parent__\" ||\n        name === \"__proto__\" ||\n\n        // methods\n        name === \"hasOwnProperty\" ||\n        name === \"valueOf\"\n       )\n    {\n      return name + \"$\";\n    }\n\n    return name;\n  };\n\n\n  // Regexps\n  // -------\n\n  // Escape Regexp special chars letting the resulting string be used to build\n  // a new Regexp.\n  //\n  Opal.escape_regexp = function(str) {\n    return str.replace(/([-[\\]\\/{}()*+?.^$\\\\| ])/g, '\\\\$1')\n              .replace(/[\\n]/g, '\\\\n')\n              .replace(/[\\r]/g, '\\\\r')\n              .replace(/[\\f]/g, '\\\\f')\n              .replace(/[\\t]/g, '\\\\t');\n  };\n\n  // Create a global Regexp from a RegExp object and cache the result\n  // on the object itself ($$g attribute).\n  //\n  Opal.global_regexp = function(pattern) {\n    if (pattern.global) {\n      return pattern; // RegExp already has the global flag\n    }\n    if (pattern.$$g == null) {\n      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));\n    } else {\n      pattern.$$g.lastIndex = null; // reset lastIndex property\n    }\n    return pattern.$$g;\n  };\n\n  // Create a global multiline Regexp from a RegExp object and cache the result\n  // on the object itself ($$gm or $$g attribute).\n  //\n  Opal.global_multiline_regexp = function(pattern) {\n    var result;\n    if (pattern.multiline) {\n      if (pattern.global) {\n        return pattern; // RegExp already has the global and multiline flag\n      }\n      // we are using the $$g attribute because the Regexp is already multiline\n      if (pattern.$$g != null) {\n        result = pattern.$$g;\n      } else {\n        result = pattern.$$g = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\n      }\n    } else if (pattern.$$gm != null) {\n      result = pattern.$$gm;\n    } else {\n      result = pattern.$$gm = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\n    }\n    result.lastIndex = null; // reset lastIndex property\n    return result;\n  };\n\n  // Require system\n  // --------------\n\n  Opal.modules         = {};\n  Opal.loaded_features = ['corelib/runtime'];\n  Opal.current_dir     = '.';\n  Opal.require_table   = {'corelib/runtime': true};\n\n  Opal.normalize = function(path) {\n    var parts, part, new_parts = [], SEPARATOR = '/';\n\n    if (Opal.current_dir !== '.') {\n      path = Opal.current_dir.replace(/\\/*$/, '/') + path;\n    }\n\n    path = path.replace(/^\\.\\//, '');\n    path = path.replace(/\\.(rb|opal|js)$/, '');\n    parts = path.split(SEPARATOR);\n\n    for (var i = 0, ii = parts.length; i < ii; i++) {\n      part = parts[i];\n      if (part === '') continue;\n      (part === '..') ? new_parts.pop() : new_parts.push(part)\n    }\n\n    return new_parts.join(SEPARATOR);\n  };\n\n  Opal.loaded = function(paths) {\n    var i, l, path;\n\n    for (i = 0, l = paths.length; i < l; i++) {\n      path = Opal.normalize(paths[i]);\n\n      if (Opal.require_table[path]) {\n        continue;\n      }\n\n      Opal.loaded_features.push(path);\n      Opal.require_table[path] = true;\n    }\n  };\n\n  Opal.load = function(path) {\n    path = Opal.normalize(path);\n\n    Opal.loaded([path]);\n\n    var module = Opal.modules[path];\n\n    if (module) {\n      module(Opal);\n    }\n    else {\n      var severity = Opal.config.missing_require_severity;\n      var message  = 'cannot load such file -- ' + path;\n\n      if (severity === \"error\") {\n        if (Opal.LoadError) {\n          throw Opal.LoadError.$new(message)\n        } else {\n          throw message\n        }\n      }\n      else if (severity === \"warning\") {\n        console.warn('WARNING: LoadError: ' + message);\n      }\n    }\n\n    return true;\n  };\n\n  Opal.require = function(path) {\n    path = Opal.normalize(path);\n\n    if (Opal.require_table[path]) {\n      return false;\n    }\n\n    return Opal.load(path);\n  };\n\n\n  // Strings\n  // -------\n\n  Opal.encodings = Object.create(null);\n\n  // Sets the encoding on a string, will treat string literals as frozen strings\n  // raising a FrozenError.\n  // @param str [String] the string on which the encoding should be set.\n  // @param name [String] the canonical name of the encoding\n  Opal.set_encoding = function(str, name) {\n    if (typeof str === 'string')\n      throw Opal.FrozenError.$new(\"can't modify frozen String\");\n\n    var encoding = Opal.encodings[name];\n\n    if (encoding === str.encoding) { return str; }\n\n    str.encoding = encoding;\n\n    return str;\n  };\n\n  // @returns a String object with the encoding set from a string literal\n  Opal.enc = function(str, name) {\n    var dup = new String(str);\n    Opal.set_encoding(dup, name);\n    dup.internal_encoding = dup.encoding;\n    return dup\n  }\n\n\n  // Initialization\n  // --------------\n  function $BasicObject() {};\n  function $Object() {};\n  function $Module() {};\n  function $Class() {};\n\n  Opal.BasicObject = BasicObject = Opal.allocate_class('BasicObject', null, $BasicObject);\n  Opal.Object      = _Object     = Opal.allocate_class('Object', Opal.BasicObject, $Object);\n  Opal.Module      = Module      = Opal.allocate_class('Module', Opal.Object, $Module);\n  Opal.Class       = Class       = Opal.allocate_class('Class', Opal.Module, $Class);\n\n  $setPrototype(Opal.BasicObject, Opal.Class.$$prototype);\n  $setPrototype(Opal.Object, Opal.Class.$$prototype);\n  $setPrototype(Opal.Module, Opal.Class.$$prototype);\n  $setPrototype(Opal.Class, Opal.Class.$$prototype);\n\n  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic\n  BasicObject.$$const[\"BasicObject\"] = BasicObject;\n\n  // Assign basic constants\n  Opal.const_set(_Object, \"BasicObject\",  BasicObject);\n  Opal.const_set(_Object, \"Object\",       _Object);\n  Opal.const_set(_Object, \"Module\",       Module);\n  Opal.const_set(_Object, \"Class\",        Class);\n\n  // Fix booted classes to have correct .class value\n  BasicObject.$$class = Class;\n  _Object.$$class     = Class;\n  Module.$$class      = Class;\n  Class.$$class       = Class;\n\n  // Forward .toString() to #to_s\n  $defineProperty(_Object.$$prototype, 'toString', function() {\n    var to_s = this.$to_s();\n    if (to_s.$$is_string && typeof(to_s) === 'object') {\n      // a string created using new String('string')\n      return to_s.valueOf();\n    } else {\n      return to_s;\n    }\n  });\n\n  // Make Kernel#require immediately available as it's needed to require all the\n  // other corelib files.\n  $defineProperty(_Object.$$prototype, '$require', Opal.require);\n\n  // Add a short helper to navigate constants manually.\n  // @example\n  //   Opal.$$.Regexp.$$.IGNORECASE\n  Opal.$$ = _Object.$$;\n\n  // Instantiate the main object\n  Opal.top = new _Object();\n  Opal.top.$to_s = Opal.top.$inspect = function() { return 'main' };\n\n\n  // Nil\n  function $NilClass() {};\n  Opal.NilClass = Opal.allocate_class('NilClass', Opal.Object, $NilClass);\n  Opal.const_set(_Object, 'NilClass', Opal.NilClass);\n  nil = Opal.nil = new Opal.NilClass();\n  nil.$$id = nil_id;\n  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };\n\n  // Errors\n  Opal.breaker  = new Error('unexpected break (old)');\n  Opal.returner = new Error('unexpected return');\n  TypeError.$$super = Error;\n}).call(this);\nOpal.loaded([\"corelib/runtime.js\"]);\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/helpers\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$coerce_to!', '$!=', '$[]', '$upcase']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Opal');\n\n    var $nesting = [self].concat($parent_nesting), $Opal_bridge$1, $Opal_type_error$2, $Opal_coerce_to$3, $Opal_coerce_to$excl$4, $Opal_coerce_to$ques$5, $Opal_try_convert$6, $Opal_compare$7, $Opal_destructure$8, $Opal_respond_to$ques$9, $Opal_inspect_obj$10, $Opal_instance_variable_name$excl$11, $Opal_class_variable_name$excl$12, $Opal_const_name$excl$13, $Opal_pristine$14;\n\n    \n    Opal.defs(self, '$bridge', $Opal_bridge$1 = function $$bridge(constructor, klass) {\n      var self = this;\n\n      return Opal.bridge(constructor, klass);\n    }, $Opal_bridge$1.$$arity = 2);\n    Opal.defs(self, '$type_error', $Opal_type_error$2 = function $$type_error(object, type, method, coerced) {\n      var $a, self = this;\n\n      \n      \n      if (method == null) {\n        method = nil;\n      };\n      \n      if (coerced == null) {\n        coerced = nil;\n      };\n      if ($truthy(($truthy($a = method) ? coerced : $a))) {\n        return $$($nesting, 'TypeError').$new(\"\" + \"can't convert \" + (object.$class()) + \" into \" + (type) + \" (\" + (object.$class()) + \"#\" + (method) + \" gives \" + (coerced.$class()) + \")\")\n      } else {\n        return $$($nesting, 'TypeError').$new(\"\" + \"no implicit conversion of \" + (object.$class()) + \" into \" + (type))\n      };\n    }, $Opal_type_error$2.$$arity = -3);\n    Opal.defs(self, '$coerce_to', $Opal_coerce_to$3 = function $$coerce_to(object, type, method) {\n      var self = this;\n\n      \n      if ($truthy(type['$==='](object))) {\n        return object};\n      if ($truthy(object['$respond_to?'](method))) {\n      } else {\n        self.$raise(self.$type_error(object, type))\n      };\n      return object.$__send__(method);\n    }, $Opal_coerce_to$3.$$arity = 3);\n    Opal.defs(self, '$coerce_to!', $Opal_coerce_to$excl$4 = function(object, type, method) {\n      var self = this, coerced = nil;\n\n      \n      coerced = self.$coerce_to(object, type, method);\n      if ($truthy(type['$==='](coerced))) {\n      } else {\n        self.$raise(self.$type_error(object, type, method, coerced))\n      };\n      return coerced;\n    }, $Opal_coerce_to$excl$4.$$arity = 3);\n    Opal.defs(self, '$coerce_to?', $Opal_coerce_to$ques$5 = function(object, type, method) {\n      var self = this, coerced = nil;\n\n      \n      if ($truthy(object['$respond_to?'](method))) {\n      } else {\n        return nil\n      };\n      coerced = self.$coerce_to(object, type, method);\n      if ($truthy(coerced['$nil?']())) {\n        return nil};\n      if ($truthy(type['$==='](coerced))) {\n      } else {\n        self.$raise(self.$type_error(object, type, method, coerced))\n      };\n      return coerced;\n    }, $Opal_coerce_to$ques$5.$$arity = 3);\n    Opal.defs(self, '$try_convert', $Opal_try_convert$6 = function $$try_convert(object, type, method) {\n      var self = this;\n\n      \n      if ($truthy(type['$==='](object))) {\n        return object};\n      if ($truthy(object['$respond_to?'](method))) {\n        return object.$__send__(method)\n      } else {\n        return nil\n      };\n    }, $Opal_try_convert$6.$$arity = 3);\n    Opal.defs(self, '$compare', $Opal_compare$7 = function $$compare(a, b) {\n      var self = this, compare = nil;\n\n      \n      compare = a['$<=>'](b);\n      if ($truthy(compare === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (a.$class()) + \" with \" + (b.$class()) + \" failed\")};\n      return compare;\n    }, $Opal_compare$7.$$arity = 2);\n    Opal.defs(self, '$destructure', $Opal_destructure$8 = function $$destructure(args) {\n      var self = this;\n\n      \n      if (args.length == 1) {\n        return args[0];\n      }\n      else if (args.$$is_array) {\n        return args;\n      }\n      else {\n        var args_ary = new Array(args.length);\n        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n        return args_ary;\n      }\n    \n    }, $Opal_destructure$8.$$arity = 1);\n    Opal.defs(self, '$respond_to?', $Opal_respond_to$ques$9 = function(obj, method, include_all) {\n      var self = this;\n\n      \n      \n      if (include_all == null) {\n        include_all = false;\n      };\n      \n      if (obj == null || !obj.$$class) {\n        return false;\n      }\n    ;\n      return obj['$respond_to?'](method, include_all);\n    }, $Opal_respond_to$ques$9.$$arity = -3);\n    Opal.defs(self, '$inspect_obj', $Opal_inspect_obj$10 = function $$inspect_obj(obj) {\n      var self = this;\n\n      return Opal.inspect(obj);\n    }, $Opal_inspect_obj$10.$$arity = 1);\n    Opal.defs(self, '$instance_variable_name!', $Opal_instance_variable_name$excl$11 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      if ($truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {\n      } else {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"'\" + (name) + \"' is not allowed as an instance variable name\", name))\n      };\n      return name;\n    }, $Opal_instance_variable_name$excl$11.$$arity = 1);\n    Opal.defs(self, '$class_variable_name!', $Opal_class_variable_name$excl$12 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"`\" + (name) + \"' is not allowed as a class variable name\", name))};\n      return name;\n    }, $Opal_class_variable_name$excl$12.$$arity = 1);\n    Opal.defs(self, '$const_name!', $Opal_const_name$excl$13 = function(const_name) {\n      var self = this;\n\n      \n      const_name = $$($nesting, 'Opal')['$coerce_to!'](const_name, $$($nesting, 'String'), \"to_str\");\n      if ($truthy(const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase()))) {\n        self.$raise($$($nesting, 'NameError'), \"\" + \"wrong constant name \" + (const_name))};\n      return const_name;\n    }, $Opal_const_name$excl$13.$$arity = 1);\n    Opal.defs(self, '$pristine', $Opal_pristine$14 = function $$pristine(owner_class, $a) {\n      var $post_args, method_names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      method_names = $post_args;;\n      \n      var method_name, method;\n      for (var i = method_names.length - 1; i >= 0; i--) {\n        method_name = method_names[i];\n        method = owner_class.$$prototype['$'+method_name];\n\n        if (method && !method.$$stub) {\n          method.$$pristine = true;\n        }\n      }\n    ;\n      return nil;\n    }, $Opal_pristine$14.$$arity = -2);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/module\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $lambda = Opal.lambda, $range = Opal.range, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$module_eval', '$to_proc', '$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$class_variable_name!', '$new', '$const_name!', '$=~', '$inject', '$split', '$const_get', '$==', '$!~', '$start_with?', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$any?', '$prepend_features', '$prepended', '$to_s', '$__id__', '$constants', '$include?', '$copy_class_variables', '$copy_constants']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Module');\n\n    var $nesting = [self].concat($parent_nesting), $Module_allocate$1, $Module_initialize$2, $Module_$eq_eq_eq$3, $Module_$lt$4, $Module_$lt_eq$5, $Module_$gt$6, $Module_$gt_eq$7, $Module_$lt_eq_gt$8, $Module_alias_method$9, $Module_alias_native$10, $Module_ancestors$11, $Module_append_features$12, $Module_attr_accessor$13, $Module_attr_reader$14, $Module_attr_writer$15, $Module_autoload$16, $Module_class_variables$17, $Module_class_variable_get$18, $Module_class_variable_set$19, $Module_class_variable_defined$ques$20, $Module_remove_class_variable$21, $Module_constants$22, $Module_constants$23, $Module_nesting$24, $Module_const_defined$ques$25, $Module_const_get$26, $Module_const_missing$28, $Module_const_set$29, $Module_public_constant$30, $Module_define_method$31, $Module_remove_method$33, $Module_singleton_class$ques$34, $Module_include$35, $Module_included_modules$36, $Module_include$ques$37, $Module_instance_method$38, $Module_instance_methods$39, $Module_included$40, $Module_extended$41, $Module_extend_object$42, $Module_method_added$43, $Module_method_removed$44, $Module_method_undefined$45, $Module_module_eval$46, $Module_module_exec$48, $Module_method_defined$ques$49, $Module_module_function$50, $Module_name$51, $Module_prepend$52, $Module_prepend_features$53, $Module_prepended$54, $Module_remove_const$55, $Module_to_s$56, $Module_undef_method$57, $Module_instance_variables$58, $Module_dup$59, $Module_copy_class_variables$60, $Module_copy_constants$61;\n\n    \n    Opal.defs(self, '$allocate', $Module_allocate$1 = function $$allocate() {\n      var self = this;\n\n      \n      var module = Opal.allocate_module(nil, function(){});\n      // Link the prototype of Module subclasses\n      if (self !== Opal.Module) Object.setPrototypeOf(module, self.$$prototype);\n      return module;\n    \n    }, $Module_allocate$1.$$arity = 0);\n    \n    Opal.def(self, '$initialize', $Module_initialize$2 = function $$initialize() {\n      var $iter = $Module_initialize$2.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Module_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Module_initialize$2.$$p = null;;\n      if ((block !== nil)) {\n        return $send(self, 'module_eval', [], block.$to_proc())\n      } else {\n        return nil\n      };\n    }, $Module_initialize$2.$$arity = 0);\n    \n    Opal.def(self, '$===', $Module_$eq_eq_eq$3 = function(object) {\n      var self = this;\n\n      \n      if ($truthy(object == null)) {\n        return false};\n      return Opal.is_a(object, self);;\n    }, $Module_$eq_eq_eq$3.$$arity = 1);\n    \n    Opal.def(self, '$<', $Module_$lt$4 = function(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Module')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"compared with non class/module\")\n      };\n      \n      var working = self,\n          ancestors,\n          i, length;\n\n      if (working === other) {\n        return false;\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === other) {\n          return true;\n        }\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === self) {\n          return false;\n        }\n      }\n\n      return nil;\n    ;\n    }, $Module_$lt$4.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Module_$lt_eq$5 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_lt(self, other))\n    }, $Module_$lt_eq$5.$$arity = 1);\n    \n    Opal.def(self, '$>', $Module_$gt$6 = function(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Module')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"compared with non class/module\")\n      };\n      return $rb_lt(other, self);\n    }, $Module_$gt$6.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Module_$gt_eq$7 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_gt(self, other))\n    }, $Module_$gt_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $Module_$lt_eq_gt$8 = function(other) {\n      var self = this, lt = nil;\n\n      \n      \n      if (self === other) {\n        return 0;\n      }\n    ;\n      if ($truthy($$($nesting, 'Module')['$==='](other))) {\n      } else {\n        return nil\n      };\n      lt = $rb_lt(self, other);\n      if ($truthy(lt['$nil?']())) {\n        return nil};\n      if ($truthy(lt)) {\n        return -1\n      } else {\n        return 1\n      };\n    }, $Module_$lt_eq_gt$8.$$arity = 1);\n    \n    Opal.def(self, '$alias_method', $Module_alias_method$9 = function $$alias_method(newname, oldname) {\n      var self = this;\n\n      \n      Opal.alias(self, newname, oldname);\n      return self;\n    }, $Module_alias_method$9.$$arity = 2);\n    \n    Opal.def(self, '$alias_native', $Module_alias_native$10 = function $$alias_native(mid, jsid) {\n      var self = this;\n\n      \n      \n      if (jsid == null) {\n        jsid = mid;\n      };\n      Opal.alias_native(self, mid, jsid);\n      return self;\n    }, $Module_alias_native$10.$$arity = -2);\n    \n    Opal.def(self, '$ancestors', $Module_ancestors$11 = function $$ancestors() {\n      var self = this;\n\n      return Opal.ancestors(self);\n    }, $Module_ancestors$11.$$arity = 0);\n    \n    Opal.def(self, '$append_features', $Module_append_features$12 = function $$append_features(includer) {\n      var self = this;\n\n      \n      Opal.append_features(self, includer);\n      return self;\n    }, $Module_append_features$12.$$arity = 1);\n    \n    Opal.def(self, '$attr_accessor', $Module_attr_accessor$13 = function $$attr_accessor($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      $send(self, 'attr_reader', Opal.to_a(names));\n      return $send(self, 'attr_writer', Opal.to_a(names));\n    }, $Module_attr_accessor$13.$$arity = -1);\n    Opal.alias(self, \"attr\", \"attr_accessor\");\n    \n    Opal.def(self, '$attr_reader', $Module_attr_reader$14 = function $$attr_reader($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = '$' + name,\n            ivar = Opal.ivar(name);\n\n        // the closure here is needed because name will change at the next\n        // cycle, I wish we could use let.\n        var body = (function(ivar) {\n          return function() {\n            if (this[ivar] == null) {\n              return nil;\n            }\n            else {\n              return this[ivar];\n            }\n          };\n        })(ivar);\n\n        // initialize the instance variable as nil\n        Opal.defineProperty(proto, ivar, nil);\n\n        body.$$parameters = [];\n        body.$$arity = 0;\n\n        Opal.defn(self, id, body);\n      }\n    ;\n      return nil;\n    }, $Module_attr_reader$14.$$arity = -1);\n    \n    Opal.def(self, '$attr_writer', $Module_attr_writer$15 = function $$attr_writer($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = '$' + name + '=',\n            ivar = Opal.ivar(name);\n\n        // the closure here is needed because name will change at the next\n        // cycle, I wish we could use let.\n        var body = (function(ivar){\n          return function(value) {\n            return this[ivar] = value;\n          }\n        })(ivar);\n\n        body.$$parameters = [['req']];\n        body.$$arity = 1;\n\n        // initialize the instance variable as nil\n        Opal.defineProperty(proto, ivar, nil);\n\n        Opal.defn(self, id, body);\n      }\n    ;\n      return nil;\n    }, $Module_attr_writer$15.$$arity = -1);\n    \n    Opal.def(self, '$autoload', $Module_autoload$16 = function $$autoload(const$, path) {\n      var self = this;\n\n      \n      if (self.$$autoload == null) self.$$autoload = {};\n      Opal.const_cache_version++;\n      self.$$autoload[const$] = path;\n      return nil;\n    \n    }, $Module_autoload$16.$$arity = 2);\n    \n    Opal.def(self, '$class_variables', $Module_class_variables$17 = function $$class_variables() {\n      var self = this;\n\n      return Object.keys(Opal.class_variables(self));\n    }, $Module_class_variables$17.$$arity = 0);\n    \n    Opal.def(self, '$class_variable_get', $Module_class_variable_get$18 = function $$class_variable_get(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      \n      var value = Opal.class_variables(self)[name];\n      if (value == null) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"uninitialized class variable \" + (name) + \" in \" + (self), name))\n      }\n      return value;\n    ;\n    }, $Module_class_variable_get$18.$$arity = 1);\n    \n    Opal.def(self, '$class_variable_set', $Module_class_variable_set$19 = function $$class_variable_set(name, value) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      return Opal.class_variable_set(self, name, value);;\n    }, $Module_class_variable_set$19.$$arity = 2);\n    \n    Opal.def(self, '$class_variable_defined?', $Module_class_variable_defined$ques$20 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      return Opal.class_variables(self).hasOwnProperty(name);;\n    }, $Module_class_variable_defined$ques$20.$$arity = 1);\n    \n    Opal.def(self, '$remove_class_variable', $Module_remove_class_variable$21 = function $$remove_class_variable(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      \n      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {\n        var value = self.$$cvars[name];\n        delete self.$$cvars[name];\n        return value;\n      } else {\n        self.$raise($$($nesting, 'NameError'), \"\" + \"cannot remove \" + (name) + \" for \" + (self))\n      }\n    ;\n    }, $Module_remove_class_variable$21.$$arity = 1);\n    \n    Opal.def(self, '$constants', $Module_constants$22 = function $$constants(inherit) {\n      var self = this;\n\n      \n      \n      if (inherit == null) {\n        inherit = true;\n      };\n      return Opal.constants(self, inherit);;\n    }, $Module_constants$22.$$arity = -1);\n    Opal.defs(self, '$constants', $Module_constants$23 = function $$constants(inherit) {\n      var self = this;\n\n      \n      ;\n      \n      if (inherit == null) {\n        var nesting = (self.$$nesting || []).concat(Opal.Object),\n            constant, constants = {},\n            i, ii;\n\n        for(i = 0, ii = nesting.length; i < ii; i++) {\n          for (constant in nesting[i].$$const) {\n            constants[constant] = true;\n          }\n        }\n        return Object.keys(constants);\n      } else {\n        return Opal.constants(self, inherit)\n      }\n    ;\n    }, $Module_constants$23.$$arity = -1);\n    Opal.defs(self, '$nesting', $Module_nesting$24 = function $$nesting() {\n      var self = this;\n\n      return self.$$nesting || [];\n    }, $Module_nesting$24.$$arity = 0);\n    \n    Opal.def(self, '$const_defined?', $Module_const_defined$ques$25 = function(name, inherit) {\n      var self = this;\n\n      \n      \n      if (inherit == null) {\n        inherit = true;\n      };\n      name = $$($nesting, 'Opal')['$const_name!'](name);\n      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {\n      } else {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"wrong constant name \" + (name), name))\n      };\n      \n      var module, modules = [self], module_constants, i, ii;\n\n      // Add up ancestors if inherit is true\n      if (inherit) {\n        modules = modules.concat(Opal.ancestors(self));\n\n        // Add Object's ancestors if it's a module – modules have no ancestors otherwise\n        if (self.$$is_module) {\n          modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));\n        }\n      }\n\n      for (i = 0, ii = modules.length; i < ii; i++) {\n        module = modules[i];\n        if (module.$$const[name] != null) {\n          return true;\n        }\n      }\n\n      return false;\n    ;\n    }, $Module_const_defined$ques$25.$$arity = -2);\n    \n    Opal.def(self, '$const_get', $Module_const_get$26 = function $$const_get(name, inherit) {\n      var $$27, self = this;\n\n      \n      \n      if (inherit == null) {\n        inherit = true;\n      };\n      name = $$($nesting, 'Opal')['$const_name!'](name);\n      \n      if (name.indexOf('::') === 0 && name !== '::'){\n        name = name.slice(2);\n      }\n    ;\n      if ($truthy(name.indexOf('::') != -1 && name != '::')) {\n        return $send(name.$split(\"::\"), 'inject', [self], ($$27 = function(o, c){var self = $$27.$$s || this;\n\n        \n          \n          if (o == null) {\n            o = nil;\n          };\n          \n          if (c == null) {\n            c = nil;\n          };\n          return o.$const_get(c);}, $$27.$$s = self, $$27.$$arity = 2, $$27))};\n      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {\n      } else {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"wrong constant name \" + (name), name))\n      };\n      \n      if (inherit) {\n        return $$([self], name);\n      } else {\n        return Opal.const_get_local(self, name);\n      }\n    ;\n    }, $Module_const_get$26.$$arity = -2);\n    \n    Opal.def(self, '$const_missing', $Module_const_missing$28 = function $$const_missing(name) {\n      var self = this, full_const_name = nil;\n\n      \n      \n      if (self.$$autoload) {\n        var file = self.$$autoload[name];\n\n        if (file) {\n          self.$require(file);\n\n          return self.$const_get(name);\n        }\n      }\n    ;\n      full_const_name = (function() {if (self['$==']($$($nesting, 'Object'))) {\n        return name\n      } else {\n        return \"\" + (self) + \"::\" + (name)\n      }; return nil; })();\n      return self.$raise($$($nesting, 'NameError').$new(\"\" + \"uninitialized constant \" + (full_const_name), name));\n    }, $Module_const_missing$28.$$arity = 1);\n    \n    Opal.def(self, '$const_set', $Module_const_set$29 = function $$const_set(name, value) {\n      var $a, self = this;\n\n      \n      name = $$($nesting, 'Opal')['$const_name!'](name);\n      if ($truthy(($truthy($a = name['$!~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP'))) ? $a : name['$start_with?'](\"::\")))) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"wrong constant name \" + (name), name))};\n      Opal.const_set(self, name, value);\n      return value;\n    }, $Module_const_set$29.$$arity = 2);\n    \n    Opal.def(self, '$public_constant', $Module_public_constant$30 = function $$public_constant(const_name) {\n      var self = this;\n\n      return nil\n    }, $Module_public_constant$30.$$arity = 1);\n    \n    Opal.def(self, '$define_method', $Module_define_method$31 = function $$define_method(name, method) {\n      var $iter = $Module_define_method$31.$$p, block = $iter || nil, $a, $$32, self = this, $case = nil;\n\n      if ($iter) $Module_define_method$31.$$p = null;\n      \n      \n      if ($iter) $Module_define_method$31.$$p = null;;\n      ;\n      if ($truthy(method === undefined && block === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"tried to create a Proc object without a block\")};\n      block = ($truthy($a = block) ? $a : (function() {$case = method;\n      if ($$($nesting, 'Proc')['$===']($case)) {return method}\n      else if ($$($nesting, 'Method')['$===']($case)) {return method.$to_proc().$$unbound}\n      else if ($$($nesting, 'UnboundMethod')['$===']($case)) {return $lambda(($$32 = function($b){var self = $$32.$$s || this, $post_args, args, bound = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        bound = method.$bind(self);\n        return $send(bound, 'call', Opal.to_a(args));}, $$32.$$s = self, $$32.$$arity = -1, $$32))}\n      else {return self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (block.$class()) + \" (expected Proc/Method)\")}})());\n      \n      var id = '$' + name;\n\n      block.$$jsid        = name;\n      block.$$s           = null;\n      block.$$def         = block;\n      block.$$define_meth = true;\n\n      Opal.defn(self, id, block);\n\n      return name;\n    ;\n    }, $Module_define_method$31.$$arity = -2);\n    \n    Opal.def(self, '$remove_method', $Module_remove_method$33 = function $$remove_method($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      for (var i = 0, length = names.length; i < length; i++) {\n        Opal.rdef(self, \"$\" + names[i]);\n      }\n    ;\n      return self;\n    }, $Module_remove_method$33.$$arity = -1);\n    \n    Opal.def(self, '$singleton_class?', $Module_singleton_class$ques$34 = function() {\n      var self = this;\n\n      return !!self.$$is_singleton;\n    }, $Module_singleton_class$ques$34.$$arity = 0);\n    \n    Opal.def(self, '$include', $Module_include$35 = function $$include($a) {\n      var $post_args, mods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      mods = $post_args;;\n      \n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$append_features(self);\n        (mod).$included(self);\n      }\n    ;\n      return self;\n    }, $Module_include$35.$$arity = -1);\n    \n    Opal.def(self, '$included_modules', $Module_included_modules$36 = function $$included_modules() {\n      var self = this;\n\n      return Opal.included_modules(self);\n    }, $Module_included_modules$36.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Module_include$ques$37 = function(mod) {\n      var self = this;\n\n      \n      if (!mod.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n      }\n\n      var i, ii, mod2, ancestors = Opal.ancestors(self);\n\n      for (i = 0, ii = ancestors.length; i < ii; i++) {\n        mod2 = ancestors[i];\n        if (mod2 === mod && mod2 !== self) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    }, $Module_include$ques$37.$$arity = 1);\n    \n    Opal.def(self, '$instance_method', $Module_instance_method$38 = function $$instance_method(name) {\n      var self = this;\n\n      \n      var meth = self.$$prototype['$' + name];\n\n      if (!meth || meth.$$stub) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"undefined method `\" + (name) + \"' for class `\" + (self.$name()) + \"'\", name));\n      }\n\n      return $$($nesting, 'UnboundMethod').$new(self, meth.$$owner || self, meth, name);\n    \n    }, $Module_instance_method$38.$$arity = 1);\n    \n    Opal.def(self, '$instance_methods', $Module_instance_methods$39 = function $$instance_methods(include_super) {\n      var self = this;\n\n      \n      \n      if (include_super == null) {\n        include_super = true;\n      };\n      \n      if ($truthy(include_super)) {\n        return Opal.instance_methods(self);\n      } else {\n        return Opal.own_instance_methods(self);\n      }\n    ;\n    }, $Module_instance_methods$39.$$arity = -1);\n    \n    Opal.def(self, '$included', $Module_included$40 = function $$included(mod) {\n      var self = this;\n\n      return nil\n    }, $Module_included$40.$$arity = 1);\n    \n    Opal.def(self, '$extended', $Module_extended$41 = function $$extended(mod) {\n      var self = this;\n\n      return nil\n    }, $Module_extended$41.$$arity = 1);\n    \n    Opal.def(self, '$extend_object', $Module_extend_object$42 = function $$extend_object(object) {\n      var self = this;\n\n      return nil\n    }, $Module_extend_object$42.$$arity = 1);\n    \n    Opal.def(self, '$method_added', $Module_method_added$43 = function $$method_added($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_method_added$43.$$arity = -1);\n    \n    Opal.def(self, '$method_removed', $Module_method_removed$44 = function $$method_removed($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_method_removed$44.$$arity = -1);\n    \n    Opal.def(self, '$method_undefined', $Module_method_undefined$45 = function $$method_undefined($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_method_undefined$45.$$arity = -1);\n    \n    Opal.def(self, '$module_eval', $Module_module_eval$46 = function $$module_eval($a) {\n      var $iter = $Module_module_eval$46.$$p, block = $iter || nil, $post_args, args, $b, $$47, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;\n\n      if ($iter) $Module_module_eval$46.$$p = null;\n      \n      \n      if ($iter) $Module_module_eval$46.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {\n        \n        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {\n        } else {\n          $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        };\n        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;\n        default_eval_options = $hash2([\"file\", \"eval\"], {\"file\": ($truthy($b = file) ? $b : \"(eval)\"), \"eval\": true});\n        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);\n        compiled = $$($nesting, 'Opal').$compile(string, compiling_options);\n        block = $send($$($nesting, 'Kernel'), 'proc', [], ($$47 = function(){var self = $$47.$$s || this;\n\n        \n          return (function(self) {\n            return eval(compiled);\n          })(self)\n        }, $$47.$$s = self, $$47.$$arity = 0, $$47));\n      } else if ($truthy(args['$any?']())) {\n        $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), \"\" + (\"\" + \"wrong number of arguments (\" + (args.$size()) + \" for 0)\") + \"\\n\\n  NOTE:If you want to enable passing a String argument please add \\\"require 'opal-parser'\\\" to your script\\n\")};\n      \n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n      result = block.apply(self, [self]);\n      block.$$s = old;\n\n      return result;\n    ;\n    }, $Module_module_eval$46.$$arity = -1);\n    Opal.alias(self, \"class_eval\", \"module_eval\");\n    \n    Opal.def(self, '$module_exec', $Module_module_exec$48 = function $$module_exec($a) {\n      var $iter = $Module_module_exec$48.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Module_module_exec$48.$$p = null;\n      \n      \n      if ($iter) $Module_module_exec$48.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      if (block === nil) {\n        self.$raise($$($nesting, 'LocalJumpError'), \"no block given\")\n      }\n\n      var block_self = block.$$s, result;\n\n      block.$$s = null;\n      result = block.apply(self, args);\n      block.$$s = block_self;\n\n      return result;\n    ;\n    }, $Module_module_exec$48.$$arity = -1);\n    Opal.alias(self, \"class_exec\", \"module_exec\");\n    \n    Opal.def(self, '$method_defined?', $Module_method_defined$ques$49 = function(method) {\n      var self = this;\n\n      \n      var body = self.$$prototype['$' + method];\n      return (!!body) && !body.$$stub;\n    \n    }, $Module_method_defined$ques$49.$$arity = 1);\n    \n    Opal.def(self, '$module_function', $Module_module_function$50 = function $$module_function($a) {\n      var $post_args, methods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      methods = $post_args;;\n      \n      if (methods.length === 0) {\n        self.$$module_function = true;\n      }\n      else {\n        for (var i = 0, length = methods.length; i < length; i++) {\n          var meth = methods[i],\n              id   = '$' + meth,\n              func = self.$$prototype[id];\n\n          Opal.defs(self, id, func);\n        }\n      }\n\n      return self;\n    ;\n    }, $Module_module_function$50.$$arity = -1);\n    \n    Opal.def(self, '$name', $Module_name$51 = function $$name() {\n      var self = this;\n\n      \n      if (self.$$full_name) {\n        return self.$$full_name;\n      }\n\n      var result = [], base = self;\n\n      while (base) {\n        // Give up if any of the ancestors is unnamed\n        if (base.$$name === nil || base.$$name == null) return nil;\n\n        result.unshift(base.$$name);\n\n        base = base.$$base_module;\n\n        if (base === Opal.Object) {\n          break;\n        }\n      }\n\n      if (result.length === 0) {\n        return nil;\n      }\n\n      return self.$$full_name = result.join('::');\n    \n    }, $Module_name$51.$$arity = 0);\n    \n    Opal.def(self, '$prepend', $Module_prepend$52 = function $$prepend($a) {\n      var $post_args, mods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      mods = $post_args;;\n      \n      if (mods.length === 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (given 0, expected 1+)\")\n      }\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$prepend_features(self);\n        (mod).$prepended(self);\n      }\n    ;\n      return self;\n    }, $Module_prepend$52.$$arity = -1);\n    \n    Opal.def(self, '$prepend_features', $Module_prepend_features$53 = function $$prepend_features(prepender) {\n      var self = this;\n\n      \n      \n      if (!self.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (self.$class()) + \" (expected Module)\");\n      }\n\n      Opal.prepend_features(self, prepender)\n    ;\n      return self;\n    }, $Module_prepend_features$53.$$arity = 1);\n    \n    Opal.def(self, '$prepended', $Module_prepended$54 = function $$prepended(mod) {\n      var self = this;\n\n      return nil\n    }, $Module_prepended$54.$$arity = 1);\n    \n    Opal.def(self, '$remove_const', $Module_remove_const$55 = function $$remove_const(name) {\n      var self = this;\n\n      return Opal.const_remove(self, name);\n    }, $Module_remove_const$55.$$arity = 1);\n    \n    Opal.def(self, '$to_s', $Module_to_s$56 = function $$to_s() {\n      var $a, self = this;\n\n      return ($truthy($a = Opal.Module.$name.call(self)) ? $a : \"\" + \"#<\" + (self.$$is_module ? 'Module' : 'Class') + \":0x\" + (self.$__id__().$to_s(16)) + \">\")\n    }, $Module_to_s$56.$$arity = 0);\n    \n    Opal.def(self, '$undef_method', $Module_undef_method$57 = function $$undef_method($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      for (var i = 0, length = names.length; i < length; i++) {\n        Opal.udef(self, \"$\" + names[i]);\n      }\n    ;\n      return self;\n    }, $Module_undef_method$57.$$arity = -1);\n    \n    Opal.def(self, '$instance_variables', $Module_instance_variables$58 = function $$instance_variables() {\n      var self = this, consts = nil;\n\n      \n      consts = (Opal.Module.$$nesting = $nesting, self.$constants());\n      \n      var result = [];\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {\n          result.push('@' + name);\n        }\n      }\n\n      return result;\n    ;\n    }, $Module_instance_variables$58.$$arity = 0);\n    \n    Opal.def(self, '$dup', $Module_dup$59 = function $$dup() {\n      var $iter = $Module_dup$59.$$p, $yield = $iter || nil, self = this, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Module_dup$59.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      copy = $send(self, Opal.find_super_dispatcher(self, 'dup', $Module_dup$59, false), $zuper, $iter);\n      copy.$copy_class_variables(self);\n      copy.$copy_constants(self);\n      return copy;\n    }, $Module_dup$59.$$arity = 0);\n    \n    Opal.def(self, '$copy_class_variables', $Module_copy_class_variables$60 = function $$copy_class_variables(other) {\n      var self = this;\n\n      \n      for (var name in other.$$cvars) {\n        self.$$cvars[name] = other.$$cvars[name];\n      }\n    \n    }, $Module_copy_class_variables$60.$$arity = 1);\n    return (Opal.def(self, '$copy_constants', $Module_copy_constants$61 = function $$copy_constants(other) {\n      var self = this;\n\n      \n      var name, other_constants = other.$$const;\n\n      for (name in other_constants) {\n        Opal.const_set(self, name, other_constants[name]);\n      }\n    \n    }, $Module_copy_constants$61.$$arity = 1), nil) && 'copy_constants';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/class\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$class_eval', '$to_proc', '$initialize_copy', '$allocate', '$name', '$to_s']);\n  \n  self.$require(\"corelib/module\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Class');\n\n    var $nesting = [self].concat($parent_nesting), $Class_new$1, $Class_allocate$2, $Class_inherited$3, $Class_initialize_dup$4, $Class_new$5, $Class_superclass$6, $Class_to_s$7;\n\n    \n    Opal.defs(self, '$new', $Class_new$1 = function(superclass) {\n      var $iter = $Class_new$1.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Class_new$1.$$p = null;\n      \n      \n      if ($iter) $Class_new$1.$$p = null;;\n      \n      if (superclass == null) {\n        superclass = $$($nesting, 'Object');\n      };\n      \n      if (!superclass.$$is_class) {\n        throw Opal.TypeError.$new(\"superclass must be a Class\");\n      }\n\n      var klass = Opal.allocate_class(nil, superclass);\n      superclass.$inherited(klass);\n      (function() {if ((block !== nil)) {\n        return $send((klass), 'class_eval', [], block.$to_proc())\n      } else {\n        return nil\n      }; return nil; })()\n      return klass;\n    ;\n    }, $Class_new$1.$$arity = -1);\n    \n    Opal.def(self, '$allocate', $Class_allocate$2 = function $$allocate() {\n      var self = this;\n\n      \n      var obj = new self.$$constructor();\n      obj.$$id = Opal.uid();\n      return obj;\n    \n    }, $Class_allocate$2.$$arity = 0);\n    \n    Opal.def(self, '$inherited', $Class_inherited$3 = function $$inherited(cls) {\n      var self = this;\n\n      return nil\n    }, $Class_inherited$3.$$arity = 1);\n    \n    Opal.def(self, '$initialize_dup', $Class_initialize_dup$4 = function $$initialize_dup(original) {\n      var self = this;\n\n      \n      self.$initialize_copy(original);\n      \n      self.$$name = null;\n      self.$$full_name = null;\n    ;\n    }, $Class_initialize_dup$4.$$arity = 1);\n    \n    Opal.def(self, '$new', $Class_new$5 = function($a) {\n      var $iter = $Class_new$5.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Class_new$5.$$p = null;\n      \n      \n      if ($iter) $Class_new$5.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var object = self.$allocate();\n      Opal.send(object, object.$initialize, args, block);\n      return object;\n    ;\n    }, $Class_new$5.$$arity = -1);\n    \n    Opal.def(self, '$superclass', $Class_superclass$6 = function $$superclass() {\n      var self = this;\n\n      return self.$$super || nil;\n    }, $Class_superclass$6.$$arity = 0);\n    return (Opal.def(self, '$to_s', $Class_to_s$7 = function $$to_s() {\n      var $iter = $Class_to_s$7.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Class_to_s$7.$$p = null;\n      \n      var singleton_of = self.$$singleton_of;\n\n      if (singleton_of && (singleton_of.$$is_a_module)) {\n        return \"\" + \"#<Class:\" + ((singleton_of).$name()) + \">\";\n      }\n      else if (singleton_of) {\n        // a singleton class created from an object\n        return \"\" + \"#<Class:#<\" + ((singleton_of.$$class).$name()) + \":0x\" + ((Opal.id(singleton_of)).$to_s(16)) + \">>\";\n      }\n      return $send(self, Opal.find_super_dispatcher(self, 'to_s', $Class_to_s$7, false), [], null);\n    \n    }, $Class_to_s$7.$$arity = 0), nil) && 'to_s';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/basic_object\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;\n\n  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$any?', '$inspect', '$new']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'BasicObject');\n\n    var $nesting = [self].concat($parent_nesting), $BasicObject_initialize$1, $BasicObject_$eq_eq$2, $BasicObject_eql$ques$3, $BasicObject___id__$4, $BasicObject___send__$5, $BasicObject_$excl$6, $BasicObject_$not_eq$7, $BasicObject_instance_eval$8, $BasicObject_instance_exec$10, $BasicObject_singleton_method_added$11, $BasicObject_singleton_method_removed$12, $BasicObject_singleton_method_undefined$13, $BasicObject_class$14, $BasicObject_method_missing$15;\n\n    \n    \n    Opal.def(self, '$initialize', $BasicObject_initialize$1 = function $$initialize($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_initialize$1.$$arity = -1);\n    \n    Opal.def(self, '$==', $BasicObject_$eq_eq$2 = function(other) {\n      var self = this;\n\n      return self === other;\n    }, $BasicObject_$eq_eq$2.$$arity = 1);\n    \n    Opal.def(self, '$eql?', $BasicObject_eql$ques$3 = function(other) {\n      var self = this;\n\n      return self['$=='](other)\n    }, $BasicObject_eql$ques$3.$$arity = 1);\n    Opal.alias(self, \"equal?\", \"==\");\n    \n    Opal.def(self, '$__id__', $BasicObject___id__$4 = function $$__id__() {\n      var self = this;\n\n      \n      if (self.$$id != null) {\n        return self.$$id;\n      }\n      Opal.defineProperty(self, '$$id', Opal.uid());\n      return self.$$id;\n    \n    }, $BasicObject___id__$4.$$arity = 0);\n    \n    Opal.def(self, '$__send__', $BasicObject___send__$5 = function $$__send__(symbol, $a) {\n      var $iter = $BasicObject___send__$5.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $BasicObject___send__$5.$$p = null;\n      \n      \n      if ($iter) $BasicObject___send__$5.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      args = $post_args;;\n      \n      var func = self['$' + symbol]\n\n      if (func) {\n        if (block !== nil) {\n          func.$$p = block;\n        }\n\n        return func.apply(self, args);\n      }\n\n      if (block !== nil) {\n        self.$method_missing.$$p = block;\n      }\n\n      return self.$method_missing.apply(self, [symbol].concat(args));\n    ;\n    }, $BasicObject___send__$5.$$arity = -2);\n    \n    Opal.def(self, '$!', $BasicObject_$excl$6 = function() {\n      var self = this;\n\n      return false\n    }, $BasicObject_$excl$6.$$arity = 0);\n    \n    Opal.def(self, '$!=', $BasicObject_$not_eq$7 = function(other) {\n      var self = this;\n\n      return self['$=='](other)['$!']()\n    }, $BasicObject_$not_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$instance_eval', $BasicObject_instance_eval$8 = function $$instance_eval($a) {\n      var $iter = $BasicObject_instance_eval$8.$$p, block = $iter || nil, $post_args, args, $b, $$9, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;\n\n      if ($iter) $BasicObject_instance_eval$8.$$p = null;\n      \n      \n      if ($iter) $BasicObject_instance_eval$8.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {\n        \n        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {\n        } else {\n          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        };\n        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;\n        default_eval_options = $hash2([\"file\", \"eval\"], {\"file\": ($truthy($b = file) ? $b : \"(eval)\"), \"eval\": true});\n        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);\n        compiled = $$$('::', 'Opal').$compile(string, compiling_options);\n        block = $send($$$('::', 'Kernel'), 'proc', [], ($$9 = function(){var self = $$9.$$s || this;\n\n        \n          return (function(self) {\n            return eval(compiled);\n          })(self)\n        }, $$9.$$s = self, $$9.$$arity = 0, $$9));\n      } else if ($truthy(args['$any?']())) {\n        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (args.$size()) + \" for 0)\")};\n      \n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      // Need to pass $$eval so that method definitions know if this is\n      // being done on a class/module. Cannot be compiler driven since\n      // send(:instance_eval) needs to work.\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.call(self, self);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.call(self, self);\n      }\n\n      block.$$s = old;\n\n      return result;\n    ;\n    }, $BasicObject_instance_eval$8.$$arity = -1);\n    \n    Opal.def(self, '$instance_exec', $BasicObject_instance_exec$10 = function $$instance_exec($a) {\n      var $iter = $BasicObject_instance_exec$10.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $BasicObject_instance_exec$10.$$p = null;\n      \n      \n      if ($iter) $BasicObject_instance_exec$10.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(block)) {\n      } else {\n        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), \"no block given\")\n      };\n      \n      var block_self = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.apply(self, args);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.apply(self, args);\n      }\n\n      block.$$s = block_self;\n\n      return result;\n    ;\n    }, $BasicObject_instance_exec$10.$$arity = -1);\n    \n    Opal.def(self, '$singleton_method_added', $BasicObject_singleton_method_added$11 = function $$singleton_method_added($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_singleton_method_added$11.$$arity = -1);\n    \n    Opal.def(self, '$singleton_method_removed', $BasicObject_singleton_method_removed$12 = function $$singleton_method_removed($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_singleton_method_removed$12.$$arity = -1);\n    \n    Opal.def(self, '$singleton_method_undefined', $BasicObject_singleton_method_undefined$13 = function $$singleton_method_undefined($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_singleton_method_undefined$13.$$arity = -1);\n    \n    Opal.def(self, '$class', $BasicObject_class$14 = function() {\n      var self = this;\n\n      return self.$$class;\n    }, $BasicObject_class$14.$$arity = 0);\n    return (Opal.def(self, '$method_missing', $BasicObject_method_missing$15 = function $$method_missing(symbol, $a) {\n      var $iter = $BasicObject_method_missing$15.$$p, block = $iter || nil, $post_args, args, self = this, message = nil;\n\n      if ($iter) $BasicObject_method_missing$15.$$p = null;\n      \n      \n      if ($iter) $BasicObject_method_missing$15.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      args = $post_args;;\n      message = (function() {if ($truthy(self.$inspect && !self.$inspect.$$stub)) {\n        return \"\" + \"undefined method `\" + (symbol) + \"' for \" + (self.$inspect()) + \":\" + (self.$$class)\n      } else {\n        return \"\" + \"undefined method `\" + (symbol) + \"' for \" + (self.$$class)\n      }; return nil; })();\n      return $$$('::', 'Kernel').$raise($$$('::', 'NoMethodError').$new(message, symbol));\n    }, $BasicObject_method_missing$15.$$arity = -2), nil) && 'method_missing';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/kernel\"] = function(Opal) {\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send, $klass = Opal.klass;\n\n  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$singleton_class', '$to_proc', '$initialize_dup', '$for', '$empty?', '$pop', '$call', '$coerce_to', '$append_features', '$extend_object', '$extended', '$__id__', '$to_s', '$instance_variable_name!', '$respond_to?', '$to_int', '$coerce_to!', '$Integer', '$nil?', '$===', '$enum_for', '$result', '$any?', '$print', '$format', '$puts', '$each', '$<=', '$length', '$[]', '$exception', '$is_a?', '$rand', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$new_seed', '$srand', '$sym', '$arg', '$open', '$include']);\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_method_missing$1, $Kernel_$eq_tilde$2, $Kernel_$excl_tilde$3, $Kernel_$eq_eq_eq$4, $Kernel_$lt_eq_gt$5, $Kernel_method$6, $Kernel_methods$7, $Kernel_public_methods$8, $Kernel_Array$9, $Kernel_at_exit$10, $Kernel_caller$11, $Kernel_class$12, $Kernel_copy_instance_variables$13, $Kernel_copy_singleton_methods$14, $Kernel_clone$15, $Kernel_initialize_clone$16, $Kernel_define_singleton_method$17, $Kernel_dup$18, $Kernel_initialize_dup$19, $Kernel_enum_for$20, $Kernel_equal$ques$21, $Kernel_exit$22, $Kernel_extend$23, $Kernel_hash$24, $Kernel_initialize_copy$25, $Kernel_inspect$26, $Kernel_instance_of$ques$27, $Kernel_instance_variable_defined$ques$28, $Kernel_instance_variable_get$29, $Kernel_instance_variable_set$30, $Kernel_remove_instance_variable$31, $Kernel_instance_variables$32, $Kernel_Integer$33, $Kernel_Float$34, $Kernel_Hash$35, $Kernel_is_a$ques$36, $Kernel_itself$37, $Kernel_lambda$38, $Kernel_load$39, $Kernel_loop$40, $Kernel_nil$ques$42, $Kernel_printf$43, $Kernel_proc$44, $Kernel_puts$45, $Kernel_p$46, $Kernel_print$48, $Kernel_warn$49, $Kernel_raise$50, $Kernel_rand$51, $Kernel_respond_to$ques$52, $Kernel_respond_to_missing$ques$53, $Kernel_require$54, $Kernel_require_relative$55, $Kernel_require_tree$56, $Kernel_singleton_class$57, $Kernel_sleep$58, $Kernel_srand$59, $Kernel_String$60, $Kernel_tap$61, $Kernel_to_proc$62, $Kernel_to_s$63, $Kernel_catch$64, $Kernel_throw$65, $Kernel_open$66, $Kernel_yield_self$67;\n\n    \n    \n    Opal.def(self, '$method_missing', $Kernel_method_missing$1 = function $$method_missing(symbol, $a) {\n      var $iter = $Kernel_method_missing$1.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Kernel_method_missing$1.$$p = null;\n      \n      \n      if ($iter) $Kernel_method_missing$1.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      args = $post_args;;\n      return self.$raise($$($nesting, 'NoMethodError').$new(\"\" + \"undefined method `\" + (symbol) + \"' for \" + (self.$inspect()), symbol, args));\n    }, $Kernel_method_missing$1.$$arity = -2);\n    \n    Opal.def(self, '$=~', $Kernel_$eq_tilde$2 = function(obj) {\n      var self = this;\n\n      return false\n    }, $Kernel_$eq_tilde$2.$$arity = 1);\n    \n    Opal.def(self, '$!~', $Kernel_$excl_tilde$3 = function(obj) {\n      var self = this;\n\n      return self['$=~'](obj)['$!']()\n    }, $Kernel_$excl_tilde$3.$$arity = 1);\n    \n    Opal.def(self, '$===', $Kernel_$eq_eq_eq$4 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self.$object_id()['$=='](other.$object_id())) ? $a : self['$=='](other))\n    }, $Kernel_$eq_eq_eq$4.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $Kernel_$lt_eq_gt$5 = function(other) {\n      var self = this;\n\n      \n      // set guard for infinite recursion\n      self.$$comparable = true;\n\n      var x = self['$=='](other);\n\n      if (x && x !== nil) {\n        return 0;\n      }\n\n      return nil;\n    \n    }, $Kernel_$lt_eq_gt$5.$$arity = 1);\n    \n    Opal.def(self, '$method', $Kernel_method$6 = function $$method(name) {\n      var self = this;\n\n      \n      var meth = self['$' + name];\n\n      if (!meth || meth.$$stub) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"undefined method `\" + (name) + \"' for class `\" + (self.$class()) + \"'\", name));\n      }\n\n      return $$($nesting, 'Method').$new(self, meth.$$owner || self.$class(), meth, name);\n    \n    }, $Kernel_method$6.$$arity = 1);\n    \n    Opal.def(self, '$methods', $Kernel_methods$7 = function $$methods(all) {\n      var self = this;\n\n      \n      \n      if (all == null) {\n        all = true;\n      };\n      \n      if ($truthy(all)) {\n        return Opal.methods(self);\n      } else {\n        return Opal.own_methods(self);\n      }\n    ;\n    }, $Kernel_methods$7.$$arity = -1);\n    \n    Opal.def(self, '$public_methods', $Kernel_public_methods$8 = function $$public_methods(all) {\n      var self = this;\n\n      \n      \n      if (all == null) {\n        all = true;\n      };\n      \n      if ($truthy(all)) {\n        return Opal.methods(self);\n      } else {\n        return Opal.receiver_methods(self);\n      }\n    ;\n    }, $Kernel_public_methods$8.$$arity = -1);\n    \n    Opal.def(self, '$Array', $Kernel_Array$9 = function $$Array(object) {\n      var self = this;\n\n      \n      var coerced;\n\n      if (object === nil) {\n        return [];\n      }\n\n      if (object.$$is_array) {\n        return object;\n      }\n\n      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), \"to_ary\");\n      if (coerced !== nil) { return coerced; }\n\n      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), \"to_a\");\n      if (coerced !== nil) { return coerced; }\n\n      return [object];\n    \n    }, $Kernel_Array$9.$$arity = 1);\n    \n    Opal.def(self, '$at_exit', $Kernel_at_exit$10 = function $$at_exit() {\n      var $iter = $Kernel_at_exit$10.$$p, block = $iter || nil, $a, self = this;\n      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;\n\n      if ($iter) $Kernel_at_exit$10.$$p = null;\n      \n      \n      if ($iter) $Kernel_at_exit$10.$$p = null;;\n      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);\n      return $gvars.__at_exit__['$<<'](block);\n    }, $Kernel_at_exit$10.$$arity = 0);\n    \n    Opal.def(self, '$caller', $Kernel_caller$11 = function $$caller($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return [];\n    }, $Kernel_caller$11.$$arity = -1);\n    \n    Opal.def(self, '$class', $Kernel_class$12 = function() {\n      var self = this;\n\n      return self.$$class;\n    }, $Kernel_class$12.$$arity = 0);\n    \n    Opal.def(self, '$copy_instance_variables', $Kernel_copy_instance_variables$13 = function $$copy_instance_variables(other) {\n      var self = this;\n\n      \n      var keys = Object.keys(other), i, ii, name;\n      for (i = 0, ii = keys.length; i < ii; i++) {\n        name = keys[i];\n        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    \n    }, $Kernel_copy_instance_variables$13.$$arity = 1);\n    \n    Opal.def(self, '$copy_singleton_methods', $Kernel_copy_singleton_methods$14 = function $$copy_singleton_methods(other) {\n      var self = this;\n\n      \n      var i, name, names, length;\n\n      if (other.hasOwnProperty('$$meta')) {\n        var other_singleton_class = Opal.get_singleton_class(other);\n        var self_singleton_class = Opal.get_singleton_class(self);\n        names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);\n\n        for (i = 0, length = names.length; i < length; i++) {\n          name = names[i];\n          if (Opal.is_method(name)) {\n            self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];\n          }\n        }\n\n        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);\n        Object.setPrototypeOf(\n          self_singleton_class.$$prototype,\n          Object.getPrototypeOf(other_singleton_class.$$prototype)\n        );\n      }\n\n      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {\n        name = names[i];\n        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    \n    }, $Kernel_copy_singleton_methods$14.$$arity = 1);\n    \n    Opal.def(self, '$clone', $Kernel_clone$15 = function $$clone($kwargs) {\n      var freeze, self = this, copy = nil;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      copy = self.$class().$allocate();\n      copy.$copy_instance_variables(self);\n      copy.$copy_singleton_methods(self);\n      copy.$initialize_clone(self);\n      return copy;\n    }, $Kernel_clone$15.$$arity = -1);\n    \n    Opal.def(self, '$initialize_clone', $Kernel_initialize_clone$16 = function $$initialize_clone(other) {\n      var self = this;\n\n      return self.$initialize_copy(other)\n    }, $Kernel_initialize_clone$16.$$arity = 1);\n    \n    Opal.def(self, '$define_singleton_method', $Kernel_define_singleton_method$17 = function $$define_singleton_method(name, method) {\n      var $iter = $Kernel_define_singleton_method$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_define_singleton_method$17.$$p = null;\n      \n      \n      if ($iter) $Kernel_define_singleton_method$17.$$p = null;;\n      ;\n      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc());\n    }, $Kernel_define_singleton_method$17.$$arity = -2);\n    \n    Opal.def(self, '$dup', $Kernel_dup$18 = function $$dup() {\n      var self = this, copy = nil;\n\n      \n      copy = self.$class().$allocate();\n      copy.$copy_instance_variables(self);\n      copy.$initialize_dup(self);\n      return copy;\n    }, $Kernel_dup$18.$$arity = 0);\n    \n    Opal.def(self, '$initialize_dup', $Kernel_initialize_dup$19 = function $$initialize_dup(other) {\n      var self = this;\n\n      return self.$initialize_copy(other)\n    }, $Kernel_initialize_dup$19.$$arity = 1);\n    \n    Opal.def(self, '$enum_for', $Kernel_enum_for$20 = function $$enum_for($a, $b) {\n      var $iter = $Kernel_enum_for$20.$$p, block = $iter || nil, $post_args, method, args, self = this;\n\n      if ($iter) $Kernel_enum_for$20.$$p = null;\n      \n      \n      if ($iter) $Kernel_enum_for$20.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      if ($post_args.length > 0) {\n        method = $post_args[0];\n        $post_args.splice(0, 1);\n      }\n      if (method == null) {\n        method = \"each\";\n      };\n      \n      args = $post_args;;\n      return $send($$($nesting, 'Enumerator'), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());\n    }, $Kernel_enum_for$20.$$arity = -1);\n    Opal.alias(self, \"to_enum\", \"enum_for\");\n    \n    Opal.def(self, '$equal?', $Kernel_equal$ques$21 = function(other) {\n      var self = this;\n\n      return self === other;\n    }, $Kernel_equal$ques$21.$$arity = 1);\n    \n    Opal.def(self, '$exit', $Kernel_exit$22 = function $$exit(status) {\n      var $a, self = this, block = nil;\n      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;\n\n      \n      \n      if (status == null) {\n        status = true;\n      };\n      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);\n      while (!($truthy($gvars.__at_exit__['$empty?']()))) {\n        \n        block = $gvars.__at_exit__.$pop();\n        block.$call();\n      };\n      \n      if (status.$$is_boolean) {\n        status = status ? 0 : 1;\n      } else {\n        status = $$($nesting, 'Opal').$coerce_to(status, $$($nesting, 'Integer'), \"to_int\")\n      }\n\n      Opal.exit(status);\n    ;\n      return nil;\n    }, $Kernel_exit$22.$$arity = -1);\n    \n    Opal.def(self, '$extend', $Kernel_extend$23 = function $$extend($a) {\n      var $post_args, mods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      mods = $post_args;;\n      \n      var singleton = self.$singleton_class();\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$append_features(singleton);\n        (mod).$extend_object(self);\n        (mod).$extended(self);\n      }\n    ;\n      return self;\n    }, $Kernel_extend$23.$$arity = -1);\n    \n    Opal.def(self, '$hash', $Kernel_hash$24 = function $$hash() {\n      var self = this;\n\n      return self.$__id__()\n    }, $Kernel_hash$24.$$arity = 0);\n    \n    Opal.def(self, '$initialize_copy', $Kernel_initialize_copy$25 = function $$initialize_copy(other) {\n      var self = this;\n\n      return nil\n    }, $Kernel_initialize_copy$25.$$arity = 1);\n    \n    Opal.def(self, '$inspect', $Kernel_inspect$26 = function $$inspect() {\n      var self = this;\n\n      return self.$to_s()\n    }, $Kernel_inspect$26.$$arity = 0);\n    \n    Opal.def(self, '$instance_of?', $Kernel_instance_of$ques$27 = function(klass) {\n      var self = this;\n\n      \n      if (!klass.$$is_class && !klass.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"class or module required\");\n      }\n\n      return self.$$class === klass;\n    \n    }, $Kernel_instance_of$ques$27.$$arity = 1);\n    \n    Opal.def(self, '$instance_variable_defined?', $Kernel_instance_variable_defined$ques$28 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      return Opal.hasOwnProperty.call(self, name.substr(1));;\n    }, $Kernel_instance_variable_defined$ques$28.$$arity = 1);\n    \n    Opal.def(self, '$instance_variable_get', $Kernel_instance_variable_get$29 = function $$instance_variable_get(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      \n      var ivar = self[Opal.ivar(name.substr(1))];\n\n      return ivar == null ? nil : ivar;\n    ;\n    }, $Kernel_instance_variable_get$29.$$arity = 1);\n    \n    Opal.def(self, '$instance_variable_set', $Kernel_instance_variable_set$30 = function $$instance_variable_set(name, value) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      return self[Opal.ivar(name.substr(1))] = value;;\n    }, $Kernel_instance_variable_set$30.$$arity = 2);\n    \n    Opal.def(self, '$remove_instance_variable', $Kernel_remove_instance_variable$31 = function $$remove_instance_variable(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      \n      var key = Opal.ivar(name.substr(1)),\n          val;\n      if (self.hasOwnProperty(key)) {\n        val = self[key];\n        delete self[key];\n        return val;\n      }\n    ;\n      return self.$raise($$($nesting, 'NameError'), \"\" + \"instance variable \" + (name) + \" not defined\");\n    }, $Kernel_remove_instance_variable$31.$$arity = 1);\n    \n    Opal.def(self, '$instance_variables', $Kernel_instance_variables$32 = function $$instance_variables() {\n      var self = this;\n\n      \n      var result = [], ivar;\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {\n          if (name.substr(-1) === '$') {\n            ivar = name.slice(0, name.length - 1);\n          } else {\n            ivar = name;\n          }\n          result.push('@' + ivar);\n        }\n      }\n\n      return result;\n    \n    }, $Kernel_instance_variables$32.$$arity = 0);\n    \n    Opal.def(self, '$Integer', $Kernel_Integer$33 = function $$Integer(value, base) {\n      var self = this;\n\n      \n      ;\n      \n      var i, str, base_digits;\n\n      if (!value.$$is_string) {\n        if (base !== undefined) {\n          self.$raise($$($nesting, 'ArgumentError'), \"base specified for non string value\")\n        }\n        if (value === nil) {\n          self.$raise($$($nesting, 'TypeError'), \"can't convert nil into Integer\")\n        }\n        if (value.$$is_number) {\n          if (value === Infinity || value === -Infinity || isNaN(value)) {\n            self.$raise($$($nesting, 'FloatDomainError'), value)\n          }\n          return Math.floor(value);\n        }\n        if (value['$respond_to?'](\"to_int\")) {\n          i = value.$to_int();\n          if (i !== nil) {\n            return i;\n          }\n        }\n        return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Integer'), \"to_i\");\n      }\n\n      if (value === \"0\") {\n        return 0;\n      }\n\n      if (base === undefined) {\n        base = 0;\n      } else {\n        base = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), \"to_int\");\n        if (base === 1 || base < 0 || base > 36) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (base))\n        }\n      }\n\n      str = value.toLowerCase();\n\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n      str = str.replace(/^(\\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {\n        switch (flag) {\n        case '0b':\n          if (base === 0 || base === 2) {\n            base = 2;\n            return head;\n          }\n        case '0':\n        case '0o':\n          if (base === 0 || base === 8) {\n            base = 8;\n            return head;\n          }\n        case '0d':\n          if (base === 0 || base === 10) {\n            base = 10;\n            return head;\n          }\n        case '0x':\n          if (base === 0 || base === 16) {\n            base = 16;\n            return head;\n          }\n        }\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      });\n\n      base = (base === 0 ? 10 : base);\n\n      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));\n\n      if (!(new RegExp('^\\\\s*[+-]?[' + base_digits + ']+\\\\s*$')).test(str)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      }\n\n      i = parseInt(str, base);\n\n      if (isNaN(i)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      }\n\n      return i;\n    ;\n    }, $Kernel_Integer$33.$$arity = -2);\n    \n    Opal.def(self, '$Float', $Kernel_Float$34 = function $$Float(value) {\n      var self = this;\n\n      \n      var str;\n\n      if (value === nil) {\n        self.$raise($$($nesting, 'TypeError'), \"can't convert nil into Float\")\n      }\n\n      if (value.$$is_string) {\n        str = value.toString();\n\n        str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n        //Special case for hex strings only:\n        if (/^\\s*[-+]?0[xX][0-9a-fA-F]+\\s*$/.test(str)) {\n          return self.$Integer(str);\n        }\n\n        if (!/^\\s*[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.test(str)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Float(): \\\"\" + (value) + \"\\\"\")\n        }\n\n        return parseFloat(str);\n      }\n\n      return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Float'), \"to_f\");\n    \n    }, $Kernel_Float$34.$$arity = 1);\n    \n    Opal.def(self, '$Hash', $Kernel_Hash$35 = function $$Hash(arg) {\n      var $a, self = this;\n\n      \n      if ($truthy(($truthy($a = arg['$nil?']()) ? $a : arg['$==']([])))) {\n        return $hash2([], {})};\n      if ($truthy($$($nesting, 'Hash')['$==='](arg))) {\n        return arg};\n      return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'Hash'), \"to_hash\");\n    }, $Kernel_Hash$35.$$arity = 1);\n    \n    Opal.def(self, '$is_a?', $Kernel_is_a$ques$36 = function(klass) {\n      var self = this;\n\n      \n      if (!klass.$$is_class && !klass.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"class or module required\");\n      }\n\n      return Opal.is_a(self, klass);\n    \n    }, $Kernel_is_a$ques$36.$$arity = 1);\n    \n    Opal.def(self, '$itself', $Kernel_itself$37 = function $$itself() {\n      var self = this;\n\n      return self\n    }, $Kernel_itself$37.$$arity = 0);\n    Opal.alias(self, \"kind_of?\", \"is_a?\");\n    \n    Opal.def(self, '$lambda', $Kernel_lambda$38 = function $$lambda() {\n      var $iter = $Kernel_lambda$38.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_lambda$38.$$p = null;\n      \n      \n      if ($iter) $Kernel_lambda$38.$$p = null;;\n      return Opal.lambda(block);;\n    }, $Kernel_lambda$38.$$arity = 0);\n    \n    Opal.def(self, '$load', $Kernel_load$39 = function $$load(file) {\n      var self = this;\n\n      \n      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), \"to_str\");\n      return Opal.load(file);\n    }, $Kernel_load$39.$$arity = 1);\n    \n    Opal.def(self, '$loop', $Kernel_loop$40 = function $$loop() {\n      var $$41, $a, $iter = $Kernel_loop$40.$$p, $yield = $iter || nil, self = this, e = nil;\n\n      if ($iter) $Kernel_loop$40.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"loop\"], ($$41 = function(){var self = $$41.$$s || this;\n\n        return $$$($$($nesting, 'Float'), 'INFINITY')}, $$41.$$s = self, $$41.$$arity = 0, $$41))\n      };\n      while ($truthy(true)) {\n        \n        try {\n          Opal.yieldX($yield, [])\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StopIteration')])) {e = $err;\n            try {\n              return e.$result()\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      };\n      return self;\n    }, $Kernel_loop$40.$$arity = 0);\n    \n    Opal.def(self, '$nil?', $Kernel_nil$ques$42 = function() {\n      var self = this;\n\n      return false\n    }, $Kernel_nil$ques$42.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    \n    Opal.def(self, '$printf', $Kernel_printf$43 = function $$printf($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(args['$any?']())) {\n        self.$print($send(self, 'format', Opal.to_a(args)))};\n      return nil;\n    }, $Kernel_printf$43.$$arity = -1);\n    \n    Opal.def(self, '$proc', $Kernel_proc$44 = function $$proc() {\n      var $iter = $Kernel_proc$44.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_proc$44.$$p = null;\n      \n      \n      if ($iter) $Kernel_proc$44.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"tried to create Proc object without a block\")\n      };\n      block.$$is_lambda = false;\n      return block;\n    }, $Kernel_proc$44.$$arity = 0);\n    \n    Opal.def(self, '$puts', $Kernel_puts$45 = function $$puts($a) {\n      var $post_args, strs, self = this;\n      if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      strs = $post_args;;\n      return $send($gvars.stdout, 'puts', Opal.to_a(strs));\n    }, $Kernel_puts$45.$$arity = -1);\n    \n    Opal.def(self, '$p', $Kernel_p$46 = function $$p($a) {\n      var $post_args, args, $$47, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      $send(args, 'each', [], ($$47 = function(obj){var self = $$47.$$s || this;\n        if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n        \n        if (obj == null) {\n          obj = nil;\n        };\n        return $gvars.stdout.$puts(obj.$inspect());}, $$47.$$s = self, $$47.$$arity = 1, $$47));\n      if ($truthy($rb_le(args.$length(), 1))) {\n        return args['$[]'](0)\n      } else {\n        return args\n      };\n    }, $Kernel_p$46.$$arity = -1);\n    \n    Opal.def(self, '$print', $Kernel_print$48 = function $$print($a) {\n      var $post_args, strs, self = this;\n      if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      strs = $post_args;;\n      return $send($gvars.stdout, 'print', Opal.to_a(strs));\n    }, $Kernel_print$48.$$arity = -1);\n    \n    Opal.def(self, '$warn', $Kernel_warn$49 = function $$warn($a) {\n      var $post_args, strs, $b, self = this;\n      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;\n      if ($gvars.stderr == null) $gvars.stderr = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      strs = $post_args;;\n      if ($truthy(($truthy($b = $gvars.VERBOSE['$nil?']()) ? $b : strs['$empty?']()))) {\n        return nil\n      } else {\n        return $send($gvars.stderr, 'puts', Opal.to_a(strs))\n      };\n    }, $Kernel_warn$49.$$arity = -1);\n    \n    Opal.def(self, '$raise', $Kernel_raise$50 = function $$raise(exception, string, _backtrace) {\n      var self = this;\n      if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n      \n      ;\n      \n      if (string == null) {\n        string = nil;\n      };\n      \n      if (_backtrace == null) {\n        _backtrace = nil;\n      };\n      \n      if (exception == null && $gvars[\"!\"] !== nil) {\n        throw $gvars[\"!\"];\n      }\n      if (exception == null) {\n        exception = $$($nesting, 'RuntimeError').$new();\n      }\n      else if (exception.$$is_string) {\n        exception = $$($nesting, 'RuntimeError').$new(exception);\n      }\n      // using respond_to? and not an undefined check to avoid method_missing matching as true\n      else if (exception.$$is_class && exception['$respond_to?'](\"exception\")) {\n        exception = exception.$exception(string);\n      }\n      else if (exception['$is_a?']($$($nesting, 'Exception'))) {\n        // exception is fine\n      }\n      else {\n        exception = $$($nesting, 'TypeError').$new(\"exception class/object expected\");\n      }\n\n      if ($gvars[\"!\"] !== nil) {\n        Opal.exceptions.push($gvars[\"!\"]);\n      }\n\n      $gvars[\"!\"] = exception;\n\n      throw exception;\n    ;\n    }, $Kernel_raise$50.$$arity = -1);\n    Opal.alias(self, \"fail\", \"raise\");\n    \n    Opal.def(self, '$rand', $Kernel_rand$51 = function $$rand(max) {\n      var self = this;\n\n      \n      ;\n      \n      if (max === undefined) {\n        return $$$($$($nesting, 'Random'), 'DEFAULT').$rand();\n      }\n\n      if (max.$$is_number) {\n        if (max < 0) {\n          max = Math.abs(max);\n        }\n\n        if (max % 1 !== 0) {\n          max = max.$to_i();\n        }\n\n        if (max === 0) {\n          max = undefined;\n        }\n      }\n    ;\n      return $$$($$($nesting, 'Random'), 'DEFAULT').$rand(max);\n    }, $Kernel_rand$51.$$arity = -1);\n    \n    Opal.def(self, '$respond_to?', $Kernel_respond_to$ques$52 = function(name, include_all) {\n      var self = this;\n\n      \n      \n      if (include_all == null) {\n        include_all = false;\n      };\n      if ($truthy(self['$respond_to_missing?'](name, include_all))) {\n        return true};\n      \n      var body = self['$' + name];\n\n      if (typeof(body) === \"function\" && !body.$$stub) {\n        return true;\n      }\n    ;\n      return false;\n    }, $Kernel_respond_to$ques$52.$$arity = -2);\n    \n    Opal.def(self, '$respond_to_missing?', $Kernel_respond_to_missing$ques$53 = function(method_name, include_all) {\n      var self = this;\n\n      \n      \n      if (include_all == null) {\n        include_all = false;\n      };\n      return false;\n    }, $Kernel_respond_to_missing$ques$53.$$arity = -2);\n    \n    Opal.def(self, '$require', $Kernel_require$54 = function $$require(file) {\n      var self = this;\n\n      \n      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), \"to_str\");\n      return Opal.require(file);\n    }, $Kernel_require$54.$$arity = 1);\n    \n    Opal.def(self, '$require_relative', $Kernel_require_relative$55 = function $$require_relative(file) {\n      var self = this;\n\n      \n      $$($nesting, 'Opal')['$try_convert!'](file, $$($nesting, 'String'), \"to_str\");\n      file = $$($nesting, 'File').$expand_path($$($nesting, 'File').$join(Opal.current_file, \"..\", file));\n      return Opal.require(file);\n    }, $Kernel_require_relative$55.$$arity = 1);\n    \n    Opal.def(self, '$require_tree', $Kernel_require_tree$56 = function $$require_tree(path) {\n      var self = this;\n\n      \n      var result = [];\n\n      path = $$($nesting, 'File').$expand_path(path)\n      path = Opal.normalize(path);\n      if (path === '.') path = '';\n      for (var name in Opal.modules) {\n        if ((name)['$start_with?'](path)) {\n          result.push([name, Opal.require(name)]);\n        }\n      }\n\n      return result;\n    \n    }, $Kernel_require_tree$56.$$arity = 1);\n    Opal.alias(self, \"send\", \"__send__\");\n    Opal.alias(self, \"public_send\", \"__send__\");\n    \n    Opal.def(self, '$singleton_class', $Kernel_singleton_class$57 = function $$singleton_class() {\n      var self = this;\n\n      return Opal.get_singleton_class(self);\n    }, $Kernel_singleton_class$57.$$arity = 0);\n    \n    Opal.def(self, '$sleep', $Kernel_sleep$58 = function $$sleep(seconds) {\n      var self = this;\n\n      \n      \n      if (seconds == null) {\n        seconds = nil;\n      };\n      \n      if (seconds === nil) {\n        self.$raise($$($nesting, 'TypeError'), \"can't convert NilClass into time interval\")\n      }\n      if (!seconds.$$is_number) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't convert \" + (seconds.$class()) + \" into time interval\")\n      }\n      if (seconds < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"time interval must be positive\")\n      }\n      var get_time = Opal.global.performance ?\n        function() {return performance.now()} :\n        function() {return new Date()}\n\n      var t = get_time();\n      while (get_time() - t <= seconds * 1000);\n      return seconds;\n    ;\n    }, $Kernel_sleep$58.$$arity = -1);\n    \n    Opal.def(self, '$srand', $Kernel_srand$59 = function $$srand(seed) {\n      var self = this;\n\n      \n      \n      if (seed == null) {\n        seed = $$($nesting, 'Random').$new_seed();\n      };\n      return $$($nesting, 'Random').$srand(seed);\n    }, $Kernel_srand$59.$$arity = -1);\n    \n    Opal.def(self, '$String', $Kernel_String$60 = function $$String(str) {\n      var $a, self = this;\n\n      return ($truthy($a = $$($nesting, 'Opal')['$coerce_to?'](str, $$($nesting, 'String'), \"to_str\")) ? $a : $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), \"to_s\"))\n    }, $Kernel_String$60.$$arity = 1);\n    \n    Opal.def(self, '$tap', $Kernel_tap$61 = function $$tap() {\n      var $iter = $Kernel_tap$61.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_tap$61.$$p = null;\n      \n      \n      if ($iter) $Kernel_tap$61.$$p = null;;\n      Opal.yield1(block, self);\n      return self;\n    }, $Kernel_tap$61.$$arity = 0);\n    \n    Opal.def(self, '$to_proc', $Kernel_to_proc$62 = function $$to_proc() {\n      var self = this;\n\n      return self\n    }, $Kernel_to_proc$62.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Kernel_to_s$63 = function $$to_s() {\n      var self = this;\n\n      return \"\" + \"#<\" + (self.$class()) + \":0x\" + (self.$__id__().$to_s(16)) + \">\"\n    }, $Kernel_to_s$63.$$arity = 0);\n    \n    Opal.def(self, '$catch', $Kernel_catch$64 = function(sym) {\n      var $iter = $Kernel_catch$64.$$p, $yield = $iter || nil, self = this, e = nil;\n\n      if ($iter) $Kernel_catch$64.$$p = null;\n      try {\n        return Opal.yieldX($yield, []);\n      } catch ($err) {\n        if (Opal.rescue($err, [$$($nesting, 'UncaughtThrowError')])) {e = $err;\n          try {\n            \n            if (e.$sym()['$=='](sym)) {\n              return e.$arg()};\n            return self.$raise();\n          } finally { Opal.pop_exception() }\n        } else { throw $err; }\n      }\n    }, $Kernel_catch$64.$$arity = 1);\n    \n    Opal.def(self, '$throw', $Kernel_throw$65 = function($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return self.$raise($$($nesting, 'UncaughtThrowError'), args);\n    }, $Kernel_throw$65.$$arity = -1);\n    \n    Opal.def(self, '$open', $Kernel_open$66 = function $$open($a) {\n      var $iter = $Kernel_open$66.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Kernel_open$66.$$p = null;\n      \n      \n      if ($iter) $Kernel_open$66.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send($$($nesting, 'File'), 'open', Opal.to_a(args), block.$to_proc());\n    }, $Kernel_open$66.$$arity = -1);\n    \n    Opal.def(self, '$yield_self', $Kernel_yield_self$67 = function $$yield_self() {\n      var $$68, $iter = $Kernel_yield_self$67.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Kernel_yield_self$67.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"yield_self\"], ($$68 = function(){var self = $$68.$$s || this;\n\n        return 1}, $$68.$$s = self, $$68.$$arity = 0, $$68))\n      };\n      return Opal.yield1($yield, self);;\n    }, $Kernel_yield_self$67.$$arity = 0);\n  })($nesting[0], $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Object');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return self.$include($$($nesting, 'Kernel'))\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/error\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $module = Opal.module, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$raise', '$+', '$attr_reader', '$[]', '$>', '$length', '$inspect']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Exception');\n\n    var $nesting = [self].concat($parent_nesting), $Exception_new$1, $Exception_exception$2, $Exception_initialize$3, $Exception_backtrace$4, $Exception_exception$5, $Exception_message$6, $Exception_inspect$7, $Exception_set_backtrace$8, $Exception_to_s$9;\n\n    self.$$prototype.message = nil;\n    \n    var stack_trace_limit;\n    Opal.defs(self, '$new', $Exception_new$1 = function($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var message   = (args.length > 0) ? args[0] : nil;\n      var error     = new self.$$constructor(message);\n      error.name    = self.$$name;\n      error.message = message;\n      Opal.send(error, error.$initialize, args);\n\n      // Error.captureStackTrace() will use .name and .toString to build the\n      // first line of the stack trace so it must be called after the error\n      // has been initialized.\n      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html\n      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {\n        // Passing Kernel.raise will cut the stack trace from that point above\n        Error.captureStackTrace(error, stack_trace_limit);\n      }\n\n      return error;\n    ;\n    }, $Exception_new$1.$$arity = -1);\n    stack_trace_limit = self.$new;\n    Opal.defs(self, '$exception', $Exception_exception$2 = function $$exception($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send(self, 'new', Opal.to_a(args));\n    }, $Exception_exception$2.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $Exception_initialize$3 = function $$initialize($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return self.message = (args.length > 0) ? args[0] : nil;;\n    }, $Exception_initialize$3.$$arity = -1);\n    \n    Opal.def(self, '$backtrace', $Exception_backtrace$4 = function $$backtrace() {\n      var self = this;\n\n      \n      if (self.backtrace) {\n        // nil is a valid backtrace\n        return self.backtrace;\n      }\n\n      var backtrace = self.stack;\n\n      if (typeof(backtrace) === 'string') {\n        return backtrace.split(\"\\n\").slice(0, 15);\n      }\n      else if (backtrace) {\n        return backtrace.slice(0, 15);\n      }\n\n      return [];\n    \n    }, $Exception_backtrace$4.$$arity = 0);\n    \n    Opal.def(self, '$exception', $Exception_exception$5 = function $$exception(str) {\n      var self = this;\n\n      \n      \n      if (str == null) {\n        str = nil;\n      };\n      \n      if (str === nil || self === str) {\n        return self;\n      }\n\n      var cloned = self.$clone();\n      cloned.message = str;\n      return cloned;\n    ;\n    }, $Exception_exception$5.$$arity = -1);\n    \n    Opal.def(self, '$message', $Exception_message$6 = function $$message() {\n      var self = this;\n\n      return self.$to_s()\n    }, $Exception_message$6.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $Exception_inspect$7 = function $$inspect() {\n      var self = this, as_str = nil;\n\n      \n      as_str = self.$to_s();\n      if ($truthy(as_str['$empty?']())) {\n        return self.$class().$to_s()\n      } else {\n        return \"\" + \"#<\" + (self.$class().$to_s()) + \": \" + (self.$to_s()) + \">\"\n      };\n    }, $Exception_inspect$7.$$arity = 0);\n    \n    Opal.def(self, '$set_backtrace', $Exception_set_backtrace$8 = function $$set_backtrace(backtrace) {\n      var self = this;\n\n      \n      var valid = true, i, ii;\n\n      if (backtrace === nil) {\n        self.backtrace = nil;\n      } else if (backtrace.$$is_string) {\n        self.backtrace = [backtrace];\n      } else {\n        if (backtrace.$$is_array) {\n          for (i = 0, ii = backtrace.length; i < ii; i++) {\n            if (!backtrace[i].$$is_string) {\n              valid = false;\n              break;\n            }\n          }\n        } else {\n          valid = false;\n        }\n\n        if (valid === false) {\n          self.$raise($$($nesting, 'TypeError'), \"backtrace must be Array of String\")\n        }\n\n        self.backtrace = backtrace;\n      }\n\n      return backtrace;\n    \n    }, $Exception_set_backtrace$8.$$arity = 1);\n    return (Opal.def(self, '$to_s', $Exception_to_s$9 = function $$to_s() {\n      var $a, $b, self = this;\n\n      return ($truthy($a = ($truthy($b = self.message) ? self.message.$to_s() : $b)) ? $a : self.$class().$to_s())\n    }, $Exception_to_s$9.$$arity = 0), nil) && 'to_s';\n  })($nesting[0], Error, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'ScriptError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SyntaxError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'LoadError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NotImplementedError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SystemExit');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NoMemoryError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SignalException');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Interrupt');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SecurityError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StandardError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'EncodingError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'ZeroDivisionError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NameError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NoMethodError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'NameError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'RuntimeError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'FrozenError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'RuntimeError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'LocalJumpError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'TypeError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'ArgumentError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IndexError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StopIteration');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'IndexError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'KeyError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'IndexError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'RangeError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'FloatDomainError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'RangeError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IOError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SystemCallError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Errno');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'EINVAL');\n\n      var $nesting = [self].concat($parent_nesting), $EINVAL_new$10;\n\n      return (Opal.defs(self, '$new', $EINVAL_new$10 = function(name) {\n        var $iter = $EINVAL_new$10.$$p, $yield = $iter || nil, self = this, message = nil;\n\n        if ($iter) $EINVAL_new$10.$$p = null;\n        \n        \n        if (name == null) {\n          name = nil;\n        };\n        message = \"Invalid argument\";\n        if ($truthy(name)) {\n          message = $rb_plus(message, \"\" + \" - \" + (name))};\n        return $send(self, Opal.find_super_dispatcher(self, 'new', $EINVAL_new$10, false, self.$$class.$$prototype), [message], null);\n      }, $EINVAL_new$10.$$arity = -1), nil) && 'new'\n    })($nesting[0], $$($nesting, 'SystemCallError'), $nesting)\n  })($nesting[0], $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'UncaughtThrowError');\n\n    var $nesting = [self].concat($parent_nesting), $UncaughtThrowError_initialize$11;\n\n    self.$$prototype.sym = nil;\n    \n    self.$attr_reader(\"sym\", \"arg\");\n    return (Opal.def(self, '$initialize', $UncaughtThrowError_initialize$11 = function $$initialize(args) {\n      var $iter = $UncaughtThrowError_initialize$11.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $UncaughtThrowError_initialize$11.$$p = null;\n      \n      self.sym = args['$[]'](0);\n      if ($truthy($rb_gt(args.$length(), 1))) {\n        self.arg = args['$[]'](1)};\n      return $send(self, Opal.find_super_dispatcher(self, 'initialize', $UncaughtThrowError_initialize$11, false), [\"\" + \"uncaught throw \" + (self.sym.$inspect())], null);\n    }, $UncaughtThrowError_initialize$11.$$arity = 1), nil) && 'initialize';\n  })($nesting[0], $$($nesting, 'ArgumentError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NameError');\n\n    var $nesting = [self].concat($parent_nesting), $NameError_initialize$12;\n\n    \n    self.$attr_reader(\"name\");\n    return (Opal.def(self, '$initialize', $NameError_initialize$12 = function $$initialize(message, name) {\n      var $iter = $NameError_initialize$12.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $NameError_initialize$12.$$p = null;\n      \n      \n      if (name == null) {\n        name = nil;\n      };\n      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NameError_initialize$12, false), [message], null);\n      return (self.name = name);\n    }, $NameError_initialize$12.$$arity = -2), nil) && 'initialize';\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NoMethodError');\n\n    var $nesting = [self].concat($parent_nesting), $NoMethodError_initialize$13;\n\n    \n    self.$attr_reader(\"args\");\n    return (Opal.def(self, '$initialize', $NoMethodError_initialize$13 = function $$initialize(message, name, args) {\n      var $iter = $NoMethodError_initialize$13.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $NoMethodError_initialize$13.$$p = null;\n      \n      \n      if (name == null) {\n        name = nil;\n      };\n      \n      if (args == null) {\n        args = [];\n      };\n      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NoMethodError_initialize$13, false), [message, name], null);\n      return (self.args = args);\n    }, $NoMethodError_initialize$13.$$arity = -2), nil) && 'initialize';\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StopIteration');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return self.$attr_reader(\"result\")\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'KeyError');\n\n    var $nesting = [self].concat($parent_nesting), $KeyError_initialize$14, $KeyError_receiver$15, $KeyError_key$16;\n\n    self.$$prototype.receiver = self.$$prototype.key = nil;\n    \n    \n    Opal.def(self, '$initialize', $KeyError_initialize$14 = function $$initialize(message, $kwargs) {\n      var receiver, key, $iter = $KeyError_initialize$14.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $KeyError_initialize$14.$$p = null;\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      receiver = $kwargs.$$smap[\"receiver\"];\n      if (receiver == null) {\n        receiver = nil\n      };\n      \n      key = $kwargs.$$smap[\"key\"];\n      if (key == null) {\n        key = nil\n      };\n      $send(self, Opal.find_super_dispatcher(self, 'initialize', $KeyError_initialize$14, false), [message], null);\n      self.receiver = receiver;\n      return (self.key = key);\n    }, $KeyError_initialize$14.$$arity = -2);\n    \n    Opal.def(self, '$receiver', $KeyError_receiver$15 = function $$receiver() {\n      var $a, self = this;\n\n      return ($truthy($a = self.receiver) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"no receiver is available\"))\n    }, $KeyError_receiver$15.$$arity = 0);\n    return (Opal.def(self, '$key', $KeyError_key$16 = function $$key() {\n      var $a, self = this;\n\n      return ($truthy($a = self.key) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"no key is available\"))\n    }, $KeyError_key$16.$$arity = 0), nil) && 'key';\n  })($nesting[0], null, $nesting);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'JS');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Error');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      return nil\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/constants\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  \n  Opal.const_set($nesting[0], 'RUBY_PLATFORM', \"opal\");\n  Opal.const_set($nesting[0], 'RUBY_ENGINE', \"opal\");\n  Opal.const_set($nesting[0], 'RUBY_VERSION', \"2.5.1\");\n  Opal.const_set($nesting[0], 'RUBY_ENGINE_VERSION', \"0.11.99.dev\");\n  Opal.const_set($nesting[0], 'RUBY_RELEASE_DATE', \"2018-12-25\");\n  Opal.const_set($nesting[0], 'RUBY_PATCHLEVEL', 0);\n  Opal.const_set($nesting[0], 'RUBY_REVISION', 0);\n  Opal.const_set($nesting[0], 'RUBY_COPYRIGHT', \"opal - Copyright (C) 2013-2018 Adam Beynon and the Opal contributors\");\n  return Opal.const_set($nesting[0], 'RUBY_DESCRIPTION', \"\" + \"opal \" + ($$($nesting, 'RUBY_ENGINE_VERSION')) + \" (\" + ($$($nesting, 'RUBY_RELEASE_DATE')) + \" revision \" + ($$($nesting, 'RUBY_REVISION')) + \")\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"opal/base\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"corelib/runtime\");\n  self.$require(\"corelib/helpers\");\n  self.$require(\"corelib/module\");\n  self.$require(\"corelib/class\");\n  self.$require(\"corelib/basic_object\");\n  self.$require(\"corelib/kernel\");\n  self.$require(\"corelib/error\");\n  return self.$require(\"corelib/constants\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/nil\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$raise', '$name', '$new', '$>', '$length', '$Rational']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NilClass');\n\n    var $nesting = [self].concat($parent_nesting), $NilClass_$excl$2, $NilClass_$$3, $NilClass_$$4, $NilClass_$$5, $NilClass_$eq_eq$6, $NilClass_dup$7, $NilClass_clone$8, $NilClass_inspect$9, $NilClass_nil$ques$10, $NilClass_singleton_class$11, $NilClass_to_a$12, $NilClass_to_h$13, $NilClass_to_i$14, $NilClass_to_s$15, $NilClass_to_c$16, $NilClass_rationalize$17, $NilClass_to_r$18, $NilClass_instance_variables$19;\n\n    \n    self.$$prototype.$$meta = self;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$1.$$arity = 0);\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$!', $NilClass_$excl$2 = function() {\n      var self = this;\n\n      return true\n    }, $NilClass_$excl$2.$$arity = 0);\n    \n    Opal.def(self, '$&', $NilClass_$$3 = function(other) {\n      var self = this;\n\n      return false\n    }, $NilClass_$$3.$$arity = 1);\n    \n    Opal.def(self, '$|', $NilClass_$$4 = function(other) {\n      var self = this;\n\n      return other !== false && other !== nil;\n    }, $NilClass_$$4.$$arity = 1);\n    \n    Opal.def(self, '$^', $NilClass_$$5 = function(other) {\n      var self = this;\n\n      return other !== false && other !== nil;\n    }, $NilClass_$$5.$$arity = 1);\n    \n    Opal.def(self, '$==', $NilClass_$eq_eq$6 = function(other) {\n      var self = this;\n\n      return other === nil;\n    }, $NilClass_$eq_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$dup', $NilClass_dup$7 = function $$dup() {\n      var self = this;\n\n      return nil\n    }, $NilClass_dup$7.$$arity = 0);\n    \n    Opal.def(self, '$clone', $NilClass_clone$8 = function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      return nil;\n    }, $NilClass_clone$8.$$arity = -1);\n    \n    Opal.def(self, '$inspect', $NilClass_inspect$9 = function $$inspect() {\n      var self = this;\n\n      return \"nil\"\n    }, $NilClass_inspect$9.$$arity = 0);\n    \n    Opal.def(self, '$nil?', $NilClass_nil$ques$10 = function() {\n      var self = this;\n\n      return true\n    }, $NilClass_nil$ques$10.$$arity = 0);\n    \n    Opal.def(self, '$singleton_class', $NilClass_singleton_class$11 = function $$singleton_class() {\n      var self = this;\n\n      return $$($nesting, 'NilClass')\n    }, $NilClass_singleton_class$11.$$arity = 0);\n    \n    Opal.def(self, '$to_a', $NilClass_to_a$12 = function $$to_a() {\n      var self = this;\n\n      return []\n    }, $NilClass_to_a$12.$$arity = 0);\n    \n    Opal.def(self, '$to_h', $NilClass_to_h$13 = function $$to_h() {\n      var self = this;\n\n      return Opal.hash();\n    }, $NilClass_to_h$13.$$arity = 0);\n    \n    Opal.def(self, '$to_i', $NilClass_to_i$14 = function $$to_i() {\n      var self = this;\n\n      return 0\n    }, $NilClass_to_i$14.$$arity = 0);\n    Opal.alias(self, \"to_f\", \"to_i\");\n    \n    Opal.def(self, '$to_s', $NilClass_to_s$15 = function $$to_s() {\n      var self = this;\n\n      return \"\"\n    }, $NilClass_to_s$15.$$arity = 0);\n    \n    Opal.def(self, '$to_c', $NilClass_to_c$16 = function $$to_c() {\n      var self = this;\n\n      return $$($nesting, 'Complex').$new(0, 0)\n    }, $NilClass_to_c$16.$$arity = 0);\n    \n    Opal.def(self, '$rationalize', $NilClass_rationalize$17 = function $$rationalize($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy($rb_gt(args.$length(), 1))) {\n        self.$raise($$($nesting, 'ArgumentError'))};\n      return self.$Rational(0, 1);\n    }, $NilClass_rationalize$17.$$arity = -1);\n    \n    Opal.def(self, '$to_r', $NilClass_to_r$18 = function $$to_r() {\n      var self = this;\n\n      return self.$Rational(0, 1)\n    }, $NilClass_to_r$18.$$arity = 0);\n    return (Opal.def(self, '$instance_variables', $NilClass_instance_variables$19 = function $$instance_variables() {\n      var self = this;\n\n      return []\n    }, $NilClass_instance_variables$19.$$arity = 0), nil) && 'instance_variables';\n  })($nesting[0], null, $nesting);\n  return Opal.const_set($nesting[0], 'NIL', nil);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/boolean\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$raise', '$name']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Boolean');\n\n    var $nesting = [self].concat($parent_nesting), $Boolean___id__$2, $Boolean_$excl$3, $Boolean_$$4, $Boolean_$$5, $Boolean_$$6, $Boolean_$eq_eq$7, $Boolean_singleton_class$8, $Boolean_to_s$9, $Boolean_dup$10, $Boolean_clone$11;\n\n    \n    Opal.defineProperty(self.$$prototype, '$$is_boolean', true);\n    Opal.defineProperty(self.$$prototype, '$$meta', self);\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$1.$$arity = 0);\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$__id__', $Boolean___id__$2 = function $$__id__() {\n      var self = this;\n\n      return self.valueOf() ? 2 : 0;\n    }, $Boolean___id__$2.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    \n    Opal.def(self, '$!', $Boolean_$excl$3 = function() {\n      var self = this;\n\n      return self != true;\n    }, $Boolean_$excl$3.$$arity = 0);\n    \n    Opal.def(self, '$&', $Boolean_$$4 = function(other) {\n      var self = this;\n\n      return (self == true) ? (other !== false && other !== nil) : false;\n    }, $Boolean_$$4.$$arity = 1);\n    \n    Opal.def(self, '$|', $Boolean_$$5 = function(other) {\n      var self = this;\n\n      return (self == true) ? true : (other !== false && other !== nil);\n    }, $Boolean_$$5.$$arity = 1);\n    \n    Opal.def(self, '$^', $Boolean_$$6 = function(other) {\n      var self = this;\n\n      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);\n    }, $Boolean_$$6.$$arity = 1);\n    \n    Opal.def(self, '$==', $Boolean_$eq_eq$7 = function(other) {\n      var self = this;\n\n      return (self == true) === other.valueOf();\n    }, $Boolean_$eq_eq$7.$$arity = 1);\n    Opal.alias(self, \"equal?\", \"==\");\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$singleton_class', $Boolean_singleton_class$8 = function $$singleton_class() {\n      var self = this;\n\n      return $$($nesting, 'Boolean')\n    }, $Boolean_singleton_class$8.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Boolean_to_s$9 = function $$to_s() {\n      var self = this;\n\n      return (self == true) ? 'true' : 'false';\n    }, $Boolean_to_s$9.$$arity = 0);\n    \n    Opal.def(self, '$dup', $Boolean_dup$10 = function $$dup() {\n      var self = this;\n\n      return self\n    }, $Boolean_dup$10.$$arity = 0);\n    return (Opal.def(self, '$clone', $Boolean_clone$11 = function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      return self;\n    }, $Boolean_clone$11.$$arity = -1), nil) && 'clone';\n  })($nesting[0], Boolean, $nesting);\n  Opal.const_set($nesting[0], 'TrueClass', $$($nesting, 'Boolean'));\n  Opal.const_set($nesting[0], 'FalseClass', $$($nesting, 'Boolean'));\n  Opal.const_set($nesting[0], 'TRUE', true);\n  return Opal.const_set($nesting[0], 'FALSE', false);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/comparable\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Comparable');\n\n    var $nesting = [self].concat($parent_nesting), $Comparable_normalize$1, $Comparable_$eq_eq$2, $Comparable_$gt$3, $Comparable_$gt_eq$4, $Comparable_$lt$5, $Comparable_$lt_eq$6, $Comparable_between$ques$7, $Comparable_clamp$8;\n\n    \n    Opal.defs(self, '$normalize', $Comparable_normalize$1 = function $$normalize(what) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](what))) {\n        return what};\n      if ($truthy($rb_gt(what, 0))) {\n        return 1};\n      if ($truthy($rb_lt(what, 0))) {\n        return -1};\n      return 0;\n    }, $Comparable_normalize$1.$$arity = 1);\n    \n    Opal.def(self, '$==', $Comparable_$eq_eq$2 = function(other) {\n      var self = this, cmp = nil;\n\n      try {\n        \n        if ($truthy(self['$equal?'](other))) {\n          return true};\n        \n      if (self[\"$<=>\"] == Opal.Kernel[\"$<=>\"]) {\n        return false;\n      }\n\n      // check for infinite recursion\n      if (self.$$comparable) {\n        delete self.$$comparable;\n        return false;\n      }\n    ;\n        if ($truthy((cmp = self['$<=>'](other)))) {\n        } else {\n          return false\n        };\n        return $$($nesting, 'Comparable').$normalize(cmp) == 0;\n      } catch ($err) {\n        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n          try {\n            return false\n          } finally { Opal.pop_exception() }\n        } else { throw $err; }\n      }\n    }, $Comparable_$eq_eq$2.$$arity = 1);\n    \n    Opal.def(self, '$>', $Comparable_$gt$3 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) > 0;\n    }, $Comparable_$gt$3.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Comparable_$gt_eq$4 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) >= 0;\n    }, $Comparable_$gt_eq$4.$$arity = 1);\n    \n    Opal.def(self, '$<', $Comparable_$lt$5 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) < 0;\n    }, $Comparable_$lt$5.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Comparable_$lt_eq$6 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) <= 0;\n    }, $Comparable_$lt_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$between?', $Comparable_between$ques$7 = function(min, max) {\n      var self = this;\n\n      \n      if ($rb_lt(self, min)) {\n        return false};\n      if ($rb_gt(self, max)) {\n        return false};\n      return true;\n    }, $Comparable_between$ques$7.$$arity = 2);\n    \n    Opal.def(self, '$clamp', $Comparable_clamp$8 = function $$clamp(min, max) {\n      var self = this, cmp = nil;\n\n      \n      cmp = min['$<=>'](max);\n      if ($truthy(cmp)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (min.$class()) + \" with \" + (max.$class()) + \" failed\")\n      };\n      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(cmp), 0))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"min argument must be smaller than max argument\")};\n      if ($truthy($rb_lt($$($nesting, 'Comparable').$normalize(self['$<=>'](min)), 0))) {\n        return min};\n      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(self['$<=>'](max)), 0))) {\n        return max};\n      return self;\n    }, $Comparable_clamp$8.$$arity = 2);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/regexp\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'RegexpError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Regexp');\n\n    var $nesting = [self].concat($parent_nesting), $Regexp_$eq_eq$6, $Regexp_$eq_eq_eq$7, $Regexp_$eq_tilde$8, $Regexp_inspect$9, $Regexp_match$10, $Regexp_match$ques$11, $Regexp_$$12, $Regexp_source$13, $Regexp_options$14, $Regexp_casefold$ques$15;\n\n    \n    Opal.const_set($nesting[0], 'IGNORECASE', 1);\n    Opal.const_set($nesting[0], 'EXTENDED', 2);\n    Opal.const_set($nesting[0], 'MULTILINE', 4);\n    Opal.defineProperty(self.$$prototype, '$$is_regexp', true);\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1, $escape$2, $last_match$3, $union$4, $new$5;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var $iter = $allocate$1.$$p, $yield = $iter || nil, self = this, allocated = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $allocate$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        allocated = $send(self, Opal.find_super_dispatcher(self, 'allocate', $allocate$1, false), $zuper, $iter);\n        allocated.uninitialized = true;\n        return allocated;\n      }, $allocate$1.$$arity = 0);\n      \n      Opal.def(self, '$escape', $escape$2 = function $$escape(string) {\n        var self = this;\n\n        return Opal.escape_regexp(string);\n      }, $escape$2.$$arity = 1);\n      \n      Opal.def(self, '$last_match', $last_match$3 = function $$last_match(n) {\n        var self = this;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        \n        if (n == null) {\n          n = nil;\n        };\n        if ($truthy(n['$nil?']())) {\n          return $gvars[\"~\"]\n        } else {\n          return $gvars[\"~\"]['$[]'](n)\n        };\n      }, $last_match$3.$$arity = -1);\n      Opal.alias(self, \"quote\", \"escape\");\n      \n      Opal.def(self, '$union', $union$4 = function $$union($a) {\n        var $post_args, parts, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        parts = $post_args;;\n        \n        var is_first_part_array, quoted_validated, part, options, each_part_options;\n        if (parts.length == 0) {\n          return /(?!)/;\n        }\n        // return fast if there's only one element\n        if (parts.length == 1 && parts[0].$$is_regexp) {\n          return parts[0];\n        }\n        // cover the 2 arrays passed as arguments case\n        is_first_part_array = parts[0].$$is_array;\n        if (parts.length > 1 && is_first_part_array) {\n          self.$raise($$($nesting, 'TypeError'), \"no implicit conversion of Array into String\")\n        }\n        // deal with splat issues (related to https://github.com/opal/opal/issues/858)\n        if (is_first_part_array) {\n          parts = parts[0];\n        }\n        options = undefined;\n        quoted_validated = [];\n        for (var i=0; i < parts.length; i++) {\n          part = parts[i];\n          if (part.$$is_string) {\n            quoted_validated.push(self.$escape(part));\n          }\n          else if (part.$$is_regexp) {\n            each_part_options = (part).$options();\n            if (options != undefined && options != each_part_options) {\n              self.$raise($$($nesting, 'TypeError'), \"All expressions must use the same options\")\n            }\n            options = each_part_options;\n            quoted_validated.push('('+part.source+')');\n          }\n          else {\n            quoted_validated.push(self.$escape((part).$to_str()));\n          }\n        }\n      ;\n        return self.$new((quoted_validated).$join(\"|\"), options);\n      }, $union$4.$$arity = -1);\n      return (Opal.def(self, '$new', $new$5 = function(regexp, options) {\n        var self = this;\n\n        \n        ;\n        \n        if (regexp.$$is_regexp) {\n          return new RegExp(regexp);\n        }\n\n        regexp = $$($nesting, 'Opal')['$coerce_to!'](regexp, $$($nesting, 'String'), \"to_str\");\n\n        if (regexp.charAt(regexp.length - 1) === '\\\\' && regexp.charAt(regexp.length - 2) !== '\\\\') {\n          self.$raise($$($nesting, 'RegexpError'), \"\" + \"too short escape sequence: /\" + (regexp) + \"/\")\n        }\n\n        if (options === undefined || options['$!']()) {\n          return new RegExp(regexp);\n        }\n\n        if (options.$$is_number) {\n          var temp = '';\n          if ($$($nesting, 'IGNORECASE') & options) { temp += 'i'; }\n          if ($$($nesting, 'MULTILINE')  & options) { temp += 'm'; }\n          options = temp;\n        }\n        else {\n          options = 'i';\n        }\n\n        return new RegExp(regexp, options);\n      ;\n      }, $new$5.$$arity = -2), nil) && 'new';\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$==', $Regexp_$eq_eq$6 = function(other) {\n      var self = this;\n\n      return other instanceof RegExp && self.toString() === other.toString();\n    }, $Regexp_$eq_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$===', $Regexp_$eq_eq_eq$7 = function(string) {\n      var self = this;\n\n      return self.$match($$($nesting, 'Opal')['$coerce_to?'](string, $$($nesting, 'String'), \"to_str\")) !== nil\n    }, $Regexp_$eq_eq_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$=~', $Regexp_$eq_tilde$8 = function(string) {\n      var $a, self = this;\n      if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n      return ($truthy($a = self.$match(string)) ? $gvars[\"~\"].$begin(0) : $a)\n    }, $Regexp_$eq_tilde$8.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$inspect', $Regexp_inspect$9 = function $$inspect() {\n      var self = this;\n\n      \n      var regexp_format = /^\\/(.*)\\/([^\\/]*)$/;\n      var value = self.toString();\n      var matches = regexp_format.exec(value);\n      if (matches) {\n        var regexp_pattern = matches[1];\n        var regexp_flags = matches[2];\n        var chars = regexp_pattern.split('');\n        var chars_length = chars.length;\n        var char_escaped = false;\n        var regexp_pattern_escaped = '';\n        for (var i = 0; i < chars_length; i++) {\n          var current_char = chars[i];\n          if (!char_escaped && current_char == '/') {\n            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\\\');\n          }\n          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);\n          if (current_char == '\\\\') {\n            if (char_escaped) {\n              // does not over escape\n              char_escaped = false;\n            } else {\n              char_escaped = true;\n            }\n          } else {\n            char_escaped = false;\n          }\n        }\n        return '/' + regexp_pattern_escaped + '/' + regexp_flags;\n      } else {\n        return value;\n      }\n    \n    }, $Regexp_inspect$9.$$arity = 0);\n    \n    Opal.def(self, '$match', $Regexp_match$10 = function $$match(string, pos) {\n      var $iter = $Regexp_match$10.$$p, block = $iter || nil, self = this;\n      if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n      if ($iter) $Regexp_match$10.$$p = null;\n      \n      \n      if ($iter) $Regexp_match$10.$$p = null;;\n      ;\n      \n      if (self.uninitialized) {\n        self.$raise($$($nesting, 'TypeError'), \"uninitialized Regexp\")\n      }\n\n      if (pos === undefined) {\n        if (string === nil) return ($gvars[\"~\"] = nil);\n        var m = self.exec($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\"));\n        if (m) {\n          ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(self, m));\n          return block === nil ? $gvars[\"~\"] : Opal.yield1(block, $gvars[\"~\"]);\n        } else {\n          return ($gvars[\"~\"] = nil);\n        }\n      }\n\n      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), \"to_int\");\n\n      if (string === nil) {\n        return ($gvars[\"~\"] = nil);\n      }\n\n      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\");\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return ($gvars[\"~\"] = nil);\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      while (true) {\n        md = re.exec(string);\n        if (md === null) {\n          return ($gvars[\"~\"] = nil);\n        }\n        if (md.index >= pos) {\n          ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(re, md));\n          return block === nil ? $gvars[\"~\"] : Opal.yield1(block, $gvars[\"~\"]);\n        }\n        re.lastIndex = md.index + 1;\n      }\n    ;\n    }, $Regexp_match$10.$$arity = -2);\n    \n    Opal.def(self, '$match?', $Regexp_match$ques$11 = function(string, pos) {\n      var self = this;\n\n      \n      ;\n      \n      if (self.uninitialized) {\n        self.$raise($$($nesting, 'TypeError'), \"uninitialized Regexp\")\n      }\n\n      if (pos === undefined) {\n        return string === nil ? false : self.test($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\"));\n      }\n\n      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), \"to_int\");\n\n      if (string === nil) {\n        return false;\n      }\n\n      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\");\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return false;\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      md = re.exec(string);\n      if (md === null || md.index < pos) {\n        return false;\n      } else {\n        return true;\n      }\n    ;\n    }, $Regexp_match$ques$11.$$arity = -2);\n    \n    Opal.def(self, '$~', $Regexp_$$12 = function() {\n      var self = this;\n      if ($gvars._ == null) $gvars._ = nil;\n\n      return self['$=~']($gvars._)\n    }, $Regexp_$$12.$$arity = 0);\n    \n    Opal.def(self, '$source', $Regexp_source$13 = function $$source() {\n      var self = this;\n\n      return self.source;\n    }, $Regexp_source$13.$$arity = 0);\n    \n    Opal.def(self, '$options', $Regexp_options$14 = function $$options() {\n      var self = this;\n\n      \n      if (self.uninitialized) {\n        self.$raise($$($nesting, 'TypeError'), \"uninitialized Regexp\")\n      }\n      var result = 0;\n      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx\n      if (self.multiline) {\n        result |= $$($nesting, 'MULTILINE');\n      }\n      if (self.ignoreCase) {\n        result |= $$($nesting, 'IGNORECASE');\n      }\n      return result;\n    \n    }, $Regexp_options$14.$$arity = 0);\n    \n    Opal.def(self, '$casefold?', $Regexp_casefold$ques$15 = function() {\n      var self = this;\n\n      return self.ignoreCase;\n    }, $Regexp_casefold$ques$15.$$arity = 0);\n    return Opal.alias(self, \"to_s\", \"source\");\n  })($nesting[0], RegExp, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'MatchData');\n\n    var $nesting = [self].concat($parent_nesting), $MatchData_initialize$16, $MatchData_$$$17, $MatchData_offset$18, $MatchData_$eq_eq$19, $MatchData_begin$20, $MatchData_end$21, $MatchData_captures$22, $MatchData_inspect$23, $MatchData_length$24, $MatchData_to_a$25, $MatchData_to_s$26, $MatchData_values_at$27;\n\n    self.$$prototype.matches = nil;\n    \n    self.$attr_reader(\"post_match\", \"pre_match\", \"regexp\", \"string\");\n    \n    Opal.def(self, '$initialize', $MatchData_initialize$16 = function $$initialize(regexp, match_groups) {\n      var self = this;\n\n      \n      $gvars[\"~\"] = self;\n      self.regexp = regexp;\n      self.begin = match_groups.index;\n      self.string = match_groups.input;\n      self.pre_match = match_groups.input.slice(0, match_groups.index);\n      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);\n      self.matches = [];\n      \n      for (var i = 0, length = match_groups.length; i < length; i++) {\n        var group = match_groups[i];\n\n        if (group == null) {\n          self.matches.push(nil);\n        }\n        else {\n          self.matches.push(group);\n        }\n      }\n    ;\n    }, $MatchData_initialize$16.$$arity = 2);\n    \n    Opal.def(self, '$[]', $MatchData_$$$17 = function($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send(self.matches, '[]', Opal.to_a(args));\n    }, $MatchData_$$$17.$$arity = -1);\n    \n    Opal.def(self, '$offset', $MatchData_offset$18 = function $$offset(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"MatchData#offset only supports 0th element\")\n      }\n      return [self.begin, self.begin + self.matches[n].length];\n    \n    }, $MatchData_offset$18.$$arity = 1);\n    \n    Opal.def(self, '$==', $MatchData_$eq_eq$19 = function(other) {\n      var $a, $b, $c, $d, self = this;\n\n      \n      if ($truthy($$($nesting, 'MatchData')['$==='](other))) {\n      } else {\n        return false\n      };\n      return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.string == other.string) ? self.regexp.toString() == other.regexp.toString() : $d)) ? self.pre_match == other.pre_match : $c)) ? self.post_match == other.post_match : $b)) ? self.begin == other.begin : $a);\n    }, $MatchData_$eq_eq$19.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$begin', $MatchData_begin$20 = function $$begin(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"MatchData#begin only supports 0th element\")\n      }\n      return self.begin;\n    \n    }, $MatchData_begin$20.$$arity = 1);\n    \n    Opal.def(self, '$end', $MatchData_end$21 = function $$end(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"MatchData#end only supports 0th element\")\n      }\n      return self.begin + self.matches[n].length;\n    \n    }, $MatchData_end$21.$$arity = 1);\n    \n    Opal.def(self, '$captures', $MatchData_captures$22 = function $$captures() {\n      var self = this;\n\n      return self.matches.slice(1)\n    }, $MatchData_captures$22.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $MatchData_inspect$23 = function $$inspect() {\n      var self = this;\n\n      \n      var str = \"#<MatchData \" + (self.matches[0]).$inspect();\n\n      for (var i = 1, length = self.matches.length; i < length; i++) {\n        str += \" \" + i + \":\" + (self.matches[i]).$inspect();\n      }\n\n      return str + \">\";\n    \n    }, $MatchData_inspect$23.$$arity = 0);\n    \n    Opal.def(self, '$length', $MatchData_length$24 = function $$length() {\n      var self = this;\n\n      return self.matches.length\n    }, $MatchData_length$24.$$arity = 0);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$to_a', $MatchData_to_a$25 = function $$to_a() {\n      var self = this;\n\n      return self.matches\n    }, $MatchData_to_a$25.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $MatchData_to_s$26 = function $$to_s() {\n      var self = this;\n\n      return self.matches[0]\n    }, $MatchData_to_s$26.$$arity = 0);\n    return (Opal.def(self, '$values_at', $MatchData_values_at$27 = function $$values_at($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var i, a, index, values = [];\n\n      for (i = 0; i < args.length; i++) {\n\n        if (args[i].$$is_range) {\n          a = (args[i]).$to_a();\n          a.unshift(i, 1);\n          Array.prototype.splice.apply(args, a);\n        }\n\n        index = $$($nesting, 'Opal')['$coerce_to!'](args[i], $$($nesting, 'Integer'), \"to_int\");\n\n        if (index < 0) {\n          index += self.matches.length;\n          if (index < 0) {\n            values.push(nil);\n            continue;\n          }\n        }\n\n        values.push(self.matches[index]);\n      }\n\n      return values;\n    ;\n    }, $MatchData_values_at$27.$$arity = -1), nil) && 'values_at';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/string\"] = function(Opal) {\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$force_encoding', '$casecmp', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$match?', '$captures', '$proc', '$succ', '$escape']);\n  \n  self.$require(\"corelib/comparable\");\n  self.$require(\"corelib/regexp\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String___id__$1, $String_try_convert$2, $String_new$3, $String_initialize$4, $String_$percent$5, $String_$$6, $String_$plus$7, $String_$lt_eq_gt$8, $String_$eq_eq$9, $String_$eq_tilde$10, $String_$$$11, $String_b$12, $String_capitalize$13, $String_casecmp$14, $String_casecmp$ques$15, $String_center$16, $String_chars$17, $String_chomp$18, $String_chop$19, $String_chr$20, $String_clone$21, $String_dup$22, $String_count$23, $String_delete$24, $String_delete_prefix$25, $String_delete_suffix$26, $String_downcase$27, $String_each_char$28, $String_each_line$30, $String_empty$ques$31, $String_end_with$ques$32, $String_gsub$33, $String_hash$34, $String_hex$35, $String_include$ques$36, $String_index$37, $String_inspect$38, $String_intern$39, $String_lines$40, $String_length$41, $String_ljust$42, $String_lstrip$43, $String_ascii_only$ques$44, $String_match$45, $String_match$ques$46, $String_next$47, $String_oct$48, $String_ord$49, $String_partition$50, $String_reverse$51, $String_rindex$52, $String_rjust$53, $String_rpartition$54, $String_rstrip$55, $String_scan$56, $String_split$57, $String_squeeze$58, $String_start_with$ques$59, $String_strip$60, $String_sub$61, $String_sum$62, $String_swapcase$63, $String_to_f$64, $String_to_i$65, $String_to_proc$66, $String_to_s$68, $String_tr$69, $String_tr_s$70, $String_upcase$71, $String_upto$72, $String_instance_variables$73, $String__load$74, $String_unicode_normalize$75, $String_unicode_normalized$ques$76, $String_unpack$77, $String_unpack1$78;\n\n    \n    self.$include($$($nesting, 'Comparable'));\n    \n    Opal.defineProperty(self.$$prototype, '$$is_string', true);\n\n    Opal.defineProperty(self.$$prototype, '$$cast', function(string) {\n      var klass = this.$$class;\n      if (klass.$$constructor === String) {\n        return string;\n      } else {\n        return new klass.$$constructor(string);\n      }\n    });\n  ;\n    \n    Opal.def(self, '$__id__', $String___id__$1 = function $$__id__() {\n      var self = this;\n\n      return self.toString();\n    }, $String___id__$1.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    Opal.defs(self, '$try_convert', $String_try_convert$2 = function $$try_convert(what) {\n      var self = this;\n\n      return $$($nesting, 'Opal')['$coerce_to?'](what, $$($nesting, 'String'), \"to_str\")\n    }, $String_try_convert$2.$$arity = 1);\n    Opal.defs(self, '$new', $String_new$3 = function(str) {\n      var self = this;\n\n      \n      \n      if (str == null) {\n        str = \"\";\n      };\n      str = $$($nesting, 'Opal').$coerce_to(str, $$($nesting, 'String'), \"to_str\");\n      return new self.$$constructor(str);;\n    }, $String_new$3.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $String_initialize$4 = function $$initialize(str) {\n      var self = this;\n\n      \n      ;\n      \n      if (str === undefined) {\n        return self;\n      }\n    ;\n      return self.$raise($$($nesting, 'NotImplementedError'), \"Mutable strings are not supported in Opal.\");\n    }, $String_initialize$4.$$arity = -1);\n    \n    Opal.def(self, '$%', $String_$percent$5 = function(data) {\n      var self = this;\n\n      if ($truthy($$($nesting, 'Array')['$==='](data))) {\n        return $send(self, 'format', [self].concat(Opal.to_a(data)))\n      } else {\n        return self.$format(self, data)\n      }\n    }, $String_$percent$5.$$arity = 1);\n    \n    Opal.def(self, '$*', $String_$$6 = function(count) {\n      var self = this;\n\n      \n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n\n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative argument\")\n      }\n\n      if (count === 0) {\n        return self.$$cast('');\n      }\n\n      var result = '',\n          string = self.toString();\n\n      // All credit for the bit-twiddling magic code below goes to Mozilla\n      // polyfill implementation of String.prototype.repeat() posted here:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n\n      if (string.length * count >= 1 << 28) {\n        self.$raise($$($nesting, 'RangeError'), \"multiply count must not overflow maximum string size\")\n      }\n\n      for (;;) {\n        if ((count & 1) === 1) {\n          result += string;\n        }\n        count >>>= 1;\n        if (count === 0) {\n          break;\n        }\n        string += string;\n      }\n\n      return self.$$cast(result);\n    \n    }, $String_$$6.$$arity = 1);\n    \n    Opal.def(self, '$+', $String_$plus$7 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), \"to_str\");\n      return self + other.$to_s();\n    }, $String_$plus$7.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $String_$lt_eq_gt$8 = function(other) {\n      var self = this;\n\n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n        \n        other = other.$to_str().$to_s();\n        return self > other ? 1 : (self < other ? -1 : 0);;\n      } else {\n        \n        var cmp = other['$<=>'](self);\n\n        if (cmp === nil) {\n          return nil;\n        }\n        else {\n          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);\n        }\n      \n      }\n    }, $String_$lt_eq_gt$8.$$arity = 1);\n    \n    Opal.def(self, '$==', $String_$eq_eq$9 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_string) {\n        return self.toString() === other.toString();\n      }\n      if ($$($nesting, 'Opal')['$respond_to?'](other, \"to_str\")) {\n        return other['$=='](self);\n      }\n      return false;\n    \n    }, $String_$eq_eq$9.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    Opal.alias(self, \"===\", \"==\");\n    \n    Opal.def(self, '$=~', $String_$eq_tilde$10 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_string) {\n        self.$raise($$($nesting, 'TypeError'), \"type mismatch: String given\");\n      }\n\n      return other['$=~'](self);\n    \n    }, $String_$eq_tilde$10.$$arity = 1);\n    \n    Opal.def(self, '$[]', $String_$$$11 = function(index, length) {\n      var self = this;\n\n      \n      ;\n      \n      var size = self.length, exclude;\n\n      if (index.$$is_range) {\n        exclude = index.excl;\n        length  = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), \"to_int\");\n        index   = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), \"to_int\");\n\n        if (Math.abs(index) > size) {\n          return nil;\n        }\n\n        if (index < 0) {\n          index += size;\n        }\n\n        if (length < 0) {\n          length += size;\n        }\n\n        if (!exclude) {\n          length += 1;\n        }\n\n        length = length - index;\n\n        if (length < 0) {\n          length = 0;\n        }\n\n        return self.$$cast(self.substr(index, length));\n      }\n\n\n      if (index.$$is_string) {\n        if (length != null) {\n          self.$raise($$($nesting, 'TypeError'))\n        }\n        return self.indexOf(index) !== -1 ? self.$$cast(index) : nil;\n      }\n\n\n      if (index.$$is_regexp) {\n        var match = self.match(index);\n\n        if (match === null) {\n          ($gvars[\"~\"] = nil)\n          return nil;\n        }\n\n        ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(index, match))\n\n        if (length == null) {\n          return self.$$cast(match[0]);\n        }\n\n        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n\n        if (length < 0 && -length < match.length) {\n          return self.$$cast(match[length += match.length]);\n        }\n\n        if (length >= 0 && length < match.length) {\n          return self.$$cast(match[length]);\n        }\n\n        return nil;\n      }\n\n\n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (index < 0) {\n        index += size;\n      }\n\n      if (length == null) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n        return self.$$cast(self.substr(index, 1));\n      }\n\n      length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n\n      if (length < 0) {\n        return nil;\n      }\n\n      if (index > size || index < 0) {\n        return nil;\n      }\n\n      return self.$$cast(self.substr(index, length));\n    ;\n    }, $String_$$$11.$$arity = -2);\n    Opal.alias(self, \"byteslice\", \"[]\");\n    \n    Opal.def(self, '$b', $String_b$12 = function $$b() {\n      var self = this;\n\n      return self.$force_encoding(\"binary\")\n    }, $String_b$12.$$arity = 0);\n    \n    Opal.def(self, '$capitalize', $String_capitalize$13 = function $$capitalize() {\n      var self = this;\n\n      return self.$$cast(self.charAt(0).toUpperCase() + self.substr(1).toLowerCase());\n    }, $String_capitalize$13.$$arity = 0);\n    \n    Opal.def(self, '$casecmp', $String_casecmp$14 = function $$casecmp(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n      } else {\n        return nil\n      };\n      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      var ascii_only = /^[\\x00-\\x7F]*$/;\n      if (ascii_only.test(self) && ascii_only.test(other)) {\n        self = self.toLowerCase();\n        other = other.toLowerCase();\n      }\n    ;\n      return self['$<=>'](other);\n    }, $String_casecmp$14.$$arity = 1);\n    \n    Opal.def(self, '$casecmp?', $String_casecmp$ques$15 = function(other) {\n      var self = this;\n\n      \n      var cmp = self.$casecmp(other);\n      if (cmp === nil) {\n        return nil;\n      } else {\n        return cmp === 0;\n      }\n    \n    }, $String_casecmp$ques$15.$$arity = 1);\n    \n    Opal.def(self, '$center', $String_center$16 = function $$center(width, padstr) {\n      var self = this;\n\n      \n      \n      if (padstr == null) {\n        padstr = \" \";\n      };\n      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), \"to_int\");\n      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), \"to_str\").$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        self.$raise($$($nesting, 'ArgumentError'), \"zero width padding\")};\n      if ($truthy(width <= self.length)) {\n        return self};\n      \n      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),\n          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);\n\n      return self.$$cast(rjustified + ljustified.slice(self.length));\n    ;\n    }, $String_center$16.$$arity = -2);\n    \n    Opal.def(self, '$chars', $String_chars$17 = function $$chars() {\n      var $iter = $String_chars$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_chars$17.$$p = null;\n      \n      \n      if ($iter) $String_chars$17.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return self.$each_char().$to_a()\n      };\n      return $send(self, 'each_char', [], block.$to_proc());\n    }, $String_chars$17.$$arity = 0);\n    \n    Opal.def(self, '$chomp', $String_chomp$18 = function $$chomp(separator) {\n      var self = this;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      \n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      if ($truthy(separator === nil || self.length === 0)) {\n        return self};\n      separator = $$($nesting, 'Opal')['$coerce_to!'](separator, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      var result;\n\n      if (separator === \"\\n\") {\n        result = self.replace(/\\r?\\n?$/, '');\n      }\n      else if (separator === \"\") {\n        result = self.replace(/(\\r?\\n)+$/, '');\n      }\n      else if (self.length >= separator.length) {\n        var tail = self.substr(self.length - separator.length, separator.length);\n\n        if (tail === separator) {\n          result = self.substr(0, self.length - separator.length);\n        }\n      }\n\n      if (result != null) {\n        return self.$$cast(result);\n      }\n    ;\n      return self;\n    }, $String_chomp$18.$$arity = -1);\n    \n    Opal.def(self, '$chop', $String_chop$19 = function $$chop() {\n      var self = this;\n\n      \n      var length = self.length, result;\n\n      if (length <= 1) {\n        result = \"\";\n      } else if (self.charAt(length - 1) === \"\\n\" && self.charAt(length - 2) === \"\\r\") {\n        result = self.substr(0, length - 2);\n      } else {\n        result = self.substr(0, length - 1);\n      }\n\n      return self.$$cast(result);\n    \n    }, $String_chop$19.$$arity = 0);\n    \n    Opal.def(self, '$chr', $String_chr$20 = function $$chr() {\n      var self = this;\n\n      return self.charAt(0);\n    }, $String_chr$20.$$arity = 0);\n    \n    Opal.def(self, '$clone', $String_clone$21 = function $$clone() {\n      var self = this, copy = nil;\n\n      \n      copy = self.slice();\n      copy.$copy_singleton_methods(self);\n      copy.$initialize_clone(self);\n      return copy;\n    }, $String_clone$21.$$arity = 0);\n    \n    Opal.def(self, '$dup', $String_dup$22 = function $$dup() {\n      var self = this, copy = nil;\n\n      \n      copy = self.slice();\n      copy.$initialize_dup(self);\n      return copy;\n    }, $String_dup$22.$$arity = 0);\n    \n    Opal.def(self, '$count', $String_count$23 = function $$count($a) {\n      var $post_args, sets, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      sets = $post_args;;\n      \n      if (sets.length === 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"ArgumentError: wrong number of arguments (0 for 1+)\")\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return 0;\n      }\n      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;\n    ;\n    }, $String_count$23.$$arity = -1);\n    \n    Opal.def(self, '$delete', $String_delete$24 = function($a) {\n      var $post_args, sets, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      sets = $post_args;;\n      \n      if (sets.length === 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"ArgumentError: wrong number of arguments (0 for 1+)\")\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.$$cast(self.replace(new RegExp(char_class, 'g'), ''));\n    ;\n    }, $String_delete$24.$$arity = -1);\n    \n    Opal.def(self, '$delete_prefix', $String_delete_prefix$25 = function $$delete_prefix(prefix) {\n      var self = this;\n\n      \n      if (!prefix.$$is_string) {\n        (prefix = $$($nesting, 'Opal').$coerce_to(prefix, $$($nesting, 'String'), \"to_str\"))\n      }\n\n      if (self.slice(0, prefix.length) === prefix) {\n        return self.$$cast(self.slice(prefix.length));\n      } else {\n        return self;\n      }\n    \n    }, $String_delete_prefix$25.$$arity = 1);\n    \n    Opal.def(self, '$delete_suffix', $String_delete_suffix$26 = function $$delete_suffix(suffix) {\n      var self = this;\n\n      \n      if (!suffix.$$is_string) {\n        (suffix = $$($nesting, 'Opal').$coerce_to(suffix, $$($nesting, 'String'), \"to_str\"))\n      }\n\n      if (self.slice(self.length - suffix.length) === suffix) {\n        return self.$$cast(self.slice(0, self.length - suffix.length));\n      } else {\n        return self;\n      }\n    \n    }, $String_delete_suffix$26.$$arity = 1);\n    \n    Opal.def(self, '$downcase', $String_downcase$27 = function $$downcase() {\n      var self = this;\n\n      return self.$$cast(self.toLowerCase());\n    }, $String_downcase$27.$$arity = 0);\n    \n    Opal.def(self, '$each_char', $String_each_char$28 = function $$each_char() {\n      var $iter = $String_each_char$28.$$p, block = $iter || nil, $$29, self = this;\n\n      if ($iter) $String_each_char$28.$$p = null;\n      \n      \n      if ($iter) $String_each_char$28.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_char\"], ($$29 = function(){var self = $$29.$$s || this;\n\n        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        Opal.yield1(block, self.charAt(i));\n      }\n    ;\n      return self;\n    }, $String_each_char$28.$$arity = 0);\n    \n    Opal.def(self, '$each_line', $String_each_line$30 = function $$each_line(separator) {\n      var $iter = $String_each_line$30.$$p, block = $iter || nil, self = this;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      if ($iter) $String_each_line$30.$$p = null;\n      \n      \n      if ($iter) $String_each_line$30.$$p = null;;\n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each_line\", separator)\n      };\n      \n      if (separator === nil) {\n        Opal.yield1(block, self);\n\n        return self;\n      }\n\n      separator = $$($nesting, 'Opal').$coerce_to(separator, $$($nesting, 'String'), \"to_str\")\n\n      var a, i, n, length, chomped, trailing, splitted;\n\n      if (separator.length === 0) {\n        for (a = self.split(/(\\n{2,})/), i = 0, n = a.length; i < n; i += 2) {\n          if (a[i] || a[i + 1]) {\n            var value = (a[i] || \"\") + (a[i + 1] || \"\");\n            Opal.yield1(block, self.$$cast(value));\n          }\n        }\n\n        return self;\n      }\n\n      chomped  = self.$chomp(separator);\n      trailing = self.length != chomped.length;\n      splitted = chomped.split(separator);\n\n      for (i = 0, length = splitted.length; i < length; i++) {\n        if (i < length - 1 || trailing) {\n          Opal.yield1(block, self.$$cast(splitted[i] + separator));\n        }\n        else {\n          Opal.yield1(block, self.$$cast(splitted[i]));\n        }\n      }\n    ;\n      return self;\n    }, $String_each_line$30.$$arity = -1);\n    \n    Opal.def(self, '$empty?', $String_empty$ques$31 = function() {\n      var self = this;\n\n      return self.length === 0;\n    }, $String_empty$ques$31.$$arity = 0);\n    \n    Opal.def(self, '$end_with?', $String_end_with$ques$32 = function($a) {\n      var $post_args, suffixes, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      suffixes = $post_args;;\n      \n      for (var i = 0, length = suffixes.length; i < length; i++) {\n        var suffix = $$($nesting, 'Opal').$coerce_to(suffixes[i], $$($nesting, 'String'), \"to_str\").$to_s();\n\n        if (self.length >= suffix.length &&\n            self.substr(self.length - suffix.length, suffix.length) == suffix) {\n          return true;\n        }\n      }\n    ;\n      return false;\n    }, $String_end_with$ques$32.$$arity = -1);\n    Opal.alias(self, \"equal?\", \"===\");\n    \n    Opal.def(self, '$gsub', $String_gsub$33 = function $$gsub(pattern, replacement) {\n      var $iter = $String_gsub$33.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_gsub$33.$$p = null;\n      \n      \n      if ($iter) $String_gsub$33.$$p = null;;\n      ;\n      \n      if (replacement === undefined && block === nil) {\n        return self.$enum_for(\"gsub\", pattern);\n      }\n\n      var result = '', match_data = nil, index = 0, match, _replacement;\n\n      if (pattern.$$is_regexp) {\n        pattern = Opal.global_multiline_regexp(pattern);\n      } else {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\");\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      var lastIndex;\n      while (true) {\n        match = pattern.exec(self);\n\n        if (match === null) {\n          ($gvars[\"~\"] = nil)\n          result += self.slice(index);\n          break;\n        }\n\n        match_data = $$($nesting, 'MatchData').$new(pattern, match);\n\n        if (replacement === undefined) {\n          lastIndex = pattern.lastIndex;\n          _replacement = block(match[0]);\n          pattern.lastIndex = lastIndex; // save and restore lastIndex\n        }\n        else if (replacement.$$is_hash) {\n          _replacement = (replacement)['$[]'](match[0]).$to_s();\n        }\n        else {\n          if (!replacement.$$is_string) {\n            replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), \"to_str\");\n          }\n          _replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n        }\n\n        if (pattern.lastIndex === match.index) {\n          result += (_replacement + self.slice(index, match.index + 1))\n          pattern.lastIndex += 1;\n        }\n        else {\n          result += (self.slice(index, match.index) + _replacement)\n        }\n        index = pattern.lastIndex;\n      }\n\n      ($gvars[\"~\"] = match_data)\n      return self.$$cast(result);\n    ;\n    }, $String_gsub$33.$$arity = -2);\n    \n    Opal.def(self, '$hash', $String_hash$34 = function $$hash() {\n      var self = this;\n\n      return self.toString();\n    }, $String_hash$34.$$arity = 0);\n    \n    Opal.def(self, '$hex', $String_hex$35 = function $$hex() {\n      var self = this;\n\n      return self.$to_i(16)\n    }, $String_hex$35.$$arity = 0);\n    \n    Opal.def(self, '$include?', $String_include$ques$36 = function(other) {\n      var self = this;\n\n      \n      if (!other.$$is_string) {\n        (other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), \"to_str\"))\n      }\n      return self.indexOf(other) !== -1;\n    \n    }, $String_include$ques$36.$$arity = 1);\n    \n    Opal.def(self, '$index', $String_index$37 = function $$index(search, offset) {\n      var self = this;\n\n      \n      ;\n      \n      var index,\n          match,\n          regex;\n\n      if (offset === undefined) {\n        offset = 0;\n      } else {\n        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), \"to_int\");\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        regex = Opal.global_multiline_regexp(search);\n        while (true) {\n          match = regex.exec(self);\n          if (match === null) {\n            ($gvars[\"~\"] = nil);\n            index = -1;\n            break;\n          }\n          if (match.index >= offset) {\n            ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(regex, match))\n            index = match.index;\n            break;\n          }\n          regex.lastIndex = match.index + 1;\n        }\n      } else {\n        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), \"to_str\");\n        if (search.length === 0 && offset > self.length) {\n          index = -1;\n        } else {\n          index = self.indexOf(search, offset);\n        }\n      }\n\n      return index === -1 ? nil : index;\n    ;\n    }, $String_index$37.$$arity = -2);\n    \n    Opal.def(self, '$inspect', $String_inspect$38 = function $$inspect() {\n      var self = this;\n\n      \n      var escapable = /[\\\\\\\"\\x00-\\x1f\\u007F-\\u009F\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n          meta = {\n            '\\u0007': '\\\\a',\n            '\\u001b': '\\\\e',\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\\v': '\\\\v',\n            '\"' : '\\\\\"',\n            '\\\\': '\\\\\\\\'\n          },\n          escaped = self.replace(escapable, function (chr) {\n            return meta[chr] || '\\\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);\n          });\n      return '\"' + escaped.replace(/\\#[\\$\\@\\{]/g, '\\\\$&') + '\"';\n    \n    }, $String_inspect$38.$$arity = 0);\n    \n    Opal.def(self, '$intern', $String_intern$39 = function $$intern() {\n      var self = this;\n\n      return self.toString();\n    }, $String_intern$39.$$arity = 0);\n    \n    Opal.def(self, '$lines', $String_lines$40 = function $$lines(separator) {\n      var $iter = $String_lines$40.$$p, block = $iter || nil, self = this, e = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      if ($iter) $String_lines$40.$$p = null;\n      \n      \n      if ($iter) $String_lines$40.$$p = null;;\n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      e = $send(self, 'each_line', [separator], block.$to_proc());\n      if ($truthy(block)) {\n        return self\n      } else {\n        return e.$to_a()\n      };\n    }, $String_lines$40.$$arity = -1);\n    \n    Opal.def(self, '$length', $String_length$41 = function $$length() {\n      var self = this;\n\n      return self.length;\n    }, $String_length$41.$$arity = 0);\n    \n    Opal.def(self, '$ljust', $String_ljust$42 = function $$ljust(width, padstr) {\n      var self = this;\n\n      \n      \n      if (padstr == null) {\n        padstr = \" \";\n      };\n      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), \"to_int\");\n      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), \"to_str\").$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        self.$raise($$($nesting, 'ArgumentError'), \"zero width padding\")};\n      if ($truthy(width <= self.length)) {\n        return self};\n      \n      var index  = -1,\n          result = \"\";\n\n      width -= self.length;\n\n      while (++index < width) {\n        result += padstr;\n      }\n\n      return self.$$cast(self + result.slice(0, width));\n    ;\n    }, $String_ljust$42.$$arity = -2);\n    \n    Opal.def(self, '$lstrip', $String_lstrip$43 = function $$lstrip() {\n      var self = this;\n\n      return self.replace(/^\\s*/, '');\n    }, $String_lstrip$43.$$arity = 0);\n    \n    Opal.def(self, '$ascii_only?', $String_ascii_only$ques$44 = function() {\n      var self = this;\n\n      return self.match(/[ -~\\n]*/)[0] === self;\n    }, $String_ascii_only$ques$44.$$arity = 0);\n    \n    Opal.def(self, '$match', $String_match$45 = function $$match(pattern, pos) {\n      var $iter = $String_match$45.$$p, block = $iter || nil, $a, self = this;\n\n      if ($iter) $String_match$45.$$p = null;\n      \n      \n      if ($iter) $String_match$45.$$p = null;;\n      ;\n      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?'](\"to_str\")))) {\n        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};\n      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (pattern.$class()) + \" (expected Regexp)\")\n      };\n      return $send(pattern, 'match', [self, pos], block.$to_proc());\n    }, $String_match$45.$$arity = -2);\n    \n    Opal.def(self, '$match?', $String_match$ques$46 = function(pattern, pos) {\n      var $a, self = this;\n\n      \n      ;\n      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?'](\"to_str\")))) {\n        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};\n      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (pattern.$class()) + \" (expected Regexp)\")\n      };\n      return pattern['$match?'](self, pos);\n    }, $String_match$ques$46.$$arity = -2);\n    \n    Opal.def(self, '$next', $String_next$47 = function $$next() {\n      var self = this;\n\n      \n      var i = self.length;\n      if (i === 0) {\n        return self.$$cast('');\n      }\n      var result = self;\n      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);\n      var carry = false;\n      var code;\n      while (i--) {\n        code = self.charCodeAt(i);\n        if ((code >= 48 && code <= 57) ||\n          (code >= 65 && code <= 90) ||\n          (code >= 97 && code <= 122)) {\n          switch (code) {\n          case 57:\n            carry = true;\n            code = 48;\n            break;\n          case 90:\n            carry = true;\n            code = 65;\n            break;\n          case 122:\n            carry = true;\n            code = 97;\n            break;\n          default:\n            carry = false;\n            code += 1;\n          }\n        } else {\n          if (first_alphanum_char_index === -1) {\n            if (code === 255) {\n              carry = true;\n              code = 0;\n            } else {\n              carry = false;\n              code += 1;\n            }\n          } else {\n            carry = true;\n          }\n        }\n        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);\n        if (carry && (i === 0 || i === first_alphanum_char_index)) {\n          switch (code) {\n          case 65:\n            break;\n          case 97:\n            break;\n          default:\n            code += 1;\n          }\n          if (i === 0) {\n            result = String.fromCharCode(code) + result;\n          } else {\n            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);\n          }\n          carry = false;\n        }\n        if (!carry) {\n          break;\n        }\n      }\n      return self.$$cast(result);\n    \n    }, $String_next$47.$$arity = 0);\n    \n    Opal.def(self, '$oct', $String_oct$48 = function $$oct() {\n      var self = this;\n\n      \n      var result,\n          string = self,\n          radix = 8;\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x') {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          radix = 2;\n          break;\n        case '0':\n        case '0o':\n          radix = 8;\n          break;\n        case '0d':\n          radix = 10;\n          break;\n        case '0x':\n          radix = 16;\n          break;\n        }\n        return head + tail;\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    \n    }, $String_oct$48.$$arity = 0);\n    \n    Opal.def(self, '$ord', $String_ord$49 = function $$ord() {\n      var self = this;\n\n      return self.charCodeAt(0);\n    }, $String_ord$49.$$arity = 0);\n    \n    Opal.def(self, '$partition', $String_partition$50 = function $$partition(sep) {\n      var self = this;\n\n      \n      var i, m;\n\n      if (sep.$$is_regexp) {\n        m = sep.exec(self);\n        if (m === null) {\n          i = -1;\n        } else {\n          $$($nesting, 'MatchData').$new(sep, m);\n          sep = m[0];\n          i = m.index;\n        }\n      } else {\n        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), \"to_str\");\n        i = self.indexOf(sep);\n      }\n\n      if (i === -1) {\n        return [self, '', ''];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    \n    }, $String_partition$50.$$arity = 1);\n    \n    Opal.def(self, '$reverse', $String_reverse$51 = function $$reverse() {\n      var self = this;\n\n      return self.split('').reverse().join('');\n    }, $String_reverse$51.$$arity = 0);\n    \n    Opal.def(self, '$rindex', $String_rindex$52 = function $$rindex(search, offset) {\n      var self = this;\n\n      \n      ;\n      \n      var i, m, r, _m;\n\n      if (offset === undefined) {\n        offset = self.length;\n      } else {\n        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), \"to_int\");\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        m = null;\n        r = Opal.global_multiline_regexp(search);\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null || _m.index > offset) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n        if (m === null) {\n          ($gvars[\"~\"] = nil)\n          i = -1;\n        } else {\n          $$($nesting, 'MatchData').$new(r, m);\n          i = m.index;\n        }\n      } else {\n        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), \"to_str\");\n        i = self.lastIndexOf(search, offset);\n      }\n\n      return i === -1 ? nil : i;\n    ;\n    }, $String_rindex$52.$$arity = -2);\n    \n    Opal.def(self, '$rjust', $String_rjust$53 = function $$rjust(width, padstr) {\n      var self = this;\n\n      \n      \n      if (padstr == null) {\n        padstr = \" \";\n      };\n      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), \"to_int\");\n      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), \"to_str\").$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        self.$raise($$($nesting, 'ArgumentError'), \"zero width padding\")};\n      if ($truthy(width <= self.length)) {\n        return self};\n      \n      var chars     = Math.floor(width - self.length),\n          patterns  = Math.floor(chars / padstr.length),\n          result    = Array(patterns + 1).join(padstr),\n          remaining = chars - result.length;\n\n      return self.$$cast(result + padstr.slice(0, remaining) + self);\n    ;\n    }, $String_rjust$53.$$arity = -2);\n    \n    Opal.def(self, '$rpartition', $String_rpartition$54 = function $$rpartition(sep) {\n      var self = this;\n\n      \n      var i, m, r, _m;\n\n      if (sep.$$is_regexp) {\n        m = null;\n        r = Opal.global_multiline_regexp(sep);\n\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n\n        if (m === null) {\n          i = -1;\n        } else {\n          $$($nesting, 'MatchData').$new(r, m);\n          sep = m[0];\n          i = m.index;\n        }\n\n      } else {\n        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), \"to_str\");\n        i = self.lastIndexOf(sep);\n      }\n\n      if (i === -1) {\n        return ['', '', self];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    \n    }, $String_rpartition$54.$$arity = 1);\n    \n    Opal.def(self, '$rstrip', $String_rstrip$55 = function $$rstrip() {\n      var self = this;\n\n      return self.replace(/[\\s\\u0000]*$/, '');\n    }, $String_rstrip$55.$$arity = 0);\n    \n    Opal.def(self, '$scan', $String_scan$56 = function $$scan(pattern) {\n      var $iter = $String_scan$56.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_scan$56.$$p = null;\n      \n      \n      if ($iter) $String_scan$56.$$p = null;;\n      \n      var result = [],\n          match_data = nil,\n          match;\n\n      if (pattern.$$is_regexp) {\n        pattern = Opal.global_multiline_regexp(pattern);\n      } else {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\");\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      while ((match = pattern.exec(self)) != null) {\n        match_data = $$($nesting, 'MatchData').$new(pattern, match);\n        if (block === nil) {\n          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());\n        } else {\n          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());\n        }\n        if (pattern.lastIndex === match.index) {\n          pattern.lastIndex += 1;\n        }\n      }\n\n      ($gvars[\"~\"] = match_data)\n\n      return (block !== nil ? self : result);\n    ;\n    }, $String_scan$56.$$arity = 1);\n    Opal.alias(self, \"size\", \"length\");\n    Opal.alias(self, \"slice\", \"[]\");\n    \n    Opal.def(self, '$split', $String_split$57 = function $$split(pattern, limit) {\n      var $a, self = this;\n      if ($gvars[\";\"] == null) $gvars[\";\"] = nil;\n\n      \n      ;\n      ;\n      \n      if (self.length === 0) {\n        return [];\n      }\n\n      if (limit === undefined) {\n        limit = 0;\n      } else {\n        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), \"to_int\");\n        if (limit === 1) {\n          return [self];\n        }\n      }\n\n      if (pattern === undefined || pattern === nil) {\n        pattern = ($truthy($a = $gvars[\";\"]) ? $a : \" \");\n      }\n\n      var result = [],\n          string = self.toString(),\n          index = 0,\n          match,\n          i, ii;\n\n      if (pattern.$$is_regexp) {\n        pattern = Opal.global_multiline_regexp(pattern);\n      } else {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\").$to_s();\n        if (pattern === ' ') {\n          pattern = /\\s+/gm;\n          string = string.replace(/^\\s+/, '');\n        } else {\n          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n        }\n      }\n\n      result = string.split(pattern);\n\n      if (result.length === 1 && result[0] === string) {\n        return [self.$$cast(result[0])];\n      }\n\n      while ((i = result.indexOf(undefined)) !== -1) {\n        result.splice(i, 1);\n      }\n\n      function castResult() {\n        for (i = 0; i < result.length; i++) {\n          result[i] = self.$$cast(result[i]);\n        }\n      }\n\n      if (limit === 0) {\n        while (result[result.length - 1] === '') {\n          result.length -= 1;\n        }\n        castResult();\n        return result;\n      }\n\n      match = pattern.exec(string);\n\n      if (limit < 0) {\n        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {\n          for (i = 0, ii = match.length; i < ii; i++) {\n            result.push('');\n          }\n        }\n        castResult();\n        return result;\n      }\n\n      if (match !== null && match[0] === '') {\n        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));\n        castResult();\n        return result;\n      }\n\n      if (limit >= result.length) {\n        castResult();\n        return result;\n      }\n\n      i = 0;\n      while (match !== null) {\n        i++;\n        index = pattern.lastIndex;\n        if (i + 1 === limit) {\n          break;\n        }\n        match = pattern.exec(string);\n      }\n      result.splice(limit - 1, result.length - 1, string.slice(index));\n      castResult();\n      return result;\n    ;\n    }, $String_split$57.$$arity = -1);\n    \n    Opal.def(self, '$squeeze', $String_squeeze$58 = function $$squeeze($a) {\n      var $post_args, sets, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      sets = $post_args;;\n      \n      if (sets.length === 0) {\n        return self.$$cast(self.replace(/(.)\\1+/g, '$1'));\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.$$cast(self.replace(new RegExp('(' + char_class + ')\\\\1+', 'g'), '$1'));\n    ;\n    }, $String_squeeze$58.$$arity = -1);\n    \n    Opal.def(self, '$start_with?', $String_start_with$ques$59 = function($a) {\n      var $post_args, prefixes, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      prefixes = $post_args;;\n      \n      for (var i = 0, length = prefixes.length; i < length; i++) {\n        var prefix = $$($nesting, 'Opal').$coerce_to(prefixes[i], $$($nesting, 'String'), \"to_str\").$to_s();\n\n        if (self.indexOf(prefix) === 0) {\n          return true;\n        }\n      }\n\n      return false;\n    ;\n    }, $String_start_with$ques$59.$$arity = -1);\n    \n    Opal.def(self, '$strip', $String_strip$60 = function $$strip() {\n      var self = this;\n\n      return self.replace(/^\\s*/, '').replace(/[\\s\\u0000]*$/, '');\n    }, $String_strip$60.$$arity = 0);\n    \n    Opal.def(self, '$sub', $String_sub$61 = function $$sub(pattern, replacement) {\n      var $iter = $String_sub$61.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_sub$61.$$p = null;\n      \n      \n      if ($iter) $String_sub$61.$$p = null;;\n      ;\n      \n      if (!pattern.$$is_regexp) {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\");\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n      }\n\n      var result, match = pattern.exec(self);\n\n      if (match === null) {\n        ($gvars[\"~\"] = nil)\n        result = self.toString();\n      } else {\n        $$($nesting, 'MatchData').$new(pattern, match)\n\n        if (replacement === undefined) {\n\n          if (block === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (1 for 2)\")\n          }\n          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);\n\n        } else if (replacement.$$is_hash) {\n\n          result = self.slice(0, match.index) + (replacement)['$[]'](match[0]).$to_s() + self.slice(match.index + match[0].length);\n\n        } else {\n\n          replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), \"to_str\");\n\n          replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n\n          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);\n        }\n      }\n\n      return self.$$cast(result);\n    ;\n    }, $String_sub$61.$$arity = -2);\n    Opal.alias(self, \"succ\", \"next\");\n    \n    Opal.def(self, '$sum', $String_sum$62 = function $$sum(n) {\n      var self = this;\n\n      \n      \n      if (n == null) {\n        n = 16;\n      };\n      \n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n\n      var result = 0,\n          length = self.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        result += self.charCodeAt(i);\n      }\n\n      if (n <= 0) {\n        return result;\n      }\n\n      return result & (Math.pow(2, n) - 1);\n    ;\n    }, $String_sum$62.$$arity = -1);\n    \n    Opal.def(self, '$swapcase', $String_swapcase$63 = function $$swapcase() {\n      var self = this;\n\n      \n      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {\n        return $1 ? $0.toUpperCase() : $0.toLowerCase();\n      });\n\n      if (self.constructor === String) {\n        return str;\n      }\n\n      return self.$class().$new(str);\n    \n    }, $String_swapcase$63.$$arity = 0);\n    \n    Opal.def(self, '$to_f', $String_to_f$64 = function $$to_f() {\n      var self = this;\n\n      \n      if (self.charAt(0) === '_') {\n        return 0;\n      }\n\n      var result = parseFloat(self.replace(/_/g, ''));\n\n      if (isNaN(result) || result == Infinity || result == -Infinity) {\n        return 0;\n      }\n      else {\n        return result;\n      }\n    \n    }, $String_to_f$64.$$arity = 0);\n    \n    Opal.def(self, '$to_i', $String_to_i$65 = function $$to_i(base) {\n      var self = this;\n\n      \n      \n      if (base == null) {\n        base = 10;\n      };\n      \n      var result,\n          string = self.toLowerCase(),\n          radix = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), \"to_int\");\n\n      if (radix === 1 || radix < 0 || radix > 36) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (radix))\n      }\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          if (radix === 0 || radix === 2) {\n            radix = 2;\n            return head + tail;\n          }\n          break;\n        case '0':\n        case '0o':\n          if (radix === 0 || radix === 8) {\n            radix = 8;\n            return head + tail;\n          }\n          break;\n        case '0d':\n          if (radix === 0 || radix === 10) {\n            radix = 10;\n            return head + tail;\n          }\n          break;\n        case '0x':\n          if (radix === 0 || radix === 16) {\n            radix = 16;\n            return head + tail;\n          }\n          break;\n        }\n        return original\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    ;\n    }, $String_to_i$65.$$arity = -1);\n    \n    Opal.def(self, '$to_proc', $String_to_proc$66 = function $$to_proc() {\n      var $$67, $iter = $String_to_proc$66.$$p, $yield = $iter || nil, self = this, method_name = nil;\n\n      if ($iter) $String_to_proc$66.$$p = null;\n      \n      method_name = $rb_plus(\"$\", self.valueOf());\n      return $send(self, 'proc', [], ($$67 = function($a){var self = $$67.$$s || this, $iter = $$67.$$p, block = $iter || nil, $post_args, args;\n\n      \n        \n        if ($iter) $$67.$$p = null;;\n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        \n        if (args.length === 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"no receiver given\")\n        }\n\n        var recv = args[0];\n\n        if (recv == null) recv = nil;\n\n        var body = recv[method_name];\n\n        if (!body) {\n          return recv.$method_missing.apply(recv, args);\n        }\n\n        if (typeof block === 'function') {\n          body.$$p = block;\n        }\n\n        if (args.length === 1) {\n          return body.call(recv);\n        } else {\n          return body.apply(recv, args.slice(1));\n        }\n      ;}, $$67.$$s = self, $$67.$$arity = -1, $$67));\n    }, $String_to_proc$66.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $String_to_s$68 = function $$to_s() {\n      var self = this;\n\n      return self.toString();\n    }, $String_to_s$68.$$arity = 0);\n    Opal.alias(self, \"to_str\", \"to_s\");\n    Opal.alias(self, \"to_sym\", \"intern\");\n    \n    Opal.def(self, '$tr', $String_tr$69 = function $$tr(from, to) {\n      var self = this;\n\n      \n      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), \"to_str\").$to_s();\n      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      if (from.length == 0 || from === to) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_to == null) {\n              last_to = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_to.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_to = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n\n      var new_str = ''\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch];\n        if (inverse) {\n          new_str += (sub == null ? global_sub : ch);\n        }\n        else {\n          new_str += (sub != null ? sub : ch);\n        }\n      }\n      return self.$$cast(new_str);\n    ;\n    }, $String_tr$69.$$arity = 2);\n    \n    Opal.def(self, '$tr_s', $String_tr_s$70 = function $$tr_s(from, to) {\n      var self = this;\n\n      \n      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), \"to_str\").$to_s();\n      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      if (from.length == 0) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_from == null) {\n              last_from = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_from.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_from = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n      var new_str = ''\n      var last_substitute = null\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch]\n        if (inverse) {\n          if (sub == null) {\n            if (last_substitute == null) {\n              new_str += global_sub;\n              last_substitute = true;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n        else {\n          if (sub != null) {\n            if (last_substitute == null || last_substitute !== sub) {\n              new_str += sub;\n              last_substitute = sub;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n      }\n      return self.$$cast(new_str);\n    ;\n    }, $String_tr_s$70.$$arity = 2);\n    \n    Opal.def(self, '$upcase', $String_upcase$71 = function $$upcase() {\n      var self = this;\n\n      return self.$$cast(self.toUpperCase());\n    }, $String_upcase$71.$$arity = 0);\n    \n    Opal.def(self, '$upto', $String_upto$72 = function $$upto(stop, excl) {\n      var $iter = $String_upto$72.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_upto$72.$$p = null;\n      \n      \n      if ($iter) $String_upto$72.$$p = null;;\n      \n      if (excl == null) {\n        excl = false;\n      };\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"upto\", stop, excl)\n      };\n      stop = $$($nesting, 'Opal').$coerce_to(stop, $$($nesting, 'String'), \"to_str\");\n      \n      var a, b, s = self.toString();\n\n      if (s.length === 1 && stop.length === 1) {\n\n        a = s.charCodeAt(0);\n        b = stop.charCodeAt(0);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(String.fromCharCode(a));\n\n          a += 1;\n        }\n\n      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {\n\n        a = parseInt(s, 10);\n        b = parseInt(stop, 10);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(a.toString());\n\n          a += 1;\n        }\n\n      } else {\n\n        while (s.length <= stop.length && s <= stop) {\n          if (excl && s === stop) {\n            break;\n          }\n\n          block(s);\n\n          s = (s).$succ();\n        }\n\n      }\n      return self;\n    ;\n    }, $String_upto$72.$$arity = -2);\n    \n    function char_class_from_char_sets(sets) {\n      function explode_sequences_in_character_set(set) {\n        var result = '',\n            i, len = set.length,\n            curr_char,\n            skip_next_dash,\n            char_code_from,\n            char_code_upto,\n            char_code;\n        for (i = 0; i < len; i++) {\n          curr_char = set.charAt(i);\n          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {\n            char_code_from = set.charCodeAt(i - 1);\n            char_code_upto = set.charCodeAt(i + 1);\n            if (char_code_from > char_code_upto) {\n              self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (char_code_from) + \"-\" + (char_code_upto) + \"\\\" in string transliteration\")\n            }\n            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {\n              result += String.fromCharCode(char_code);\n            }\n            skip_next_dash = true;\n            i++;\n          } else {\n            skip_next_dash = (curr_char === '\\\\');\n            result += curr_char;\n          }\n        }\n        return result;\n      }\n\n      function intersection(setA, setB) {\n        if (setA.length === 0) {\n          return setB;\n        }\n        var result = '',\n            i, len = setA.length,\n            chr;\n        for (i = 0; i < len; i++) {\n          chr = setA.charAt(i);\n          if (setB.indexOf(chr) !== -1) {\n            result += chr;\n          }\n        }\n        return result;\n      }\n\n      var i, len, set, neg, chr, tmp,\n          pos_intersection = '',\n          neg_intersection = '';\n\n      for (i = 0, len = sets.length; i < len; i++) {\n        set = $$($nesting, 'Opal').$coerce_to(sets[i], $$($nesting, 'String'), \"to_str\");\n        neg = (set.charAt(0) === '^' && set.length > 1);\n        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);\n        if (neg) {\n          neg_intersection = intersection(neg_intersection, set);\n        } else {\n          pos_intersection = intersection(pos_intersection, set);\n        }\n      }\n\n      if (pos_intersection.length > 0 && neg_intersection.length > 0) {\n        tmp = '';\n        for (i = 0, len = pos_intersection.length; i < len; i++) {\n          chr = pos_intersection.charAt(i);\n          if (neg_intersection.indexOf(chr) === -1) {\n            tmp += chr;\n          }\n        }\n        pos_intersection = tmp;\n        neg_intersection = '';\n      }\n\n      if (pos_intersection.length > 0) {\n        return '[' + $$($nesting, 'Regexp').$escape(pos_intersection) + ']';\n      }\n\n      if (neg_intersection.length > 0) {\n        return '[^' + $$($nesting, 'Regexp').$escape(neg_intersection) + ']';\n      }\n\n      return null;\n    }\n  ;\n    \n    Opal.def(self, '$instance_variables', $String_instance_variables$73 = function $$instance_variables() {\n      var self = this;\n\n      return []\n    }, $String_instance_variables$73.$$arity = 0);\n    Opal.defs(self, '$_load', $String__load$74 = function $$_load($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send(self, 'new', Opal.to_a(args));\n    }, $String__load$74.$$arity = -1);\n    \n    Opal.def(self, '$unicode_normalize', $String_unicode_normalize$75 = function $$unicode_normalize(form) {\n      var self = this;\n\n      \n      ;\n      return self.toString();;\n    }, $String_unicode_normalize$75.$$arity = -1);\n    \n    Opal.def(self, '$unicode_normalized?', $String_unicode_normalized$ques$76 = function(form) {\n      var self = this;\n\n      \n      ;\n      return true;\n    }, $String_unicode_normalized$ques$76.$$arity = -1);\n    \n    Opal.def(self, '$unpack', $String_unpack$77 = function $$unpack(format) {\n      var self = this;\n\n      return self.$raise(\"To use String#unpack, you must first require 'corelib/string/unpack'.\")\n    }, $String_unpack$77.$$arity = 1);\n    return (Opal.def(self, '$unpack1', $String_unpack1$78 = function $$unpack1(format) {\n      var self = this;\n\n      return self.$raise(\"To use String#unpack1, you must first require 'corelib/string/unpack'.\")\n    }, $String_unpack1$78.$$arity = 1), nil) && 'unpack1';\n  })($nesting[0], String, $nesting);\n  return Opal.const_set($nesting[0], 'Symbol', $$($nesting, 'String'));\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/enumerable\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy, $hash2 = Opal.hash2, $lambda = Opal.lambda;\n\n  Opal.add_stubs(['$each', '$public_send', '$destructure', '$to_enum', '$enumerator_size', '$new', '$yield', '$raise', '$slice_when', '$!', '$enum_for', '$flatten', '$map', '$warn', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$ceil', '$/', '$size', '$__send__', '$length', '$<=', '$[]', '$push', '$<<', '$[]=', '$===', '$inspect', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$dup', '$to_a', '$sort!', '$map!', '$key?', '$values', '$zip']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Enumerable');\n\n    var $nesting = [self].concat($parent_nesting), $Enumerable_all$ques$1, $Enumerable_any$ques$5, $Enumerable_chunk$9, $Enumerable_chunk_while$12, $Enumerable_collect$14, $Enumerable_collect_concat$16, $Enumerable_count$19, $Enumerable_cycle$23, $Enumerable_detect$25, $Enumerable_drop$27, $Enumerable_drop_while$28, $Enumerable_each_cons$29, $Enumerable_each_entry$31, $Enumerable_each_slice$33, $Enumerable_each_with_index$35, $Enumerable_each_with_object$37, $Enumerable_entries$39, $Enumerable_find_all$40, $Enumerable_find_index$42, $Enumerable_first$45, $Enumerable_grep$48, $Enumerable_grep_v$50, $Enumerable_group_by$52, $Enumerable_include$ques$54, $Enumerable_inject$56, $Enumerable_lazy$57, $Enumerable_enumerator_size$59, $Enumerable_max$60, $Enumerable_max_by$61, $Enumerable_min$63, $Enumerable_min_by$64, $Enumerable_minmax$66, $Enumerable_minmax_by$68, $Enumerable_none$ques$69, $Enumerable_one$ques$73, $Enumerable_partition$77, $Enumerable_reject$79, $Enumerable_reverse_each$81, $Enumerable_slice_before$83, $Enumerable_slice_after$85, $Enumerable_slice_when$88, $Enumerable_sort$90, $Enumerable_sort_by$92, $Enumerable_sum$97, $Enumerable_take$99, $Enumerable_take_while$100, $Enumerable_uniq$102, $Enumerable_zip$104;\n\n    \n    \n    function comparableForPattern(value) {\n      if (value.length === 0) {\n        value = [nil];\n      }\n\n      if (value.length > 1) {\n        value = [value];\n      }\n\n      return value;\n    }\n  ;\n    \n    Opal.def(self, '$all?', $Enumerable_all$ques$1 = function(pattern) {try {\n\n      var $iter = $Enumerable_all$ques$1.$$p, block = $iter || nil, $$2, $$3, $$4, self = this;\n\n      if ($iter) $Enumerable_all$ques$1.$$p = null;\n      \n      \n      if ($iter) $Enumerable_all$ques$1.$$p = null;;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$2 = function($a){var self = $$2.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            return nil\n          } else {\n            Opal.ret(false)\n          };}, $$2.$$s = self, $$2.$$arity = -1, $$2))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$3 = function($a){var self = $$3.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            return nil\n          } else {\n            Opal.ret(false)\n          };}, $$3.$$s = self, $$3.$$arity = -1, $$3))\n      } else {\n        $send(self, 'each', [], ($$4 = function($a){var self = $$4.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy($$($nesting, 'Opal').$destructure(value))) {\n            return nil\n          } else {\n            Opal.ret(false)\n          };}, $$4.$$s = self, $$4.$$arity = -1, $$4))\n      };\n      return true;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_all$ques$1.$$arity = -1);\n    \n    Opal.def(self, '$any?', $Enumerable_any$ques$5 = function(pattern) {try {\n\n      var $iter = $Enumerable_any$ques$5.$$p, block = $iter || nil, $$6, $$7, $$8, self = this;\n\n      if ($iter) $Enumerable_any$ques$5.$$p = null;\n      \n      \n      if ($iter) $Enumerable_any$ques$5.$$p = null;;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$6 = function($a){var self = $$6.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            Opal.ret(true)\n          } else {\n            return nil\n          };}, $$6.$$s = self, $$6.$$arity = -1, $$6))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$7 = function($a){var self = $$7.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            Opal.ret(true)\n          } else {\n            return nil\n          };}, $$7.$$s = self, $$7.$$arity = -1, $$7))\n      } else {\n        $send(self, 'each', [], ($$8 = function($a){var self = $$8.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy($$($nesting, 'Opal').$destructure(value))) {\n            Opal.ret(true)\n          } else {\n            return nil\n          };}, $$8.$$s = self, $$8.$$arity = -1, $$8))\n      };\n      return false;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_any$ques$5.$$arity = -1);\n    \n    Opal.def(self, '$chunk', $Enumerable_chunk$9 = function $$chunk() {\n      var $iter = $Enumerable_chunk$9.$$p, block = $iter || nil, $$10, $$11, self = this;\n\n      if ($iter) $Enumerable_chunk$9.$$p = null;\n      \n      \n      if ($iter) $Enumerable_chunk$9.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'to_enum', [\"chunk\"], ($$10 = function(){var self = $$10.$$s || this;\n\n        return self.$enumerator_size()}, $$10.$$s = self, $$10.$$arity = 0, $$10))\n      };\n      return $send($$$('::', 'Enumerator'), 'new', [], ($$11 = function(yielder){var self = $$11.$$s || this;\n\n      \n        \n        if (yielder == null) {\n          yielder = nil;\n        };\n        \n        var previous = nil, accumulate = [];\n\n        function releaseAccumulate() {\n          if (accumulate.length > 0) {\n            yielder.$yield(previous, accumulate)\n          }\n        }\n\n        self.$each.$$p = function(value) {\n          var key = Opal.yield1(block, value);\n\n          if (key === nil) {\n            releaseAccumulate();\n            accumulate = [];\n            previous = nil;\n          } else {\n            if (previous === nil || previous === key) {\n              accumulate.push(value);\n            } else {\n              releaseAccumulate();\n              accumulate = [value];\n            }\n\n            previous = key;\n          }\n        }\n\n        self.$each();\n\n        releaseAccumulate();\n      ;}, $$11.$$s = self, $$11.$$arity = 1, $$11));\n    }, $Enumerable_chunk$9.$$arity = 0);\n    \n    Opal.def(self, '$chunk_while', $Enumerable_chunk_while$12 = function $$chunk_while() {\n      var $iter = $Enumerable_chunk_while$12.$$p, block = $iter || nil, $$13, self = this;\n\n      if ($iter) $Enumerable_chunk_while$12.$$p = null;\n      \n      \n      if ($iter) $Enumerable_chunk_while$12.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"no block given\")\n      };\n      return $send(self, 'slice_when', [], ($$13 = function(before, after){var self = $$13.$$s || this;\n\n      \n        \n        if (before == null) {\n          before = nil;\n        };\n        \n        if (after == null) {\n          after = nil;\n        };\n        return Opal.yieldX(block, [before, after])['$!']();}, $$13.$$s = self, $$13.$$arity = 2, $$13));\n    }, $Enumerable_chunk_while$12.$$arity = 0);\n    \n    Opal.def(self, '$collect', $Enumerable_collect$14 = function $$collect() {\n      var $iter = $Enumerable_collect$14.$$p, block = $iter || nil, $$15, self = this;\n\n      if ($iter) $Enumerable_collect$14.$$p = null;\n      \n      \n      if ($iter) $Enumerable_collect$14.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect\"], ($$15 = function(){var self = $$15.$$s || this;\n\n        return self.$enumerator_size()}, $$15.$$s = self, $$15.$$arity = 0, $$15))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var value = Opal.yieldX(block, arguments);\n\n        result.push(value);\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_collect$14.$$arity = 0);\n    \n    Opal.def(self, '$collect_concat', $Enumerable_collect_concat$16 = function $$collect_concat() {\n      var $iter = $Enumerable_collect_concat$16.$$p, block = $iter || nil, $$17, $$18, self = this;\n\n      if ($iter) $Enumerable_collect_concat$16.$$p = null;\n      \n      \n      if ($iter) $Enumerable_collect_concat$16.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect_concat\"], ($$17 = function(){var self = $$17.$$s || this;\n\n        return self.$enumerator_size()}, $$17.$$s = self, $$17.$$arity = 0, $$17))\n      };\n      return $send(self, 'map', [], ($$18 = function(item){var self = $$18.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return Opal.yield1(block, item);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)).$flatten(1);\n    }, $Enumerable_collect_concat$16.$$arity = 0);\n    \n    Opal.def(self, '$count', $Enumerable_count$19 = function $$count(object) {\n      var $iter = $Enumerable_count$19.$$p, block = $iter || nil, $$20, $$21, $$22, self = this, result = nil;\n\n      if ($iter) $Enumerable_count$19.$$p = null;\n      \n      \n      if ($iter) $Enumerable_count$19.$$p = null;;\n      ;\n      result = 0;\n      \n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n    ;\n      if ($truthy(object != null)) {\n        block = $send(self, 'proc', [], ($$20 = function($a){var self = $$20.$$s || this, $post_args, args;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $$($nesting, 'Opal').$destructure(args)['$=='](object);}, $$20.$$s = self, $$20.$$arity = -1, $$20))\n      } else if ($truthy(block['$nil?']())) {\n        block = $send(self, 'proc', [], ($$21 = function(){var self = $$21.$$s || this;\n\n        return true}, $$21.$$s = self, $$21.$$arity = 0, $$21))};\n      $send(self, 'each', [], ($$22 = function($a){var self = $$22.$$s || this, $post_args, args;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        if ($truthy(Opal.yieldX(block, args))) {\n          return result++;\n        } else {\n          return nil\n        };}, $$22.$$s = self, $$22.$$arity = -1, $$22));\n      return result;\n    }, $Enumerable_count$19.$$arity = -1);\n    \n    Opal.def(self, '$cycle', $Enumerable_cycle$23 = function $$cycle(n) {\n      var $iter = $Enumerable_cycle$23.$$p, block = $iter || nil, $$24, self = this;\n\n      if ($iter) $Enumerable_cycle$23.$$p = null;\n      \n      \n      if ($iter) $Enumerable_cycle$23.$$p = null;;\n      \n      if (n == null) {\n        n = nil;\n      };\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"cycle\", n], ($$24 = function(){var self = $$24.$$s || this;\n\n        if ($truthy(n['$nil?']())) {\n            if ($truthy(self['$respond_to?'](\"size\"))) {\n              return $$$($$($nesting, 'Float'), 'INFINITY')\n            } else {\n              return nil\n            }\n          } else {\n            \n            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n            if ($truthy($rb_gt(n, 0))) {\n              return $rb_times(self.$enumerator_size(), n)\n            } else {\n              return 0\n            };\n          }}, $$24.$$s = self, $$24.$$arity = 0, $$24))\n      };\n      if ($truthy(n['$nil?']())) {\n      } else {\n        \n        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(n <= 0)) {\n          return nil};\n      };\n      \n      var result,\n          all = [], i, length, value;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        all.push(param);\n      }\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n\n      if (all.length === 0) {\n        return nil;\n      }\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = Opal.yield1(block, all[i]);\n          }\n        }\n      }\n      else {\n        while (n > 1) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = Opal.yield1(block, all[i]);\n          }\n\n          n--;\n        }\n      }\n    ;\n    }, $Enumerable_cycle$23.$$arity = -1);\n    \n    Opal.def(self, '$detect', $Enumerable_detect$25 = function $$detect(ifnone) {try {\n\n      var $iter = $Enumerable_detect$25.$$p, block = $iter || nil, $$26, self = this;\n\n      if ($iter) $Enumerable_detect$25.$$p = null;\n      \n      \n      if ($iter) $Enumerable_detect$25.$$p = null;;\n      ;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"detect\", ifnone)\n      };\n      $send(self, 'each', [], ($$26 = function($a){var self = $$26.$$s || this, $post_args, args, value = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        value = $$($nesting, 'Opal').$destructure(args);\n        if ($truthy(Opal.yield1(block, value))) {\n          Opal.ret(value)\n        } else {\n          return nil\n        };}, $$26.$$s = self, $$26.$$arity = -1, $$26));\n      \n      if (ifnone !== undefined) {\n        if (typeof(ifnone) === 'function') {\n          return ifnone();\n        } else {\n          return ifnone;\n        }\n      }\n    ;\n      return nil;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_detect$25.$$arity = -1);\n    \n    Opal.def(self, '$drop', $Enumerable_drop$27 = function $$drop(number) {\n      var self = this;\n\n      \n      number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(number < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"attempt to drop negative size\")};\n      \n      var result  = [],\n          current = 0;\n\n      self.$each.$$p = function() {\n        if (number <= current) {\n          result.push($$($nesting, 'Opal').$destructure(arguments));\n        }\n\n        current++;\n      };\n\n      self.$each()\n\n      return result;\n    ;\n    }, $Enumerable_drop$27.$$arity = 1);\n    \n    Opal.def(self, '$drop_while', $Enumerable_drop_while$28 = function $$drop_while() {\n      var $iter = $Enumerable_drop_while$28.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_drop_while$28.$$p = null;\n      \n      \n      if ($iter) $Enumerable_drop_while$28.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"drop_while\")\n      };\n      \n      var result   = [],\n          dropping = true;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        if (dropping) {\n          var value = Opal.yield1(block, param);\n\n          if ($falsy(value)) {\n            dropping = false;\n            result.push(param);\n          }\n        }\n        else {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_drop_while$28.$$arity = 0);\n    \n    Opal.def(self, '$each_cons', $Enumerable_each_cons$29 = function $$each_cons(n) {\n      var $iter = $Enumerable_each_cons$29.$$p, block = $iter || nil, $$30, self = this;\n\n      if ($iter) $Enumerable_each_cons$29.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_cons$29.$$p = null;;\n      if ($truthy(arguments.length != 1)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" for 1)\")};\n      n = $$($nesting, 'Opal').$try_convert(n, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(n <= 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"invalid size\")};\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_cons\", n], ($$30 = function(){var self = $$30.$$s || this, $a, enum_size = nil;\n\n        \n          enum_size = self.$enumerator_size();\n          if ($truthy(enum_size['$nil?']())) {\n            return nil\n          } else if ($truthy(($truthy($a = enum_size['$=='](0)) ? $a : $rb_lt(enum_size, n)))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(enum_size, n), 1)\n          };}, $$30.$$s = self, $$30.$$arity = 0, $$30))\n      };\n      \n      var buffer = [], result = nil;\n\n      self.$each.$$p = function() {\n        var element = $$($nesting, 'Opal').$destructure(arguments);\n        buffer.push(element);\n        if (buffer.length > n) {\n          buffer.shift();\n        }\n        if (buffer.length == n) {\n          Opal.yield1(block, buffer.slice(0, n));\n        }\n      }\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_each_cons$29.$$arity = 1);\n    \n    Opal.def(self, '$each_entry', $Enumerable_each_entry$31 = function $$each_entry($a) {\n      var $iter = $Enumerable_each_entry$31.$$p, block = $iter || nil, $post_args, data, $$32, self = this;\n\n      if ($iter) $Enumerable_each_entry$31.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_entry$31.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      data = $post_args;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'to_enum', [\"each_entry\"].concat(Opal.to_a(data)), ($$32 = function(){var self = $$32.$$s || this;\n\n        return self.$enumerator_size()}, $$32.$$s = self, $$32.$$arity = 0, $$32))\n      };\n      \n      self.$each.$$p = function() {\n        var item = $$($nesting, 'Opal').$destructure(arguments);\n\n        Opal.yield1(block, item);\n      }\n\n      self.$each.apply(self, data);\n\n      return self;\n    ;\n    }, $Enumerable_each_entry$31.$$arity = -1);\n    \n    Opal.def(self, '$each_slice', $Enumerable_each_slice$33 = function $$each_slice(n) {\n      var $iter = $Enumerable_each_slice$33.$$p, block = $iter || nil, $$34, self = this;\n\n      if ($iter) $Enumerable_each_slice$33.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_slice$33.$$p = null;;\n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(n <= 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"invalid slice size\")};\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_slice\", n], ($$34 = function(){var self = $$34.$$s || this;\n\n        if ($truthy(self['$respond_to?'](\"size\"))) {\n            return $rb_divide(self.$size(), n).$ceil()\n          } else {\n            return nil\n          }}, $$34.$$s = self, $$34.$$arity = 0, $$34))\n      };\n      \n      var result,\n          slice = []\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        slice.push(param);\n\n        if (slice.length === n) {\n          Opal.yield1(block, slice);\n          slice = [];\n        }\n      };\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n\n      // our \"last\" group, if smaller than n then won't have been yielded\n      if (slice.length > 0) {\n        Opal.yield1(block, slice);\n      }\n    ;\n      return nil;\n    }, $Enumerable_each_slice$33.$$arity = 1);\n    \n    Opal.def(self, '$each_with_index', $Enumerable_each_with_index$35 = function $$each_with_index($a) {\n      var $iter = $Enumerable_each_with_index$35.$$p, block = $iter || nil, $post_args, args, $$36, self = this;\n\n      if ($iter) $Enumerable_each_with_index$35.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_with_index$35.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_with_index\"].concat(Opal.to_a(args)), ($$36 = function(){var self = $$36.$$s || this;\n\n        return self.$enumerator_size()}, $$36.$$s = self, $$36.$$arity = 0, $$36))\n      };\n      \n      var result,\n          index = 0;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        block(param, index);\n\n        index++;\n      };\n\n      self.$each.apply(self, args);\n\n      if (result !== undefined) {\n        return result;\n      }\n    ;\n      return self;\n    }, $Enumerable_each_with_index$35.$$arity = -1);\n    \n    Opal.def(self, '$each_with_object', $Enumerable_each_with_object$37 = function $$each_with_object(object) {\n      var $iter = $Enumerable_each_with_object$37.$$p, block = $iter || nil, $$38, self = this;\n\n      if ($iter) $Enumerable_each_with_object$37.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_with_object$37.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_with_object\", object], ($$38 = function(){var self = $$38.$$s || this;\n\n        return self.$enumerator_size()}, $$38.$$s = self, $$38.$$arity = 0, $$38))\n      };\n      \n      var result;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        block(param, object);\n      };\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n    ;\n      return object;\n    }, $Enumerable_each_with_object$37.$$arity = 1);\n    \n    Opal.def(self, '$entries', $Enumerable_entries$39 = function $$entries($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push($$($nesting, 'Opal').$destructure(arguments));\n      };\n\n      self.$each.apply(self, args);\n\n      return result;\n    ;\n    }, $Enumerable_entries$39.$$arity = -1);\n    Opal.alias(self, \"find\", \"detect\");\n    \n    Opal.def(self, '$find_all', $Enumerable_find_all$40 = function $$find_all() {\n      var $iter = $Enumerable_find_all$40.$$p, block = $iter || nil, $$41, self = this;\n\n      if ($iter) $Enumerable_find_all$40.$$p = null;\n      \n      \n      if ($iter) $Enumerable_find_all$40.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"find_all\"], ($$41 = function(){var self = $$41.$$s || this;\n\n        return self.$enumerator_size()}, $$41.$$s = self, $$41.$$arity = 0, $$41))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if ($truthy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_find_all$40.$$arity = 0);\n    \n    Opal.def(self, '$find_index', $Enumerable_find_index$42 = function $$find_index(object) {try {\n\n      var $iter = $Enumerable_find_index$42.$$p, block = $iter || nil, $$43, $$44, self = this, index = nil;\n\n      if ($iter) $Enumerable_find_index$42.$$p = null;\n      \n      \n      if ($iter) $Enumerable_find_index$42.$$p = null;;\n      ;\n      if ($truthy(object === undefined && block === nil)) {\n        return self.$enum_for(\"find_index\")};\n      \n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n    ;\n      index = 0;\n      if ($truthy(object != null)) {\n        $send(self, 'each', [], ($$43 = function($a){var self = $$43.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($$($nesting, 'Opal').$destructure(value)['$=='](object)) {\n            Opal.ret(index)};\n          return index += 1;;}, $$43.$$s = self, $$43.$$arity = -1, $$43))\n      } else {\n        $send(self, 'each', [], ($$44 = function($a){var self = $$44.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            Opal.ret(index)};\n          return index += 1;;}, $$44.$$s = self, $$44.$$arity = -1, $$44))\n      };\n      return nil;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_find_index$42.$$arity = -1);\n    \n    Opal.def(self, '$first', $Enumerable_first$45 = function $$first(number) {try {\n\n      var $$46, $$47, self = this, result = nil, current = nil;\n\n      \n      ;\n      if ($truthy(number === undefined)) {\n        return $send(self, 'each', [], ($$46 = function(value){var self = $$46.$$s || this;\n\n        \n          \n          if (value == null) {\n            value = nil;\n          };\n          Opal.ret(value);}, $$46.$$s = self, $$46.$$arity = 1, $$46))\n      } else {\n        \n        result = [];\n        number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(number < 0)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"attempt to take negative size\")};\n        if ($truthy(number == 0)) {\n          return []};\n        current = 0;\n        $send(self, 'each', [], ($$47 = function($a){var self = $$47.$$s || this, $post_args, args;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          result.push($$($nesting, 'Opal').$destructure(args));\n          if ($truthy(number <= ++current)) {\n            Opal.ret(result)\n          } else {\n            return nil\n          };}, $$47.$$s = self, $$47.$$arity = -1, $$47));\n        return result;\n      };\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_first$45.$$arity = -1);\n    Opal.alias(self, \"flat_map\", \"collect_concat\");\n    \n    Opal.def(self, '$grep', $Enumerable_grep$48 = function $$grep(pattern) {\n      var $iter = $Enumerable_grep$48.$$p, block = $iter || nil, $$49, self = this, result = nil;\n\n      if ($iter) $Enumerable_grep$48.$$p = null;\n      \n      \n      if ($iter) $Enumerable_grep$48.$$p = null;;\n      result = [];\n      $send(self, 'each', [], ($$49 = function($a){var self = $$49.$$s || this, $post_args, value, cmp = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        value = $post_args;;\n        cmp = comparableForPattern(value);\n        if ($truthy($send(pattern, '__send__', [\"===\"].concat(Opal.to_a(cmp))))) {\n        } else {\n          return nil;\n        };\n        if ((block !== nil)) {\n          \n          if ($truthy($rb_gt(value.$length(), 1))) {\n            value = [value]};\n          value = Opal.yieldX(block, Opal.to_a(value));\n        } else if ($truthy($rb_le(value.$length(), 1))) {\n          value = value['$[]'](0)};\n        return result.$push(value);}, $$49.$$s = self, $$49.$$arity = -1, $$49));\n      return result;\n    }, $Enumerable_grep$48.$$arity = 1);\n    \n    Opal.def(self, '$grep_v', $Enumerable_grep_v$50 = function $$grep_v(pattern) {\n      var $iter = $Enumerable_grep_v$50.$$p, block = $iter || nil, $$51, self = this, result = nil;\n\n      if ($iter) $Enumerable_grep_v$50.$$p = null;\n      \n      \n      if ($iter) $Enumerable_grep_v$50.$$p = null;;\n      result = [];\n      $send(self, 'each', [], ($$51 = function($a){var self = $$51.$$s || this, $post_args, value, cmp = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        value = $post_args;;\n        cmp = comparableForPattern(value);\n        if ($truthy($send(pattern, '__send__', [\"===\"].concat(Opal.to_a(cmp))))) {\n          return nil;};\n        if ((block !== nil)) {\n          \n          if ($truthy($rb_gt(value.$length(), 1))) {\n            value = [value]};\n          value = Opal.yieldX(block, Opal.to_a(value));\n        } else if ($truthy($rb_le(value.$length(), 1))) {\n          value = value['$[]'](0)};\n        return result.$push(value);}, $$51.$$s = self, $$51.$$arity = -1, $$51));\n      return result;\n    }, $Enumerable_grep_v$50.$$arity = 1);\n    \n    Opal.def(self, '$group_by', $Enumerable_group_by$52 = function $$group_by() {\n      var $iter = $Enumerable_group_by$52.$$p, block = $iter || nil, $$53, $a, self = this, hash = nil, $writer = nil;\n\n      if ($iter) $Enumerable_group_by$52.$$p = null;\n      \n      \n      if ($iter) $Enumerable_group_by$52.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"group_by\"], ($$53 = function(){var self = $$53.$$s || this;\n\n        return self.$enumerator_size()}, $$53.$$s = self, $$53.$$arity = 0, $$53))\n      };\n      hash = $hash2([], {});\n      \n      var result;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        ($truthy($a = hash['$[]'](value)) ? $a : (($writer = [value, []]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<'](param);\n      }\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n    ;\n      return hash;\n    }, $Enumerable_group_by$52.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Enumerable_include$ques$54 = function(obj) {try {\n\n      var $$55, self = this;\n\n      \n      $send(self, 'each', [], ($$55 = function($a){var self = $$55.$$s || this, $post_args, args;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        if ($$($nesting, 'Opal').$destructure(args)['$=='](obj)) {\n          Opal.ret(true)\n        } else {\n          return nil\n        };}, $$55.$$s = self, $$55.$$arity = -1, $$55));\n      return false;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_include$ques$54.$$arity = 1);\n    \n    Opal.def(self, '$inject', $Enumerable_inject$56 = function $$inject(object, sym) {\n      var $iter = $Enumerable_inject$56.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_inject$56.$$p = null;\n      \n      \n      if ($iter) $Enumerable_inject$56.$$p = null;;\n      ;\n      ;\n      \n      var result = object;\n\n      if (block !== nil && sym === undefined) {\n        self.$each.$$p = function() {\n          var value = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          value = Opal.yieldX(block, [result, value]);\n\n          result = value;\n        };\n      }\n      else {\n        if (sym === undefined) {\n          if (!$$($nesting, 'Symbol')['$==='](object)) {\n            self.$raise($$($nesting, 'TypeError'), \"\" + (object.$inspect()) + \" is not a Symbol\");\n          }\n\n          sym    = object;\n          result = undefined;\n        }\n\n        self.$each.$$p = function() {\n          var value = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          result = (result).$__send__(sym, value);\n        };\n      }\n\n      self.$each();\n\n      return result == undefined ? nil : result;\n    ;\n    }, $Enumerable_inject$56.$$arity = -1);\n    \n    Opal.def(self, '$lazy', $Enumerable_lazy$57 = function $$lazy() {\n      var $$58, self = this;\n\n      return $send($$$($$($nesting, 'Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], ($$58 = function(enum$, $a){var self = $$58.$$s || this, $post_args, args;\n\n      \n        \n        if (enum$ == null) {\n          enum$ = nil;\n        };\n        \n        $post_args = Opal.slice.call(arguments, 1, arguments.length);\n        \n        args = $post_args;;\n        return $send(enum$, 'yield', Opal.to_a(args));}, $$58.$$s = self, $$58.$$arity = -2, $$58))\n    }, $Enumerable_lazy$57.$$arity = 0);\n    \n    Opal.def(self, '$enumerator_size', $Enumerable_enumerator_size$59 = function $$enumerator_size() {\n      var self = this;\n\n      if ($truthy(self['$respond_to?'](\"size\"))) {\n        return self.$size()\n      } else {\n        return nil\n      }\n    }, $Enumerable_enumerator_size$59.$$arity = 0);\n    Opal.alias(self, \"map\", \"collect\");\n    \n    Opal.def(self, '$max', $Enumerable_max$60 = function $$max(n) {\n      var $iter = $Enumerable_max$60.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_max$60.$$p = null;\n      \n      \n      if ($iter) $Enumerable_max$60.$$p = null;;\n      ;\n      \n      if (n === undefined || n === nil) {\n        var result, value;\n\n        self.$each.$$p = function() {\n          var item = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = item;\n            return;\n          }\n\n          if (block !== nil) {\n            value = Opal.yieldX(block, [item, result]);\n          } else {\n            value = (item)['$<=>'](result);\n          }\n\n          if (value === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\");\n          }\n\n          if (value > 0) {\n            result = item;\n          }\n        }\n\n        self.$each();\n\n        if (result === undefined) {\n          return nil;\n        } else {\n          return result;\n        }\n      }\n    ;\n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);\n    }, $Enumerable_max$60.$$arity = -1);\n    \n    Opal.def(self, '$max_by', $Enumerable_max_by$61 = function $$max_by() {\n      var $iter = $Enumerable_max_by$61.$$p, block = $iter || nil, $$62, self = this;\n\n      if ($iter) $Enumerable_max_by$61.$$p = null;\n      \n      \n      if ($iter) $Enumerable_max_by$61.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"max_by\"], ($$62 = function(){var self = $$62.$$s || this;\n\n        return self.$enumerator_size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))\n      };\n      \n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if ((value)['$<=>'](by) > 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, $Enumerable_max_by$61.$$arity = 0);\n    Opal.alias(self, \"member?\", \"include?\");\n    \n    Opal.def(self, '$min', $Enumerable_min$63 = function $$min() {\n      var $iter = $Enumerable_min$63.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_min$63.$$p = null;\n      \n      \n      if ($iter) $Enumerable_min$63.$$p = null;;\n      \n      var result;\n\n      if (block !== nil) {\n        self.$each.$$p = function() {\n          var param = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          var value = block(param, result);\n\n          if (value === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\");\n          }\n\n          if (value < 0) {\n            result = param;\n          }\n        };\n      }\n      else {\n        self.$each.$$p = function() {\n          var param = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          if ($$($nesting, 'Opal').$compare(param, result) < 0) {\n            result = param;\n          }\n        };\n      }\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, $Enumerable_min$63.$$arity = 0);\n    \n    Opal.def(self, '$min_by', $Enumerable_min_by$64 = function $$min_by() {\n      var $iter = $Enumerable_min_by$64.$$p, block = $iter || nil, $$65, self = this;\n\n      if ($iter) $Enumerable_min_by$64.$$p = null;\n      \n      \n      if ($iter) $Enumerable_min_by$64.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"min_by\"], ($$65 = function(){var self = $$65.$$s || this;\n\n        return self.$enumerator_size()}, $$65.$$s = self, $$65.$$arity = 0, $$65))\n      };\n      \n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if ((value)['$<=>'](by) < 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, $Enumerable_min_by$64.$$arity = 0);\n    \n    Opal.def(self, '$minmax', $Enumerable_minmax$66 = function $$minmax() {\n      var $iter = $Enumerable_minmax$66.$$p, block = $iter || nil, $a, $$67, self = this;\n\n      if ($iter) $Enumerable_minmax$66.$$p = null;\n      \n      \n      if ($iter) $Enumerable_minmax$66.$$p = null;;\n      block = ($truthy($a = block) ? $a : $send(self, 'proc', [], ($$67 = function(a, b){var self = $$67.$$s || this;\n\n      \n        \n        if (a == null) {\n          a = nil;\n        };\n        \n        if (b == null) {\n          b = nil;\n        };\n        return a['$<=>'](b);}, $$67.$$s = self, $$67.$$arity = 2, $$67)));\n      \n      var min = nil, max = nil, first_time = true;\n\n      self.$each.$$p = function() {\n        var element = $$($nesting, 'Opal').$destructure(arguments);\n        if (first_time) {\n          min = max = element;\n          first_time = false;\n        } else {\n          var min_cmp = block.$call(min, element);\n\n          if (min_cmp === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\")\n          } else if (min_cmp > 0) {\n            min = element;\n          }\n\n          var max_cmp = block.$call(max, element);\n\n          if (max_cmp === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\")\n          } else if (max_cmp < 0) {\n            max = element;\n          }\n        }\n      }\n\n      self.$each();\n\n      return [min, max];\n    ;\n    }, $Enumerable_minmax$66.$$arity = 0);\n    \n    Opal.def(self, '$minmax_by', $Enumerable_minmax_by$68 = function $$minmax_by() {\n      var $iter = $Enumerable_minmax_by$68.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_minmax_by$68.$$p = null;\n      \n      \n      if ($iter) $Enumerable_minmax_by$68.$$p = null;;\n      return self.$raise($$($nesting, 'NotImplementedError'));\n    }, $Enumerable_minmax_by$68.$$arity = 0);\n    \n    Opal.def(self, '$none?', $Enumerable_none$ques$69 = function(pattern) {try {\n\n      var $iter = $Enumerable_none$ques$69.$$p, block = $iter || nil, $$70, $$71, $$72, self = this;\n\n      if ($iter) $Enumerable_none$ques$69.$$p = null;\n      \n      \n      if ($iter) $Enumerable_none$ques$69.$$p = null;;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$70 = function($a){var self = $$70.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$70.$$s = self, $$70.$$arity = -1, $$70))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$71 = function($a){var self = $$71.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$71.$$s = self, $$71.$$arity = -1, $$71))\n      } else {\n        $send(self, 'each', [], ($$72 = function($a){var self = $$72.$$s || this, $post_args, value, item = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          item = $$($nesting, 'Opal').$destructure(value);\n          if ($truthy(item)) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$72.$$s = self, $$72.$$arity = -1, $$72))\n      };\n      return true;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_none$ques$69.$$arity = -1);\n    \n    Opal.def(self, '$one?', $Enumerable_one$ques$73 = function(pattern) {try {\n\n      var $iter = $Enumerable_one$ques$73.$$p, block = $iter || nil, $$74, $$75, $$76, self = this, count = nil;\n\n      if ($iter) $Enumerable_one$ques$73.$$p = null;\n      \n      \n      if ($iter) $Enumerable_one$ques$73.$$p = null;;\n      ;\n      count = 0;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$74 = function($a){var self = $$74.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            \n            count = $rb_plus(count, 1);\n            if ($truthy($rb_gt(count, 1))) {\n              Opal.ret(false)\n            } else {\n              return nil\n            };\n          } else {\n            return nil\n          };}, $$74.$$s = self, $$74.$$arity = -1, $$74))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$75 = function($a){var self = $$75.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n          } else {\n            return nil;\n          };\n          count = $rb_plus(count, 1);\n          if ($truthy($rb_gt(count, 1))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$75.$$s = self, $$75.$$arity = -1, $$75))\n      } else {\n        $send(self, 'each', [], ($$76 = function($a){var self = $$76.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy($$($nesting, 'Opal').$destructure(value))) {\n          } else {\n            return nil;\n          };\n          count = $rb_plus(count, 1);\n          if ($truthy($rb_gt(count, 1))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$76.$$s = self, $$76.$$arity = -1, $$76))\n      };\n      return count['$=='](1);\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_one$ques$73.$$arity = -1);\n    \n    Opal.def(self, '$partition', $Enumerable_partition$77 = function $$partition() {\n      var $iter = $Enumerable_partition$77.$$p, block = $iter || nil, $$78, self = this;\n\n      if ($iter) $Enumerable_partition$77.$$p = null;\n      \n      \n      if ($iter) $Enumerable_partition$77.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"partition\"], ($$78 = function(){var self = $$78.$$s || this;\n\n        return self.$enumerator_size()}, $$78.$$s = self, $$78.$$arity = 0, $$78))\n      };\n      \n      var truthy = [], falsy = [], result;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if ($truthy(value)) {\n          truthy.push(param);\n        }\n        else {\n          falsy.push(param);\n        }\n      };\n\n      self.$each();\n\n      return [truthy, falsy];\n    ;\n    }, $Enumerable_partition$77.$$arity = 0);\n    Opal.alias(self, \"reduce\", \"inject\");\n    \n    Opal.def(self, '$reject', $Enumerable_reject$79 = function $$reject() {\n      var $iter = $Enumerable_reject$79.$$p, block = $iter || nil, $$80, self = this;\n\n      if ($iter) $Enumerable_reject$79.$$p = null;\n      \n      \n      if ($iter) $Enumerable_reject$79.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject\"], ($$80 = function(){var self = $$80.$$s || this;\n\n        return self.$enumerator_size()}, $$80.$$s = self, $$80.$$arity = 0, $$80))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if ($falsy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_reject$79.$$arity = 0);\n    \n    Opal.def(self, '$reverse_each', $Enumerable_reverse_each$81 = function $$reverse_each() {\n      var $iter = $Enumerable_reverse_each$81.$$p, block = $iter || nil, $$82, self = this;\n\n      if ($iter) $Enumerable_reverse_each$81.$$p = null;\n      \n      \n      if ($iter) $Enumerable_reverse_each$81.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reverse_each\"], ($$82 = function(){var self = $$82.$$s || this;\n\n        return self.$enumerator_size()}, $$82.$$s = self, $$82.$$arity = 0, $$82))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push(arguments);\n      };\n\n      self.$each();\n\n      for (var i = result.length - 1; i >= 0; i--) {\n        Opal.yieldX(block, result[i]);\n      }\n\n      return result;\n    ;\n    }, $Enumerable_reverse_each$81.$$arity = 0);\n    Opal.alias(self, \"select\", \"find_all\");\n    \n    Opal.def(self, '$slice_before', $Enumerable_slice_before$83 = function $$slice_before(pattern) {\n      var $iter = $Enumerable_slice_before$83.$$p, block = $iter || nil, $$84, self = this;\n\n      if ($iter) $Enumerable_slice_before$83.$$p = null;\n      \n      \n      if ($iter) $Enumerable_slice_before$83.$$p = null;;\n      ;\n      if ($truthy(pattern === undefined && block === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"both pattern and block are given\")};\n      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" expected 1)\")};\n      return $send($$($nesting, 'Enumerator'), 'new', [], ($$84 = function(e){var self = $$84.$$s || this;\n\n      \n        \n        if (e == null) {\n          e = nil;\n        };\n        \n        var slice = [];\n\n        if (block !== nil) {\n          if (pattern === undefined) {\n            self.$each.$$p = function() {\n              var param = $$($nesting, 'Opal').$destructure(arguments),\n                  value = Opal.yield1(block, param);\n\n              if ($truthy(value) && slice.length > 0) {\n                e['$<<'](slice);\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n          else {\n            self.$each.$$p = function() {\n              var param = $$($nesting, 'Opal').$destructure(arguments),\n                  value = block(param, pattern.$dup());\n\n              if ($truthy(value) && slice.length > 0) {\n                e['$<<'](slice);\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n        }\n        else {\n          self.$each.$$p = function() {\n            var param = $$($nesting, 'Opal').$destructure(arguments),\n                value = pattern['$==='](param);\n\n            if ($truthy(value) && slice.length > 0) {\n              e['$<<'](slice);\n              slice = [];\n            }\n\n            slice.push(param);\n          };\n        }\n\n        self.$each();\n\n        if (slice.length > 0) {\n          e['$<<'](slice);\n        }\n      ;}, $$84.$$s = self, $$84.$$arity = 1, $$84));\n    }, $Enumerable_slice_before$83.$$arity = -1);\n    \n    Opal.def(self, '$slice_after', $Enumerable_slice_after$85 = function $$slice_after(pattern) {\n      var $iter = $Enumerable_slice_after$85.$$p, block = $iter || nil, $$86, $$87, self = this;\n\n      if ($iter) $Enumerable_slice_after$85.$$p = null;\n      \n      \n      if ($iter) $Enumerable_slice_after$85.$$p = null;;\n      ;\n      if ($truthy(pattern === undefined && block === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"both pattern and block are given\")};\n      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" expected 1)\")};\n      if ($truthy(pattern !== undefined)) {\n        block = $send(self, 'proc', [], ($$86 = function(e){var self = $$86.$$s || this;\n\n        \n          \n          if (e == null) {\n            e = nil;\n          };\n          return pattern['$==='](e);}, $$86.$$s = self, $$86.$$arity = 1, $$86))};\n      return $send($$($nesting, 'Enumerator'), 'new', [], ($$87 = function(yielder){var self = $$87.$$s || this;\n\n      \n        \n        if (yielder == null) {\n          yielder = nil;\n        };\n        \n        var accumulate;\n\n        self.$each.$$p = function() {\n          var element = $$($nesting, 'Opal').$destructure(arguments),\n              end_chunk = Opal.yield1(block, element);\n\n          if (accumulate == null) {\n            accumulate = [];\n          }\n\n          if ($truthy(end_chunk)) {\n            accumulate.push(element);\n            yielder.$yield(accumulate);\n            accumulate = null;\n          } else {\n            accumulate.push(element)\n          }\n        }\n\n        self.$each();\n\n        if (accumulate != null) {\n          yielder.$yield(accumulate);\n        }\n      ;}, $$87.$$s = self, $$87.$$arity = 1, $$87));\n    }, $Enumerable_slice_after$85.$$arity = -1);\n    \n    Opal.def(self, '$slice_when', $Enumerable_slice_when$88 = function $$slice_when() {\n      var $iter = $Enumerable_slice_when$88.$$p, block = $iter || nil, $$89, self = this;\n\n      if ($iter) $Enumerable_slice_when$88.$$p = null;\n      \n      \n      if ($iter) $Enumerable_slice_when$88.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (0 for 1)\")\n      };\n      return $send($$($nesting, 'Enumerator'), 'new', [], ($$89 = function(yielder){var self = $$89.$$s || this;\n\n      \n        \n        if (yielder == null) {\n          yielder = nil;\n        };\n        \n        var slice = nil, last_after = nil;\n\n        self.$each_cons.$$p = function() {\n          var params = $$($nesting, 'Opal').$destructure(arguments),\n              before = params[0],\n              after = params[1],\n              match = Opal.yieldX(block, [before, after]);\n\n          last_after = after;\n\n          if (slice === nil) {\n            slice = [];\n          }\n\n          if ($truthy(match)) {\n            slice.push(before);\n            yielder.$yield(slice);\n            slice = [];\n          } else {\n            slice.push(before);\n          }\n        }\n\n        self.$each_cons(2);\n\n        if (slice !== nil) {\n          slice.push(last_after);\n          yielder.$yield(slice);\n        }\n      ;}, $$89.$$s = self, $$89.$$arity = 1, $$89));\n    }, $Enumerable_slice_when$88.$$arity = 0);\n    \n    Opal.def(self, '$sort', $Enumerable_sort$90 = function $$sort() {\n      var $iter = $Enumerable_sort$90.$$p, block = $iter || nil, $$91, self = this, ary = nil;\n\n      if ($iter) $Enumerable_sort$90.$$p = null;\n      \n      \n      if ($iter) $Enumerable_sort$90.$$p = null;;\n      ary = self.$to_a();\n      if ((block !== nil)) {\n      } else {\n        block = $lambda(($$91 = function(a, b){var self = $$91.$$s || this;\n\n        \n          \n          if (a == null) {\n            a = nil;\n          };\n          \n          if (b == null) {\n            b = nil;\n          };\n          return a['$<=>'](b);}, $$91.$$s = self, $$91.$$arity = 2, $$91))\n      };\n      return $send(ary, 'sort', [], block.$to_proc());\n    }, $Enumerable_sort$90.$$arity = 0);\n    \n    Opal.def(self, '$sort_by', $Enumerable_sort_by$92 = function $$sort_by() {\n      var $iter = $Enumerable_sort_by$92.$$p, block = $iter || nil, $$93, $$94, $$95, $$96, self = this, dup = nil;\n\n      if ($iter) $Enumerable_sort_by$92.$$p = null;\n      \n      \n      if ($iter) $Enumerable_sort_by$92.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"sort_by\"], ($$93 = function(){var self = $$93.$$s || this;\n\n        return self.$enumerator_size()}, $$93.$$s = self, $$93.$$arity = 0, $$93))\n      };\n      dup = $send(self, 'map', [], ($$94 = function(){var self = $$94.$$s || this, arg = nil;\n\n      \n        arg = $$($nesting, 'Opal').$destructure(arguments);\n        return [Opal.yield1(block, arg), arg];}, $$94.$$s = self, $$94.$$arity = 0, $$94));\n      $send(dup, 'sort!', [], ($$95 = function(a, b){var self = $$95.$$s || this;\n\n      \n        \n        if (a == null) {\n          a = nil;\n        };\n        \n        if (b == null) {\n          b = nil;\n        };\n        return (a[0])['$<=>'](b[0]);}, $$95.$$s = self, $$95.$$arity = 2, $$95));\n      return $send(dup, 'map!', [], ($$96 = function(i){var self = $$96.$$s || this;\n\n      \n        \n        if (i == null) {\n          i = nil;\n        };\n        return i[1];;}, $$96.$$s = self, $$96.$$arity = 1, $$96));\n    }, $Enumerable_sort_by$92.$$arity = 0);\n    \n    Opal.def(self, '$sum', $Enumerable_sum$97 = function $$sum(initial) {\n      var $$98, $iter = $Enumerable_sum$97.$$p, $yield = $iter || nil, self = this, result = nil;\n\n      if ($iter) $Enumerable_sum$97.$$p = null;\n      \n      \n      if (initial == null) {\n        initial = 0;\n      };\n      result = initial;\n      $send(self, 'each', [], ($$98 = function($a){var self = $$98.$$s || this, $post_args, args, item = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        item = (function() {if (($yield !== nil)) {\n          return Opal.yieldX($yield, Opal.to_a(args));\n        } else {\n          return $$($nesting, 'Opal').$destructure(args)\n        }; return nil; })();\n        return (result = $rb_plus(result, item));}, $$98.$$s = self, $$98.$$arity = -1, $$98));\n      return result;\n    }, $Enumerable_sum$97.$$arity = -1);\n    \n    Opal.def(self, '$take', $Enumerable_take$99 = function $$take(num) {\n      var self = this;\n\n      return self.$first(num)\n    }, $Enumerable_take$99.$$arity = 1);\n    \n    Opal.def(self, '$take_while', $Enumerable_take_while$100 = function $$take_while() {try {\n\n      var $iter = $Enumerable_take_while$100.$$p, block = $iter || nil, $$101, self = this, result = nil;\n\n      if ($iter) $Enumerable_take_while$100.$$p = null;\n      \n      \n      if ($iter) $Enumerable_take_while$100.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return self.$enum_for(\"take_while\")\n      };\n      result = [];\n      return $send(self, 'each', [], ($$101 = function($a){var self = $$101.$$s || this, $post_args, args, value = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        value = $$($nesting, 'Opal').$destructure(args);\n        if ($truthy(Opal.yield1(block, value))) {\n        } else {\n          Opal.ret(result)\n        };\n        return result.push(value);;}, $$101.$$s = self, $$101.$$arity = -1, $$101));\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_take_while$100.$$arity = 0);\n    \n    Opal.def(self, '$uniq', $Enumerable_uniq$102 = function $$uniq() {\n      var $iter = $Enumerable_uniq$102.$$p, block = $iter || nil, $$103, self = this, hash = nil;\n\n      if ($iter) $Enumerable_uniq$102.$$p = null;\n      \n      \n      if ($iter) $Enumerable_uniq$102.$$p = null;;\n      hash = $hash2([], {});\n      $send(self, 'each', [], ($$103 = function($a){var self = $$103.$$s || this, $post_args, args, value = nil, produced = nil, $writer = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        value = $$($nesting, 'Opal').$destructure(args);\n        produced = (function() {if ((block !== nil)) {\n          return Opal.yield1(block, value);\n        } else {\n          return value\n        }; return nil; })();\n        if ($truthy(hash['$key?'](produced))) {\n          return nil\n        } else {\n          \n          $writer = [produced, value];\n          $send(hash, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        };}, $$103.$$s = self, $$103.$$arity = -1, $$103));\n      return hash.$values();\n    }, $Enumerable_uniq$102.$$arity = 0);\n    Opal.alias(self, \"to_a\", \"entries\");\n    \n    Opal.def(self, '$zip', $Enumerable_zip$104 = function $$zip($a) {\n      var $iter = $Enumerable_zip$104.$$p, block = $iter || nil, $post_args, others, self = this;\n\n      if ($iter) $Enumerable_zip$104.$$p = null;\n      \n      \n      if ($iter) $Enumerable_zip$104.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      others = $post_args;;\n      return $send(self.$to_a(), 'zip', Opal.to_a(others));\n    }, $Enumerable_zip$104.$$arity = -1);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/enumerator\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy;\n\n  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$any?', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    var $nesting = [self].concat($parent_nesting), $Enumerator_for$1, $Enumerator_initialize$2, $Enumerator_each$3, $Enumerator_size$4, $Enumerator_with_index$5, $Enumerator_inspect$7;\n\n    self.$$prototype.size = self.$$prototype.args = self.$$prototype.object = self.$$prototype.method = nil;\n    \n    self.$include($$($nesting, 'Enumerable'));\n    self.$$prototype.$$is_enumerator = true;\n    Opal.defs(self, '$for', $Enumerator_for$1 = function(object, $a, $b) {\n      var $iter = $Enumerator_for$1.$$p, block = $iter || nil, $post_args, method, args, self = this;\n\n      if ($iter) $Enumerator_for$1.$$p = null;\n      \n      \n      if ($iter) $Enumerator_for$1.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      if ($post_args.length > 0) {\n        method = $post_args[0];\n        $post_args.splice(0, 1);\n      }\n      if (method == null) {\n        method = \"each\";\n      };\n      \n      args = $post_args;;\n      \n      var obj = self.$allocate();\n\n      obj.object = object;\n      obj.size   = block;\n      obj.method = method;\n      obj.args   = args;\n\n      return obj;\n    ;\n    }, $Enumerator_for$1.$$arity = -2);\n    \n    Opal.def(self, '$initialize', $Enumerator_initialize$2 = function $$initialize($a) {\n      var $iter = $Enumerator_initialize$2.$$p, block = $iter || nil, $post_args, self = this;\n\n      if ($iter) $Enumerator_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Enumerator_initialize$2.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      if ($truthy(block)) {\n        \n        self.object = $send($$($nesting, 'Generator'), 'new', [], block.$to_proc());\n        self.method = \"each\";\n        self.args = [];\n        self.size = arguments[0] || nil;\n        if ($truthy(self.size)) {\n          return (self.size = $$($nesting, 'Opal').$coerce_to(self.size, $$($nesting, 'Integer'), \"to_int\"))\n        } else {\n          return nil\n        };\n      } else {\n        \n        self.object = arguments[0];\n        self.method = arguments[1] || \"each\";\n        self.args = $slice.call(arguments, 2);\n        return (self.size = nil);\n      };\n    }, $Enumerator_initialize$2.$$arity = -1);\n    \n    Opal.def(self, '$each', $Enumerator_each$3 = function $$each($a) {\n      var $iter = $Enumerator_each$3.$$p, block = $iter || nil, $post_args, args, $b, self = this;\n\n      if ($iter) $Enumerator_each$3.$$p = null;\n      \n      \n      if ($iter) $Enumerator_each$3.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(($truthy($b = block['$nil?']()) ? args['$empty?']() : $b))) {\n        return self};\n      args = $rb_plus(self.args, args);\n      if ($truthy(block['$nil?']())) {\n        return $send(self.$class(), 'new', [self.object, self.method].concat(Opal.to_a(args)))};\n      return $send(self.object, '__send__', [self.method].concat(Opal.to_a(args)), block.$to_proc());\n    }, $Enumerator_each$3.$$arity = -1);\n    \n    Opal.def(self, '$size', $Enumerator_size$4 = function $$size() {\n      var self = this;\n\n      if ($truthy($$($nesting, 'Proc')['$==='](self.size))) {\n        return $send(self.size, 'call', Opal.to_a(self.args))\n      } else {\n        return self.size\n      }\n    }, $Enumerator_size$4.$$arity = 0);\n    \n    Opal.def(self, '$with_index', $Enumerator_with_index$5 = function $$with_index(offset) {\n      var $iter = $Enumerator_with_index$5.$$p, block = $iter || nil, $$6, self = this;\n\n      if ($iter) $Enumerator_with_index$5.$$p = null;\n      \n      \n      if ($iter) $Enumerator_with_index$5.$$p = null;;\n      \n      if (offset == null) {\n        offset = 0;\n      };\n      offset = (function() {if ($truthy(offset)) {\n        return $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), \"to_int\")\n      } else {\n        return 0\n      }; return nil; })();\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"with_index\", offset], ($$6 = function(){var self = $$6.$$s || this;\n\n        return self.$size()}, $$6.$$s = self, $$6.$$arity = 0, $$6))\n      };\n      \n      var result, index = offset;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = block(param, index);\n\n        index++;\n\n        return value;\n      }\n\n      return self.$each();\n    ;\n    }, $Enumerator_with_index$5.$$arity = -1);\n    Opal.alias(self, \"with_object\", \"each_with_object\");\n    \n    Opal.def(self, '$inspect', $Enumerator_inspect$7 = function $$inspect() {\n      var self = this, result = nil;\n\n      \n      result = \"\" + \"#<\" + (self.$class()) + \": \" + (self.object.$inspect()) + \":\" + (self.method);\n      if ($truthy(self.args['$any?']())) {\n        result = $rb_plus(result, \"\" + \"(\" + (self.args.$inspect()['$[]']($$($nesting, 'Range').$new(1, -2))) + \")\")};\n      return $rb_plus(result, \">\");\n    }, $Enumerator_inspect$7.$$arity = 0);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Generator');\n\n      var $nesting = [self].concat($parent_nesting), $Generator_initialize$8, $Generator_each$9;\n\n      self.$$prototype.block = nil;\n      \n      self.$include($$($nesting, 'Enumerable'));\n      \n      Opal.def(self, '$initialize', $Generator_initialize$8 = function $$initialize() {\n        var $iter = $Generator_initialize$8.$$p, block = $iter || nil, self = this;\n\n        if ($iter) $Generator_initialize$8.$$p = null;\n        \n        \n        if ($iter) $Generator_initialize$8.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'LocalJumpError'), \"no block given\")\n        };\n        return (self.block = block);\n      }, $Generator_initialize$8.$$arity = 0);\n      return (Opal.def(self, '$each', $Generator_each$9 = function $$each($a) {\n        var $iter = $Generator_each$9.$$p, block = $iter || nil, $post_args, args, self = this, yielder = nil;\n\n        if ($iter) $Generator_each$9.$$p = null;\n        \n        \n        if ($iter) $Generator_each$9.$$p = null;;\n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        yielder = $send($$($nesting, 'Yielder'), 'new', [], block.$to_proc());\n        \n        try {\n          args.unshift(yielder);\n\n          Opal.yieldX(self.block, args);\n        }\n        catch (e) {\n          if (e === $breaker) {\n            return $breaker.$v;\n          }\n          else {\n            throw e;\n          }\n        }\n      ;\n        return self;\n      }, $Generator_each$9.$$arity = -1), nil) && 'each';\n    })($nesting[0], null, $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Yielder');\n\n      var $nesting = [self].concat($parent_nesting), $Yielder_initialize$10, $Yielder_yield$11, $Yielder_$lt$lt$12;\n\n      self.$$prototype.block = nil;\n      \n      \n      Opal.def(self, '$initialize', $Yielder_initialize$10 = function $$initialize() {\n        var $iter = $Yielder_initialize$10.$$p, block = $iter || nil, self = this;\n\n        if ($iter) $Yielder_initialize$10.$$p = null;\n        \n        \n        if ($iter) $Yielder_initialize$10.$$p = null;;\n        return (self.block = block);\n      }, $Yielder_initialize$10.$$arity = 0);\n      \n      Opal.def(self, '$yield', $Yielder_yield$11 = function($a) {\n        var $post_args, values, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        values = $post_args;;\n        \n        var value = Opal.yieldX(self.block, values);\n\n        if (value === $breaker) {\n          throw $breaker;\n        }\n\n        return value;\n      ;\n      }, $Yielder_yield$11.$$arity = -1);\n      return (Opal.def(self, '$<<', $Yielder_$lt$lt$12 = function($a) {\n        var $post_args, values, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        values = $post_args;;\n        $send(self, 'yield', Opal.to_a(values));\n        return self;\n      }, $Yielder_$lt$lt$12.$$arity = -1), nil) && '<<';\n    })($nesting[0], null, $nesting);\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Lazy');\n\n      var $nesting = [self].concat($parent_nesting), $Lazy_initialize$13, $Lazy_lazy$16, $Lazy_collect$17, $Lazy_collect_concat$19, $Lazy_drop$23, $Lazy_drop_while$25, $Lazy_enum_for$27, $Lazy_find_all$28, $Lazy_grep$30, $Lazy_reject$33, $Lazy_take$35, $Lazy_take_while$37, $Lazy_inspect$39;\n\n      self.$$prototype.enumerator = nil;\n      \n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'StopLazyError');\n\n        var $nesting = [self].concat($parent_nesting);\n\n        return nil\n      })($nesting[0], $$($nesting, 'Exception'), $nesting);\n      \n      Opal.def(self, '$initialize', $Lazy_initialize$13 = function $$initialize(object, size) {\n        var $iter = $Lazy_initialize$13.$$p, block = $iter || nil, $$14, self = this;\n\n        if ($iter) $Lazy_initialize$13.$$p = null;\n        \n        \n        if ($iter) $Lazy_initialize$13.$$p = null;;\n        \n        if (size == null) {\n          size = nil;\n        };\n        if ((block !== nil)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy new without a block\")\n        };\n        self.enumerator = object;\n        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Lazy_initialize$13, false), [size], ($$14 = function(yielder, $a){var self = $$14.$$s || this, $post_args, each_args, $$15;\n\n        \n          \n          if (yielder == null) {\n            yielder = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          each_args = $post_args;;\n          try {\n            return $send(object, 'each', Opal.to_a(each_args), ($$15 = function($b){var self = $$15.$$s || this, $post_args, args;\n\n            \n              \n              $post_args = Opal.slice.call(arguments, 0, arguments.length);\n              \n              args = $post_args;;\n              \n            args.unshift(yielder);\n\n            Opal.yieldX(block, args);\n          ;}, $$15.$$s = self, $$15.$$arity = -1, $$15))\n          } catch ($err) {\n            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {\n              try {\n                return nil\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          };}, $$14.$$s = self, $$14.$$arity = -2, $$14));\n      }, $Lazy_initialize$13.$$arity = -2);\n      Opal.alias(self, \"force\", \"to_a\");\n      \n      Opal.def(self, '$lazy', $Lazy_lazy$16 = function $$lazy() {\n        var self = this;\n\n        return self\n      }, $Lazy_lazy$16.$$arity = 0);\n      \n      Opal.def(self, '$collect', $Lazy_collect$17 = function $$collect() {\n        var $iter = $Lazy_collect$17.$$p, block = $iter || nil, $$18, self = this;\n\n        if ($iter) $Lazy_collect$17.$$p = null;\n        \n        \n        if ($iter) $Lazy_collect$17.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy map without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, self.$enumerator_size()], ($$18 = function(enum$, $a){var self = $$18.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          enum$.$yield(value);\n        ;}, $$18.$$s = self, $$18.$$arity = -2, $$18));\n      }, $Lazy_collect$17.$$arity = 0);\n      \n      Opal.def(self, '$collect_concat', $Lazy_collect_concat$19 = function $$collect_concat() {\n        var $iter = $Lazy_collect_concat$19.$$p, block = $iter || nil, $$20, self = this;\n\n        if ($iter) $Lazy_collect_concat$19.$$p = null;\n        \n        \n        if ($iter) $Lazy_collect_concat$19.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy map without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$20 = function(enum$, $a){var self = $$20.$$s || this, $post_args, args, $$21, $$22;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ((value)['$respond_to?'](\"force\") && (value)['$respond_to?'](\"each\")) {\n            $send((value), 'each', [], ($$21 = function(v){var self = $$21.$$s || this;\n\n          \n            \n            if (v == null) {\n              v = nil;\n            };\n            return enum$.$yield(v);}, $$21.$$s = self, $$21.$$arity = 1, $$21))\n          }\n          else {\n            var array = $$($nesting, 'Opal').$try_convert(value, $$($nesting, 'Array'), \"to_ary\");\n\n            if (array === nil) {\n              enum$.$yield(value);\n            }\n            else {\n              $send((value), 'each', [], ($$22 = function(v){var self = $$22.$$s || this;\n\n          \n            \n            if (v == null) {\n              v = nil;\n            };\n            return enum$.$yield(v);}, $$22.$$s = self, $$22.$$arity = 1, $$22));\n            }\n          }\n        ;}, $$20.$$s = self, $$20.$$arity = -2, $$20));\n      }, $Lazy_collect_concat$19.$$arity = 0);\n      \n      Opal.def(self, '$drop', $Lazy_drop$23 = function $$drop(n) {\n        var $$24, self = this, current_size = nil, set_size = nil, dropped = nil;\n\n        \n        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_lt(n, 0))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"attempt to drop negative size\")};\n        current_size = self.$enumerator_size();\n        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {\n          if ($truthy($rb_lt(n, current_size))) {\n            return n\n          } else {\n            return current_size\n          }\n        } else {\n          return current_size\n        }; return nil; })();\n        dropped = 0;\n        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$24 = function(enum$, $a){var self = $$24.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy($rb_lt(dropped, n))) {\n            return (dropped = $rb_plus(dropped, 1))\n          } else {\n            return $send(enum$, 'yield', Opal.to_a(args))\n          };}, $$24.$$s = self, $$24.$$arity = -2, $$24));\n      }, $Lazy_drop$23.$$arity = 1);\n      \n      Opal.def(self, '$drop_while', $Lazy_drop_while$25 = function $$drop_while() {\n        var $iter = $Lazy_drop_while$25.$$p, block = $iter || nil, $$26, self = this, succeeding = nil;\n\n        if ($iter) $Lazy_drop_while$25.$$p = null;\n        \n        \n        if ($iter) $Lazy_drop_while$25.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy drop_while without a block\")\n        };\n        succeeding = true;\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$26 = function(enum$, $a){var self = $$26.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy(succeeding)) {\n            \n            var value = Opal.yieldX(block, args);\n\n            if ($falsy(value)) {\n              succeeding = false;\n\n              $send(enum$, 'yield', Opal.to_a(args));\n            }\n          \n          } else {\n            return $send(enum$, 'yield', Opal.to_a(args))\n          };}, $$26.$$s = self, $$26.$$arity = -2, $$26));\n      }, $Lazy_drop_while$25.$$arity = 0);\n      \n      Opal.def(self, '$enum_for', $Lazy_enum_for$27 = function $$enum_for($a, $b) {\n        var $iter = $Lazy_enum_for$27.$$p, block = $iter || nil, $post_args, method, args, self = this;\n\n        if ($iter) $Lazy_enum_for$27.$$p = null;\n        \n        \n        if ($iter) $Lazy_enum_for$27.$$p = null;;\n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        if ($post_args.length > 0) {\n          method = $post_args[0];\n          $post_args.splice(0, 1);\n        }\n        if (method == null) {\n          method = \"each\";\n        };\n        \n        args = $post_args;;\n        return $send(self.$class(), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());\n      }, $Lazy_enum_for$27.$$arity = -1);\n      \n      Opal.def(self, '$find_all', $Lazy_find_all$28 = function $$find_all() {\n        var $iter = $Lazy_find_all$28.$$p, block = $iter || nil, $$29, self = this;\n\n        if ($iter) $Lazy_find_all$28.$$p = null;\n        \n        \n        if ($iter) $Lazy_find_all$28.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy select without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$29 = function(enum$, $a){var self = $$29.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ($truthy(value)) {\n            $send(enum$, 'yield', Opal.to_a(args));\n          }\n        ;}, $$29.$$s = self, $$29.$$arity = -2, $$29));\n      }, $Lazy_find_all$28.$$arity = 0);\n      Opal.alias(self, \"flat_map\", \"collect_concat\");\n      \n      Opal.def(self, '$grep', $Lazy_grep$30 = function $$grep(pattern) {\n        var $iter = $Lazy_grep$30.$$p, block = $iter || nil, $$31, $$32, self = this;\n\n        if ($iter) $Lazy_grep$30.$$p = null;\n        \n        \n        if ($iter) $Lazy_grep$30.$$p = null;;\n        if ($truthy(block)) {\n          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$31 = function(enum$, $a){var self = $$31.$$s || this, $post_args, args;\n\n          \n            \n            if (enum$ == null) {\n              enum$ = nil;\n            };\n            \n            $post_args = Opal.slice.call(arguments, 1, arguments.length);\n            \n            args = $post_args;;\n            \n            var param = $$($nesting, 'Opal').$destructure(args),\n                value = pattern['$==='](param);\n\n            if ($truthy(value)) {\n              value = Opal.yield1(block, param);\n\n              enum$.$yield(Opal.yield1(block, param));\n            }\n          ;}, $$31.$$s = self, $$31.$$arity = -2, $$31))\n        } else {\n          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$32 = function(enum$, $a){var self = $$32.$$s || this, $post_args, args;\n\n          \n            \n            if (enum$ == null) {\n              enum$ = nil;\n            };\n            \n            $post_args = Opal.slice.call(arguments, 1, arguments.length);\n            \n            args = $post_args;;\n            \n            var param = $$($nesting, 'Opal').$destructure(args),\n                value = pattern['$==='](param);\n\n            if ($truthy(value)) {\n              enum$.$yield(param);\n            }\n          ;}, $$32.$$s = self, $$32.$$arity = -2, $$32))\n        };\n      }, $Lazy_grep$30.$$arity = 1);\n      Opal.alias(self, \"map\", \"collect\");\n      Opal.alias(self, \"select\", \"find_all\");\n      \n      Opal.def(self, '$reject', $Lazy_reject$33 = function $$reject() {\n        var $iter = $Lazy_reject$33.$$p, block = $iter || nil, $$34, self = this;\n\n        if ($iter) $Lazy_reject$33.$$p = null;\n        \n        \n        if ($iter) $Lazy_reject$33.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy reject without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$34 = function(enum$, $a){var self = $$34.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ($falsy(value)) {\n            $send(enum$, 'yield', Opal.to_a(args));\n          }\n        ;}, $$34.$$s = self, $$34.$$arity = -2, $$34));\n      }, $Lazy_reject$33.$$arity = 0);\n      \n      Opal.def(self, '$take', $Lazy_take$35 = function $$take(n) {\n        var $$36, self = this, current_size = nil, set_size = nil, taken = nil;\n\n        \n        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_lt(n, 0))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"attempt to take negative size\")};\n        current_size = self.$enumerator_size();\n        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {\n          if ($truthy($rb_lt(n, current_size))) {\n            return n\n          } else {\n            return current_size\n          }\n        } else {\n          return current_size\n        }; return nil; })();\n        taken = 0;\n        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$36 = function(enum$, $a){var self = $$36.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy($rb_lt(taken, n))) {\n            \n            $send(enum$, 'yield', Opal.to_a(args));\n            return (taken = $rb_plus(taken, 1));\n          } else {\n            return self.$raise($$($nesting, 'StopLazyError'))\n          };}, $$36.$$s = self, $$36.$$arity = -2, $$36));\n      }, $Lazy_take$35.$$arity = 1);\n      \n      Opal.def(self, '$take_while', $Lazy_take_while$37 = function $$take_while() {\n        var $iter = $Lazy_take_while$37.$$p, block = $iter || nil, $$38, self = this;\n\n        if ($iter) $Lazy_take_while$37.$$p = null;\n        \n        \n        if ($iter) $Lazy_take_while$37.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy take_while without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$38 = function(enum$, $a){var self = $$38.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ($truthy(value)) {\n            $send(enum$, 'yield', Opal.to_a(args));\n          }\n          else {\n            self.$raise($$($nesting, 'StopLazyError'));\n          }\n        ;}, $$38.$$s = self, $$38.$$arity = -2, $$38));\n      }, $Lazy_take_while$37.$$arity = 0);\n      Opal.alias(self, \"to_enum\", \"enum_for\");\n      return (Opal.def(self, '$inspect', $Lazy_inspect$39 = function $$inspect() {\n        var self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \": \" + (self.enumerator.$inspect()) + \">\"\n      }, $Lazy_inspect$39.$$arity = 0), nil) && 'inspect';\n    })($nesting[0], self, $nesting);\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/numeric\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$respond_to?', '$coerce', '$__send__', '$===', '$raise', '$equal?', '$-', '$*', '$div', '$<', '$-@', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$coerce_to!', '$round', '$to_i', '$truncate', '$>']);\n  \n  self.$require(\"corelib/comparable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Numeric');\n\n    var $nesting = [self].concat($parent_nesting), $Numeric_coerce$1, $Numeric___coerced__$2, $Numeric_$lt_eq_gt$3, $Numeric_$plus$$4, $Numeric_$minus$$5, $Numeric_$percent$6, $Numeric_abs$7, $Numeric_abs2$8, $Numeric_angle$9, $Numeric_ceil$10, $Numeric_conj$11, $Numeric_denominator$12, $Numeric_div$13, $Numeric_divmod$14, $Numeric_fdiv$15, $Numeric_floor$16, $Numeric_i$17, $Numeric_imag$18, $Numeric_integer$ques$19, $Numeric_nonzero$ques$20, $Numeric_numerator$21, $Numeric_polar$22, $Numeric_quo$23, $Numeric_real$24, $Numeric_real$ques$25, $Numeric_rect$26, $Numeric_round$27, $Numeric_to_c$28, $Numeric_to_int$29, $Numeric_truncate$30, $Numeric_zero$ques$31, $Numeric_positive$ques$32, $Numeric_negative$ques$33, $Numeric_dup$34, $Numeric_clone$35, $Numeric_finite$ques$36, $Numeric_infinite$ques$37;\n\n    \n    self.$include($$($nesting, 'Comparable'));\n    \n    Opal.def(self, '$coerce', $Numeric_coerce$1 = function $$coerce(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$instance_of?'](self.$class()))) {\n        return [other, self]};\n      return [self.$Float(other), self.$Float(self)];\n    }, $Numeric_coerce$1.$$arity = 1);\n    \n    Opal.def(self, '$__coerced__', $Numeric___coerced__$2 = function $$__coerced__(method, other) {\n      var $a, $b, self = this, a = nil, b = nil, $case = nil;\n\n      if ($truthy(other['$respond_to?'](\"coerce\"))) {\n        \n        $b = other.$coerce(self), $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b;\n        return a.$__send__(method, b);\n      } else {\n        return (function() {$case = method;\n        if (\"+\"['$===']($case) || \"-\"['$===']($case) || \"*\"['$===']($case) || \"/\"['$===']($case) || \"%\"['$===']($case) || \"&\"['$===']($case) || \"|\"['$===']($case) || \"^\"['$===']($case) || \"**\"['$===']($case)) {return self.$raise($$($nesting, 'TypeError'), \"\" + (other.$class()) + \" can't be coerced into Numeric\")}\n        else if (\">\"['$===']($case) || \">=\"['$===']($case) || \"<\"['$===']($case) || \"<=\"['$===']($case) || \"<=>\"['$===']($case)) {return self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")}\n        else { return nil }})()\n      }\n    }, $Numeric___coerced__$2.$$arity = 2);\n    \n    Opal.def(self, '$<=>', $Numeric_$lt_eq_gt$3 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(self['$equal?'](other))) {\n        return 0};\n      return nil;\n    }, $Numeric_$lt_eq_gt$3.$$arity = 1);\n    \n    Opal.def(self, '$+@', $Numeric_$plus$$4 = function() {\n      var self = this;\n\n      return self\n    }, $Numeric_$plus$$4.$$arity = 0);\n    \n    Opal.def(self, '$-@', $Numeric_$minus$$5 = function() {\n      var self = this;\n\n      return $rb_minus(0, self)\n    }, $Numeric_$minus$$5.$$arity = 0);\n    \n    Opal.def(self, '$%', $Numeric_$percent$6 = function(other) {\n      var self = this;\n\n      return $rb_minus(self, $rb_times(other, self.$div(other)))\n    }, $Numeric_$percent$6.$$arity = 1);\n    \n    Opal.def(self, '$abs', $Numeric_abs$7 = function $$abs() {\n      var self = this;\n\n      if ($rb_lt(self, 0)) {\n        return self['$-@']()\n      } else {\n        return self\n      }\n    }, $Numeric_abs$7.$$arity = 0);\n    \n    Opal.def(self, '$abs2', $Numeric_abs2$8 = function $$abs2() {\n      var self = this;\n\n      return $rb_times(self, self)\n    }, $Numeric_abs2$8.$$arity = 0);\n    \n    Opal.def(self, '$angle', $Numeric_angle$9 = function $$angle() {\n      var self = this;\n\n      if ($rb_lt(self, 0)) {\n        return $$$($$($nesting, 'Math'), 'PI')\n      } else {\n        return 0\n      }\n    }, $Numeric_angle$9.$$arity = 0);\n    Opal.alias(self, \"arg\", \"angle\");\n    \n    Opal.def(self, '$ceil', $Numeric_ceil$10 = function $$ceil(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      return self.$to_f().$ceil(ndigits);\n    }, $Numeric_ceil$10.$$arity = -1);\n    \n    Opal.def(self, '$conj', $Numeric_conj$11 = function $$conj() {\n      var self = this;\n\n      return self\n    }, $Numeric_conj$11.$$arity = 0);\n    Opal.alias(self, \"conjugate\", \"conj\");\n    \n    Opal.def(self, '$denominator', $Numeric_denominator$12 = function $$denominator() {\n      var self = this;\n\n      return self.$to_r().$denominator()\n    }, $Numeric_denominator$12.$$arity = 0);\n    \n    Opal.def(self, '$div', $Numeric_div$13 = function $$div(other) {\n      var self = this;\n\n      \n      if (other['$=='](0)) {\n        self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by o\")};\n      return $rb_divide(self, other).$floor();\n    }, $Numeric_div$13.$$arity = 1);\n    \n    Opal.def(self, '$divmod', $Numeric_divmod$14 = function $$divmod(other) {\n      var self = this;\n\n      return [self.$div(other), self['$%'](other)]\n    }, $Numeric_divmod$14.$$arity = 1);\n    \n    Opal.def(self, '$fdiv', $Numeric_fdiv$15 = function $$fdiv(other) {\n      var self = this;\n\n      return $rb_divide(self.$to_f(), other)\n    }, $Numeric_fdiv$15.$$arity = 1);\n    \n    Opal.def(self, '$floor', $Numeric_floor$16 = function $$floor(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      return self.$to_f().$floor(ndigits);\n    }, $Numeric_floor$16.$$arity = -1);\n    \n    Opal.def(self, '$i', $Numeric_i$17 = function $$i() {\n      var self = this;\n\n      return self.$Complex(0, self)\n    }, $Numeric_i$17.$$arity = 0);\n    \n    Opal.def(self, '$imag', $Numeric_imag$18 = function $$imag() {\n      var self = this;\n\n      return 0\n    }, $Numeric_imag$18.$$arity = 0);\n    Opal.alias(self, \"imaginary\", \"imag\");\n    \n    Opal.def(self, '$integer?', $Numeric_integer$ques$19 = function() {\n      var self = this;\n\n      return false\n    }, $Numeric_integer$ques$19.$$arity = 0);\n    Opal.alias(self, \"magnitude\", \"abs\");\n    Opal.alias(self, \"modulo\", \"%\");\n    \n    Opal.def(self, '$nonzero?', $Numeric_nonzero$ques$20 = function() {\n      var self = this;\n\n      if ($truthy(self['$zero?']())) {\n        return nil\n      } else {\n        return self\n      }\n    }, $Numeric_nonzero$ques$20.$$arity = 0);\n    \n    Opal.def(self, '$numerator', $Numeric_numerator$21 = function $$numerator() {\n      var self = this;\n\n      return self.$to_r().$numerator()\n    }, $Numeric_numerator$21.$$arity = 0);\n    Opal.alias(self, \"phase\", \"arg\");\n    \n    Opal.def(self, '$polar', $Numeric_polar$22 = function $$polar() {\n      var self = this;\n\n      return [self.$abs(), self.$arg()]\n    }, $Numeric_polar$22.$$arity = 0);\n    \n    Opal.def(self, '$quo', $Numeric_quo$23 = function $$quo(other) {\n      var self = this;\n\n      return $rb_divide($$($nesting, 'Opal')['$coerce_to!'](self, $$($nesting, 'Rational'), \"to_r\"), other)\n    }, $Numeric_quo$23.$$arity = 1);\n    \n    Opal.def(self, '$real', $Numeric_real$24 = function $$real() {\n      var self = this;\n\n      return self\n    }, $Numeric_real$24.$$arity = 0);\n    \n    Opal.def(self, '$real?', $Numeric_real$ques$25 = function() {\n      var self = this;\n\n      return true\n    }, $Numeric_real$ques$25.$$arity = 0);\n    \n    Opal.def(self, '$rect', $Numeric_rect$26 = function $$rect() {\n      var self = this;\n\n      return [self, 0]\n    }, $Numeric_rect$26.$$arity = 0);\n    Opal.alias(self, \"rectangular\", \"rect\");\n    \n    Opal.def(self, '$round', $Numeric_round$27 = function $$round(digits) {\n      var self = this;\n\n      \n      ;\n      return self.$to_f().$round(digits);\n    }, $Numeric_round$27.$$arity = -1);\n    \n    Opal.def(self, '$to_c', $Numeric_to_c$28 = function $$to_c() {\n      var self = this;\n\n      return self.$Complex(self, 0)\n    }, $Numeric_to_c$28.$$arity = 0);\n    \n    Opal.def(self, '$to_int', $Numeric_to_int$29 = function $$to_int() {\n      var self = this;\n\n      return self.$to_i()\n    }, $Numeric_to_int$29.$$arity = 0);\n    \n    Opal.def(self, '$truncate', $Numeric_truncate$30 = function $$truncate(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      return self.$to_f().$truncate(ndigits);\n    }, $Numeric_truncate$30.$$arity = -1);\n    \n    Opal.def(self, '$zero?', $Numeric_zero$ques$31 = function() {\n      var self = this;\n\n      return self['$=='](0)\n    }, $Numeric_zero$ques$31.$$arity = 0);\n    \n    Opal.def(self, '$positive?', $Numeric_positive$ques$32 = function() {\n      var self = this;\n\n      return $rb_gt(self, 0)\n    }, $Numeric_positive$ques$32.$$arity = 0);\n    \n    Opal.def(self, '$negative?', $Numeric_negative$ques$33 = function() {\n      var self = this;\n\n      return $rb_lt(self, 0)\n    }, $Numeric_negative$ques$33.$$arity = 0);\n    \n    Opal.def(self, '$dup', $Numeric_dup$34 = function $$dup() {\n      var self = this;\n\n      return self\n    }, $Numeric_dup$34.$$arity = 0);\n    \n    Opal.def(self, '$clone', $Numeric_clone$35 = function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      return self;\n    }, $Numeric_clone$35.$$arity = -1);\n    \n    Opal.def(self, '$finite?', $Numeric_finite$ques$36 = function() {\n      var self = this;\n\n      return true\n    }, $Numeric_finite$ques$36.$$arity = 0);\n    return (Opal.def(self, '$infinite?', $Numeric_infinite$ques$37 = function() {\n      var self = this;\n\n      return nil\n    }, $Numeric_infinite$ques$37.$$arity = 0), nil) && 'infinite?';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/array\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$require', '$include', '$to_a', '$warn', '$raise', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$===', '$join', '$to_str', '$class', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$bsearch_index', '$to_proc', '$nil?', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$map', '$equal?', '$dup', '$each', '$[]', '$dig', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$to_s', '$new', '$max', '$min', '$!', '$>=', '$**', '$delete_if', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$-', '$<<', '$values', '$is_a?', '$last', '$first', '$upto', '$reject', '$pristine', '$singleton_class']);\n  \n  self.$require(\"corelib/enumerable\");\n  self.$require(\"corelib/numeric\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Array');\n\n    var $nesting = [self].concat($parent_nesting), $Array_$$$1, $Array_initialize$2, $Array_try_convert$3, $Array_$$4, $Array_$$5, $Array_$$6, $Array_$plus$7, $Array_$minus$8, $Array_$lt$lt$9, $Array_$lt_eq_gt$10, $Array_$eq_eq$11, $Array_$$$12, $Array_$$$eq$13, $Array_any$ques$14, $Array_assoc$15, $Array_at$16, $Array_bsearch_index$17, $Array_bsearch$18, $Array_cycle$19, $Array_clear$21, $Array_count$22, $Array_initialize_copy$23, $Array_collect$24, $Array_collect$excl$26, $Array_combination$28, $Array_repeated_combination$30, $Array_compact$32, $Array_compact$excl$33, $Array_concat$34, $Array_delete$37, $Array_delete_at$38, $Array_delete_if$39, $Array_dig$41, $Array_drop$42, $Array_dup$43, $Array_each$44, $Array_each_index$46, $Array_empty$ques$48, $Array_eql$ques$49, $Array_fetch$50, $Array_fill$51, $Array_first$52, $Array_flatten$53, $Array_flatten$excl$54, $Array_hash$55, $Array_include$ques$56, $Array_index$57, $Array_insert$58, $Array_inspect$59, $Array_join$60, $Array_keep_if$61, $Array_last$63, $Array_length$64, $Array_max$65, $Array_min$66, $Array_permutation$67, $Array_repeated_permutation$69, $Array_pop$71, $Array_product$72, $Array_push$73, $Array_rassoc$74, $Array_reject$75, $Array_reject$excl$77, $Array_replace$79, $Array_reverse$80, $Array_reverse$excl$81, $Array_reverse_each$82, $Array_rindex$84, $Array_rotate$85, $Array_rotate$excl$86, $Array_sample$89, $Array_select$90, $Array_select$excl$92, $Array_shift$94, $Array_shuffle$95, $Array_shuffle$excl$96, $Array_slice$excl$97, $Array_sort$98, $Array_sort$excl$99, $Array_sort_by$excl$100, $Array_take$102, $Array_take_while$103, $Array_to_a$104, $Array_to_h$105, $Array_transpose$106, $Array_uniq$109, $Array_uniq$excl$110, $Array_unshift$111, $Array_values_at$112, $Array_zip$115, $Array_inherited$116, $Array_instance_variables$117, $Array_pack$119;\n\n    \n    self.$include($$($nesting, 'Enumerable'));\n    Opal.defineProperty(self.$$prototype, '$$is_array', true);\n    \n    // Recent versions of V8 (> 7.1) only use an optimized implementation when Array.prototype is unmodified.\n    // For instance, \"array-splice.tq\" has a \"fast path\" (ExtractFastJSArray, defined in \"src/codegen/code-stub-assembler.cc\")\n    // but it's only enabled when \"IsPrototypeInitialArrayPrototype()\" is true.\n    //\n    // Older versions of V8 were using relatively fast JS-with-extensions code even when Array.prototype is modified:\n    // https://github.com/v8/v8/blob/7.0.1/src/js/array.js#L599-L642\n    //\n    // In short, Array operations are slow in recent versions of V8 when the Array.prototype has been tampered.\n    // So, when possible, we are using faster open-coded version to boost the performance.\n\n    // As of V8 8.4, depending on the size of the array, this is up to ~25x times faster than Array#shift()\n    // Implementation is heavily inspired by: https://github.com/nodejs/node/blob/ba684805b6c0eded76e5cd89ee00328ac7a59365/lib/internal/util.js#L341-L347\n    function shiftNoArg(list) {\n      var r = list[0];\n      var index = 1;\n      var length = list.length;\n      for (; index < length; index++) {\n        list[index - 1] = list[index];\n      }\n      list.pop();\n      return r;\n    }\n\n    function toArraySubclass(obj, klass) {\n      if (klass.$$name === Opal.Array) {\n        return obj;\n      } else {\n        return klass.$allocate().$replace((obj).$to_a());\n      }\n    }\n  ;\n    Opal.defs(self, '$[]', $Array_$$$1 = function($a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      objects = $post_args;;\n      return toArraySubclass(objects, self);;\n    }, $Array_$$$1.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $Array_initialize$2 = function $$initialize(size, obj) {\n      var $iter = $Array_initialize$2.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Array_initialize$2.$$p = null;;\n      \n      if (size == null) {\n        size = nil;\n      };\n      \n      if (obj == null) {\n        obj = nil;\n      };\n      \n      if (obj !== nil && block !== nil) {\n        self.$warn(\"warning: block supersedes default value argument\")\n      }\n\n      if (size > $$$($$($nesting, 'Integer'), 'MAX')) {\n        self.$raise($$($nesting, 'ArgumentError'), \"array size too big\")\n      }\n\n      if (arguments.length > 2) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" for 0..2)\")\n      }\n\n      if (arguments.length === 0) {\n        self.splice(0, self.length);\n        return self;\n      }\n\n      if (arguments.length === 1) {\n        if (size.$$is_array) {\n          self.$replace(size.$to_a())\n          return self;\n        } else if (size['$respond_to?'](\"to_ary\")) {\n          self.$replace(size.$to_ary())\n          return self;\n        }\n      }\n\n      size = $$($nesting, 'Opal').$coerce_to(size, $$($nesting, 'Integer'), \"to_int\")\n\n      if (size < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\")\n      }\n\n      self.splice(0, self.length);\n      var i, value;\n\n      if (block === nil) {\n        for (i = 0; i < size; i++) {\n          self.push(obj);\n        }\n      }\n      else {\n        for (i = 0, value; i < size; i++) {\n          value = block(i);\n          self[i] = value;\n        }\n      }\n\n      return self;\n    ;\n    }, $Array_initialize$2.$$arity = -1);\n    Opal.defs(self, '$try_convert', $Array_try_convert$3 = function $$try_convert(obj) {\n      var self = this;\n\n      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Array'), \"to_ary\")\n    }, $Array_try_convert$3.$$arity = 1);\n    \n    Opal.def(self, '$&', $Array_$$4 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      \n      var result = [], hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        Opal.hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if (Opal.hash_delete(hash, item) !== undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    }, $Array_$$4.$$arity = 1);\n    \n    Opal.def(self, '$|', $Array_$$5 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      \n      var hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        Opal.hash_put(hash, self[i], true);\n      }\n\n      for (i = 0, length = other.length; i < length; i++) {\n        Opal.hash_put(hash, other[i], true);\n      }\n\n      return hash.$keys();\n    ;\n    }, $Array_$$5.$$arity = 1);\n    \n    Opal.def(self, '$*', $Array_$$6 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n        return self.$join(other.$to_str())};\n      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(other < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative argument\")};\n      \n      var result = [],\n          converted = self.$to_a();\n\n      for (var i = 0; i < other; i++) {\n        result = result.concat(converted);\n      }\n\n      return toArraySubclass(result, self.$class());\n    ;\n    }, $Array_$$6.$$arity = 1);\n    \n    Opal.def(self, '$+', $Array_$plus$7 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      return self.concat(other);;\n    }, $Array_$plus$7.$$arity = 1);\n    \n    Opal.def(self, '$-', $Array_$minus$8 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      if ($truthy(self.length === 0)) {\n        return []};\n      if ($truthy(other.length === 0)) {\n        return self.slice()};\n      \n      var result = [], hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        Opal.hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if (Opal.hash_get(hash, item) === undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    }, $Array_$minus$8.$$arity = 1);\n    \n    Opal.def(self, '$<<', $Array_$lt$lt$9 = function(object) {\n      var self = this;\n\n      \n      self.push(object);\n      return self;\n    }, $Array_$lt$lt$9.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $Array_$lt_eq_gt$10 = function(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        other = other.$to_a()\n      } else if ($truthy(other['$respond_to?'](\"to_ary\"))) {\n        other = other.$to_ary().$to_a()\n      } else {\n        return nil\n      };\n      \n      if (self.$hash() === other.$hash()) {\n        return 0;\n      }\n\n      var count = Math.min(self.length, other.length);\n\n      for (var i = 0; i < count; i++) {\n        var tmp = (self[i])['$<=>'](other[i]);\n\n        if (tmp !== 0) {\n          return tmp;\n        }\n      }\n\n      return (self.length)['$<=>'](other.length);\n    ;\n    }, $Array_$lt_eq_gt$10.$$arity = 1);\n    \n    Opal.def(self, '$==', $Array_$eq_eq$11 = function(other) {\n      var self = this;\n\n      \n      var recursed = {};\n\n      function _eqeq(array, other) {\n        var i, length, a, b;\n\n        if (array === other)\n          return true;\n\n        if (!other.$$is_array) {\n          if ($$($nesting, 'Opal')['$respond_to?'](other, \"to_ary\")) {\n            return (other)['$=='](array);\n          } else {\n            return false;\n          }\n        }\n\n        if (array.$$constructor !== Array)\n          array = (array).$to_a();\n        if (other.$$constructor !== Array)\n          other = (other).$to_a();\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[(array).$object_id()] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty((a).$object_id())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$=='](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    \n    }, $Array_$eq_eq$11.$$arity = 1);\n    \n    function $array_slice_range(self, index) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      exclude = index.excl;\n      from    = Opal.Opal.$coerce_to(index.begin, Opal.Integer, 'to_int');\n      to      = Opal.Opal.$coerce_to(index.end, Opal.Integer, 'to_int');\n\n      if (from < 0) {\n        from += size;\n\n        if (from < 0) {\n          return nil;\n        }\n      }\n\n      if (from > size) {\n        return nil;\n      }\n\n      if (to < 0) {\n        to += size;\n\n        if (to < 0) {\n          return [];\n        }\n      }\n\n      if (!exclude) {\n        to += 1;\n      }\n\n      result = self.slice(from, to);\n      return toArraySubclass(result, self.$class());\n    }\n\n    function $array_slice_index_length(self, index, length) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      index = Opal.Opal.$coerce_to(index, Opal.Integer, 'to_int');\n\n      if (index < 0) {\n        index += size;\n\n        if (index < 0) {\n          return nil;\n        }\n      }\n\n      if (length === undefined) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n\n        return self[index];\n      }\n      else {\n        length = Opal.Opal.$coerce_to(length, Opal.Integer, 'to_int');\n\n        if (length < 0 || index > size || index < 0) {\n          return nil;\n        }\n\n        result = self.slice(index, index + length);\n      }\n      return toArraySubclass(result, self.$class());\n    }\n  ;\n    \n    Opal.def(self, '$[]', $Array_$$$12 = function(index, length) {\n      var self = this;\n\n      \n      ;\n      \n      if (index.$$is_range) {\n        return $array_slice_range(self, index);\n      }\n      else {\n        return $array_slice_index_length(self, index, length);\n      }\n    ;\n    }, $Array_$$$12.$$arity = -2);\n    \n    Opal.def(self, '$[]=', $Array_$$$eq$13 = function(index, value, extra) {\n      var self = this, data = nil, length = nil;\n\n      \n      ;\n            var i, size = self.length;;\n      if ($truthy($$($nesting, 'Range')['$==='](index))) {\n        \n        data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {\n          return value.$to_a()\n        } else if ($truthy(value['$respond_to?'](\"to_ary\"))) {\n          return value.$to_ary().$to_a()\n        } else {\n          return [value]\n        }; return nil; })();\n        \n        var exclude = index.excl,\n            from    = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), \"to_int\"),\n            to      = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), \"to_int\");\n\n        if (from < 0) {\n          from += size;\n\n          if (from < 0) {\n            self.$raise($$($nesting, 'RangeError'), \"\" + (index.$inspect()) + \" out of range\");\n          }\n        }\n\n        if (to < 0) {\n          to += size;\n        }\n\n        if (!exclude) {\n          to += 1;\n        }\n\n        if (from > size) {\n          for (i = size; i < from; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (to < 0) {\n          self.splice.apply(self, [from, 0].concat(data));\n        }\n        else {\n          self.splice.apply(self, [from, to - from].concat(data));\n        }\n\n        return value;\n      ;\n      } else {\n        \n        if ($truthy(extra === undefined)) {\n          length = 1\n        } else {\n          \n          length = value;\n          value = extra;\n          data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {\n            return value.$to_a()\n          } else if ($truthy(value['$respond_to?'](\"to_ary\"))) {\n            return value.$to_ary().$to_a()\n          } else {\n            return [value]\n          }; return nil; })();\n        };\n        \n        var old;\n\n        index  = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n\n        if (index < 0) {\n          old    = index;\n          index += size;\n\n          if (index < 0) {\n            self.$raise($$($nesting, 'IndexError'), \"\" + \"index \" + (old) + \" too small for array; minimum \" + (-self.length));\n          }\n        }\n\n        if (length < 0) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"negative length (\" + (length) + \")\")\n        }\n\n        if (index > size) {\n          for (i = size; i < index; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (extra === undefined) {\n          self[index] = value;\n        }\n        else {\n          self.splice.apply(self, [index, length].concat(data));\n        }\n\n        return value;\n      ;\n      };\n    }, $Array_$$$eq$13.$$arity = -3);\n    \n    Opal.def(self, '$any?', $Array_any$ques$14 = function(pattern) {\n      var $iter = $Array_any$ques$14.$$p, block = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_any$ques$14.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      \n      if ($iter) $Array_any$ques$14.$$p = null;;\n      ;\n      if (self.length === 0) return false;\n      return $send(self, Opal.find_super_dispatcher(self, 'any?', $Array_any$ques$14, false), $zuper, $iter);\n    }, $Array_any$ques$14.$$arity = -1);\n    \n    Opal.def(self, '$assoc', $Array_assoc$15 = function $$assoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if (item = self[i], item.length && (item[0])['$=='](object)) {\n          return item;\n        }\n      }\n\n      return nil;\n    \n    }, $Array_assoc$15.$$arity = 1);\n    \n    Opal.def(self, '$at', $Array_at$16 = function $$at(index) {\n      var self = this;\n\n      \n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n      \n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      return self[index];\n    ;\n    }, $Array_at$16.$$arity = 1);\n    \n    Opal.def(self, '$bsearch_index', $Array_bsearch_index$17 = function $$bsearch_index() {\n      var $iter = $Array_bsearch_index$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_bsearch_index$17.$$p = null;\n      \n      \n      if ($iter) $Array_bsearch_index$17.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"bsearch_index\")\n      };\n      \n      var min = 0,\n          max = self.length,\n          mid,\n          val,\n          ret,\n          smaller = false,\n          satisfied = nil;\n\n      while (min < max) {\n        mid = min + Math.floor((max - min) / 2);\n        val = self[mid];\n        ret = Opal.yield1(block, val);\n\n        if (ret === true) {\n          satisfied = mid;\n          smaller = true;\n        }\n        else if (ret === false || ret === nil) {\n          smaller = false;\n        }\n        else if (ret.$$is_number) {\n          if (ret === 0) { return mid; }\n          smaller = (ret < 0);\n        }\n        else {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((ret).$class()) + \" (must be numeric, true, false or nil)\")\n        }\n\n        if (smaller) { max = mid; } else { min = mid + 1; }\n      }\n\n      return satisfied;\n    ;\n    }, $Array_bsearch_index$17.$$arity = 0);\n    \n    Opal.def(self, '$bsearch', $Array_bsearch$18 = function $$bsearch() {\n      var $iter = $Array_bsearch$18.$$p, block = $iter || nil, self = this, index = nil;\n\n      if ($iter) $Array_bsearch$18.$$p = null;\n      \n      \n      if ($iter) $Array_bsearch$18.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"bsearch\")\n      };\n      index = $send(self, 'bsearch_index', [], block.$to_proc());\n      \n      if (index != null && index.$$is_number) {\n        return self[index];\n      } else {\n        return index;\n      }\n    ;\n    }, $Array_bsearch$18.$$arity = 0);\n    \n    Opal.def(self, '$cycle', $Array_cycle$19 = function $$cycle(n) {\n      var $iter = $Array_cycle$19.$$p, block = $iter || nil, $$20, $a, self = this;\n\n      if ($iter) $Array_cycle$19.$$p = null;\n      \n      \n      if ($iter) $Array_cycle$19.$$p = null;;\n      \n      if (n == null) {\n        n = nil;\n      };\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"cycle\", n], ($$20 = function(){var self = $$20.$$s || this;\n\n        if ($truthy(n['$nil?']())) {\n            return $$$($$($nesting, 'Float'), 'INFINITY')\n          } else {\n            \n            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n            if ($truthy($rb_gt(n, 0))) {\n              return $rb_times(self.$enumerator_size(), n)\n            } else {\n              return 0\n            };\n          }}, $$20.$$s = self, $$20.$$arity = 0, $$20))\n      };\n      if ($truthy(($truthy($a = self['$empty?']()) ? $a : n['$=='](0)))) {\n        return nil};\n      \n      var i, length, value;\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = Opal.yield1(block, self[i]);\n          }\n        }\n      }\n      else {\n        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n        if (n <= 0) {\n          return self;\n        }\n\n        while (n > 0) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = Opal.yield1(block, self[i]);\n          }\n\n          n--;\n        }\n      }\n    ;\n      return self;\n    }, $Array_cycle$19.$$arity = -1);\n    \n    Opal.def(self, '$clear', $Array_clear$21 = function $$clear() {\n      var self = this;\n\n      \n      self.splice(0, self.length);\n      return self;\n    }, $Array_clear$21.$$arity = 0);\n    \n    Opal.def(self, '$count', $Array_count$22 = function $$count(object) {\n      var $iter = $Array_count$22.$$p, block = $iter || nil, $a, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_count$22.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      \n      if ($iter) $Array_count$22.$$p = null;;\n      \n      if (object == null) {\n        object = nil;\n      };\n      if ($truthy(($truthy($a = object) ? $a : block))) {\n        return $send(self, Opal.find_super_dispatcher(self, 'count', $Array_count$22, false), $zuper, $iter)\n      } else {\n        return self.$size()\n      };\n    }, $Array_count$22.$$arity = -1);\n    \n    Opal.def(self, '$initialize_copy', $Array_initialize_copy$23 = function $$initialize_copy(other) {\n      var self = this;\n\n      return self.$replace(other)\n    }, $Array_initialize_copy$23.$$arity = 1);\n    \n    Opal.def(self, '$collect', $Array_collect$24 = function $$collect() {\n      var $iter = $Array_collect$24.$$p, block = $iter || nil, $$25, self = this;\n\n      if ($iter) $Array_collect$24.$$p = null;\n      \n      \n      if ($iter) $Array_collect$24.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect\"], ($$25 = function(){var self = $$25.$$s || this;\n\n        return self.$size()}, $$25.$$s = self, $$25.$$arity = 0, $$25))\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, self[i]);\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, $Array_collect$24.$$arity = 0);\n    \n    Opal.def(self, '$collect!', $Array_collect$excl$26 = function() {\n      var $iter = $Array_collect$excl$26.$$p, block = $iter || nil, $$27, self = this;\n\n      if ($iter) $Array_collect$excl$26.$$p = null;\n      \n      \n      if ($iter) $Array_collect$excl$26.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect!\"], ($$27 = function(){var self = $$27.$$s || this;\n\n        return self.$size()}, $$27.$$s = self, $$27.$$arity = 0, $$27))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, self[i]);\n        self[i] = value;\n      }\n    ;\n      return self;\n    }, $Array_collect$excl$26.$$arity = 0);\n    \n    function binomial_coefficient(n, k) {\n      if (n === k || k === 0) {\n        return 1;\n      }\n\n      if (k > 0 && n > k) {\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);\n      }\n\n      return 0;\n    }\n  ;\n    \n    Opal.def(self, '$combination', $Array_combination$28 = function $$combination(n) {\n      var $$29, $iter = $Array_combination$28.$$p, $yield = $iter || nil, self = this, num = nil;\n\n      if ($iter) $Array_combination$28.$$p = null;\n      \n      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"combination\", num], ($$29 = function(){var self = $$29.$$s || this;\n\n        return binomial_coefficient(self.length, num)}, $$29.$$s = self, $$29.$$arity = 0, $$29))\n      };\n      \n      var i, length, stack, chosen, lev, done, next;\n\n      if (num === 0) {\n        Opal.yield1($yield, [])\n      } else if (num === 1) {\n        for (i = 0, length = self.length; i < length; i++) {\n          Opal.yield1($yield, [self[i]])\n        }\n      }\n      else if (num === self.length) {\n        Opal.yield1($yield, self.slice())\n      }\n      else if (num >= 0 && num < self.length) {\n        stack = [];\n        for (i = 0; i <= num + 1; i++) {\n          stack.push(0);\n        }\n\n        chosen = [];\n        lev = 0;\n        done = false;\n        stack[0] = -1;\n\n        while (!done) {\n          chosen[lev] = self[stack[lev+1]];\n          while (lev < num - 1) {\n            lev++;\n            next = stack[lev+1] = stack[lev] + 1;\n            chosen[lev] = self[next];\n          }\n          Opal.yield1($yield, chosen.slice())\n          lev++;\n          do {\n            done = (lev === 0);\n            stack[lev]++;\n            lev--;\n          } while ( stack[lev+1] + num === self.length + lev + 1 );\n        }\n      }\n    ;\n      return self;\n    }, $Array_combination$28.$$arity = 1);\n    \n    Opal.def(self, '$repeated_combination', $Array_repeated_combination$30 = function $$repeated_combination(n) {\n      var $$31, $iter = $Array_repeated_combination$30.$$p, $yield = $iter || nil, self = this, num = nil;\n\n      if ($iter) $Array_repeated_combination$30.$$p = null;\n      \n      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"repeated_combination\", num], ($$31 = function(){var self = $$31.$$s || this;\n\n        return binomial_coefficient(self.length + num - 1, num);}, $$31.$$s = self, $$31.$$arity = 0, $$31))\n      };\n      \n      function iterate(max, from, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          Opal.yield1($yield, copy)\n          return;\n        }\n        for (var i = from; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, i, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      if (num >= 0) {\n        iterate(num, 0, [], self);\n      }\n    ;\n      return self;\n    }, $Array_repeated_combination$30.$$arity = 1);\n    \n    Opal.def(self, '$compact', $Array_compact$32 = function $$compact() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if ((item = self[i]) !== nil) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    \n    }, $Array_compact$32.$$arity = 0);\n    \n    Opal.def(self, '$compact!', $Array_compact$excl$33 = function() {\n      var self = this;\n\n      \n      var original = self.length;\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        if (self[i] === nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      return self.length === original ? nil : self;\n    \n    }, $Array_compact$excl$33.$$arity = 0);\n    \n    Opal.def(self, '$concat', $Array_concat$34 = function $$concat($a) {\n      var $post_args, others, $$35, $$36, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      others = $post_args;;\n      others = $send(others, 'map', [], ($$35 = function(other){var self = $$35.$$s || this;\n\n      \n        \n        if (other == null) {\n          other = nil;\n        };\n        other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n          return other.$to_a()\n        } else {\n          return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n        }; return nil; })();\n        if ($truthy(other['$equal?'](self))) {\n          other = other.$dup()};\n        return other;}, $$35.$$s = self, $$35.$$arity = 1, $$35));\n      $send(others, 'each', [], ($$36 = function(other){var self = $$36.$$s || this;\n\n      \n        \n        if (other == null) {\n          other = nil;\n        };\n        \n        for (var i = 0, length = other.length; i < length; i++) {\n          self.push(other[i]);\n        }\n      ;}, $$36.$$s = self, $$36.$$arity = 1, $$36));\n      return self;\n    }, $Array_concat$34.$$arity = -1);\n    \n    Opal.def(self, '$delete', $Array_delete$37 = function(object) {\n      var $iter = $Array_delete$37.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Array_delete$37.$$p = null;\n      \n      var original = self.length;\n\n      for (var i = 0, length = original; i < length; i++) {\n        if ((self[i])['$=='](object)) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      if (self.length === original) {\n        if (($yield !== nil)) {\n          return Opal.yieldX($yield, []);\n        }\n        return nil;\n      }\n      return object;\n    \n    }, $Array_delete$37.$$arity = 1);\n    \n    Opal.def(self, '$delete_at', $Array_delete_at$38 = function $$delete_at(index) {\n      var self = this;\n\n      \n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      var result = self[index];\n\n      self.splice(index, 1);\n\n      return result;\n    \n    }, $Array_delete_at$38.$$arity = 1);\n    \n    Opal.def(self, '$delete_if', $Array_delete_if$39 = function $$delete_if() {\n      var $iter = $Array_delete_if$39.$$p, block = $iter || nil, $$40, self = this;\n\n      if ($iter) $Array_delete_if$39.$$p = null;\n      \n      \n      if ($iter) $Array_delete_if$39.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"delete_if\"], ($$40 = function(){var self = $$40.$$s || this;\n\n        return self.$size()}, $$40.$$s = self, $$40.$$arity = 0, $$40))\n      };\n      \n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value !== false && value !== nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n    ;\n      return self;\n    }, $Array_delete_if$39.$$arity = 0);\n    \n    Opal.def(self, '$dig', $Array_dig$41 = function $$dig(idx, $a) {\n      var $post_args, idxs, self = this, item = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      idxs = $post_args;;\n      item = self['$[]'](idx);\n      \n      if (item === nil || idxs.length === 0) {\n        return item;\n      }\n    ;\n      if ($truthy(item['$respond_to?'](\"dig\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', Opal.to_a(idxs));\n    }, $Array_dig$41.$$arity = -2);\n    \n    Opal.def(self, '$drop', $Array_drop$42 = function $$drop(number) {\n      var self = this;\n\n      \n      if (number < 0) {\n        self.$raise($$($nesting, 'ArgumentError'))\n      }\n\n      return self.slice(number);\n    \n    }, $Array_drop$42.$$arity = 1);\n    \n    Opal.def(self, '$dup', $Array_dup$43 = function $$dup() {\n      var $iter = $Array_dup$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_dup$43.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      \n      if (self.$$class === Opal.Array &&\n          self.$$class.$allocate.$$pristine &&\n          self.$copy_instance_variables.$$pristine &&\n          self.$initialize_dup.$$pristine) {\n        return self.slice(0);\n      }\n    ;\n      return $send(self, Opal.find_super_dispatcher(self, 'dup', $Array_dup$43, false), $zuper, $iter);\n    }, $Array_dup$43.$$arity = 0);\n    \n    Opal.def(self, '$each', $Array_each$44 = function $$each() {\n      var $iter = $Array_each$44.$$p, block = $iter || nil, $$45, self = this;\n\n      if ($iter) $Array_each$44.$$p = null;\n      \n      \n      if ($iter) $Array_each$44.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each\"], ($$45 = function(){var self = $$45.$$s || this;\n\n        return self.$size()}, $$45.$$s = self, $$45.$$arity = 0, $$45))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, self[i]);\n      }\n    ;\n      return self;\n    }, $Array_each$44.$$arity = 0);\n    \n    Opal.def(self, '$each_index', $Array_each_index$46 = function $$each_index() {\n      var $iter = $Array_each_index$46.$$p, block = $iter || nil, $$47, self = this;\n\n      if ($iter) $Array_each_index$46.$$p = null;\n      \n      \n      if ($iter) $Array_each_index$46.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_index\"], ($$47 = function(){var self = $$47.$$s || this;\n\n        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, i);\n      }\n    ;\n      return self;\n    }, $Array_each_index$46.$$arity = 0);\n    \n    Opal.def(self, '$empty?', $Array_empty$ques$48 = function() {\n      var self = this;\n\n      return self.length === 0;\n    }, $Array_empty$ques$48.$$arity = 0);\n    \n    Opal.def(self, '$eql?', $Array_eql$ques$49 = function(other) {\n      var self = this;\n\n      \n      var recursed = {};\n\n      function _eql(array, other) {\n        var i, length, a, b;\n\n        if (!other.$$is_array) {\n          return false;\n        }\n\n        other = other.$to_a();\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[(array).$object_id()] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty((a).$object_id())) {\n              if (!_eql(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$eql?'](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eql(self, other);\n    \n    }, $Array_eql$ques$49.$$arity = 1);\n    \n    Opal.def(self, '$fetch', $Array_fetch$50 = function $$fetch(index, defaults) {\n      var $iter = $Array_fetch$50.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_fetch$50.$$p = null;\n      \n      \n      if ($iter) $Array_fetch$50.$$p = null;;\n      ;\n      \n      var original = index;\n\n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index >= 0 && index < self.length) {\n        return self[index];\n      }\n\n      if (block !== nil && defaults != null) {\n        self.$warn(\"warning: block supersedes default value argument\")\n      }\n\n      if (block !== nil) {\n        return block(original);\n      }\n\n      if (defaults != null) {\n        return defaults;\n      }\n\n      if (self.length === 0) {\n        self.$raise($$($nesting, 'IndexError'), \"\" + \"index \" + (original) + \" outside of array bounds: 0...0\")\n      }\n      else {\n        self.$raise($$($nesting, 'IndexError'), \"\" + \"index \" + (original) + \" outside of array bounds: -\" + (self.length) + \"...\" + (self.length));\n      }\n    ;\n    }, $Array_fetch$50.$$arity = -2);\n    \n    Opal.def(self, '$fill', $Array_fill$51 = function $$fill($a) {\n      var $iter = $Array_fill$51.$$p, block = $iter || nil, $post_args, args, $b, $c, self = this, one = nil, two = nil, obj = nil, left = nil, right = nil;\n\n      if ($iter) $Array_fill$51.$$p = null;\n      \n      \n      if ($iter) $Array_fill$51.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n            var i, length, value;;\n      if ($truthy(block)) {\n        \n        if ($truthy(args.length > 2)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (args.$length()) + \" for 0..2)\")};\n        $c = args, $b = Opal.to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;\n      } else {\n        \n        if ($truthy(args.length == 0)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        } else if ($truthy(args.length > 3)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (args.$length()) + \" for 1..3)\")};\n        $c = args, $b = Opal.to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;\n      };\n      if ($truthy($$($nesting, 'Range')['$==='](one))) {\n        \n        if ($truthy(two)) {\n          self.$raise($$($nesting, 'TypeError'), \"length invalid with range\")};\n        left = $$($nesting, 'Opal').$coerce_to(one.$begin(), $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(left < 0)) {\n          left += this.length};\n        if ($truthy(left < 0)) {\n          self.$raise($$($nesting, 'RangeError'), \"\" + (one.$inspect()) + \" out of range\")};\n        right = $$($nesting, 'Opal').$coerce_to(one.$end(), $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(right < 0)) {\n          right += this.length};\n        if ($truthy(one['$exclude_end?']())) {\n        } else {\n          right += 1\n        };\n        if ($truthy(right <= left)) {\n          return self};\n      } else if ($truthy(one)) {\n        \n        left = $$($nesting, 'Opal').$coerce_to(one, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(left < 0)) {\n          left += this.length};\n        if ($truthy(left < 0)) {\n          left = 0};\n        if ($truthy(two)) {\n          \n          right = $$($nesting, 'Opal').$coerce_to(two, $$($nesting, 'Integer'), \"to_int\");\n          if ($truthy(right == 0)) {\n            return self};\n          right += left;\n        } else {\n          right = this.length\n        };\n      } else {\n        \n        left = 0;\n        right = this.length;\n      };\n      if ($truthy(left > this.length)) {\n        \n        for (i = this.length; i < right; i++) {\n          self[i] = nil;\n        }\n      };\n      if ($truthy(right > this.length)) {\n        this.length = right};\n      if ($truthy(block)) {\n        \n        for (length = this.length; left < right; left++) {\n          value = block(left);\n          self[left] = value;\n        }\n      \n      } else {\n        \n        for (length = this.length; left < right; left++) {\n          self[left] = obj;\n        }\n      \n      };\n      return self;\n    }, $Array_fill$51.$$arity = -1);\n    \n    Opal.def(self, '$first', $Array_first$52 = function $$first(count) {\n      var self = this;\n\n      \n      ;\n      \n      if (count == null) {\n        return self.length === 0 ? nil : self[0];\n      }\n\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n\n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\");\n      }\n\n      return self.slice(0, count);\n    ;\n    }, $Array_first$52.$$arity = -1);\n    \n    Opal.def(self, '$flatten', $Array_flatten$53 = function $$flatten(level) {\n      var self = this;\n\n      \n      ;\n      \n      function _flatten(array, level) {\n        var result = [],\n            i, length,\n            item, ary;\n\n        array = (array).$to_a();\n\n        for (i = 0, length = array.length; i < length; i++) {\n          item = array[i];\n\n          if (!$$($nesting, 'Opal')['$respond_to?'](item, \"to_ary\", true)) {\n            result.push(item);\n            continue;\n          }\n\n          ary = (item).$to_ary();\n\n          if (ary === nil) {\n            result.push(item);\n            continue;\n          }\n\n          if (!ary.$$is_array) {\n            self.$raise($$($nesting, 'TypeError'));\n          }\n\n          if (ary === self) {\n            self.$raise($$($nesting, 'ArgumentError'));\n          }\n\n          switch (level) {\n          case undefined:\n            result = result.concat(_flatten(ary));\n            break;\n          case 0:\n            result.push(ary);\n            break;\n          default:\n            result.push.apply(result, _flatten(ary, level - 1));\n          }\n        }\n        return result;\n      }\n\n      if (level !== undefined) {\n        level = $$($nesting, 'Opal').$coerce_to(level, $$($nesting, 'Integer'), \"to_int\");\n      }\n\n      return toArraySubclass(_flatten(self, level), self.$class());\n    ;\n    }, $Array_flatten$53.$$arity = -1);\n    \n    Opal.def(self, '$flatten!', $Array_flatten$excl$54 = function(level) {\n      var self = this;\n\n      \n      ;\n      \n      var flattened = self.$flatten(level);\n\n      if (self.length == flattened.length) {\n        for (var i = 0, length = self.length; i < length; i++) {\n          if (self[i] !== flattened[i]) {\n            break;\n          }\n        }\n\n        if (i == length) {\n          return nil;\n        }\n      }\n\n      self.$replace(flattened);\n    ;\n      return self;\n    }, $Array_flatten$excl$54.$$arity = -1);\n    \n    Opal.def(self, '$hash', $Array_hash$55 = function $$hash() {\n      var self = this;\n\n      \n      var top = (Opal.hash_ids === undefined),\n          result = ['A'],\n          hash_id = self.$object_id(),\n          item, i, key;\n\n      try {\n        if (top) {\n          Opal.hash_ids = Object.create(null);\n        }\n\n        // return early for recursive structures\n        if (Opal.hash_ids[hash_id]) {\n          return 'self';\n        }\n\n        for (key in Opal.hash_ids) {\n          item = Opal.hash_ids[key];\n          if (self['$eql?'](item)) {\n            return 'self';\n          }\n        }\n\n        Opal.hash_ids[hash_id] = self;\n\n        for (i = 0; i < self.length; i++) {\n          item = self[i];\n          result.push(item.$hash());\n        }\n\n        return result.join(',');\n      } finally {\n        if (top) {\n          Opal.hash_ids = undefined;\n        }\n      }\n    \n    }, $Array_hash$55.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Array_include$ques$56 = function(member) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        if ((self[i])['$=='](member)) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    }, $Array_include$ques$56.$$arity = 1);\n    \n    Opal.def(self, '$index', $Array_index$57 = function $$index(object) {\n      var $iter = $Array_index$57.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_index$57.$$p = null;\n      \n      \n      if ($iter) $Array_index$57.$$p = null;;\n      ;\n      \n      var i, length, value;\n\n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n\n      if (object != null) {\n        for (i = 0, length = self.length; i < length; i++) {\n          if ((self[i])['$=='](object)) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else {\n        return self.$enum_for(\"index\");\n      }\n\n      return nil;\n    ;\n    }, $Array_index$57.$$arity = -1);\n    \n    Opal.def(self, '$insert', $Array_insert$58 = function $$insert(index, $a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      objects = $post_args;;\n      \n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (objects.length > 0) {\n        if (index < 0) {\n          index += self.length + 1;\n\n          if (index < 0) {\n            self.$raise($$($nesting, 'IndexError'), \"\" + (index) + \" is out of bounds\");\n          }\n        }\n        if (index > self.length) {\n          for (var i = self.length; i < index; i++) {\n            self.push(nil);\n          }\n        }\n\n        self.splice.apply(self, [index, 0].concat(objects));\n      }\n    ;\n      return self;\n    }, $Array_insert$58.$$arity = -2);\n    \n    Opal.def(self, '$inspect', $Array_inspect$59 = function $$inspect() {\n      var self = this;\n\n      \n      var result = [],\n          id     = self.$__id__();\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var item = self['$[]'](i);\n\n        if ((item).$__id__() === id) {\n          result.push('[...]');\n        }\n        else {\n          result.push((item).$inspect());\n        }\n      }\n\n      return '[' + result.join(', ') + ']';\n    \n    }, $Array_inspect$59.$$arity = 0);\n    \n    Opal.def(self, '$join', $Array_join$60 = function $$join(sep) {\n      var self = this;\n      if ($gvars[\",\"] == null) $gvars[\",\"] = nil;\n\n      \n      \n      if (sep == null) {\n        sep = nil;\n      };\n      if ($truthy(self.length === 0)) {\n        return \"\"};\n      if ($truthy(sep === nil)) {\n        sep = $gvars[\",\"]};\n      \n      var result = [];\n      var i, length, item, tmp;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n\n        if ($$($nesting, 'Opal')['$respond_to?'](item, \"to_str\")) {\n          tmp = (item).$to_str();\n\n          if (tmp !== nil) {\n            result.push((tmp).$to_s());\n\n            continue;\n          }\n        }\n\n        if ($$($nesting, 'Opal')['$respond_to?'](item, \"to_ary\")) {\n          tmp = (item).$to_ary();\n\n          if (tmp === self) {\n            self.$raise($$($nesting, 'ArgumentError'));\n          }\n\n          if (tmp !== nil) {\n            result.push((tmp).$join(sep));\n\n            continue;\n          }\n        }\n\n        if ($$($nesting, 'Opal')['$respond_to?'](item, \"to_s\")) {\n          tmp = (item).$to_s();\n\n          if (tmp !== nil) {\n            result.push(tmp);\n\n            continue;\n          }\n        }\n\n        self.$raise($$($nesting, 'NoMethodError').$new(\"\" + (Opal.inspect(item)) + \" doesn't respond to #to_str, #to_ary or #to_s\", \"to_str\"));\n      }\n\n      if (sep === nil) {\n        return result.join('');\n      }\n      else {\n        return result.join($$($nesting, 'Opal')['$coerce_to!'](sep, $$($nesting, 'String'), \"to_str\").$to_s());\n      }\n    ;\n    }, $Array_join$60.$$arity = -1);\n    \n    Opal.def(self, '$keep_if', $Array_keep_if$61 = function $$keep_if() {\n      var $iter = $Array_keep_if$61.$$p, block = $iter || nil, $$62, self = this;\n\n      if ($iter) $Array_keep_if$61.$$p = null;\n      \n      \n      if ($iter) $Array_keep_if$61.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"keep_if\"], ($$62 = function(){var self = $$62.$$s || this;\n\n        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))\n      };\n      \n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value === false || value === nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n    ;\n      return self;\n    }, $Array_keep_if$61.$$arity = 0);\n    \n    Opal.def(self, '$last', $Array_last$63 = function $$last(count) {\n      var self = this;\n\n      \n      ;\n      \n      if (count == null) {\n        return self.length === 0 ? nil : self[self.length - 1];\n      }\n\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n\n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\");\n      }\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      return self.slice(self.length - count, self.length);\n    ;\n    }, $Array_last$63.$$arity = -1);\n    \n    Opal.def(self, '$length', $Array_length$64 = function $$length() {\n      var self = this;\n\n      return self.length;\n    }, $Array_length$64.$$arity = 0);\n    Opal.alias(self, \"map\", \"collect\");\n    Opal.alias(self, \"map!\", \"collect!\");\n    \n    Opal.def(self, '$max', $Array_max$65 = function $$max(n) {\n      var $iter = $Array_max$65.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_max$65.$$p = null;\n      \n      \n      if ($iter) $Array_max$65.$$p = null;;\n      ;\n      return $send(self.$each(), 'max', [n], block.$to_proc());\n    }, $Array_max$65.$$arity = -1);\n    \n    Opal.def(self, '$min', $Array_min$66 = function $$min() {\n      var $iter = $Array_min$66.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_min$66.$$p = null;\n      \n      \n      if ($iter) $Array_min$66.$$p = null;;\n      return $send(self.$each(), 'min', [], block.$to_proc());\n    }, $Array_min$66.$$arity = 0);\n    \n    // Returns the product of from, from-1, ..., from - how_many + 1.\n    function descending_factorial(from, how_many) {\n      var count = how_many >= 0 ? 1 : 0;\n      while (how_many) {\n        count *= from;\n        from--;\n        how_many--;\n      }\n      return count;\n    }\n  ;\n    \n    Opal.def(self, '$permutation', $Array_permutation$67 = function $$permutation(num) {\n      var $iter = $Array_permutation$67.$$p, block = $iter || nil, $$68, self = this, perm = nil, used = nil;\n\n      if ($iter) $Array_permutation$67.$$p = null;\n      \n      \n      if ($iter) $Array_permutation$67.$$p = null;;\n      ;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"permutation\", num], ($$68 = function(){var self = $$68.$$s || this;\n\n        return descending_factorial(self.length, num === undefined ? self.length : num);}, $$68.$$s = self, $$68.$$arity = 0, $$68))\n      };\n      \n      var permute, offensive, output;\n\n      if (num === undefined) {\n        num = self.length;\n      }\n      else {\n        num = $$($nesting, 'Opal').$coerce_to(num, $$($nesting, 'Integer'), \"to_int\")\n      }\n\n      if (num < 0 || self.length < num) {\n        // no permutations, yield nothing\n      }\n      else if (num === 0) {\n        // exactly one permutation: the zero-length array\n        Opal.yield1(block, [])\n      }\n      else if (num === 1) {\n        // this is a special, easy case\n        for (var i = 0; i < self.length; i++) {\n          Opal.yield1(block, [self[i]])\n        }\n      }\n      else {\n        // this is the general case\n        (perm = $$($nesting, 'Array').$new(num));\n        (used = $$($nesting, 'Array').$new(self.length, false));\n\n        permute = function(num, perm, index, used, blk) {\n          self = this;\n          for(var i = 0; i < self.length; i++){\n            if(used['$[]'](i)['$!']()) {\n              perm[index] = i;\n              if(index < num - 1) {\n                used[i] = true;\n                permute.call(self, num, perm, index + 1, used, blk);\n                used[i] = false;\n              }\n              else {\n                output = [];\n                for (var j = 0; j < perm.length; j++) {\n                  output.push(self[perm[j]]);\n                }\n                Opal.yield1(blk, output);\n              }\n            }\n          }\n        }\n\n        if ((block !== nil)) {\n          // offensive (both definitions) copy.\n          offensive = self.slice();\n          permute.call(offensive, num, perm, 0, used, block);\n        }\n        else {\n          permute.call(self, num, perm, 0, used, block);\n        }\n      }\n    ;\n      return self;\n    }, $Array_permutation$67.$$arity = -1);\n    \n    Opal.def(self, '$repeated_permutation', $Array_repeated_permutation$69 = function $$repeated_permutation(n) {\n      var $$70, $iter = $Array_repeated_permutation$69.$$p, $yield = $iter || nil, self = this, num = nil;\n\n      if ($iter) $Array_repeated_permutation$69.$$p = null;\n      \n      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"repeated_permutation\", num], ($$70 = function(){var self = $$70.$$s || this;\n\n        if ($truthy($rb_ge(num, 0))) {\n            return self.$size()['$**'](num)\n          } else {\n            return 0\n          }}, $$70.$$s = self, $$70.$$arity = 0, $$70))\n      };\n      \n      function iterate(max, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          Opal.yield1($yield, copy)\n          return;\n        }\n        for (var i = 0; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      iterate(num, [], self.slice());\n    ;\n      return self;\n    }, $Array_repeated_permutation$69.$$arity = 1);\n    \n    Opal.def(self, '$pop', $Array_pop$71 = function $$pop(count) {\n      var self = this;\n\n      \n      ;\n      if ($truthy(count === undefined)) {\n        \n        if ($truthy(self.length === 0)) {\n          return nil};\n        return self.pop();};\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(count < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\")};\n      if ($truthy(self.length === 0)) {\n        return []};\n      if ($truthy(count > self.length)) {\n        return self.splice(0, self.length);\n      } else {\n        return self.splice(self.length - count, self.length);\n      };\n    }, $Array_pop$71.$$arity = -1);\n    \n    Opal.def(self, '$product', $Array_product$72 = function $$product($a) {\n      var $iter = $Array_product$72.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Array_product$72.$$p = null;\n      \n      \n      if ($iter) $Array_product$72.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var result = (block !== nil) ? null : [],\n          n = args.length + 1,\n          counters = new Array(n),\n          lengths  = new Array(n),\n          arrays   = new Array(n),\n          i, m, subarray, len, resultlen = 1;\n\n      arrays[0] = self;\n      for (i = 1; i < n; i++) {\n        arrays[i] = $$($nesting, 'Opal').$coerce_to(args[i - 1], $$($nesting, 'Array'), \"to_ary\");\n      }\n\n      for (i = 0; i < n; i++) {\n        len = arrays[i].length;\n        if (len === 0) {\n          return result || self;\n        }\n        resultlen *= len;\n        if (resultlen > 2147483647) {\n          self.$raise($$($nesting, 'RangeError'), \"too big to product\")\n        }\n        lengths[i] = len;\n        counters[i] = 0;\n      }\n\n      outer_loop: for (;;) {\n        subarray = [];\n        for (i = 0; i < n; i++) {\n          subarray.push(arrays[i][counters[i]]);\n        }\n        if (result) {\n          result.push(subarray);\n        } else {\n          Opal.yield1(block, subarray)\n        }\n        m = n - 1;\n        counters[m]++;\n        while (counters[m] === lengths[m]) {\n          counters[m] = 0;\n          if (--m < 0) break outer_loop;\n          counters[m]++;\n        }\n      }\n\n      return result || self;\n    ;\n    }, $Array_product$72.$$arity = -1);\n    \n    Opal.def(self, '$push', $Array_push$73 = function $$push($a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      objects = $post_args;;\n      \n      for (var i = 0, length = objects.length; i < length; i++) {\n        self.push(objects[i]);\n      }\n    ;\n      return self;\n    }, $Array_push$73.$$arity = -1);\n    Opal.alias(self, \"append\", \"push\");\n    \n    Opal.def(self, '$rassoc', $Array_rassoc$74 = function $$rassoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length, item; i < length; i++) {\n        item = self[i];\n\n        if (item.length && item[1] !== undefined) {\n          if ((item[1])['$=='](object)) {\n            return item;\n          }\n        }\n      }\n\n      return nil;\n    \n    }, $Array_rassoc$74.$$arity = 1);\n    \n    Opal.def(self, '$reject', $Array_reject$75 = function $$reject() {\n      var $iter = $Array_reject$75.$$p, block = $iter || nil, $$76, self = this;\n\n      if ($iter) $Array_reject$75.$$p = null;\n      \n      \n      if ($iter) $Array_reject$75.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject\"], ($$76 = function(){var self = $$76.$$s || this;\n\n        return self.$size()}, $$76.$$s = self, $$76.$$arity = 0, $$76))\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value === false || value === nil) {\n          result.push(self[i]);\n        }\n      }\n      return result;\n    ;\n    }, $Array_reject$75.$$arity = 0);\n    \n    Opal.def(self, '$reject!', $Array_reject$excl$77 = function() {\n      var $iter = $Array_reject$excl$77.$$p, block = $iter || nil, $$78, self = this, original = nil;\n\n      if ($iter) $Array_reject$excl$77.$$p = null;\n      \n      \n      if ($iter) $Array_reject$excl$77.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject!\"], ($$78 = function(){var self = $$78.$$s || this;\n\n        return self.$size()}, $$78.$$s = self, $$78.$$arity = 0, $$78))\n      };\n      original = self.$length();\n      $send(self, 'delete_if', [], block.$to_proc());\n      if (self.$length()['$=='](original)) {\n        return nil\n      } else {\n        return self\n      };\n    }, $Array_reject$excl$77.$$arity = 0);\n    \n    Opal.def(self, '$replace', $Array_replace$79 = function $$replace(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      \n      self.splice(0, self.length);\n      self.push.apply(self, other);\n    ;\n      return self;\n    }, $Array_replace$79.$$arity = 1);\n    \n    Opal.def(self, '$reverse', $Array_reverse$80 = function $$reverse() {\n      var self = this;\n\n      return self.slice(0).reverse();\n    }, $Array_reverse$80.$$arity = 0);\n    \n    Opal.def(self, '$reverse!', $Array_reverse$excl$81 = function() {\n      var self = this;\n\n      return self.reverse();\n    }, $Array_reverse$excl$81.$$arity = 0);\n    \n    Opal.def(self, '$reverse_each', $Array_reverse_each$82 = function $$reverse_each() {\n      var $iter = $Array_reverse_each$82.$$p, block = $iter || nil, $$83, self = this;\n\n      if ($iter) $Array_reverse_each$82.$$p = null;\n      \n      \n      if ($iter) $Array_reverse_each$82.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reverse_each\"], ($$83 = function(){var self = $$83.$$s || this;\n\n        return self.$size()}, $$83.$$s = self, $$83.$$arity = 0, $$83))\n      };\n      $send(self.$reverse(), 'each', [], block.$to_proc());\n      return self;\n    }, $Array_reverse_each$82.$$arity = 0);\n    \n    Opal.def(self, '$rindex', $Array_rindex$84 = function $$rindex(object) {\n      var $iter = $Array_rindex$84.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_rindex$84.$$p = null;\n      \n      \n      if ($iter) $Array_rindex$84.$$p = null;;\n      ;\n      \n      var i, value;\n\n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n\n      if (object != null) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n          if ((self[i])['$=='](object)) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else if (object == null) {\n        return self.$enum_for(\"rindex\");\n      }\n\n      return nil;\n    ;\n    }, $Array_rindex$84.$$arity = -1);\n    \n    Opal.def(self, '$rotate', $Array_rotate$85 = function $$rotate(n) {\n      var self = this;\n\n      \n      \n      if (n == null) {\n        n = 1;\n      };\n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n      \n      var ary, idx, firstPart, lastPart;\n\n      if (self.length === 1) {\n        return self.slice();\n      }\n      if (self.length === 0) {\n        return [];\n      }\n\n      ary = self.slice();\n      idx = n % ary.length;\n\n      firstPart = ary.slice(idx);\n      lastPart = ary.slice(0, idx);\n      return firstPart.concat(lastPart);\n    ;\n    }, $Array_rotate$85.$$arity = -1);\n    \n    Opal.def(self, '$rotate!', $Array_rotate$excl$86 = function(cnt) {\n      var self = this, ary = nil;\n\n      \n      \n      if (cnt == null) {\n        cnt = 1;\n      };\n      \n      if (self.length === 0 || self.length === 1) {\n        return self;\n      }\n    ;\n      cnt = $$($nesting, 'Opal').$coerce_to(cnt, $$($nesting, 'Integer'), \"to_int\");\n      ary = self.$rotate(cnt);\n      return self.$replace(ary);\n    }, $Array_rotate$excl$86.$$arity = -1);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'SampleRandom');\n\n      var $nesting = [self].concat($parent_nesting), $SampleRandom_initialize$87, $SampleRandom_rand$88;\n\n      self.$$prototype.rng = nil;\n      \n      \n      Opal.def(self, '$initialize', $SampleRandom_initialize$87 = function $$initialize(rng) {\n        var self = this;\n\n        return (self.rng = rng)\n      }, $SampleRandom_initialize$87.$$arity = 1);\n      return (Opal.def(self, '$rand', $SampleRandom_rand$88 = function $$rand(size) {\n        var self = this, random = nil;\n\n        \n        random = $$($nesting, 'Opal').$coerce_to(self.rng.$rand(size), $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(random < 0)) {\n          self.$raise($$($nesting, 'RangeError'), \"random value must be >= 0\")};\n        if ($truthy(random < size)) {\n        } else {\n          self.$raise($$($nesting, 'RangeError'), \"random value must be less than Array size\")\n        };\n        return random;\n      }, $SampleRandom_rand$88.$$arity = 1), nil) && 'rand';\n    })($nesting[0], null, $nesting);\n    \n    Opal.def(self, '$sample', $Array_sample$89 = function $$sample(count, options) {\n      var $a, self = this, o = nil, rng = nil;\n\n      \n      ;\n      ;\n      if ($truthy(count === undefined)) {\n        return self.$at($$($nesting, 'Kernel').$rand(self.length))};\n      if ($truthy(options === undefined)) {\n        if ($truthy((o = $$($nesting, 'Opal')['$coerce_to?'](count, $$($nesting, 'Hash'), \"to_hash\")))) {\n          \n          options = o;\n          count = nil;\n        } else {\n          \n          options = nil;\n          count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n        }\n      } else {\n        \n        count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n        options = $$($nesting, 'Opal').$coerce_to(options, $$($nesting, 'Hash'), \"to_hash\");\n      };\n      if ($truthy(($truthy($a = count) ? count < 0 : $a))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"count must be greater than 0\")};\n      if ($truthy(options)) {\n        rng = options['$[]'](\"random\")};\n      rng = (function() {if ($truthy(($truthy($a = rng) ? rng['$respond_to?'](\"rand\") : $a))) {\n        return $$($nesting, 'SampleRandom').$new(rng)\n      } else {\n        return $$($nesting, 'Kernel')\n      }; return nil; })();\n      if ($truthy(count)) {\n      } else {\n        return self[rng.$rand(self.length)]\n      };\n      \n\n      var abandon, spin, result, i, j, k, targetIndex, oldValue;\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      switch (count) {\n        case 0:\n          return [];\n          break;\n        case 1:\n          return [self[rng.$rand(self.length)]];\n          break;\n        case 2:\n          i = rng.$rand(self.length);\n          j = rng.$rand(self.length);\n          if (i === j) {\n            j = i === 0 ? i + 1 : i - 1;\n          }\n          return [self[i], self[j]];\n          break;\n        default:\n          if (self.length / count > 3) {\n            abandon = false;\n            spin = 0;\n\n            result = $$($nesting, 'Array').$new(count);\n            i = 1;\n\n            result[0] = rng.$rand(self.length);\n            while (i < count) {\n              k = rng.$rand(self.length);\n              j = 0;\n\n              while (j < i) {\n                while (k === result[j]) {\n                  spin++;\n                  if (spin > 100) {\n                    abandon = true;\n                    break;\n                  }\n                  k = rng.$rand(self.length);\n                }\n                if (abandon) { break; }\n\n                j++;\n              }\n\n              if (abandon) { break; }\n\n              result[i] = k;\n\n              i++;\n            }\n\n            if (!abandon) {\n              i = 0;\n              while (i < count) {\n                result[i] = self[result[i]];\n                i++;\n              }\n\n              return result;\n            }\n          }\n\n          result = self.slice();\n\n          for (var c = 0; c < count; c++) {\n            targetIndex = rng.$rand(self.length);\n            oldValue = result[c];\n            result[c] = result[targetIndex];\n            result[targetIndex] = oldValue;\n          }\n\n          return count === self.length ? result : (result)['$[]'](0, count);\n      }\n    ;\n    }, $Array_sample$89.$$arity = -1);\n    \n    Opal.def(self, '$select', $Array_select$90 = function $$select() {\n      var $iter = $Array_select$90.$$p, block = $iter || nil, $$91, self = this;\n\n      if ($iter) $Array_select$90.$$p = null;\n      \n      \n      if ($iter) $Array_select$90.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"select\"], ($$91 = function(){var self = $$91.$$s || this;\n\n        return self.$size()}, $$91.$$s = self, $$91.$$arity = 0, $$91))\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = Opal.yield1(block, item);\n\n        if (Opal.truthy(value)) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    }, $Array_select$90.$$arity = 0);\n    \n    Opal.def(self, '$select!', $Array_select$excl$92 = function() {\n      var $iter = $Array_select$excl$92.$$p, block = $iter || nil, $$93, self = this;\n\n      if ($iter) $Array_select$excl$92.$$p = null;\n      \n      \n      if ($iter) $Array_select$excl$92.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"select!\"], ($$93 = function(){var self = $$93.$$s || this;\n\n        return self.$size()}, $$93.$$s = self, $$93.$$arity = 0, $$93))\n      };\n      \n      var original = self.length;\n      $send(self, 'keep_if', [], block.$to_proc());\n      return self.length === original ? nil : self;\n    ;\n    }, $Array_select$excl$92.$$arity = 0);\n    \n    Opal.def(self, '$shift', $Array_shift$94 = function $$shift(count) {\n      var self = this;\n\n      \n      ;\n      if ($truthy(count === undefined)) {\n        \n        if ($truthy(self.length === 0)) {\n          return nil};\n        return shiftNoArg(self);};\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(count < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\")};\n      if ($truthy(self.length === 0)) {\n        return []};\n      return self.splice(0, count);;\n    }, $Array_shift$94.$$arity = -1);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$shuffle', $Array_shuffle$95 = function $$shuffle(rng) {\n      var self = this;\n\n      \n      ;\n      return self.$dup().$to_a()['$shuffle!'](rng);\n    }, $Array_shuffle$95.$$arity = -1);\n    \n    Opal.def(self, '$shuffle!', $Array_shuffle$excl$96 = function(rng) {\n      var self = this;\n\n      \n      ;\n      \n      var randgen, i = self.length, j, tmp;\n\n      if (rng !== undefined) {\n        rng = $$($nesting, 'Opal')['$coerce_to?'](rng, $$($nesting, 'Hash'), \"to_hash\");\n\n        if (rng !== nil) {\n          rng = rng['$[]'](\"random\");\n\n          if (rng !== nil && rng['$respond_to?'](\"rand\")) {\n            randgen = rng;\n          }\n        }\n      }\n\n      while (i) {\n        if (randgen) {\n          j = randgen.$rand(i).$to_int();\n\n          if (j < 0) {\n            self.$raise($$($nesting, 'RangeError'), \"\" + \"random number too small \" + (j))\n          }\n\n          if (j >= i) {\n            self.$raise($$($nesting, 'RangeError'), \"\" + \"random number too big \" + (j))\n          }\n        }\n        else {\n          j = self.$rand(i);\n        }\n\n        tmp = self[--i];\n        self[i] = self[j];\n        self[j] = tmp;\n      }\n\n      return self;\n    ;\n    }, $Array_shuffle$excl$96.$$arity = -1);\n    Opal.alias(self, \"slice\", \"[]\");\n    \n    Opal.def(self, '$slice!', $Array_slice$excl$97 = function(index, length) {\n      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;\n\n      \n      ;\n      result = nil;\n      if ($truthy(length === undefined)) {\n        if ($truthy($$($nesting, 'Range')['$==='](index))) {\n          \n          range = index;\n          result = self['$[]'](range);\n          range_start = $$($nesting, 'Opal').$coerce_to(range.$begin(), $$($nesting, 'Integer'), \"to_int\");\n          range_end = $$($nesting, 'Opal').$coerce_to(range.$end(), $$($nesting, 'Integer'), \"to_int\");\n          \n          if (range_start < 0) {\n            range_start += self.length;\n          }\n\n          if (range_end < 0) {\n            range_end += self.length;\n          } else if (range_end >= self.length) {\n            range_end = self.length - 1;\n            if (range.excl) {\n              range_end += 1;\n            }\n          }\n\n          var range_length = range_end - range_start;\n          if (range.excl) {\n            range_end -= 1;\n          } else {\n            range_length += 1;\n          }\n\n          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {\n            self.splice(range_start, range_length);\n          }\n        ;\n        } else {\n          \n          start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n          \n          if (start < 0) {\n            start += self.length;\n          }\n\n          if (start < 0 || start >= self.length) {\n            return nil;\n          }\n\n          result = self[start];\n\n          if (start === 0) {\n            self.shift();\n          } else {\n            self.splice(start, 1);\n          }\n        ;\n        }\n      } else {\n        \n        start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n        \n        if (length < 0) {\n          return nil;\n        }\n\n        var end = start + length;\n\n        result = self['$[]'](start, length);\n\n        if (start < 0) {\n          start += self.length;\n        }\n\n        if (start + length > self.length) {\n          length = self.length - start;\n        }\n\n        if (start < self.length && start >= 0) {\n          self.splice(start, length);\n        }\n      ;\n      };\n      return result;\n    }, $Array_slice$excl$97.$$arity = -2);\n    \n    Opal.def(self, '$sort', $Array_sort$98 = function $$sort() {\n      var $iter = $Array_sort$98.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_sort$98.$$p = null;\n      \n      \n      if ($iter) $Array_sort$98.$$p = null;;\n      if ($truthy(self.length > 1)) {\n      } else {\n        return self\n      };\n      \n      if (block === nil) {\n        block = function(a, b) {\n          return (a)['$<=>'](b);\n        };\n      }\n\n      return self.slice().sort(function(x, y) {\n        var ret = block(x, y);\n\n        if (ret === nil) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + ((x).$inspect()) + \" with \" + ((y).$inspect()) + \" failed\");\n        }\n\n        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);\n      });\n    ;\n    }, $Array_sort$98.$$arity = 0);\n    \n    Opal.def(self, '$sort!', $Array_sort$excl$99 = function() {\n      var $iter = $Array_sort$excl$99.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_sort$excl$99.$$p = null;\n      \n      \n      if ($iter) $Array_sort$excl$99.$$p = null;;\n      \n      var result;\n\n      if ((block !== nil)) {\n        result = $send((self.slice()), 'sort', [], block.$to_proc());\n      }\n      else {\n        result = (self.slice()).$sort();\n      }\n\n      self.length = 0;\n      for(var i = 0, length = result.length; i < length; i++) {\n        self.push(result[i]);\n      }\n\n      return self;\n    ;\n    }, $Array_sort$excl$99.$$arity = 0);\n    \n    Opal.def(self, '$sort_by!', $Array_sort_by$excl$100 = function() {\n      var $iter = $Array_sort_by$excl$100.$$p, block = $iter || nil, $$101, self = this;\n\n      if ($iter) $Array_sort_by$excl$100.$$p = null;\n      \n      \n      if ($iter) $Array_sort_by$excl$100.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"sort_by!\"], ($$101 = function(){var self = $$101.$$s || this;\n\n        return self.$size()}, $$101.$$s = self, $$101.$$arity = 0, $$101))\n      };\n      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));\n    }, $Array_sort_by$excl$100.$$arity = 0);\n    \n    Opal.def(self, '$take', $Array_take$102 = function $$take(count) {\n      var self = this;\n\n      \n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'));\n      }\n\n      return self.slice(0, count);\n    \n    }, $Array_take$102.$$arity = 1);\n    \n    Opal.def(self, '$take_while', $Array_take_while$103 = function $$take_while() {\n      var $iter = $Array_take_while$103.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_take_while$103.$$p = null;\n      \n      \n      if ($iter) $Array_take_while$103.$$p = null;;\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = block(item);\n\n        if (value === false || value === nil) {\n          return result;\n        }\n\n        result.push(item);\n      }\n\n      return result;\n    ;\n    }, $Array_take_while$103.$$arity = 0);\n    \n    Opal.def(self, '$to_a', $Array_to_a$104 = function $$to_a() {\n      var self = this;\n\n      return self\n    }, $Array_to_a$104.$$arity = 0);\n    Opal.alias(self, \"to_ary\", \"to_a\");\n    \n    Opal.def(self, '$to_h', $Array_to_h$105 = function $$to_h() {\n      var self = this;\n\n      \n      var i, len = self.length, ary, key, val, hash = $hash2([], {});\n\n      for (i = 0; i < len; i++) {\n        ary = $$($nesting, 'Opal')['$coerce_to?'](self[i], $$($nesting, 'Array'), \"to_ary\");\n        if (!ary.$$is_array) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong element type \" + ((ary).$class()) + \" at \" + (i) + \" (expected array)\")\n        }\n        if (ary.length !== 2) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong array length at \" + (i) + \" (expected 2, was \" + ((ary).$length()) + \")\")\n        }\n        key = ary[0];\n        val = ary[1];\n        Opal.hash_put(hash, key, val);\n      }\n\n      return hash;\n    \n    }, $Array_to_h$105.$$arity = 0);\n    Opal.alias(self, \"to_s\", \"inspect\");\n    \n    Opal.def(self, '$transpose', $Array_transpose$106 = function $$transpose() {\n      var $$107, self = this, result = nil, max = nil;\n\n      \n      if ($truthy(self['$empty?']())) {\n        return []};\n      result = [];\n      max = nil;\n      $send(self, 'each', [], ($$107 = function(row){var self = $$107.$$s || this, $a, $$108;\n\n      \n        \n        if (row == null) {\n          row = nil;\n        };\n        row = (function() {if ($truthy($$($nesting, 'Array')['$==='](row))) {\n          return row.$to_a()\n        } else {\n          return $$($nesting, 'Opal').$coerce_to(row, $$($nesting, 'Array'), \"to_ary\").$to_a()\n        }; return nil; })();\n        max = ($truthy($a = max) ? $a : row.length);\n        if ($truthy((row.length)['$!='](max))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"element size differs (\" + (row.length) + \" should be \" + (max) + \")\")};\n        return $send((row.length), 'times', [], ($$108 = function(i){var self = $$108.$$s || this, $b, entry = nil, $writer = nil;\n\n        \n          \n          if (i == null) {\n            i = nil;\n          };\n          entry = ($truthy($b = result['$[]'](i)) ? $b : (($writer = [i, []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          return entry['$<<'](row.$at(i));}, $$108.$$s = self, $$108.$$arity = 1, $$108));}, $$107.$$s = self, $$107.$$arity = 1, $$107));\n      return result;\n    }, $Array_transpose$106.$$arity = 0);\n    \n    Opal.def(self, '$uniq', $Array_uniq$109 = function $$uniq() {\n      var $iter = $Array_uniq$109.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_uniq$109.$$p = null;\n      \n      \n      if ($iter) $Array_uniq$109.$$p = null;;\n      \n      var hash = $hash2([], {}), i, length, item, key;\n\n      if (block === nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          if (Opal.hash_get(hash, item) === undefined) {\n            Opal.hash_put(hash, item, item);\n          }\n        }\n      }\n      else {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          key = Opal.yield1(block, item);\n          if (Opal.hash_get(hash, key) === undefined) {\n            Opal.hash_put(hash, key, item);\n          }\n        }\n      }\n\n      return toArraySubclass((hash).$values(), self.$class());\n    ;\n    }, $Array_uniq$109.$$arity = 0);\n    \n    Opal.def(self, '$uniq!', $Array_uniq$excl$110 = function() {\n      var $iter = $Array_uniq$excl$110.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_uniq$excl$110.$$p = null;\n      \n      \n      if ($iter) $Array_uniq$excl$110.$$p = null;;\n      \n      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;\n\n      for (i = 0, length = original_length; i < length; i++) {\n        item = self[i];\n        key = (block === nil ? item : Opal.yield1(block, item));\n\n        if (Opal.hash_get(hash, key) === undefined) {\n          Opal.hash_put(hash, key, item);\n          continue;\n        }\n\n        self.splice(i, 1);\n        length--;\n        i--;\n      }\n\n      return self.length === original_length ? nil : self;\n    ;\n    }, $Array_uniq$excl$110.$$arity = 0);\n    \n    Opal.def(self, '$unshift', $Array_unshift$111 = function $$unshift($a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      objects = $post_args;;\n      \n      for (var i = objects.length - 1; i >= 0; i--) {\n        self.unshift(objects[i]);\n      }\n    ;\n      return self;\n    }, $Array_unshift$111.$$arity = -1);\n    Opal.alias(self, \"prepend\", \"unshift\");\n    \n    Opal.def(self, '$values_at', $Array_values_at$112 = function $$values_at($a) {\n      var $post_args, args, $$113, self = this, out = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      out = [];\n      $send(args, 'each', [], ($$113 = function(elem){var self = $$113.$$s || this, $$114, finish = nil, start = nil, i = nil;\n\n      \n        \n        if (elem == null) {\n          elem = nil;\n        };\n        if ($truthy(elem['$is_a?']($$($nesting, 'Range')))) {\n          \n          finish = $$($nesting, 'Opal').$coerce_to(elem.$last(), $$($nesting, 'Integer'), \"to_int\");\n          start = $$($nesting, 'Opal').$coerce_to(elem.$first(), $$($nesting, 'Integer'), \"to_int\");\n          \n          if (start < 0) {\n            start = start + self.length;\n            return nil;;\n          }\n        ;\n          \n          if (finish < 0) {\n            finish = finish + self.length;\n          }\n          if (elem['$exclude_end?']()) {\n            finish--;\n          }\n          if (finish < start) {\n            return nil;;\n          }\n        ;\n          return $send(start, 'upto', [finish], ($$114 = function(i){var self = $$114.$$s || this;\n\n          \n            \n            if (i == null) {\n              i = nil;\n            };\n            return out['$<<'](self.$at(i));}, $$114.$$s = self, $$114.$$arity = 1, $$114));\n        } else {\n          \n          i = $$($nesting, 'Opal').$coerce_to(elem, $$($nesting, 'Integer'), \"to_int\");\n          return out['$<<'](self.$at(i));\n        };}, $$113.$$s = self, $$113.$$arity = 1, $$113));\n      return out;\n    }, $Array_values_at$112.$$arity = -1);\n    \n    Opal.def(self, '$zip', $Array_zip$115 = function $$zip($a) {\n      var $iter = $Array_zip$115.$$p, block = $iter || nil, $post_args, others, $b, self = this;\n\n      if ($iter) $Array_zip$115.$$p = null;\n      \n      \n      if ($iter) $Array_zip$115.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      others = $post_args;;\n      \n      var result = [], size = self.length, part, o, i, j, jj;\n\n      for (j = 0, jj = others.length; j < jj; j++) {\n        o = others[j];\n        if (o.$$is_array) {\n          continue;\n        }\n        if (o.$$is_enumerator) {\n          if (o.$size() === Infinity) {\n            others[j] = o.$take(size);\n          } else {\n            others[j] = o.$to_a();\n          }\n          continue;\n        }\n        others[j] = ($truthy($b = $$($nesting, 'Opal')['$coerce_to?'](o, $$($nesting, 'Array'), \"to_ary\")) ? $b : $$($nesting, 'Opal')['$coerce_to!'](o, $$($nesting, 'Enumerator'), \"each\")).$to_a();\n      }\n\n      for (i = 0; i < size; i++) {\n        part = [self[i]];\n\n        for (j = 0, jj = others.length; j < jj; j++) {\n          o = others[j][i];\n\n          if (o == null) {\n            o = nil;\n          }\n\n          part[j + 1] = o;\n        }\n\n        result[i] = part;\n      }\n\n      if (block !== nil) {\n        for (i = 0; i < size; i++) {\n          block(result[i]);\n        }\n\n        return nil;\n      }\n\n      return result;\n    ;\n    }, $Array_zip$115.$$arity = -1);\n    Opal.defs(self, '$inherited', $Array_inherited$116 = function $$inherited(klass) {\n      var self = this;\n\n      \n      klass.$$prototype.$to_a = function() {\n        return this.slice(0, this.length);\n      }\n    \n    }, $Array_inherited$116.$$arity = 1);\n    \n    Opal.def(self, '$instance_variables', $Array_instance_variables$117 = function $$instance_variables() {\n      var $$118, $iter = $Array_instance_variables$117.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_instance_variables$117.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      return $send($send(self, Opal.find_super_dispatcher(self, 'instance_variables', $Array_instance_variables$117, false), $zuper, $iter), 'reject', [], ($$118 = function(ivar){var self = $$118.$$s || this, $a;\n\n      \n        \n        if (ivar == null) {\n          ivar = nil;\n        };\n        return ($truthy($a = /^@\\d+$/.test(ivar)) ? $a : ivar['$=='](\"@length\"));}, $$118.$$s = self, $$118.$$arity = 1, $$118))\n    }, $Array_instance_variables$117.$$arity = 0);\n    $$($nesting, 'Opal').$pristine(self.$singleton_class(), \"allocate\");\n    $$($nesting, 'Opal').$pristine(self, \"copy_instance_variables\", \"initialize_dup\");\n    return (Opal.def(self, '$pack', $Array_pack$119 = function $$pack($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return self.$raise(\"To use Array#pack, you must first require 'corelib/array/pack'.\");\n    }, $Array_pack$119.$$arity = -1), nil) && 'pack';\n  })($nesting[0], Array, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/hash\"] = function(Opal) {\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$coerce_to!', '$each', '$fetch', '$>=', '$>', '$==', '$compare_by_identity', '$lambda?', '$abs', '$arity', '$enum_for', '$size', '$respond_to?', '$class', '$dig', '$new', '$inspect', '$map', '$to_proc', '$flatten', '$eql?', '$default', '$dup', '$default_proc', '$default_proc=', '$-', '$default=', '$proc']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Hash');\n\n    var $nesting = [self].concat($parent_nesting), $Hash_$$$1, $Hash_allocate$2, $Hash_try_convert$3, $Hash_initialize$4, $Hash_$eq_eq$5, $Hash_$gt_eq$6, $Hash_$gt$8, $Hash_$lt$9, $Hash_$lt_eq$10, $Hash_$$$11, $Hash_$$$eq$12, $Hash_assoc$13, $Hash_clear$14, $Hash_clone$15, $Hash_compact$16, $Hash_compact$excl$17, $Hash_compare_by_identity$18, $Hash_compare_by_identity$ques$19, $Hash_default$20, $Hash_default$eq$21, $Hash_default_proc$22, $Hash_default_proc$eq$23, $Hash_delete$24, $Hash_delete_if$25, $Hash_dig$27, $Hash_each$28, $Hash_each_key$30, $Hash_each_value$32, $Hash_empty$ques$34, $Hash_fetch$35, $Hash_fetch_values$36, $Hash_flatten$38, $Hash_has_key$ques$39, $Hash_has_value$ques$40, $Hash_hash$41, $Hash_index$42, $Hash_indexes$43, $Hash_inspect$44, $Hash_invert$45, $Hash_keep_if$46, $Hash_keys$48, $Hash_length$49, $Hash_merge$50, $Hash_merge$excl$51, $Hash_rassoc$52, $Hash_rehash$53, $Hash_reject$54, $Hash_reject$excl$56, $Hash_replace$58, $Hash_select$59, $Hash_select$excl$61, $Hash_shift$63, $Hash_slice$64, $Hash_to_a$65, $Hash_to_h$66, $Hash_to_hash$67, $Hash_to_proc$68, $Hash_transform_keys$70, $Hash_transform_keys$excl$72, $Hash_transform_values$74, $Hash_transform_values$excl$76, $Hash_values$78;\n\n    \n    self.$include($$($nesting, 'Enumerable'));\n    self.$$prototype.$$is_hash = true;\n    Opal.defs(self, '$[]', $Hash_$$$1 = function($a) {\n      var $post_args, argv, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      argv = $post_args;;\n      \n      var hash, argc = argv.length, i;\n\n      if (argc === 1) {\n        hash = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Hash'), \"to_hash\");\n        if (hash !== nil) {\n          return self.$allocate()['$merge!'](hash);\n        }\n\n        argv = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Array'), \"to_ary\");\n        if (argv === nil) {\n          self.$raise($$($nesting, 'ArgumentError'), \"odd number of arguments for Hash\")\n        }\n\n        argc = argv.length;\n        hash = self.$allocate();\n\n        for (i = 0; i < argc; i++) {\n          if (!argv[i].$$is_array) continue;\n          switch(argv[i].length) {\n          case 1:\n            hash.$store(argv[i][0], nil);\n            break;\n          case 2:\n            hash.$store(argv[i][0], argv[i][1]);\n            break;\n          default:\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid number of elements (\" + (argv[i].length) + \" for 1..2)\")\n          }\n        }\n\n        return hash;\n      }\n\n      if (argc % 2 !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"odd number of arguments for Hash\")\n      }\n\n      hash = self.$allocate();\n\n      for (i = 0; i < argc; i += 2) {\n        hash.$store(argv[i], argv[i + 1]);\n      }\n\n      return hash;\n    ;\n    }, $Hash_$$$1.$$arity = -1);\n    Opal.defs(self, '$allocate', $Hash_allocate$2 = function $$allocate() {\n      var self = this;\n\n      \n      var hash = new self.$$constructor();\n\n      Opal.hash_init(hash);\n\n      hash.$$none = nil;\n      hash.$$proc = nil;\n\n      return hash;\n    \n    }, $Hash_allocate$2.$$arity = 0);\n    Opal.defs(self, '$try_convert', $Hash_try_convert$3 = function $$try_convert(obj) {\n      var self = this;\n\n      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Hash'), \"to_hash\")\n    }, $Hash_try_convert$3.$$arity = 1);\n    \n    Opal.def(self, '$initialize', $Hash_initialize$4 = function $$initialize(defaults) {\n      var $iter = $Hash_initialize$4.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_initialize$4.$$p = null;\n      \n      \n      if ($iter) $Hash_initialize$4.$$p = null;;\n      ;\n      \n      if (defaults !== undefined && block !== nil) {\n        self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (1 for 0)\")\n      }\n      self.$$none = (defaults === undefined ? nil : defaults);\n      self.$$proc = block;\n\n      return self;\n    ;\n    }, $Hash_initialize$4.$$arity = -1);\n    \n    Opal.def(self, '$==', $Hash_$eq_eq$5 = function(other) {\n      var self = this;\n\n      \n      if (self === other) {\n        return true;\n      }\n\n      if (!other.$$is_hash) {\n        return false;\n      }\n\n      if (self.$$keys.length !== other.$$keys.length) {\n        return false;\n      }\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n          other_value = other.$$smap[key];\n        } else {\n          value = key.value;\n          other_value = Opal.hash_get(other, key.key);\n        }\n\n        if (other_value === undefined || !value['$eql?'](other_value)) {\n          return false;\n        }\n      }\n\n      return true;\n    \n    }, $Hash_$eq_eq$5.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Hash_$gt_eq$6 = function(other) {\n      var $$7, self = this, result = nil;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      \n      if (self.$$keys.length < other.$$keys.length) {\n        return false\n      }\n    ;\n      result = true;\n      $send(other, 'each', [], ($$7 = function(other_key, other_val){var self = $$7.$$s || this, val = nil;\n\n      \n        \n        if (other_key == null) {\n          other_key = nil;\n        };\n        \n        if (other_val == null) {\n          other_val = nil;\n        };\n        val = self.$fetch(other_key, null);\n        \n        if (val == null || val !== other_val) {\n          result = false;\n          return;\n        }\n      ;}, $$7.$$s = self, $$7.$$arity = 2, $$7));\n      return result;\n    }, $Hash_$gt_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$>', $Hash_$gt$8 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      \n      if (self.$$keys.length <= other.$$keys.length) {\n        return false\n      }\n    ;\n      return $rb_ge(self, other);\n    }, $Hash_$gt$8.$$arity = 1);\n    \n    Opal.def(self, '$<', $Hash_$lt$9 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      return $rb_gt(other, self);\n    }, $Hash_$lt$9.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Hash_$lt_eq$10 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      return $rb_ge(other, self);\n    }, $Hash_$lt_eq$10.$$arity = 1);\n    \n    Opal.def(self, '$[]', $Hash_$$$11 = function(key) {\n      var self = this;\n\n      \n      var value = Opal.hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      return self.$default(key);\n    \n    }, $Hash_$$$11.$$arity = 1);\n    \n    Opal.def(self, '$[]=', $Hash_$$$eq$12 = function(key, value) {\n      var self = this;\n\n      \n      Opal.hash_put(self, key, value);\n      return value;\n    \n    }, $Hash_$$$eq$12.$$arity = 2);\n    \n    Opal.def(self, '$assoc', $Hash_assoc$13 = function $$assoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          if ((key)['$=='](object)) {\n            return [key, self.$$smap[key]];\n          }\n        } else {\n          if ((key.key)['$=='](object)) {\n            return [key.key, key.value];\n          }\n        }\n      }\n\n      return nil;\n    \n    }, $Hash_assoc$13.$$arity = 1);\n    \n    Opal.def(self, '$clear', $Hash_clear$14 = function $$clear() {\n      var self = this;\n\n      \n      Opal.hash_init(self);\n      return self;\n    \n    }, $Hash_clear$14.$$arity = 0);\n    \n    Opal.def(self, '$clone', $Hash_clone$15 = function $$clone() {\n      var self = this;\n\n      \n      var hash = new self.$$class();\n\n      Opal.hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    \n    }, $Hash_clone$15.$$arity = 0);\n    \n    Opal.def(self, '$compact', $Hash_compact$16 = function $$compact() {\n      var self = this;\n\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value !== nil) {\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    \n    }, $Hash_compact$16.$$arity = 0);\n    \n    Opal.def(self, '$compact!', $Hash_compact$excl$17 = function() {\n      var self = this;\n\n      \n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value === nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    \n    }, $Hash_compact$excl$17.$$arity = 0);\n    \n    Opal.def(self, '$compare_by_identity', $Hash_compare_by_identity$18 = function $$compare_by_identity() {\n      var self = this;\n\n      \n      var i, ii, key, keys = self.$$keys, identity_hash;\n\n      if (self.$$by_identity) return self;\n      if (self.$$keys.length === 0) {\n        self.$$by_identity = true\n        return self;\n      }\n\n      identity_hash = $hash2([], {}).$compare_by_identity();\n      for(i = 0, ii = keys.length; i < ii; i++) {\n        key = keys[i];\n        if (!key.$$is_string) key = key.key;\n        Opal.hash_put(identity_hash, key, Opal.hash_get(self, key));\n      }\n\n      self.$$by_identity = true;\n      self.$$map = identity_hash.$$map;\n      self.$$smap = identity_hash.$$smap;\n      return self;\n    \n    }, $Hash_compare_by_identity$18.$$arity = 0);\n    \n    Opal.def(self, '$compare_by_identity?', $Hash_compare_by_identity$ques$19 = function() {\n      var self = this;\n\n      return self.$$by_identity === true;\n    }, $Hash_compare_by_identity$ques$19.$$arity = 0);\n    \n    Opal.def(self, '$default', $Hash_default$20 = function(key) {\n      var self = this;\n\n      \n      ;\n      \n      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {\n        return self.$$proc.$call(self, key);\n      }\n      if (self.$$none === undefined) {\n        return nil;\n      }\n      return self.$$none;\n    ;\n    }, $Hash_default$20.$$arity = -1);\n    \n    Opal.def(self, '$default=', $Hash_default$eq$21 = function(object) {\n      var self = this;\n\n      \n      self.$$proc = nil;\n      self.$$none = object;\n\n      return object;\n    \n    }, $Hash_default$eq$21.$$arity = 1);\n    \n    Opal.def(self, '$default_proc', $Hash_default_proc$22 = function $$default_proc() {\n      var self = this;\n\n      \n      if (self.$$proc !== undefined) {\n        return self.$$proc;\n      }\n      return nil;\n    \n    }, $Hash_default_proc$22.$$arity = 0);\n    \n    Opal.def(self, '$default_proc=', $Hash_default_proc$eq$23 = function(default_proc) {\n      var self = this;\n\n      \n      var proc = default_proc;\n\n      if (proc !== nil) {\n        proc = $$($nesting, 'Opal')['$coerce_to!'](proc, $$($nesting, 'Proc'), \"to_proc\");\n\n        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {\n          self.$raise($$($nesting, 'TypeError'), \"default_proc takes two arguments\");\n        }\n      }\n\n      self.$$none = nil;\n      self.$$proc = proc;\n\n      return default_proc;\n    \n    }, $Hash_default_proc$eq$23.$$arity = 1);\n    \n    Opal.def(self, '$delete', $Hash_delete$24 = function(key) {\n      var $iter = $Hash_delete$24.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_delete$24.$$p = null;\n      \n      \n      if ($iter) $Hash_delete$24.$$p = null;;\n      \n      var value = Opal.hash_delete(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return Opal.yield1(block, key);\n      }\n\n      return nil;\n    ;\n    }, $Hash_delete$24.$$arity = 1);\n    \n    Opal.def(self, '$delete_if', $Hash_delete_if$25 = function $$delete_if() {\n      var $iter = $Hash_delete_if$25.$$p, block = $iter || nil, $$26, self = this;\n\n      if ($iter) $Hash_delete_if$25.$$p = null;\n      \n      \n      if ($iter) $Hash_delete_if$25.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"delete_if\"], ($$26 = function(){var self = $$26.$$s || this;\n\n        return self.$size()}, $$26.$$s = self, $$26.$$arity = 0, $$26))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    ;\n    }, $Hash_delete_if$25.$$arity = 0);\n    Opal.alias(self, \"dup\", \"clone\");\n    \n    Opal.def(self, '$dig', $Hash_dig$27 = function $$dig(key, $a) {\n      var $post_args, keys, self = this, item = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      keys = $post_args;;\n      item = self['$[]'](key);\n      \n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    ;\n      if ($truthy(item['$respond_to?'](\"dig\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', Opal.to_a(keys));\n    }, $Hash_dig$27.$$arity = -2);\n    \n    Opal.def(self, '$each', $Hash_each$28 = function $$each() {\n      var $iter = $Hash_each$28.$$p, block = $iter || nil, $$29, self = this;\n\n      if ($iter) $Hash_each$28.$$p = null;\n      \n      \n      if ($iter) $Hash_each$28.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"each\"], ($$29 = function(){var self = $$29.$$s || this;\n\n        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        Opal.yield1(block, [key, value]);\n      }\n\n      return self;\n    ;\n    }, $Hash_each$28.$$arity = 0);\n    \n    Opal.def(self, '$each_key', $Hash_each_key$30 = function $$each_key() {\n      var $iter = $Hash_each_key$30.$$p, block = $iter || nil, $$31, self = this;\n\n      if ($iter) $Hash_each_key$30.$$p = null;\n      \n      \n      if ($iter) $Hash_each_key$30.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_key\"], ($$31 = function(){var self = $$31.$$s || this;\n\n        return self.$size()}, $$31.$$s = self, $$31.$$arity = 0, $$31))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? key : key.key);\n      }\n\n      return self;\n    ;\n    }, $Hash_each_key$30.$$arity = 0);\n    Opal.alias(self, \"each_pair\", \"each\");\n    \n    Opal.def(self, '$each_value', $Hash_each_value$32 = function $$each_value() {\n      var $iter = $Hash_each_value$32.$$p, block = $iter || nil, $$33, self = this;\n\n      if ($iter) $Hash_each_value$32.$$p = null;\n      \n      \n      if ($iter) $Hash_each_value$32.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_value\"], ($$33 = function(){var self = $$33.$$s || this;\n\n        return self.$size()}, $$33.$$s = self, $$33.$$arity = 0, $$33))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? self.$$smap[key] : key.value);\n      }\n\n      return self;\n    ;\n    }, $Hash_each_value$32.$$arity = 0);\n    \n    Opal.def(self, '$empty?', $Hash_empty$ques$34 = function() {\n      var self = this;\n\n      return self.$$keys.length === 0;\n    }, $Hash_empty$ques$34.$$arity = 0);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$fetch', $Hash_fetch$35 = function $$fetch(key, defaults) {\n      var $iter = $Hash_fetch$35.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_fetch$35.$$p = null;\n      \n      \n      if ($iter) $Hash_fetch$35.$$p = null;;\n      ;\n      \n      var value = Opal.hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return block(key);\n      }\n\n      if (defaults !== undefined) {\n        return defaults;\n      }\n    ;\n      return self.$raise($$($nesting, 'KeyError').$new(\"\" + \"key not found: \" + (key.$inspect()), $hash2([\"key\", \"receiver\"], {\"key\": key, \"receiver\": self})));\n    }, $Hash_fetch$35.$$arity = -2);\n    \n    Opal.def(self, '$fetch_values', $Hash_fetch_values$36 = function $$fetch_values($a) {\n      var $iter = $Hash_fetch_values$36.$$p, block = $iter || nil, $post_args, keys, $$37, self = this;\n\n      if ($iter) $Hash_fetch_values$36.$$p = null;\n      \n      \n      if ($iter) $Hash_fetch_values$36.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      keys = $post_args;;\n      return $send(keys, 'map', [], ($$37 = function(key){var self = $$37.$$s || this;\n\n      \n        \n        if (key == null) {\n          key = nil;\n        };\n        return $send(self, 'fetch', [key], block.$to_proc());}, $$37.$$s = self, $$37.$$arity = 1, $$37));\n    }, $Hash_fetch_values$36.$$arity = -1);\n    \n    Opal.def(self, '$flatten', $Hash_flatten$38 = function $$flatten(level) {\n      var self = this;\n\n      \n      \n      if (level == null) {\n        level = 1;\n      };\n      level = $$($nesting, 'Opal')['$coerce_to!'](level, $$($nesting, 'Integer'), \"to_int\");\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push(key);\n\n        if (value.$$is_array) {\n          if (level === 1) {\n            result.push(value);\n            continue;\n          }\n\n          result = result.concat((value).$flatten(level - 2));\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, $Hash_flatten$38.$$arity = -1);\n    \n    Opal.def(self, '$has_key?', $Hash_has_key$ques$39 = function(key) {\n      var self = this;\n\n      return Opal.hash_get(self, key) !== undefined;\n    }, $Hash_has_key$ques$39.$$arity = 1);\n    \n    Opal.def(self, '$has_value?', $Hash_has_value$ques$40 = function(value) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    }, $Hash_has_value$ques$40.$$arity = 1);\n    \n    Opal.def(self, '$hash', $Hash_hash$41 = function $$hash() {\n      var self = this;\n\n      \n      var top = (Opal.hash_ids === undefined),\n          hash_id = self.$object_id(),\n          result = ['Hash'],\n          key, item;\n\n      try {\n        if (top) {\n          Opal.hash_ids = Object.create(null);\n        }\n\n        if (Opal[hash_id]) {\n          return 'self';\n        }\n\n        for (key in Opal.hash_ids) {\n          item = Opal.hash_ids[key];\n          if (self['$eql?'](item)) {\n            return 'self';\n          }\n        }\n\n        Opal.hash_ids[hash_id] = self;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            result.push([key, self.$$smap[key].$hash()]);\n          } else {\n            result.push([key.key_hash, key.value.$hash()]);\n          }\n        }\n\n        return result.sort().join();\n\n      } finally {\n        if (top) {\n          Opal.hash_ids = undefined;\n        }\n      }\n    \n    }, $Hash_hash$41.$$arity = 0);\n    Opal.alias(self, \"include?\", \"has_key?\");\n    \n    Opal.def(self, '$index', $Hash_index$42 = function $$index(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if ((value)['$=='](object)) {\n          return key;\n        }\n      }\n\n      return nil;\n    \n    }, $Hash_index$42.$$arity = 1);\n    \n    Opal.def(self, '$indexes', $Hash_indexes$43 = function $$indexes($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var result = [];\n\n      for (var i = 0, length = args.length, key, value; i < length; i++) {\n        key = args[i];\n        value = Opal.hash_get(self, key);\n\n        if (value === undefined) {\n          result.push(self.$default());\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, $Hash_indexes$43.$$arity = -1);\n    Opal.alias(self, \"indices\", \"indexes\");\n    var inspect_ids;\n    \n    Opal.def(self, '$inspect', $Hash_inspect$44 = function $$inspect() {\n      var self = this;\n\n      \n      var top = (inspect_ids === undefined),\n          hash_id = self.$object_id(),\n          result = [];\n\n      try {\n        if (top) {\n          inspect_ids = {};\n        }\n\n        if (inspect_ids.hasOwnProperty(hash_id)) {\n          return '{...}';\n        }\n\n        inspect_ids[hash_id] = true;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            value = self.$$smap[key];\n          } else {\n            value = key.value;\n            key = key.key;\n          }\n\n          result.push(key.$inspect() + '=>' + value.$inspect());\n        }\n\n        return '{' + result.join(', ') + '}';\n\n      } finally {\n        if (top) {\n          inspect_ids = undefined;\n        }\n      }\n    \n    }, $Hash_inspect$44.$$arity = 0);\n    \n    Opal.def(self, '$invert', $Hash_invert$45 = function $$invert() {\n      var self = this;\n\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        Opal.hash_put(hash, value, key);\n      }\n\n      return hash;\n    \n    }, $Hash_invert$45.$$arity = 0);\n    \n    Opal.def(self, '$keep_if', $Hash_keep_if$46 = function $$keep_if() {\n      var $iter = $Hash_keep_if$46.$$p, block = $iter || nil, $$47, self = this;\n\n      if ($iter) $Hash_keep_if$46.$$p = null;\n      \n      \n      if ($iter) $Hash_keep_if$46.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"keep_if\"], ($$47 = function(){var self = $$47.$$s || this;\n\n        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    ;\n    }, $Hash_keep_if$46.$$arity = 0);\n    Opal.alias(self, \"key\", \"index\");\n    Opal.alias(self, \"key?\", \"has_key?\");\n    \n    Opal.def(self, '$keys', $Hash_keys$48 = function $$keys() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(key);\n        } else {\n          result.push(key.key);\n        }\n      }\n\n      return result;\n    \n    }, $Hash_keys$48.$$arity = 0);\n    \n    Opal.def(self, '$length', $Hash_length$49 = function $$length() {\n      var self = this;\n\n      return self.$$keys.length;\n    }, $Hash_length$49.$$arity = 0);\n    Opal.alias(self, \"member?\", \"has_key?\");\n    \n    Opal.def(self, '$merge', $Hash_merge$50 = function $$merge(other) {\n      var $iter = $Hash_merge$50.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_merge$50.$$p = null;\n      \n      \n      if ($iter) $Hash_merge$50.$$p = null;;\n      return $send(self.$dup(), 'merge!', [other], block.$to_proc());\n    }, $Hash_merge$50.$$arity = 1);\n    \n    Opal.def(self, '$merge!', $Hash_merge$excl$51 = function(other) {\n      var $iter = $Hash_merge$excl$51.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_merge$excl$51.$$p = null;\n      \n      \n      if ($iter) $Hash_merge$excl$51.$$p = null;;\n      \n      if (!other.$$is_hash) {\n        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      }\n\n      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;\n\n      if (block === nil) {\n        for (i = 0; i < length; i++) {\n          key = other_keys[i];\n\n          if (key.$$is_string) {\n            other_value = other.$$smap[key];\n          } else {\n            other_value = key.value;\n            key = key.key;\n          }\n\n          Opal.hash_put(self, key, other_value);\n        }\n\n        return self;\n      }\n\n      for (i = 0; i < length; i++) {\n        key = other_keys[i];\n\n        if (key.$$is_string) {\n          other_value = other.$$smap[key];\n        } else {\n          other_value = key.value;\n          key = key.key;\n        }\n\n        value = Opal.hash_get(self, key);\n\n        if (value === undefined) {\n          Opal.hash_put(self, key, other_value);\n          continue;\n        }\n\n        Opal.hash_put(self, key, block(key, value, other_value));\n      }\n\n      return self;\n    ;\n    }, $Hash_merge$excl$51.$$arity = 1);\n    \n    Opal.def(self, '$rassoc', $Hash_rassoc$52 = function $$rassoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if ((value)['$=='](object)) {\n          return [key, value];\n        }\n      }\n\n      return nil;\n    \n    }, $Hash_rassoc$52.$$arity = 1);\n    \n    Opal.def(self, '$rehash', $Hash_rehash$53 = function $$rehash() {\n      var self = this;\n\n      \n      Opal.hash_rehash(self);\n      return self;\n    \n    }, $Hash_rehash$53.$$arity = 0);\n    \n    Opal.def(self, '$reject', $Hash_reject$54 = function $$reject() {\n      var $iter = $Hash_reject$54.$$p, block = $iter || nil, $$55, self = this;\n\n      if ($iter) $Hash_reject$54.$$p = null;\n      \n      \n      if ($iter) $Hash_reject$54.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject\"], ($$55 = function(){var self = $$55.$$s || this;\n\n        return self.$size()}, $$55.$$s = self, $$55.$$arity = 0, $$55))\n      };\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    ;\n    }, $Hash_reject$54.$$arity = 0);\n    \n    Opal.def(self, '$reject!', $Hash_reject$excl$56 = function() {\n      var $iter = $Hash_reject$excl$56.$$p, block = $iter || nil, $$57, self = this;\n\n      if ($iter) $Hash_reject$excl$56.$$p = null;\n      \n      \n      if ($iter) $Hash_reject$excl$56.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject!\"], ($$57 = function(){var self = $$57.$$s || this;\n\n        return self.$size()}, $$57.$$s = self, $$57.$$arity = 0, $$57))\n      };\n      \n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    ;\n    }, $Hash_reject$excl$56.$$arity = 0);\n    \n    Opal.def(self, '$replace', $Hash_replace$58 = function $$replace(other) {\n      var self = this, $writer = nil;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      \n      Opal.hash_init(self);\n\n      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {\n        key = other_keys[i];\n\n        if (key.$$is_string) {\n          other_value = other.$$smap[key];\n        } else {\n          other_value = key.value;\n          key = key.key;\n        }\n\n        Opal.hash_put(self, key, other_value);\n      }\n    ;\n      if ($truthy(other.$default_proc())) {\n        \n        $writer = [other.$default_proc()];\n        $send(self, 'default_proc=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];\n      } else {\n        \n        $writer = [other.$default()];\n        $send(self, 'default=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];\n      };\n      return self;\n    }, $Hash_replace$58.$$arity = 1);\n    \n    Opal.def(self, '$select', $Hash_select$59 = function $$select() {\n      var $iter = $Hash_select$59.$$p, block = $iter || nil, $$60, self = this;\n\n      if ($iter) $Hash_select$59.$$p = null;\n      \n      \n      if ($iter) $Hash_select$59.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"select\"], ($$60 = function(){var self = $$60.$$s || this;\n\n        return self.$size()}, $$60.$$s = self, $$60.$$arity = 0, $$60))\n      };\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    ;\n    }, $Hash_select$59.$$arity = 0);\n    \n    Opal.def(self, '$select!', $Hash_select$excl$61 = function() {\n      var $iter = $Hash_select$excl$61.$$p, block = $iter || nil, $$62, self = this;\n\n      if ($iter) $Hash_select$excl$61.$$p = null;\n      \n      \n      if ($iter) $Hash_select$excl$61.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"select!\"], ($$62 = function(){var self = $$62.$$s || this;\n\n        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))\n      };\n      \n      var result = nil;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n          result = self;\n        }\n      }\n\n      return result;\n    ;\n    }, $Hash_select$excl$61.$$arity = 0);\n    \n    Opal.def(self, '$shift', $Hash_shift$63 = function $$shift() {\n      var self = this;\n\n      \n      var keys = self.$$keys,\n          key;\n\n      if (keys.length > 0) {\n        key = keys[0];\n\n        key = key.$$is_string ? key : key.key;\n\n        return [key, Opal.hash_delete(self, key)];\n      }\n\n      return self.$default(nil);\n    \n    }, $Hash_shift$63.$$arity = 0);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$slice', $Hash_slice$64 = function $$slice($a) {\n      var $post_args, keys, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      keys = $post_args;;\n      \n      var result = Opal.hash();\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i], value = Opal.hash_get(self, key);\n\n        if (value !== undefined) {\n          Opal.hash_put(result, key, value);\n        }\n      }\n\n      return result;\n    ;\n    }, $Hash_slice$64.$$arity = -1);\n    Opal.alias(self, \"store\", \"[]=\");\n    \n    Opal.def(self, '$to_a', $Hash_to_a$65 = function $$to_a() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push([key, value]);\n      }\n\n      return result;\n    \n    }, $Hash_to_a$65.$$arity = 0);\n    \n    Opal.def(self, '$to_h', $Hash_to_h$66 = function $$to_h() {\n      var self = this;\n\n      \n      if (self.$$class === Opal.Hash) {\n        return self;\n      }\n\n      var hash = new Opal.Hash();\n\n      Opal.hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    \n    }, $Hash_to_h$66.$$arity = 0);\n    \n    Opal.def(self, '$to_hash', $Hash_to_hash$67 = function $$to_hash() {\n      var self = this;\n\n      return self\n    }, $Hash_to_hash$67.$$arity = 0);\n    \n    Opal.def(self, '$to_proc', $Hash_to_proc$68 = function $$to_proc() {\n      var $$69, self = this;\n\n      return $send(self, 'proc', [], ($$69 = function(key){var self = $$69.$$s || this;\n\n      \n        ;\n        \n        if (key == null) {\n          self.$raise($$($nesting, 'ArgumentError'), \"no key given\")\n        }\n      ;\n        return self['$[]'](key);}, $$69.$$s = self, $$69.$$arity = -1, $$69))\n    }, $Hash_to_proc$68.$$arity = 0);\n    Opal.alias(self, \"to_s\", \"inspect\");\n    \n    Opal.def(self, '$transform_keys', $Hash_transform_keys$70 = function $$transform_keys() {\n      var $iter = $Hash_transform_keys$70.$$p, block = $iter || nil, $$71, self = this;\n\n      if ($iter) $Hash_transform_keys$70.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_keys$70.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_keys\"], ($$71 = function(){var self = $$71.$$s || this;\n\n        return self.$size()}, $$71.$$s = self, $$71.$$arity = 0, $$71))\n      };\n      \n      var result = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        key = Opal.yield1(block, key);\n\n        Opal.hash_put(result, key, value);\n      }\n\n      return result;\n    ;\n    }, $Hash_transform_keys$70.$$arity = 0);\n    \n    Opal.def(self, '$transform_keys!', $Hash_transform_keys$excl$72 = function() {\n      var $iter = $Hash_transform_keys$excl$72.$$p, block = $iter || nil, $$73, self = this;\n\n      if ($iter) $Hash_transform_keys$excl$72.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_keys$excl$72.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_keys!\"], ($$73 = function(){var self = $$73.$$s || this;\n\n        return self.$size()}, $$73.$$s = self, $$73.$$arity = 0, $$73))\n      };\n      \n      var keys = Opal.slice.call(self.$$keys),\n          i, length = keys.length, key, value, new_key;\n\n      for (i = 0; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        new_key = Opal.yield1(block, key);\n\n        Opal.hash_delete(self, key);\n        Opal.hash_put(self, new_key, value);\n      }\n\n      return self;\n    ;\n    }, $Hash_transform_keys$excl$72.$$arity = 0);\n    \n    Opal.def(self, '$transform_values', $Hash_transform_values$74 = function $$transform_values() {\n      var $iter = $Hash_transform_values$74.$$p, block = $iter || nil, $$75, self = this;\n\n      if ($iter) $Hash_transform_values$74.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_values$74.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_values\"], ($$75 = function(){var self = $$75.$$s || this;\n\n        return self.$size()}, $$75.$$s = self, $$75.$$arity = 0, $$75))\n      };\n      \n      var result = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = Opal.yield1(block, value);\n\n        Opal.hash_put(result, key, value);\n      }\n\n      return result;\n    ;\n    }, $Hash_transform_values$74.$$arity = 0);\n    \n    Opal.def(self, '$transform_values!', $Hash_transform_values$excl$76 = function() {\n      var $iter = $Hash_transform_values$excl$76.$$p, block = $iter || nil, $$77, self = this;\n\n      if ($iter) $Hash_transform_values$excl$76.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_values$excl$76.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_values!\"], ($$77 = function(){var self = $$77.$$s || this;\n\n        return self.$size()}, $$77.$$s = self, $$77.$$arity = 0, $$77))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = Opal.yield1(block, value);\n\n        Opal.hash_put(self, key, value);\n      }\n\n      return self;\n    ;\n    }, $Hash_transform_values$excl$76.$$arity = 0);\n    Opal.alias(self, \"update\", \"merge!\");\n    Opal.alias(self, \"value?\", \"has_value?\");\n    Opal.alias(self, \"values_at\", \"indexes\");\n    return (Opal.def(self, '$values', $Hash_values$78 = function $$values() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(self.$$smap[key]);\n        } else {\n          result.push(key.value);\n        }\n      }\n\n      return result;\n    \n    }, $Hash_values$78.$$arity = 0), nil) && 'values';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/number\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$require', '$bridge', '$raise', '$name', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$%', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$truncate', '$-@', '$size', '$<=', '$>=', '$<=>', '$compare', '$any?']);\n  \n  self.$require(\"corelib/numeric\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Number');\n\n    var $nesting = [self].concat($parent_nesting), $Number_coerce$2, $Number___id__$3, $Number_$plus$4, $Number_$minus$5, $Number_$$6, $Number_$slash$7, $Number_$percent$8, $Number_$$9, $Number_$$10, $Number_$$11, $Number_$lt$12, $Number_$lt_eq$13, $Number_$gt$14, $Number_$gt_eq$15, $Number_$lt_eq_gt$16, $Number_$lt$lt$17, $Number_$gt$gt$18, $Number_$$$19, $Number_$plus$$20, $Number_$minus$$21, $Number_$$22, $Number_$$$23, $Number_$eq_eq_eq$24, $Number_$eq_eq$25, $Number_abs$26, $Number_abs2$27, $Number_allbits$ques$28, $Number_anybits$ques$29, $Number_angle$30, $Number_bit_length$31, $Number_ceil$32, $Number_chr$33, $Number_denominator$34, $Number_downto$35, $Number_equal$ques$37, $Number_even$ques$38, $Number_floor$39, $Number_gcd$40, $Number_gcdlcm$41, $Number_integer$ques$42, $Number_is_a$ques$43, $Number_instance_of$ques$44, $Number_lcm$45, $Number_next$46, $Number_nobits$ques$47, $Number_nonzero$ques$48, $Number_numerator$49, $Number_odd$ques$50, $Number_ord$51, $Number_pow$52, $Number_pred$53, $Number_quo$54, $Number_rationalize$55, $Number_remainder$56, $Number_round$57, $Number_step$58, $Number_times$60, $Number_to_f$62, $Number_to_i$63, $Number_to_r$64, $Number_to_s$65, $Number_truncate$66, $Number_digits$67, $Number_divmod$68, $Number_upto$69, $Number_zero$ques$71, $Number_size$72, $Number_nan$ques$73, $Number_finite$ques$74, $Number_infinite$ques$75, $Number_positive$ques$76, $Number_negative$ques$77;\n\n    \n    $$($nesting, 'Opal').$bridge(Number, self);\n    Opal.defineProperty(self.$$prototype, '$$is_number', true);\n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$1.$$arity = 0);\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$coerce', $Number_coerce$2 = function $$coerce(other) {\n      var self = this;\n\n      \n      if (other === nil) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't convert \" + (other.$class()) + \" into Float\");\n      }\n      else if (other.$$is_string) {\n        return [self.$Float(other), self];\n      }\n      else if (other['$respond_to?'](\"to_f\")) {\n        return [$$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Float'), \"to_f\"), self];\n      }\n      else if (other.$$is_number) {\n        return [other, self];\n      }\n      else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't convert \" + (other.$class()) + \" into Float\");\n      }\n    \n    }, $Number_coerce$2.$$arity = 1);\n    \n    Opal.def(self, '$__id__', $Number___id__$3 = function $$__id__() {\n      var self = this;\n\n      return (self * 2) + 1;\n    }, $Number___id__$3.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    \n    Opal.def(self, '$+', $Number_$plus$4 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self + other;\n      }\n      else {\n        return self.$__coerced__(\"+\", other);\n      }\n    \n    }, $Number_$plus$4.$$arity = 1);\n    \n    Opal.def(self, '$-', $Number_$minus$5 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self - other;\n      }\n      else {\n        return self.$__coerced__(\"-\", other);\n      }\n    \n    }, $Number_$minus$5.$$arity = 1);\n    \n    Opal.def(self, '$*', $Number_$$6 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self * other;\n      }\n      else {\n        return self.$__coerced__(\"*\", other);\n      }\n    \n    }, $Number_$$6.$$arity = 1);\n    \n    Opal.def(self, '$/', $Number_$slash$7 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self / other;\n      }\n      else {\n        return self.$__coerced__(\"/\", other);\n      }\n    \n    }, $Number_$slash$7.$$arity = 1);\n    Opal.alias(self, \"fdiv\", \"/\");\n    \n    Opal.def(self, '$%', $Number_$percent$8 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        if (other == -Infinity) {\n          return other;\n        }\n        else if (other == 0) {\n          self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by 0\");\n        }\n        else if (other < 0 || self < 0) {\n          return (self % other + other) % other;\n        }\n        else {\n          return self % other;\n        }\n      }\n      else {\n        return self.$__coerced__(\"%\", other);\n      }\n    \n    }, $Number_$percent$8.$$arity = 1);\n    \n    Opal.def(self, '$&', $Number_$$9 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self & other;\n      }\n      else {\n        return self.$__coerced__(\"&\", other);\n      }\n    \n    }, $Number_$$9.$$arity = 1);\n    \n    Opal.def(self, '$|', $Number_$$10 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self | other;\n      }\n      else {\n        return self.$__coerced__(\"|\", other);\n      }\n    \n    }, $Number_$$10.$$arity = 1);\n    \n    Opal.def(self, '$^', $Number_$$11 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self ^ other;\n      }\n      else {\n        return self.$__coerced__(\"^\", other);\n      }\n    \n    }, $Number_$$11.$$arity = 1);\n    \n    Opal.def(self, '$<', $Number_$lt$12 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self < other;\n      }\n      else {\n        return self.$__coerced__(\"<\", other);\n      }\n    \n    }, $Number_$lt$12.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Number_$lt_eq$13 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self <= other;\n      }\n      else {\n        return self.$__coerced__(\"<=\", other);\n      }\n    \n    }, $Number_$lt_eq$13.$$arity = 1);\n    \n    Opal.def(self, '$>', $Number_$gt$14 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self > other;\n      }\n      else {\n        return self.$__coerced__(\">\", other);\n      }\n    \n    }, $Number_$gt$14.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Number_$gt_eq$15 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self >= other;\n      }\n      else {\n        return self.$__coerced__(\">=\", other);\n      }\n    \n    }, $Number_$gt_eq$15.$$arity = 1);\n    \n    var spaceship_operator = function(self, other) {\n      if (other.$$is_number) {\n        if (isNaN(self) || isNaN(other)) {\n          return nil;\n        }\n\n        if (self > other) {\n          return 1;\n        } else if (self < other) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n      else {\n        return self.$__coerced__(\"<=>\", other);\n      }\n    }\n  ;\n    \n    Opal.def(self, '$<=>', $Number_$lt_eq_gt$16 = function(other) {\n      var self = this;\n\n      try {\n        return spaceship_operator(self, other);\n      } catch ($err) {\n        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {\n          try {\n            return nil\n          } finally { Opal.pop_exception() }\n        } else { throw $err; }\n      }\n    }, $Number_$lt_eq_gt$16.$$arity = 1);\n    \n    Opal.def(self, '$<<', $Number_$lt$lt$17 = function(count) {\n      var self = this;\n\n      \n      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), \"to_int\");\n      return count > 0 ? self << count : self >> -count;\n    }, $Number_$lt$lt$17.$$arity = 1);\n    \n    Opal.def(self, '$>>', $Number_$gt$gt$18 = function(count) {\n      var self = this;\n\n      \n      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), \"to_int\");\n      return count > 0 ? self >> count : self << -count;\n    }, $Number_$gt$gt$18.$$arity = 1);\n    \n    Opal.def(self, '$[]', $Number_$$$19 = function(bit) {\n      var self = this;\n\n      \n      bit = $$($nesting, 'Opal')['$coerce_to!'](bit, $$($nesting, 'Integer'), \"to_int\");\n      \n      if (bit < 0) {\n        return 0;\n      }\n      if (bit >= 32) {\n        return self < 0 ? 1 : 0;\n      }\n      return (self >> bit) & 1;\n    ;\n    }, $Number_$$$19.$$arity = 1);\n    \n    Opal.def(self, '$+@', $Number_$plus$$20 = function() {\n      var self = this;\n\n      return +self;\n    }, $Number_$plus$$20.$$arity = 0);\n    \n    Opal.def(self, '$-@', $Number_$minus$$21 = function() {\n      var self = this;\n\n      return -self;\n    }, $Number_$minus$$21.$$arity = 0);\n    \n    Opal.def(self, '$~', $Number_$$22 = function() {\n      var self = this;\n\n      return ~self;\n    }, $Number_$$22.$$arity = 0);\n    \n    Opal.def(self, '$**', $Number_$$$23 = function(other) {\n      var $a, $b, self = this;\n\n      if ($truthy($$($nesting, 'Integer')['$==='](other))) {\n        if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](self)['$!']()) ? $a : $rb_gt(other, 0)))) {\n          return Math.pow(self, other);\n        } else {\n          return $$($nesting, 'Rational').$new(self, 1)['$**'](other)\n        }\n      } else if ($truthy((($a = $rb_lt(self, 0)) ? ($truthy($b = $$($nesting, 'Float')['$==='](other)) ? $b : $$($nesting, 'Rational')['$==='](other)) : $rb_lt(self, 0)))) {\n        return $$($nesting, 'Complex').$new(self, 0)['$**'](other.$to_f())\n      } else if ($truthy(other.$$is_number != null)) {\n        return Math.pow(self, other);\n      } else {\n        return self.$__coerced__(\"**\", other)\n      }\n    }, $Number_$$$23.$$arity = 1);\n    \n    Opal.def(self, '$===', $Number_$eq_eq_eq$24 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self.valueOf() === other.valueOf();\n      }\n      else if (other['$respond_to?'](\"==\")) {\n        return other['$=='](self);\n      }\n      else {\n        return false;\n      }\n    \n    }, $Number_$eq_eq_eq$24.$$arity = 1);\n    \n    Opal.def(self, '$==', $Number_$eq_eq$25 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self.valueOf() === other.valueOf();\n      }\n      else if (other['$respond_to?'](\"==\")) {\n        return other['$=='](self);\n      }\n      else {\n        return false;\n      }\n    \n    }, $Number_$eq_eq$25.$$arity = 1);\n    \n    Opal.def(self, '$abs', $Number_abs$26 = function $$abs() {\n      var self = this;\n\n      return Math.abs(self);\n    }, $Number_abs$26.$$arity = 0);\n    \n    Opal.def(self, '$abs2', $Number_abs2$27 = function $$abs2() {\n      var self = this;\n\n      return Math.abs(self * self);\n    }, $Number_abs2$27.$$arity = 0);\n    \n    Opal.def(self, '$allbits?', $Number_allbits$ques$28 = function(mask) {\n      var self = this;\n\n      \n      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), \"to_int\");\n      return (self & mask) == mask;;\n    }, $Number_allbits$ques$28.$$arity = 1);\n    \n    Opal.def(self, '$anybits?', $Number_anybits$ques$29 = function(mask) {\n      var self = this;\n\n      \n      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), \"to_int\");\n      return (self & mask) !== 0;;\n    }, $Number_anybits$ques$29.$$arity = 1);\n    \n    Opal.def(self, '$angle', $Number_angle$30 = function $$angle() {\n      var self = this;\n\n      \n      if ($truthy(self['$nan?']())) {\n        return self};\n      \n      if (self == 0) {\n        if (1 / self > 0) {\n          return 0;\n        }\n        else {\n          return Math.PI;\n        }\n      }\n      else if (self < 0) {\n        return Math.PI;\n      }\n      else {\n        return 0;\n      }\n    ;\n    }, $Number_angle$30.$$arity = 0);\n    Opal.alias(self, \"arg\", \"angle\");\n    Opal.alias(self, \"phase\", \"angle\");\n    \n    Opal.def(self, '$bit_length', $Number_bit_length$31 = function $$bit_length() {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n      } else {\n        self.$raise($$($nesting, 'NoMethodError').$new(\"\" + \"undefined method `bit_length` for \" + (self) + \":Float\", \"bit_length\"))\n      };\n      \n      if (self === 0 || self === -1) {\n        return 0;\n      }\n\n      var result = 0,\n          value  = self < 0 ? ~self : self;\n\n      while (value != 0) {\n        result   += 1;\n        value  >>>= 1;\n      }\n\n      return result;\n    ;\n    }, $Number_bit_length$31.$$arity = 0);\n    \n    Opal.def(self, '$ceil', $Number_ceil$32 = function $$ceil(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.ceil(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, $Number_ceil$32.$$arity = -1);\n    \n    Opal.def(self, '$chr', $Number_chr$33 = function $$chr(encoding) {\n      var self = this;\n\n      \n      ;\n      return String.fromCharCode(self);;\n    }, $Number_chr$33.$$arity = -1);\n    \n    Opal.def(self, '$denominator', $Number_denominator$34 = function $$denominator() {\n      var $a, $iter = $Number_denominator$34.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_denominator$34.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {\n        return 1\n      } else {\n        return $send(self, Opal.find_super_dispatcher(self, 'denominator', $Number_denominator$34, false), $zuper, $iter)\n      }\n    }, $Number_denominator$34.$$arity = 0);\n    \n    Opal.def(self, '$downto', $Number_downto$35 = function $$downto(stop) {\n      var $iter = $Number_downto$35.$$p, block = $iter || nil, $$36, self = this;\n\n      if ($iter) $Number_downto$35.$$p = null;\n      \n      \n      if ($iter) $Number_downto$35.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"downto\", stop], ($$36 = function(){var self = $$36.$$s || this;\n\n        \n          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n          };\n          if ($truthy($rb_gt(stop, self))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(self, stop), 1)\n          };}, $$36.$$s = self, $$36.$$arity = 0, $$36))\n      };\n      \n      if (!stop.$$is_number) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n      }\n      for (var i = self; i >= stop; i--) {\n        block(i);\n      }\n    ;\n      return self;\n    }, $Number_downto$35.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$equal?', $Number_equal$ques$37 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self['$=='](other)) ? $a : isNaN(self) && isNaN(other))\n    }, $Number_equal$ques$37.$$arity = 1);\n    \n    Opal.def(self, '$even?', $Number_even$ques$38 = function() {\n      var self = this;\n\n      return self % 2 === 0;\n    }, $Number_even$ques$38.$$arity = 0);\n    \n    Opal.def(self, '$floor', $Number_floor$39 = function $$floor(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.floor(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, $Number_floor$39.$$arity = -1);\n    \n    Opal.def(self, '$gcd', $Number_gcd$40 = function $$gcd(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"not an integer\")\n      };\n      \n      var min = Math.abs(self),\n          max = Math.abs(other);\n\n      while (min > 0) {\n        var tmp = min;\n\n        min = max % min;\n        max = tmp;\n      }\n\n      return max;\n    ;\n    }, $Number_gcd$40.$$arity = 1);\n    \n    Opal.def(self, '$gcdlcm', $Number_gcdlcm$41 = function $$gcdlcm(other) {\n      var self = this;\n\n      return [self.$gcd(), self.$lcm()]\n    }, $Number_gcdlcm$41.$$arity = 1);\n    \n    Opal.def(self, '$integer?', $Number_integer$ques$42 = function() {\n      var self = this;\n\n      return self % 1 === 0;\n    }, $Number_integer$ques$42.$$arity = 0);\n    \n    Opal.def(self, '$is_a?', $Number_is_a$ques$43 = function(klass) {\n      var $a, $iter = $Number_is_a$ques$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_is_a$ques$43.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {\n        return true};\n      return $send(self, Opal.find_super_dispatcher(self, 'is_a?', $Number_is_a$ques$43, false), $zuper, $iter);\n    }, $Number_is_a$ques$43.$$arity = 1);\n    Opal.alias(self, \"kind_of?\", \"is_a?\");\n    \n    Opal.def(self, '$instance_of?', $Number_instance_of$ques$44 = function(klass) {\n      var $a, $iter = $Number_instance_of$ques$44.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_instance_of$ques$44.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {\n        return true};\n      return $send(self, Opal.find_super_dispatcher(self, 'instance_of?', $Number_instance_of$ques$44, false), $zuper, $iter);\n    }, $Number_instance_of$ques$44.$$arity = 1);\n    \n    Opal.def(self, '$lcm', $Number_lcm$45 = function $$lcm(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"not an integer\")\n      };\n      \n      if (self == 0 || other == 0) {\n        return 0;\n      }\n      else {\n        return Math.abs(self * other / self.$gcd(other));\n      }\n    ;\n    }, $Number_lcm$45.$$arity = 1);\n    Opal.alias(self, \"magnitude\", \"abs\");\n    Opal.alias(self, \"modulo\", \"%\");\n    \n    Opal.def(self, '$next', $Number_next$46 = function $$next() {\n      var self = this;\n\n      return self + 1;\n    }, $Number_next$46.$$arity = 0);\n    \n    Opal.def(self, '$nobits?', $Number_nobits$ques$47 = function(mask) {\n      var self = this;\n\n      \n      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), \"to_int\");\n      return (self & mask) == 0;;\n    }, $Number_nobits$ques$47.$$arity = 1);\n    \n    Opal.def(self, '$nonzero?', $Number_nonzero$ques$48 = function() {\n      var self = this;\n\n      return self == 0 ? nil : self;\n    }, $Number_nonzero$ques$48.$$arity = 0);\n    \n    Opal.def(self, '$numerator', $Number_numerator$49 = function $$numerator() {\n      var $a, $iter = $Number_numerator$49.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_numerator$49.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {\n        return self\n      } else {\n        return $send(self, Opal.find_super_dispatcher(self, 'numerator', $Number_numerator$49, false), $zuper, $iter)\n      }\n    }, $Number_numerator$49.$$arity = 0);\n    \n    Opal.def(self, '$odd?', $Number_odd$ques$50 = function() {\n      var self = this;\n\n      return self % 2 !== 0;\n    }, $Number_odd$ques$50.$$arity = 0);\n    \n    Opal.def(self, '$ord', $Number_ord$51 = function $$ord() {\n      var self = this;\n\n      return self\n    }, $Number_ord$51.$$arity = 0);\n    \n    Opal.def(self, '$pow', $Number_pow$52 = function $$pow(b, m) {\n      var self = this;\n\n      \n      ;\n      \n      if (self == 0) {\n        self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by 0\")\n      }\n\n      if (m === undefined) {\n        return self['$**'](b);\n      } else {\n        if (!($$($nesting, 'Integer')['$==='](b))) {\n          self.$raise($$($nesting, 'TypeError'), \"Integer#pow() 2nd argument not allowed unless a 1st argument is integer\")\n        }\n\n        if (b < 0) {\n          self.$raise($$($nesting, 'TypeError'), \"Integer#pow() 1st argument cannot be negative when 2nd argument specified\")\n        }\n\n        if (!($$($nesting, 'Integer')['$==='](m))) {\n          self.$raise($$($nesting, 'TypeError'), \"Integer#pow() 2nd argument not allowed unless all arguments are integers\")\n        }\n\n        if (m === 0) {\n          self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by 0\")\n        }\n\n        return self['$**'](b)['$%'](m)\n      }\n    ;\n    }, $Number_pow$52.$$arity = -2);\n    \n    Opal.def(self, '$pred', $Number_pred$53 = function $$pred() {\n      var self = this;\n\n      return self - 1;\n    }, $Number_pred$53.$$arity = 0);\n    \n    Opal.def(self, '$quo', $Number_quo$54 = function $$quo(other) {\n      var $iter = $Number_quo$54.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_quo$54.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        return $send(self, Opal.find_super_dispatcher(self, 'quo', $Number_quo$54, false), $zuper, $iter)\n      } else {\n        return $rb_divide(self, other)\n      }\n    }, $Number_quo$54.$$arity = 1);\n    \n    Opal.def(self, '$rationalize', $Number_rationalize$55 = function $$rationalize(eps) {\n      var $a, $b, self = this, f = nil, n = nil;\n\n      \n      ;\n      \n      if (arguments.length > 1) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" for 0..1)\");\n      }\n    ;\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        return $$($nesting, 'Rational').$new(self, 1)\n      } else if ($truthy(self['$infinite?']())) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"Infinity\")\n      } else if ($truthy(self['$nan?']())) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"NaN\")\n      } else if ($truthy(eps == null)) {\n        \n        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;\n        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();\n        n = $rb_minus(n, $$$($$($nesting, 'Float'), 'MANT_DIG'));\n        return $$($nesting, 'Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize($$($nesting, 'Rational').$new(1, (1)['$<<']($rb_minus(1, n))));\n      } else {\n        return self.$to_r().$rationalize(eps)\n      };\n    }, $Number_rationalize$55.$$arity = -1);\n    \n    Opal.def(self, '$remainder', $Number_remainder$56 = function $$remainder(y) {\n      var self = this;\n\n      return $rb_minus(self, $rb_times(y, $rb_divide(self, y).$truncate()))\n    }, $Number_remainder$56.$$arity = 1);\n    \n    Opal.def(self, '$round', $Number_round$57 = function $$round(ndigits) {\n      var $a, $b, self = this, _ = nil, exp = nil;\n\n      \n      ;\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        \n        if ($truthy(ndigits == null)) {\n          return self};\n        if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](ndigits)) ? ndigits['$infinite?']() : $a))) {\n          self.$raise($$($nesting, 'RangeError'), \"Infinity\")};\n        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_lt(ndigits, $$$($$($nesting, 'Integer'), 'MIN')))) {\n          self.$raise($$($nesting, 'RangeError'), \"out of bounds\")};\n        if ($truthy(ndigits >= 0)) {\n          return self};\n        ndigits = ndigits['$-@']();\n        \n        if (0.415241 * ndigits - 0.125 > self.$size()) {\n          return 0;\n        }\n\n        var f = Math.pow(10, ndigits),\n            x = Math.floor((Math.abs(x) + f / 2) / f) * f;\n\n        return self < 0 ? -x : x;\n      ;\n      } else {\n        \n        if ($truthy(($truthy($a = self['$nan?']()) ? ndigits == null : $a))) {\n          self.$raise($$($nesting, 'FloatDomainError'), \"NaN\")};\n        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits || 0, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_le(ndigits, 0))) {\n          if ($truthy(self['$nan?']())) {\n            self.$raise($$($nesting, 'RangeError'), \"NaN\")\n          } else if ($truthy(self['$infinite?']())) {\n            self.$raise($$($nesting, 'FloatDomainError'), \"Infinity\")}\n        } else if (ndigits['$=='](0)) {\n          return Math.round(self)\n        } else if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {\n          return self};\n        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus($$$($$($nesting, 'Float'), 'DIG'), 2), (function() {if ($truthy($rb_gt(exp, 0))) {\n          return $rb_divide(exp, 4)\n        } else {\n          return $rb_minus($rb_divide(exp, 3), 1)\n        }; return nil; })())))) {\n          return self};\n        if ($truthy($rb_lt(ndigits, (function() {if ($truthy($rb_gt(exp, 0))) {\n          return $rb_plus($rb_divide(exp, 3), 1)\n        } else {\n          return $rb_divide(exp, 4)\n        }; return nil; })()['$-@']()))) {\n          return 0};\n        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);;\n      };\n    }, $Number_round$57.$$arity = -1);\n    \n    Opal.def(self, '$step', $Number_step$58 = function $$step($a, $b, $c) {\n      var $iter = $Number_step$58.$$p, block = $iter || nil, $post_args, $kwargs, limit, step, to, by, $$59, self = this, positional_args = nil, keyword_args = nil;\n\n      if ($iter) $Number_step$58.$$p = null;\n      \n      \n      if ($iter) $Number_step$58.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      $kwargs = Opal.extract_kwargs($post_args);\n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      if ($post_args.length > 0) {\n        limit = $post_args[0];\n        $post_args.splice(0, 1);\n      };\n      \n      if ($post_args.length > 0) {\n        step = $post_args[0];\n        $post_args.splice(0, 1);\n      };\n      \n      to = $kwargs.$$smap[\"to\"];;\n      \n      by = $kwargs.$$smap[\"by\"];;\n      \n      if (limit !== undefined && to !== undefined) {\n        self.$raise($$($nesting, 'ArgumentError'), \"to is given twice\")\n      }\n\n      if (step !== undefined && by !== undefined) {\n        self.$raise($$($nesting, 'ArgumentError'), \"step is given twice\")\n      }\n\n      function validateParameters() {\n        if (to !== undefined) {\n          limit = to;\n        }\n\n        if (limit === undefined) {\n          limit = nil;\n        }\n\n        if (step === nil) {\n          self.$raise($$($nesting, 'TypeError'), \"step must be numeric\")\n        }\n\n        if (step === 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"step can't be 0\")\n        }\n\n        if (by !== undefined) {\n          step = by;\n        }\n\n        if (step === nil || step == null) {\n          step = 1;\n        }\n\n        var sign = step['$<=>'](0);\n\n        if (sign === nil) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"0 can't be coerced into \" + (step.$class()))\n        }\n\n        if (limit === nil || limit == null) {\n          limit = sign > 0 ? $$$($$($nesting, 'Float'), 'INFINITY') : $$$($$($nesting, 'Float'), 'INFINITY')['$-@']();\n        }\n\n        $$($nesting, 'Opal').$compare(self, limit)\n      }\n\n      function stepFloatSize() {\n        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else if (step === Infinity || step === -Infinity) {\n          return 1;\n        } else {\n          var abs = Math.abs, floor = Math.floor,\n              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * $$$($$($nesting, 'Float'), 'EPSILON');\n\n          if (err === Infinity || err === -Infinity) {\n            return 0;\n          } else {\n            if (err > 0.5) {\n              err = 0.5;\n            }\n\n            return floor((limit - self) / step + err) + 1\n          }\n        }\n      }\n\n      function stepSize() {\n        validateParameters();\n\n        if (step === 0) {\n          return Infinity;\n        }\n\n        if (step % 1 !== 0) {\n          return stepFloatSize();\n        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else {\n          var ceil = Math.ceil, abs = Math.abs,\n              lhs = abs(self - limit) + 1,\n              rhs = abs(step);\n\n          return ceil(lhs / rhs);\n        }\n      }\n    ;\n      if ((block !== nil)) {\n      } else {\n        \n        positional_args = [];\n        keyword_args = $hash2([], {});\n        \n        if (limit !== undefined) {\n          positional_args.push(limit);\n        }\n\n        if (step !== undefined) {\n          positional_args.push(step);\n        }\n\n        if (to !== undefined) {\n          Opal.hash_put(keyword_args, \"to\", to);\n        }\n\n        if (by !== undefined) {\n          Opal.hash_put(keyword_args, \"by\", by);\n        }\n\n        if (keyword_args['$any?']()) {\n          positional_args.push(keyword_args);\n        }\n      ;\n        return $send(self, 'enum_for', [\"step\"].concat(Opal.to_a(positional_args)), ($$59 = function(){var self = $$59.$$s || this;\n\n        return stepSize();}, $$59.$$s = self, $$59.$$arity = 0, $$59));\n      };\n      \n      validateParameters();\n\n      if (step === 0) {\n        while (true) {\n          block(self);\n        }\n      }\n\n      if (self % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {\n        var n = stepFloatSize();\n\n        if (n > 0) {\n          if (step === Infinity || step === -Infinity) {\n            block(self);\n          } else {\n            var i = 0, d;\n\n            if (step > 0) {\n              while (i < n) {\n                d = i * step + self;\n                if (limit < d) {\n                  d = limit;\n                }\n                block(d);\n                i += 1;\n              }\n            } else {\n              while (i < n) {\n                d = i * step + self;\n                if (limit > d) {\n                  d = limit;\n                }\n                block(d);\n                i += 1\n              }\n            }\n          }\n        }\n      } else {\n        var value = self;\n\n        if (step > 0) {\n          while (value <= limit) {\n            block(value);\n            value += step;\n          }\n        } else {\n          while (value >= limit) {\n            block(value);\n            value += step\n          }\n        }\n      }\n\n      return self;\n    ;\n    }, $Number_step$58.$$arity = -1);\n    Opal.alias(self, \"succ\", \"next\");\n    \n    Opal.def(self, '$times', $Number_times$60 = function $$times() {\n      var $iter = $Number_times$60.$$p, block = $iter || nil, $$61, self = this;\n\n      if ($iter) $Number_times$60.$$p = null;\n      \n      \n      if ($iter) $Number_times$60.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"times\"], ($$61 = function(){var self = $$61.$$s || this;\n\n        return self}, $$61.$$s = self, $$61.$$arity = 0, $$61))\n      };\n      \n      for (var i = 0; i < self; i++) {\n        block(i);\n      }\n    ;\n      return self;\n    }, $Number_times$60.$$arity = 0);\n    \n    Opal.def(self, '$to_f', $Number_to_f$62 = function $$to_f() {\n      var self = this;\n\n      return self\n    }, $Number_to_f$62.$$arity = 0);\n    \n    Opal.def(self, '$to_i', $Number_to_i$63 = function $$to_i() {\n      var self = this;\n\n      return parseInt(self, 10);\n    }, $Number_to_i$63.$$arity = 0);\n    Opal.alias(self, \"to_int\", \"to_i\");\n    \n    Opal.def(self, '$to_r', $Number_to_r$64 = function $$to_r() {\n      var $a, $b, self = this, f = nil, e = nil;\n\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        return $$($nesting, 'Rational').$new(self, 1)\n      } else {\n        \n        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;\n        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();\n        e = $rb_minus(e, $$$($$($nesting, 'Float'), 'MANT_DIG'));\n        return $rb_times(f, $$$($$($nesting, 'Float'), 'RADIX')['$**'](e)).$to_r();\n      }\n    }, $Number_to_r$64.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Number_to_s$65 = function $$to_s(base) {\n      var $a, self = this;\n\n      \n      \n      if (base == null) {\n        base = 10;\n      };\n      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(($truthy($a = $rb_lt(base, 2)) ? $a : $rb_gt(base, 36)))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (base))};\n      return self.toString(base);;\n    }, $Number_to_s$65.$$arity = -1);\n    \n    Opal.def(self, '$truncate', $Number_truncate$66 = function $$truncate(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = parseInt(f * factor, 10) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, $Number_truncate$66.$$arity = -1);\n    Opal.alias(self, \"inspect\", \"to_s\");\n    \n    Opal.def(self, '$digits', $Number_digits$67 = function $$digits(base) {\n      var self = this;\n\n      \n      \n      if (base == null) {\n        base = 10;\n      };\n      if ($rb_lt(self, 0)) {\n        self.$raise($$$($$($nesting, 'Math'), 'DomainError'), \"out of domain\")};\n      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy($rb_lt(base, 2))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (base))};\n      \n      var value = self, result = [];\n\n      while (value !== 0) {\n        result.push(value % base);\n        value = parseInt(value / base, 10);\n      }\n\n      return result;\n    ;\n    }, $Number_digits$67.$$arity = -1);\n    \n    Opal.def(self, '$divmod', $Number_divmod$68 = function $$divmod(other) {\n      var $a, $iter = $Number_divmod$68.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_divmod$68.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"NaN\")\n      } else if ($truthy(self['$infinite?']())) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"Infinity\")\n      } else {\n        return $send(self, Opal.find_super_dispatcher(self, 'divmod', $Number_divmod$68, false), $zuper, $iter)\n      }\n    }, $Number_divmod$68.$$arity = 1);\n    \n    Opal.def(self, '$upto', $Number_upto$69 = function $$upto(stop) {\n      var $iter = $Number_upto$69.$$p, block = $iter || nil, $$70, self = this;\n\n      if ($iter) $Number_upto$69.$$p = null;\n      \n      \n      if ($iter) $Number_upto$69.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"upto\", stop], ($$70 = function(){var self = $$70.$$s || this;\n\n        \n          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n          };\n          if ($truthy($rb_lt(stop, self))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(stop, self), 1)\n          };}, $$70.$$s = self, $$70.$$arity = 0, $$70))\n      };\n      \n      if (!stop.$$is_number) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n      }\n      for (var i = self; i <= stop; i++) {\n        block(i);\n      }\n    ;\n      return self;\n    }, $Number_upto$69.$$arity = 1);\n    \n    Opal.def(self, '$zero?', $Number_zero$ques$71 = function() {\n      var self = this;\n\n      return self == 0;\n    }, $Number_zero$ques$71.$$arity = 0);\n    \n    Opal.def(self, '$size', $Number_size$72 = function $$size() {\n      var self = this;\n\n      return 4\n    }, $Number_size$72.$$arity = 0);\n    \n    Opal.def(self, '$nan?', $Number_nan$ques$73 = function() {\n      var self = this;\n\n      return isNaN(self);\n    }, $Number_nan$ques$73.$$arity = 0);\n    \n    Opal.def(self, '$finite?', $Number_finite$ques$74 = function() {\n      var self = this;\n\n      return self != Infinity && self != -Infinity && !isNaN(self);\n    }, $Number_finite$ques$74.$$arity = 0);\n    \n    Opal.def(self, '$infinite?', $Number_infinite$ques$75 = function() {\n      var self = this;\n\n      \n      if (self == Infinity) {\n        return +1;\n      }\n      else if (self == -Infinity) {\n        return -1;\n      }\n      else {\n        return nil;\n      }\n    \n    }, $Number_infinite$ques$75.$$arity = 0);\n    \n    Opal.def(self, '$positive?', $Number_positive$ques$76 = function() {\n      var self = this;\n\n      return self != 0 && (self == Infinity || 1 / self > 0);\n    }, $Number_positive$ques$76.$$arity = 0);\n    return (Opal.def(self, '$negative?', $Number_negative$ques$77 = function() {\n      var self = this;\n\n      return self == -Infinity || 1 / self < 0;\n    }, $Number_negative$ques$77.$$arity = 0), nil) && 'negative?';\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting);\n  Opal.const_set($nesting[0], 'Fixnum', $$($nesting, 'Number'));\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Integer');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$78, $eq_eq_eq$79, $sqrt$80;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$78 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$78.$$arity = 0);\n      \n      Opal.udef(self, '$' + \"new\");;\n      \n      Opal.def(self, '$===', $eq_eq_eq$79 = function(other) {\n        var self = this;\n\n        \n        if (!other.$$is_number) {\n          return false;\n        }\n\n        return (other % 1) === 0;\n      \n      }, $eq_eq_eq$79.$$arity = 1);\n      return (Opal.def(self, '$sqrt', $sqrt$80 = function $$sqrt(n) {\n        var self = this;\n\n        \n        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n        \n        if (n < 0) {\n          self.$raise($$$($$($nesting, 'Math'), 'DomainError'), \"Numerical argument is out of domain - \\\"isqrt\\\"\")\n        }\n\n        return parseInt(Math.sqrt(n), 10);\n      ;\n      }, $sqrt$80.$$arity = 1), nil) && 'sqrt';\n    })(Opal.get_singleton_class(self), $nesting);\n    Opal.const_set($nesting[0], 'MAX', Math.pow(2, 30) - 1);\n    return Opal.const_set($nesting[0], 'MIN', -Math.pow(2, 30));\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Float');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$81, $eq_eq_eq$82;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$81 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$81.$$arity = 0);\n      \n      Opal.udef(self, '$' + \"new\");;\n      return (Opal.def(self, '$===', $eq_eq_eq$82 = function(other) {\n        var self = this;\n\n        return !!other.$$is_number;\n      }, $eq_eq_eq$82.$$arity = 1), nil) && '===';\n    })(Opal.get_singleton_class(self), $nesting);\n    Opal.const_set($nesting[0], 'INFINITY', Infinity);\n    Opal.const_set($nesting[0], 'MAX', Number.MAX_VALUE);\n    Opal.const_set($nesting[0], 'MIN', Number.MIN_VALUE);\n    Opal.const_set($nesting[0], 'NAN', NaN);\n    Opal.const_set($nesting[0], 'DIG', 15);\n    Opal.const_set($nesting[0], 'MANT_DIG', 53);\n    Opal.const_set($nesting[0], 'RADIX', 2);\n    return Opal.const_set($nesting[0], 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/range\"] = function(Opal) {\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$include', '$attr_reader', '$raise', '$<=>', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$respond_to?', '$class', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$last', '$to_a', '$>', '$-', '$abs', '$to_i', '$coerce_to!', '$ceil', '$/', '$size', '$loop', '$+', '$*', '$>=', '$each_with_index', '$%', '$bsearch', '$inspect', '$[]', '$hash']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Range');\n\n    var $nesting = [self].concat($parent_nesting), $Range_initialize$1, $Range_$eq_eq$2, $Range_$eq_eq_eq$3, $Range_cover$ques$4, $Range_each$5, $Range_eql$ques$6, $Range_exclude_end$ques$7, $Range_first$8, $Range_last$9, $Range_max$10, $Range_min$11, $Range_size$12, $Range_step$13, $Range_bsearch$17, $Range_to_s$18, $Range_inspect$19, $Range_marshal_load$20, $Range_hash$21;\n\n    self.$$prototype.begin = self.$$prototype.end = self.$$prototype.excl = nil;\n    \n    self.$include($$($nesting, 'Enumerable'));\n    self.$$prototype.$$is_range = true;\n    self.$attr_reader(\"begin\", \"end\");\n    \n    Opal.def(self, '$initialize', $Range_initialize$1 = function $$initialize(first, last, exclude) {\n      var self = this;\n\n      \n      \n      if (exclude == null) {\n        exclude = false;\n      };\n      if ($truthy(self.begin)) {\n        self.$raise($$($nesting, 'NameError'), \"'initialize' called twice\")};\n      if ($truthy(first['$<=>'](last))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"bad value for range\")\n      };\n      self.begin = first;\n      self.end = last;\n      return (self.excl = exclude);\n    }, $Range_initialize$1.$$arity = -3);\n    \n    Opal.def(self, '$==', $Range_$eq_eq$2 = function(other) {\n      var self = this;\n\n      \n      if (!other.$$is_range) {\n        return false;\n      }\n\n      return self.excl  === other.excl &&\n             self.begin ==  other.begin &&\n             self.end   ==  other.end;\n    \n    }, $Range_$eq_eq$2.$$arity = 1);\n    \n    Opal.def(self, '$===', $Range_$eq_eq_eq$3 = function(value) {\n      var self = this;\n\n      return self['$include?'](value)\n    }, $Range_$eq_eq_eq$3.$$arity = 1);\n    \n    Opal.def(self, '$cover?', $Range_cover$ques$4 = function(value) {\n      var $a, self = this, beg_cmp = nil, end_cmp = nil;\n\n      \n      beg_cmp = self.begin['$<=>'](value);\n      if ($truthy(($truthy($a = beg_cmp) ? $rb_le(beg_cmp, 0) : $a))) {\n      } else {\n        return false\n      };\n      end_cmp = value['$<=>'](self.end);\n      if ($truthy(self.excl)) {\n        return ($truthy($a = end_cmp) ? $rb_lt(end_cmp, 0) : $a)\n      } else {\n        return ($truthy($a = end_cmp) ? $rb_le(end_cmp, 0) : $a)\n      };\n    }, $Range_cover$ques$4.$$arity = 1);\n    \n    Opal.def(self, '$each', $Range_each$5 = function $$each() {\n      var $iter = $Range_each$5.$$p, block = $iter || nil, $a, self = this, current = nil, last = nil;\n\n      if ($iter) $Range_each$5.$$p = null;\n      \n      \n      if ($iter) $Range_each$5.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each\")\n      };\n      \n      var i, limit;\n\n      if (self.begin.$$is_number && self.end.$$is_number) {\n        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {\n          self.$raise($$($nesting, 'TypeError'), \"can't iterate from Float\")\n        }\n\n        for (i = self.begin, limit = self.end + (function() {if ($truthy(self.excl)) {\n        return 0\n      } else {\n        return 1\n      }; return nil; })(); i < limit; i++) {\n          block(i);\n        }\n\n        return self;\n      }\n\n      if (self.begin.$$is_string && self.end.$$is_string) {\n        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())\n        return self;\n      }\n    ;\n      current = self.begin;\n      last = self.end;\n      if ($truthy(current['$respond_to?'](\"succ\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't iterate from \" + (current.$class()))\n      };\n      while ($truthy($rb_lt(current['$<=>'](last), 0))) {\n        \n        Opal.yield1(block, current);\n        current = current.$succ();\n      };\n      if ($truthy(($truthy($a = self.excl['$!']()) ? current['$=='](last) : $a))) {\n        Opal.yield1(block, current)};\n      return self;\n    }, $Range_each$5.$$arity = 0);\n    \n    Opal.def(self, '$eql?', $Range_eql$ques$6 = function(other) {\n      var $a, $b, self = this;\n\n      \n      if ($truthy($$($nesting, 'Range')['$==='](other))) {\n      } else {\n        return false\n      };\n      return ($truthy($a = ($truthy($b = self.excl['$==='](other['$exclude_end?']())) ? self.begin['$eql?'](other.$begin()) : $b)) ? self.end['$eql?'](other.$end()) : $a);\n    }, $Range_eql$ques$6.$$arity = 1);\n    \n    Opal.def(self, '$exclude_end?', $Range_exclude_end$ques$7 = function() {\n      var self = this;\n\n      return self.excl\n    }, $Range_exclude_end$ques$7.$$arity = 0);\n    \n    Opal.def(self, '$first', $Range_first$8 = function $$first(n) {\n      var $iter = $Range_first$8.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Range_first$8.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      ;\n      if ($truthy(n == null)) {\n        return self.begin};\n      return $send(self, Opal.find_super_dispatcher(self, 'first', $Range_first$8, false), $zuper, $iter);\n    }, $Range_first$8.$$arity = -1);\n    Opal.alias(self, \"include?\", \"cover?\");\n    \n    Opal.def(self, '$last', $Range_last$9 = function $$last(n) {\n      var self = this;\n\n      \n      ;\n      if ($truthy(n == null)) {\n        return self.end};\n      return self.$to_a().$last(n);\n    }, $Range_last$9.$$arity = -1);\n    \n    Opal.def(self, '$max', $Range_max$10 = function $$max() {\n      var $a, $iter = $Range_max$10.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Range_max$10.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if (($yield !== nil)) {\n        return $send(self, Opal.find_super_dispatcher(self, 'max', $Range_max$10, false), $zuper, $iter)\n      } else if ($truthy($rb_gt(self.begin, self.end))) {\n        return nil\n      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {\n        return nil\n      } else {\n        return self.excl ? self.end - 1 : self.end\n      }\n    }, $Range_max$10.$$arity = 0);\n    Opal.alias(self, \"member?\", \"cover?\");\n    \n    Opal.def(self, '$min', $Range_min$11 = function $$min() {\n      var $a, $iter = $Range_min$11.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Range_min$11.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if (($yield !== nil)) {\n        return $send(self, Opal.find_super_dispatcher(self, 'min', $Range_min$11, false), $zuper, $iter)\n      } else if ($truthy($rb_gt(self.begin, self.end))) {\n        return nil\n      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {\n        return nil\n      } else {\n        return self.begin\n      }\n    }, $Range_min$11.$$arity = 0);\n    \n    Opal.def(self, '$size', $Range_size$12 = function $$size() {\n      var $a, self = this, range_begin = nil, range_end = nil, infinity = nil;\n\n      \n      range_begin = self.begin;\n      range_end = self.end;\n      if ($truthy(self.excl)) {\n        range_end = $rb_minus(range_end, 1)};\n      if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](range_begin)) ? $$($nesting, 'Numeric')['$==='](range_end) : $a))) {\n      } else {\n        return nil\n      };\n      if ($truthy($rb_lt(range_end, range_begin))) {\n        return 0};\n      infinity = $$$($$($nesting, 'Float'), 'INFINITY');\n      if ($truthy([range_begin.$abs(), range_end.$abs()]['$include?'](infinity))) {\n        return infinity};\n      return (Math.abs(range_end - range_begin) + 1).$to_i();\n    }, $Range_size$12.$$arity = 0);\n    \n    Opal.def(self, '$step', $Range_step$13 = function $$step(n) {\n      var $$14, $$15, $$16, $iter = $Range_step$13.$$p, $yield = $iter || nil, self = this, i = nil;\n\n      if ($iter) $Range_step$13.$$p = null;\n      \n      \n      if (n == null) {\n        n = 1;\n      };\n      \n      function coerceStepSize() {\n        if (!n.$$is_number) {\n          n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\")\n        }\n\n        if (n < 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"step can't be negative\")\n        } else if (n === 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"step can't be 0\")\n        }\n      }\n\n      function enumeratorSize() {\n        if (!self.begin['$respond_to?'](\"succ\")) {\n          return nil;\n        }\n\n        if (self.begin.$$is_string && self.end.$$is_string) {\n          return nil;\n        }\n\n        if (n % 1 === 0) {\n          return $rb_divide(self.$size(), n).$ceil();\n        } else {\n          // n is a float\n          var begin = self.begin, end = self.end,\n              abs = Math.abs, floor = Math.floor,\n              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$($$($nesting, 'Float'), 'EPSILON'),\n              size;\n\n          if (err > 0.5) {\n            err = 0.5;\n          }\n\n          if (self.excl) {\n            size = floor((end - begin) / n - err);\n            if (size * n + begin < end) {\n              size++;\n            }\n          } else {\n            size = floor((end - begin) / n + err) + 1\n          }\n\n          return size;\n        }\n      }\n    ;\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"step\", n], ($$14 = function(){var self = $$14.$$s || this;\n\n        \n          coerceStepSize();\n          return enumeratorSize();\n        }, $$14.$$s = self, $$14.$$arity = 0, $$14))\n      };\n      coerceStepSize();\n      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {\n        \n        i = 0;\n        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$15 = function(){var self = $$15.$$s || this, current = nil;\n          if (self.begin == null) self.begin = nil;\n          if (self.excl == null) self.excl = nil;\n          if (self.end == null) self.end = nil;\n\n        \n          current = $rb_plus(self.begin, $rb_times(i, n));\n          if ($truthy(self.excl)) {\n            if ($truthy($rb_ge(current, self.end))) {\n              \n              Opal.brk(nil, $brk)}\n          } else if ($truthy($rb_gt(current, self.end))) {\n            \n            Opal.brk(nil, $brk)};\n          Opal.yield1($yield, current);\n          return (i = $rb_plus(i, 1));}, $$15.$$s = self, $$15.$$brk = $brk, $$15.$$arity = 0, $$15))\n        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n      } else {\n        \n        \n        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {\n          self.$raise($$($nesting, 'TypeError'), \"no implicit conversion to float from string\")\n        }\n      ;\n        $send(self, 'each_with_index', [], ($$16 = function(value, idx){var self = $$16.$$s || this;\n\n        \n          \n          if (value == null) {\n            value = nil;\n          };\n          \n          if (idx == null) {\n            idx = nil;\n          };\n          if (idx['$%'](n)['$=='](0)) {\n            return Opal.yield1($yield, value);\n          } else {\n            return nil\n          };}, $$16.$$s = self, $$16.$$arity = 2, $$16));\n      };\n      return self;\n    }, $Range_step$13.$$arity = -1);\n    \n    Opal.def(self, '$bsearch', $Range_bsearch$17 = function $$bsearch() {\n      var $iter = $Range_bsearch$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Range_bsearch$17.$$p = null;\n      \n      \n      if ($iter) $Range_bsearch$17.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"bsearch\")\n      };\n      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't do binary search for \" + (self.begin.$class()))\n      };\n      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());\n    }, $Range_bsearch$17.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Range_to_s$18 = function $$to_s() {\n      var self = this;\n\n      return \"\" + (self.begin) + ((function() {if ($truthy(self.excl)) {\n        return \"...\"\n      } else {\n        return \"..\"\n      }; return nil; })()) + (self.end)\n    }, $Range_to_s$18.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $Range_inspect$19 = function $$inspect() {\n      var self = this;\n\n      return \"\" + (self.begin.$inspect()) + ((function() {if ($truthy(self.excl)) {\n        return \"...\"\n      } else {\n        return \"..\"\n      }; return nil; })()) + (self.end.$inspect())\n    }, $Range_inspect$19.$$arity = 0);\n    \n    Opal.def(self, '$marshal_load', $Range_marshal_load$20 = function $$marshal_load(args) {\n      var self = this;\n\n      \n      self.begin = args['$[]'](\"begin\");\n      self.end = args['$[]'](\"end\");\n      return (self.excl = args['$[]'](\"excl\"));\n    }, $Range_marshal_load$20.$$arity = 1);\n    return (Opal.def(self, '$hash', $Range_hash$21 = function $$hash() {\n      var self = this;\n\n      return [self.begin, self.end, self.excl].$hash()\n    }, $Range_hash$21.$$arity = 0), nil) && 'hash';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/proc\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$raise', '$coerce_to!']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Proc');\n\n    var $nesting = [self].concat($parent_nesting), $Proc_new$1, $Proc_call$2, $Proc_to_proc$3, $Proc_lambda$ques$4, $Proc_arity$5, $Proc_source_location$6, $Proc_binding$7, $Proc_parameters$8, $Proc_curry$9, $Proc_dup$10;\n\n    \n    Opal.defineProperty(self.$$prototype, '$$is_proc', true);\n    Opal.defineProperty(self.$$prototype, '$$is_lambda', false);\n    Opal.defs(self, '$new', $Proc_new$1 = function() {\n      var $iter = $Proc_new$1.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Proc_new$1.$$p = null;\n      \n      \n      if ($iter) $Proc_new$1.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"tried to create a Proc object without a block\")\n      };\n      return block;\n    }, $Proc_new$1.$$arity = 0);\n    \n    Opal.def(self, '$call', $Proc_call$2 = function $$call($a) {\n      var $iter = $Proc_call$2.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Proc_call$2.$$p = null;\n      \n      \n      if ($iter) $Proc_call$2.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      if (block !== nil) {\n        self.$$p = block;\n      }\n\n      var result, $brk = self.$$brk;\n\n      if ($brk) {\n        try {\n          if (self.$$is_lambda) {\n            result = self.apply(null, args);\n          }\n          else {\n            result = Opal.yieldX(self, args);\n          }\n        } catch (err) {\n          if (err === $brk) {\n            return $brk.$v\n          }\n          else {\n            throw err\n          }\n        }\n      }\n      else {\n        if (self.$$is_lambda) {\n          result = self.apply(null, args);\n        }\n        else {\n          result = Opal.yieldX(self, args);\n        }\n      }\n\n      return result;\n    ;\n    }, $Proc_call$2.$$arity = -1);\n    Opal.alias(self, \"[]\", \"call\");\n    Opal.alias(self, \"===\", \"call\");\n    Opal.alias(self, \"yield\", \"call\");\n    \n    Opal.def(self, '$to_proc', $Proc_to_proc$3 = function $$to_proc() {\n      var self = this;\n\n      return self\n    }, $Proc_to_proc$3.$$arity = 0);\n    \n    Opal.def(self, '$lambda?', $Proc_lambda$ques$4 = function() {\n      var self = this;\n\n      return !!self.$$is_lambda;\n    }, $Proc_lambda$ques$4.$$arity = 0);\n    \n    Opal.def(self, '$arity', $Proc_arity$5 = function $$arity() {\n      var self = this;\n\n      \n      if (self.$$is_curried) {\n        return -1;\n      } else {\n        return self.$$arity;\n      }\n    \n    }, $Proc_arity$5.$$arity = 0);\n    \n    Opal.def(self, '$source_location', $Proc_source_location$6 = function $$source_location() {\n      var self = this;\n\n      \n      if (self.$$is_curried) { return nil; };\n      return nil;\n    }, $Proc_source_location$6.$$arity = 0);\n    \n    Opal.def(self, '$binding', $Proc_binding$7 = function $$binding() {\n      var self = this;\n\n      \n      if (self.$$is_curried) { self.$raise($$($nesting, 'ArgumentError'), \"Can't create Binding\") };\n      return nil;\n    }, $Proc_binding$7.$$arity = 0);\n    \n    Opal.def(self, '$parameters', $Proc_parameters$8 = function $$parameters() {\n      var self = this;\n\n      \n      if (self.$$is_curried) {\n        return [[\"rest\"]];\n      } else if (self.$$parameters) {\n        if (self.$$is_lambda) {\n          return self.$$parameters;\n        } else {\n          var result = [], i, length;\n\n          for (i = 0, length = self.$$parameters.length; i < length; i++) {\n            var parameter = self.$$parameters[i];\n\n            if (parameter[0] === 'req') {\n              // required arguments always have name\n              parameter = ['opt', parameter[1]];\n            }\n\n            result.push(parameter);\n          }\n\n          return result;\n        }\n      } else {\n        return [];\n      }\n    \n    }, $Proc_parameters$8.$$arity = 0);\n    \n    Opal.def(self, '$curry', $Proc_curry$9 = function $$curry(arity) {\n      var self = this;\n\n      \n      ;\n      \n      if (arity === undefined) {\n        arity = self.length;\n      }\n      else {\n        arity = $$($nesting, 'Opal')['$coerce_to!'](arity, $$($nesting, 'Integer'), \"to_int\");\n        if (self.$$is_lambda && arity !== self.length) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arity) + \" for \" + (self.length) + \")\")\n        }\n      }\n\n      function curried () {\n        var args = $slice.call(arguments),\n            length = args.length,\n            result;\n\n        if (length > arity && self.$$is_lambda && !self.$$is_curried) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (length) + \" for \" + (arity) + \")\")\n        }\n\n        if (length >= arity) {\n          return self.$call.apply(self, args);\n        }\n\n        result = function () {\n          return curried.apply(null,\n            args.concat($slice.call(arguments)));\n        }\n        result.$$is_lambda = self.$$is_lambda;\n        result.$$is_curried = true;\n\n        return result;\n      };\n\n      curried.$$is_lambda = self.$$is_lambda;\n      curried.$$is_curried = true;\n      return curried;\n    ;\n    }, $Proc_curry$9.$$arity = -1);\n    \n    Opal.def(self, '$dup', $Proc_dup$10 = function $$dup() {\n      var self = this;\n\n      \n      var original_proc = self.$$original_proc || self,\n          proc = function () {\n            return original_proc.apply(this, arguments);\n          };\n\n      for (var prop in self) {\n        if (self.hasOwnProperty(prop)) {\n          proc[prop] = self[prop];\n        }\n      }\n\n      return proc;\n    \n    }, $Proc_dup$10.$$arity = 0);\n    return Opal.alias(self, \"clone\", \"dup\");\n  })($nesting[0], Function, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/method\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_reader', '$arity', '$new', '$class', '$join', '$source_location', '$raise']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Method');\n\n    var $nesting = [self].concat($parent_nesting), $Method_initialize$1, $Method_arity$2, $Method_parameters$3, $Method_source_location$4, $Method_comments$5, $Method_call$6, $Method_unbind$7, $Method_to_proc$8, $Method_inspect$9;\n\n    self.$$prototype.method = self.$$prototype.receiver = self.$$prototype.owner = self.$$prototype.name = nil;\n    \n    self.$attr_reader(\"owner\", \"receiver\", \"name\");\n    \n    Opal.def(self, '$initialize', $Method_initialize$1 = function $$initialize(receiver, owner, method, name) {\n      var self = this;\n\n      \n      self.receiver = receiver;\n      self.owner = owner;\n      self.name = name;\n      return (self.method = method);\n    }, $Method_initialize$1.$$arity = 4);\n    \n    Opal.def(self, '$arity', $Method_arity$2 = function $$arity() {\n      var self = this;\n\n      return self.method.$arity()\n    }, $Method_arity$2.$$arity = 0);\n    \n    Opal.def(self, '$parameters', $Method_parameters$3 = function $$parameters() {\n      var self = this;\n\n      return self.method.$$parameters\n    }, $Method_parameters$3.$$arity = 0);\n    \n    Opal.def(self, '$source_location', $Method_source_location$4 = function $$source_location() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$source_location) ? $a : [\"(eval)\", 0])\n    }, $Method_source_location$4.$$arity = 0);\n    \n    Opal.def(self, '$comments', $Method_comments$5 = function $$comments() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$comments) ? $a : [])\n    }, $Method_comments$5.$$arity = 0);\n    \n    Opal.def(self, '$call', $Method_call$6 = function $$call($a) {\n      var $iter = $Method_call$6.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Method_call$6.$$p = null;\n      \n      \n      if ($iter) $Method_call$6.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      self.method.$$p = block;\n\n      return self.method.apply(self.receiver, args);\n    ;\n    }, $Method_call$6.$$arity = -1);\n    Opal.alias(self, \"[]\", \"call\");\n    \n    Opal.def(self, '$unbind', $Method_unbind$7 = function $$unbind() {\n      var self = this;\n\n      return $$($nesting, 'UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)\n    }, $Method_unbind$7.$$arity = 0);\n    \n    Opal.def(self, '$to_proc', $Method_to_proc$8 = function $$to_proc() {\n      var self = this;\n\n      \n      var proc = self.$call.bind(self);\n      proc.$$unbound = self.method;\n      proc.$$is_lambda = true;\n      proc.$$arity = self.method.$$arity;\n      proc.$$parameters = self.method.$$parameters;\n      return proc;\n    \n    }, $Method_to_proc$8.$$arity = 0);\n    return (Opal.def(self, '$inspect', $Method_inspect$9 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<\" + (self.$class()) + \": \" + (self.receiver.$class()) + \"#\" + (self.name) + \" (defined in \" + (self.owner) + \" in \" + (self.$source_location().$join(\":\")) + \")>\"\n    }, $Method_inspect$9.$$arity = 0), nil) && 'inspect';\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'UnboundMethod');\n\n    var $nesting = [self].concat($parent_nesting), $UnboundMethod_initialize$10, $UnboundMethod_arity$11, $UnboundMethod_parameters$12, $UnboundMethod_source_location$13, $UnboundMethod_comments$14, $UnboundMethod_bind$15, $UnboundMethod_inspect$16;\n\n    self.$$prototype.method = self.$$prototype.owner = self.$$prototype.name = self.$$prototype.source = nil;\n    \n    self.$attr_reader(\"source\", \"owner\", \"name\");\n    \n    Opal.def(self, '$initialize', $UnboundMethod_initialize$10 = function $$initialize(source, owner, method, name) {\n      var self = this;\n\n      \n      self.source = source;\n      self.owner = owner;\n      self.method = method;\n      return (self.name = name);\n    }, $UnboundMethod_initialize$10.$$arity = 4);\n    \n    Opal.def(self, '$arity', $UnboundMethod_arity$11 = function $$arity() {\n      var self = this;\n\n      return self.method.$arity()\n    }, $UnboundMethod_arity$11.$$arity = 0);\n    \n    Opal.def(self, '$parameters', $UnboundMethod_parameters$12 = function $$parameters() {\n      var self = this;\n\n      return self.method.$$parameters\n    }, $UnboundMethod_parameters$12.$$arity = 0);\n    \n    Opal.def(self, '$source_location', $UnboundMethod_source_location$13 = function $$source_location() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$source_location) ? $a : [\"(eval)\", 0])\n    }, $UnboundMethod_source_location$13.$$arity = 0);\n    \n    Opal.def(self, '$comments', $UnboundMethod_comments$14 = function $$comments() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$comments) ? $a : [])\n    }, $UnboundMethod_comments$14.$$arity = 0);\n    \n    Opal.def(self, '$bind', $UnboundMethod_bind$15 = function $$bind(object) {\n      var self = this;\n\n      \n      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {\n        return $$($nesting, 'Method').$new(object, self.owner, self.method, self.name);\n      }\n      else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't bind singleton method to a different class (expected \" + (object) + \".kind_of?(\" + (self.owner) + \" to be true)\");\n      }\n    \n    }, $UnboundMethod_bind$15.$$arity = 1);\n    return (Opal.def(self, '$inspect', $UnboundMethod_inspect$16 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<\" + (self.$class()) + \": \" + (self.source) + \"#\" + (self.name) + \" (defined in \" + (self.owner) + \" in \" + (self.$source_location().$join(\":\")) + \")>\"\n    }, $UnboundMethod_inspect$16.$$arity = 0), nil) && 'inspect';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/variables\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$new']);\n  \n  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars[\"'\"] = nil;\n  $gvars.LOADED_FEATURES = ($gvars[\"\\\"\"] = Opal.loaded_features);\n  $gvars.LOAD_PATH = ($gvars[\":\"] = []);\n  $gvars[\"/\"] = \"\\n\";\n  $gvars[\",\"] = nil;\n  Opal.const_set($nesting[0], 'ARGV', []);\n  Opal.const_set($nesting[0], 'ARGF', $$($nesting, 'Object').$new());\n  Opal.const_set($nesting[0], 'ENV', $hash2([], {}));\n  $gvars.VERBOSE = false;\n  $gvars.DEBUG = false;\n  return ($gvars.SAFE = 0);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"opal/regexp_anchors\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  Opal.add_stubs(['$==', '$new']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Opal');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      return \"^\"\n    } else {\n      return nil\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      return \"$\"\n    } else {\n      return nil\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', \"\\\\u0001-\\\\u002F\\\\u003A-\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', \"\\\\u0001-\\\\u0020\\\\u0022-\\\\u002F\\\\u003A-\\\\u003E\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', $$($nesting, 'Regexp').$new(\"\" + \"[^\" + ($$($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + \"]*[^\" + ($$($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + \"]\"));\n    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', \"\\\\u0001-\\\\u0020\\\\u0021-\\\\u002F\\\\u003B-\\\\u003F\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', $$($nesting, 'Regexp').$new(\"\" + ($$($nesting, 'REGEXP_START')) + \"(::)?[A-Z][^\" + ($$($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + \"]*\" + ($$($nesting, 'REGEXP_END'))));\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"opal/mini\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"opal/base\");\n  self.$require(\"corelib/nil\");\n  self.$require(\"corelib/boolean\");\n  self.$require(\"corelib/string\");\n  self.$require(\"corelib/comparable\");\n  self.$require(\"corelib/enumerable\");\n  self.$require(\"corelib/enumerator\");\n  self.$require(\"corelib/array\");\n  self.$require(\"corelib/hash\");\n  self.$require(\"corelib/number\");\n  self.$require(\"corelib/range\");\n  self.$require(\"corelib/proc\");\n  self.$require(\"corelib/method\");\n  self.$require(\"corelib/regexp\");\n  self.$require(\"corelib/variables\");\n  return self.$require(\"opal/regexp_anchors\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/string/encoding\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var $$11, $$14, $$17, $$20, $$23, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$==', '$default_external', '$upcase', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$dup', '$bytesize', '$enum_for', '$coerce_to!', '$find', '$<']);\n  \n  self.$require(\"corelib/string\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Encoding');\n\n    var $nesting = [self].concat($parent_nesting), $Encoding_register$1, $Encoding_find$3, $Encoding_initialize$4, $Encoding_ascii_compatible$ques$5, $Encoding_dummy$ques$6, $Encoding_to_s$7, $Encoding_inspect$8, $Encoding_each_byte$9, $Encoding_bytesize$10;\n\n    self.$$prototype.ascii = self.$$prototype.dummy = self.$$prototype.name = nil;\n    \n    Opal.defineProperty(self, '$$register', {});\n    Opal.defs(self, '$register', $Encoding_register$1 = function $$register(name, options) {\n      var $iter = $Encoding_register$1.$$p, block = $iter || nil, $a, $$2, self = this, names = nil, encoding = nil, register = nil;\n\n      if ($iter) $Encoding_register$1.$$p = null;\n      \n      \n      if ($iter) $Encoding_register$1.$$p = null;;\n      \n      if (options == null) {\n        options = $hash2([], {});\n      };\n      names = $rb_plus([name], ($truthy($a = options['$[]'](\"aliases\")) ? $a : []));\n      encoding = $send($$($nesting, 'Class'), 'new', [self], block.$to_proc()).$new(name, names, ($truthy($a = options['$[]'](\"ascii\")) ? $a : false), ($truthy($a = options['$[]'](\"dummy\")) ? $a : false));\n      register = self[\"$$register\"];\n      return $send(names, 'each', [], ($$2 = function(encoding_name){var self = $$2.$$s || this;\n\n      \n        \n        if (encoding_name == null) {\n          encoding_name = nil;\n        };\n        self.$const_set(encoding_name.$sub(\"-\", \"_\"), encoding);\n        return register[\"\" + \"$$\" + (encoding_name)] = encoding;}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n    }, $Encoding_register$1.$$arity = -2);\n    Opal.defs(self, '$find', $Encoding_find$3 = function $$find(name) {\n      var $a, self = this, register = nil, encoding = nil;\n\n      \n      if (name['$=='](\"default_external\")) {\n        return self.$default_external()};\n      register = self[\"$$register\"];\n      encoding = ($truthy($a = register[\"\" + \"$$\" + (name)]) ? $a : register[\"\" + \"$$\" + (name.$upcase())]);\n      if ($truthy(encoding)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"unknown encoding name - \" + (name))\n      };\n      return encoding;\n    }, $Encoding_find$3.$$arity = 1);\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting);\n\n      return self.$attr_accessor(\"default_external\")\n    })(Opal.get_singleton_class(self), $nesting);\n    self.$attr_reader(\"name\", \"names\");\n    \n    Opal.def(self, '$initialize', $Encoding_initialize$4 = function $$initialize(name, names, ascii, dummy) {\n      var self = this;\n\n      \n      self.name = name;\n      self.names = names;\n      self.ascii = ascii;\n      return (self.dummy = dummy);\n    }, $Encoding_initialize$4.$$arity = 4);\n    \n    Opal.def(self, '$ascii_compatible?', $Encoding_ascii_compatible$ques$5 = function() {\n      var self = this;\n\n      return self.ascii\n    }, $Encoding_ascii_compatible$ques$5.$$arity = 0);\n    \n    Opal.def(self, '$dummy?', $Encoding_dummy$ques$6 = function() {\n      var self = this;\n\n      return self.dummy\n    }, $Encoding_dummy$ques$6.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Encoding_to_s$7 = function $$to_s() {\n      var self = this;\n\n      return self.name\n    }, $Encoding_to_s$7.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $Encoding_inspect$8 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<Encoding:\" + (self.name) + ((function() {if ($truthy(self.dummy)) {\n        return \" (dummy)\"\n      } else {\n        return nil\n      }; return nil; })()) + \">\"\n    }, $Encoding_inspect$8.$$arity = 0);\n    \n    Opal.def(self, '$each_byte', $Encoding_each_byte$9 = function $$each_byte($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'));\n    }, $Encoding_each_byte$9.$$arity = -1);\n    \n    Opal.def(self, '$bytesize', $Encoding_bytesize$10 = function $$bytesize($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'));\n    }, $Encoding_bytesize$10.$$arity = -1);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'EncodingError');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      return nil\n    })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'CompatibilityError');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      return nil\n    })($nesting[0], $$($nesting, 'EncodingError'), $nesting);\n  })($nesting[0], null, $nesting);\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-8\", $hash2([\"aliases\", \"ascii\"], {\"aliases\": [\"CP65001\"], \"ascii\": true})], ($$11 = function(){var self = $$11.$$s || this, $each_byte$12, $bytesize$13;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$12 = function $$each_byte(string) {\n      var $iter = $each_byte$12.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$12.$$p = null;\n      \n      \n      if ($iter) $each_byte$12.$$p = null;;\n      \n      var units = Infinity\n      var codePoint\n      var length = string.length\n      var leadSurrogate = null\n\n      for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i)\n\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n          // last char was a lead\n          if (!leadSurrogate) {\n            // no lead yet\n            if (codePoint > 0xDBFF) {\n              // unexpected trail\n              if ((units -= 3) > -1) {\n                Opal.yield1(block, 0xEF);\n                Opal.yield1(block, 0xBF);\n                Opal.yield1(block, 0xBD);\n              }\n              continue\n            } else if (i + 1 === length) {\n              // unpaired lead\n              if ((units -= 3) > -1) {\n                Opal.yield1(block, 0xEF);\n                Opal.yield1(block, 0xBF);\n                Opal.yield1(block, 0xBD);\n              }\n              continue\n            }\n\n            // valid lead\n            leadSurrogate = codePoint\n\n            continue\n          }\n\n          // 2 leads in a row\n          if (codePoint < 0xDC00) {\n            if ((units -= 3) > -1) {\n              Opal.yield1(block, 0xEF);\n              Opal.yield1(block, 0xBF);\n              Opal.yield1(block, 0xBD);\n            }\n            leadSurrogate = codePoint\n            continue\n          }\n\n          // valid surrogate pair\n          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n        } else if (leadSurrogate) {\n          // valid bmp char, but last char was a lead\n          if ((units -= 3) > -1) {\n            Opal.yield1(block, 0xEF);\n            Opal.yield1(block, 0xBF);\n            Opal.yield1(block, 0xBD);\n          }\n        }\n\n        leadSurrogate = null\n\n        // encode utf8\n        if (codePoint < 0x80) {\n          if ((units -= 1) < 0) break\n          Opal.yield1(block, codePoint);\n        } else if (codePoint < 0x800) {\n          if ((units -= 2) < 0) break\n          Opal.yield1(block, codePoint >> 0x6 | 0xC0);\n          Opal.yield1(block, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n          if ((units -= 3) < 0) break\n          Opal.yield1(block, codePoint >> 0xC | 0xE0);\n          Opal.yield1(block, codePoint >> 0x6 & 0x3F | 0x80);\n          Opal.yield1(block, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n          if ((units -= 4) < 0) break\n          Opal.yield1(block, codePoint >> 0x12 | 0xF0);\n          Opal.yield1(block, codePoint >> 0xC & 0x3F | 0x80);\n          Opal.yield1(block, codePoint >> 0x6 & 0x3F | 0x80);\n          Opal.yield1(block, codePoint & 0x3F | 0x80);\n        } else {\n          // Invalid code point\n        }\n      }\n    ;\n    }, $each_byte$12.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$13 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$13.$$arity = 1), nil) && 'bytesize';}, $$11.$$s = self, $$11.$$arity = 0, $$11));\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-16LE\"], ($$14 = function(){var self = $$14.$$s || this, $each_byte$15, $bytesize$16;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$15 = function $$each_byte(string) {\n      var $iter = $each_byte$15.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$15.$$p = null;\n      \n      \n      if ($iter) $each_byte$15.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n      }\n    ;\n    }, $each_byte$15.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$16 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$16.$$arity = 1), nil) && 'bytesize';}, $$14.$$s = self, $$14.$$arity = 0, $$14));\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-16BE\"], ($$17 = function(){var self = $$17.$$s || this, $each_byte$18, $bytesize$19;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$18 = function $$each_byte(string) {\n      var $iter = $each_byte$18.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$18.$$p = null;\n      \n      \n      if ($iter) $each_byte$18.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code >> 8);\n        Opal.yield1(block, code & 0xff);\n      }\n    ;\n    }, $each_byte$18.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$19 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$19.$$arity = 1), nil) && 'bytesize';}, $$17.$$s = self, $$17.$$arity = 0, $$17));\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-32LE\"], ($$20 = function(){var self = $$20.$$s || this, $each_byte$21, $bytesize$22;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$21 = function $$each_byte(string) {\n      var $iter = $each_byte$21.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$21.$$p = null;\n      \n      \n      if ($iter) $each_byte$21.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n      }\n    ;\n    }, $each_byte$21.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$22 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$22.$$arity = 1), nil) && 'bytesize';}, $$20.$$s = self, $$20.$$arity = 0, $$20));\n  $send($$($nesting, 'Encoding'), 'register', [\"ASCII-8BIT\", $hash2([\"aliases\", \"ascii\", \"dummy\"], {\"aliases\": [\"BINARY\", \"US-ASCII\", \"ASCII\"], \"ascii\": true, \"dummy\": true})], ($$23 = function(){var self = $$23.$$s || this, $each_byte$24, $bytesize$25;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$24 = function $$each_byte(string) {\n      var $iter = $each_byte$24.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$24.$$p = null;\n      \n      \n      if ($iter) $each_byte$24.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n      }\n    ;\n    }, $each_byte$24.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$25 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$25.$$arity = 1), nil) && 'bytesize';}, $$23.$$s = self, $$23.$$arity = 0, $$23));\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String_bytes$26, $String_bytesize$27, $String_each_byte$28, $String_encode$29, $String_force_encoding$30, $String_getbyte$31, $String_valid_encoding$ques$32;\n\n    self.$$prototype.bytes = self.$$prototype.internal_encoding = nil;\n    \n    self.$attr_reader(\"encoding\");\n    self.$attr_reader(\"internal_encoding\");\n    Opal.defineProperty(String.prototype, 'bytes', nil);\n    Opal.defineProperty(String.prototype, 'encoding', $$$($$($nesting, 'Encoding'), 'UTF_8'));\n    Opal.defineProperty(String.prototype, 'internal_encoding', $$$($$($nesting, 'Encoding'), 'UTF_8'));\n    \n    Opal.def(self, '$bytes', $String_bytes$26 = function $$bytes() {\n      var $a, self = this;\n\n      \n      self.bytes = ($truthy($a = self.bytes) ? $a : self.$each_byte().$to_a());\n      return self.bytes.$dup();\n    }, $String_bytes$26.$$arity = 0);\n    \n    Opal.def(self, '$bytesize', $String_bytesize$27 = function $$bytesize() {\n      var self = this;\n\n      return self.internal_encoding.$bytesize(self)\n    }, $String_bytesize$27.$$arity = 0);\n    \n    Opal.def(self, '$each_byte', $String_each_byte$28 = function $$each_byte() {\n      var $iter = $String_each_byte$28.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_each_byte$28.$$p = null;\n      \n      \n      if ($iter) $String_each_byte$28.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each_byte\")\n      };\n      $send(self.internal_encoding, 'each_byte', [self], block.$to_proc());\n      return self;\n    }, $String_each_byte$28.$$arity = 0);\n    \n    Opal.def(self, '$encode', $String_encode$29 = function $$encode(encoding) {\n      var self = this;\n\n      return Opal.enc(self, encoding);\n    }, $String_encode$29.$$arity = 1);\n    \n    Opal.def(self, '$force_encoding', $String_force_encoding$30 = function $$force_encoding(encoding) {\n      var self = this;\n\n      \n      if (encoding === self.encoding) { return self; }\n\n      encoding = $$($nesting, 'Opal')['$coerce_to!'](encoding, $$($nesting, 'String'), \"to_s\");\n      encoding = $$($nesting, 'Encoding').$find(encoding);\n\n      if (encoding === self.encoding) { return self; }\n\n      self.encoding = encoding;\n      return self;\n    \n    }, $String_force_encoding$30.$$arity = 1);\n    \n    Opal.def(self, '$getbyte', $String_getbyte$31 = function $$getbyte(idx) {\n      var self = this, string_bytes = nil;\n\n      \n      string_bytes = self.$bytes();\n      idx = $$($nesting, 'Opal')['$coerce_to!'](idx, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy($rb_lt(string_bytes.$length(), idx))) {\n        return nil};\n      return string_bytes['$[]'](idx);\n    }, $String_getbyte$31.$$arity = 1);\n    return (Opal.def(self, '$valid_encoding?', $String_valid_encoding$ques$32 = function() {\n      var self = this;\n\n      return true\n    }, $String_valid_encoding$ques$32.$$arity = 0), nil) && 'valid_encoding?';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/struct\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$alias_method', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$class', '$last', '$>', '$length', '$-', '$keys', '$any?', '$join', '$[]', '$[]=', '$each_with_index', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$each_pair', '$inspect', '$each_with_object', '$flatten', '$to_a', '$respond_to?', '$dig']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Struct');\n\n    var $nesting = [self].concat($parent_nesting), $Struct_new$1, $Struct_define_struct_attribute$6, $Struct_members$9, $Struct_inherited$10, $Struct_initialize$12, $Struct_members$15, $Struct_hash$16, $Struct_$$$17, $Struct_$$$eq$18, $Struct_$eq_eq$19, $Struct_eql$ques$20, $Struct_each$21, $Struct_each_pair$24, $Struct_length$27, $Struct_to_a$28, $Struct_inspect$30, $Struct_to_h$32, $Struct_values_at$34, $Struct_dig$36;\n\n    \n    self.$include($$($nesting, 'Enumerable'));\n    Opal.defs(self, '$new', $Struct_new$1 = function(const_name, $a, $b) {\n      var $iter = $Struct_new$1.$$p, block = $iter || nil, $post_args, $kwargs, args, keyword_init, $$2, $$3, self = this, klass = nil;\n\n      if ($iter) $Struct_new$1.$$p = null;\n      \n      \n      if ($iter) $Struct_new$1.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      $kwargs = Opal.extract_kwargs($post_args);\n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      args = $post_args;;\n      \n      keyword_init = $kwargs.$$smap[\"keyword_init\"];\n      if (keyword_init == null) {\n        keyword_init = false\n      };\n      if ($truthy(const_name)) {\n        \n        try {\n          const_name = $$($nesting, 'Opal')['$const_name!'](const_name)\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'TypeError'), $$($nesting, 'NameError')])) {\n            try {\n              \n              args.$unshift(const_name);\n              const_name = nil;\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };};\n      $send(args, 'map', [], ($$2 = function(arg){var self = $$2.$$s || this;\n\n      \n        \n        if (arg == null) {\n          arg = nil;\n        };\n        return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'String'), \"to_str\");}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n      klass = $send($$($nesting, 'Class'), 'new', [self], ($$3 = function(){var self = $$3.$$s || this, $$4;\n\n      \n        $send(args, 'each', [], ($$4 = function(arg){var self = $$4.$$s || this;\n\n        \n          \n          if (arg == null) {\n            arg = nil;\n          };\n          return self.$define_struct_attribute(arg);}, $$4.$$s = self, $$4.$$arity = 1, $$4));\n        return (function(self, $parent_nesting) {\n          var $nesting = [self].concat($parent_nesting), $new$5;\n\n          \n          \n          Opal.def(self, '$new', $new$5 = function($a) {\n            var $post_args, args, self = this, instance = nil;\n\n            \n            \n            $post_args = Opal.slice.call(arguments, 0, arguments.length);\n            \n            args = $post_args;;\n            instance = self.$allocate();\n            instance.$$data = {};\n            $send(instance, 'initialize', Opal.to_a(args));\n            return instance;\n          }, $new$5.$$arity = -1);\n          return self.$alias_method(\"[]\", \"new\");\n        })(Opal.get_singleton_class(self), $nesting);}, $$3.$$s = self, $$3.$$arity = 0, $$3));\n      if ($truthy(block)) {\n        $send(klass, 'module_eval', [], block.$to_proc())};\n      klass.$$keyword_init = keyword_init;\n      if ($truthy(const_name)) {\n        $$($nesting, 'Struct').$const_set(const_name, klass)};\n      return klass;\n    }, $Struct_new$1.$$arity = -2);\n    Opal.defs(self, '$define_struct_attribute', $Struct_define_struct_attribute$6 = function $$define_struct_attribute(name) {\n      var $$7, $$8, self = this;\n\n      \n      if (self['$==']($$($nesting, 'Struct'))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"you cannot define attributes to the Struct class\")};\n      self.$members()['$<<'](name);\n      $send(self, 'define_method', [name], ($$7 = function(){var self = $$7.$$s || this;\n\n      return self.$$data[name];}, $$7.$$s = self, $$7.$$arity = 0, $$7));\n      return $send(self, 'define_method', [\"\" + (name) + \"=\"], ($$8 = function(value){var self = $$8.$$s || this;\n\n      \n        \n        if (value == null) {\n          value = nil;\n        };\n        return self.$$data[name] = value;;}, $$8.$$s = self, $$8.$$arity = 1, $$8));\n    }, $Struct_define_struct_attribute$6.$$arity = 1);\n    Opal.defs(self, '$members', $Struct_members$9 = function $$members() {\n      var $a, self = this;\n      if (self.members == null) self.members = nil;\n\n      \n      if (self['$==']($$($nesting, 'Struct'))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"the Struct class has no members\")};\n      return (self.members = ($truthy($a = self.members) ? $a : []));\n    }, $Struct_members$9.$$arity = 0);\n    Opal.defs(self, '$inherited', $Struct_inherited$10 = function $$inherited(klass) {\n      var $$11, self = this, members = nil;\n      if (self.members == null) self.members = nil;\n\n      \n      members = self.members;\n      return $send(klass, 'instance_eval', [], ($$11 = function(){var self = $$11.$$s || this;\n\n      return (self.members = members)}, $$11.$$s = self, $$11.$$arity = 0, $$11));\n    }, $Struct_inherited$10.$$arity = 1);\n    \n    Opal.def(self, '$initialize', $Struct_initialize$12 = function $$initialize($a) {\n      var $post_args, args, $b, $$13, $$14, self = this, kwargs = nil, extra = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(self.$class().$$keyword_init)) {\n        \n        kwargs = ($truthy($b = args.$last()) ? $b : $hash2([], {}));\n        if ($truthy(($truthy($b = $rb_gt(args.$length(), 1)) ? $b : (args.length === 1 && !kwargs.$$is_hash)))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (given \" + (args.$length()) + \", expected 0)\")};\n        extra = $rb_minus(kwargs.$keys(), self.$class().$members());\n        if ($truthy(extra['$any?']())) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"unknown keywords: \" + (extra.$join(\", \")))};\n        return $send(self.$class().$members(), 'each', [], ($$13 = function(name){var self = $$13.$$s || this, $writer = nil;\n\n        \n          \n          if (name == null) {\n            name = nil;\n          };\n          $writer = [name, kwargs['$[]'](name)];\n          $send(self, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$13.$$s = self, $$13.$$arity = 1, $$13));\n      } else {\n        \n        if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"struct size differs\")};\n        return $send(self.$class().$members(), 'each_with_index', [], ($$14 = function(name, index){var self = $$14.$$s || this, $writer = nil;\n\n        \n          \n          if (name == null) {\n            name = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          $writer = [name, args['$[]'](index)];\n          $send(self, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$14.$$s = self, $$14.$$arity = 2, $$14));\n      };\n    }, $Struct_initialize$12.$$arity = -1);\n    \n    Opal.def(self, '$members', $Struct_members$15 = function $$members() {\n      var self = this;\n\n      return self.$class().$members()\n    }, $Struct_members$15.$$arity = 0);\n    \n    Opal.def(self, '$hash', $Struct_hash$16 = function $$hash() {\n      var self = this;\n\n      return $$($nesting, 'Hash').$new(self.$$data).$hash()\n    }, $Struct_hash$16.$$arity = 0);\n    \n    Opal.def(self, '$[]', $Struct_$$$17 = function(name) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](name))) {\n        \n        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too small for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too large for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        name = self.$class().$members()['$[]'](name);\n      } else if ($truthy($$($nesting, 'String')['$==='](name))) {\n        \n        if(!self.$$data.hasOwnProperty(name)) {\n          self.$raise($$($nesting, 'NameError').$new(\"\" + \"no member '\" + (name) + \"' in struct\", name))\n        }\n      \n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"no implicit conversion of \" + (name.$class()) + \" into Integer\")\n      };\n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      return self.$$data[name];;\n    }, $Struct_$$$17.$$arity = 1);\n    \n    Opal.def(self, '$[]=', $Struct_$$$eq$18 = function(name, value) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](name))) {\n        \n        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too small for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too large for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        name = self.$class().$members()['$[]'](name);\n      } else if ($truthy($$($nesting, 'String')['$==='](name))) {\n        if ($truthy(self.$class().$members()['$include?'](name.$to_sym()))) {\n        } else {\n          self.$raise($$($nesting, 'NameError').$new(\"\" + \"no member '\" + (name) + \"' in struct\", name))\n        }\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"no implicit conversion of \" + (name.$class()) + \" into Integer\")\n      };\n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      return self.$$data[name] = value;;\n    }, $Struct_$$$eq$18.$$arity = 2);\n    \n    Opal.def(self, '$==', $Struct_$eq_eq$19 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$instance_of?'](self.$class()))) {\n      } else {\n        return false\n      };\n      \n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[(struct).$__id__()] = true;\n        recursed2[(other).$__id__()] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if ($$($nesting, 'Struct')['$==='](a)) {\n            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$=='](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    ;\n    }, $Struct_$eq_eq$19.$$arity = 1);\n    \n    Opal.def(self, '$eql?', $Struct_eql$ques$20 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$instance_of?'](self.$class()))) {\n      } else {\n        return false\n      };\n      \n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[(struct).$__id__()] = true;\n        recursed2[(other).$__id__()] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if ($$($nesting, 'Struct')['$==='](a)) {\n            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$eql?'](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    ;\n    }, $Struct_eql$ques$20.$$arity = 1);\n    \n    Opal.def(self, '$each', $Struct_each$21 = function $$each() {\n      var $$22, $$23, $iter = $Struct_each$21.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Struct_each$21.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each\"], ($$22 = function(){var self = $$22.$$s || this;\n\n        return self.$size()}, $$22.$$s = self, $$22.$$arity = 0, $$22))\n      };\n      $send(self.$class().$members(), 'each', [], ($$23 = function(name){var self = $$23.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        return Opal.yield1($yield, self['$[]'](name));;}, $$23.$$s = self, $$23.$$arity = 1, $$23));\n      return self;\n    }, $Struct_each$21.$$arity = 0);\n    \n    Opal.def(self, '$each_pair', $Struct_each_pair$24 = function $$each_pair() {\n      var $$25, $$26, $iter = $Struct_each_pair$24.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Struct_each_pair$24.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_pair\"], ($$25 = function(){var self = $$25.$$s || this;\n\n        return self.$size()}, $$25.$$s = self, $$25.$$arity = 0, $$25))\n      };\n      $send(self.$class().$members(), 'each', [], ($$26 = function(name){var self = $$26.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        return Opal.yield1($yield, [name, self['$[]'](name)]);;}, $$26.$$s = self, $$26.$$arity = 1, $$26));\n      return self;\n    }, $Struct_each_pair$24.$$arity = 0);\n    \n    Opal.def(self, '$length', $Struct_length$27 = function $$length() {\n      var self = this;\n\n      return self.$class().$members().$length()\n    }, $Struct_length$27.$$arity = 0);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$to_a', $Struct_to_a$28 = function $$to_a() {\n      var $$29, self = this;\n\n      return $send(self.$class().$members(), 'map', [], ($$29 = function(name){var self = $$29.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        return self['$[]'](name);}, $$29.$$s = self, $$29.$$arity = 1, $$29))\n    }, $Struct_to_a$28.$$arity = 0);\n    Opal.alias(self, \"values\", \"to_a\");\n    \n    Opal.def(self, '$inspect', $Struct_inspect$30 = function $$inspect() {\n      var $a, $$31, self = this, result = nil;\n\n      \n      result = \"#<struct \";\n      if ($truthy(($truthy($a = $$($nesting, 'Struct')['$==='](self)) ? self.$class().$name() : $a))) {\n        result = $rb_plus(result, \"\" + (self.$class()) + \" \")};\n      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], ($$31 = function(name, value){var self = $$31.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        \n        if (value == null) {\n          value = nil;\n        };\n        return \"\" + (name) + \"=\" + (value.$inspect());}, $$31.$$s = self, $$31.$$arity = 2, $$31)).$join(\", \"));\n      result = $rb_plus(result, \">\");\n      return result;\n    }, $Struct_inspect$30.$$arity = 0);\n    Opal.alias(self, \"to_s\", \"inspect\");\n    \n    Opal.def(self, '$to_h', $Struct_to_h$32 = function $$to_h() {\n      var $$33, self = this;\n\n      return $send(self.$class().$members(), 'each_with_object', [$hash2([], {})], ($$33 = function(name, h){var self = $$33.$$s || this, $writer = nil;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        \n        if (h == null) {\n          h = nil;\n        };\n        $writer = [name, self['$[]'](name)];\n        $send(h, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];}, $$33.$$s = self, $$33.$$arity = 2, $$33))\n    }, $Struct_to_h$32.$$arity = 0);\n    \n    Opal.def(self, '$values_at', $Struct_values_at$34 = function $$values_at($a) {\n      var $post_args, args, $$35, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      args = $send(args, 'map', [], ($$35 = function(arg){var self = $$35.$$s || this;\n\n      \n        \n        if (arg == null) {\n          arg = nil;\n        };\n        return arg.$$is_range ? arg.$to_a() : arg;}, $$35.$$s = self, $$35.$$arity = 1, $$35)).$flatten();\n      \n      var result = [];\n      for (var i = 0, len = args.length; i < len; i++) {\n        if (!args[i].$$is_number) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"no implicit conversion of \" + ((args[i]).$class()) + \" into Integer\")\n        }\n        result.push(self['$[]'](args[i]));\n      }\n      return result;\n    ;\n    }, $Struct_values_at$34.$$arity = -1);\n    return (Opal.def(self, '$dig', $Struct_dig$36 = function $$dig(key, $a) {\n      var $post_args, keys, self = this, item = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      keys = $post_args;;\n      item = (function() {if ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key))) {\n        return self.$$data[key] || nil;\n      } else {\n        return nil\n      }; return nil; })();\n      \n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    ;\n      if ($truthy(item['$respond_to?'](\"dig\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', Opal.to_a(keys));\n    }, $Struct_dig$36.$$arity = -2), nil) && 'dig';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/io\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $writer = nil;\n\n  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$-', '$extend']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IO');\n\n    var $nesting = [self].concat($parent_nesting), $IO_tty$ques$1, $IO_closed$ques$2, $IO_write$3, $IO_flush$4;\n\n    self.$$prototype.tty = self.$$prototype.closed = nil;\n    \n    Opal.const_set($nesting[0], 'SEEK_SET', 0);\n    Opal.const_set($nesting[0], 'SEEK_CUR', 1);\n    Opal.const_set($nesting[0], 'SEEK_END', 2);\n    \n    Opal.def(self, '$tty?', $IO_tty$ques$1 = function() {\n      var self = this;\n\n      return self.tty\n    }, $IO_tty$ques$1.$$arity = 0);\n    \n    Opal.def(self, '$closed?', $IO_closed$ques$2 = function() {\n      var self = this;\n\n      return self.closed\n    }, $IO_closed$ques$2.$$arity = 0);\n    self.$attr_accessor(\"write_proc\");\n    \n    Opal.def(self, '$write', $IO_write$3 = function $$write(string) {\n      var self = this;\n\n      \n      self.write_proc(string);\n      return string.$size();\n    }, $IO_write$3.$$arity = 1);\n    self.$attr_accessor(\"sync\", \"tty\");\n    \n    Opal.def(self, '$flush', $IO_flush$4 = function $$flush() {\n      var self = this;\n\n      return nil\n    }, $IO_flush$4.$$arity = 0);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Writable');\n\n      var $nesting = [self].concat($parent_nesting), $Writable_$lt$lt$5, $Writable_print$6, $Writable_puts$8;\n\n      \n      \n      Opal.def(self, '$<<', $Writable_$lt$lt$5 = function(string) {\n        var self = this;\n\n        \n        self.$write(string);\n        return self;\n      }, $Writable_$lt$lt$5.$$arity = 1);\n      \n      Opal.def(self, '$print', $Writable_print$6 = function $$print($a) {\n        var $post_args, args, $$7, self = this;\n        if ($gvars[\",\"] == null) $gvars[\",\"] = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        self.$write($send(args, 'map', [], ($$7 = function(arg){var self = $$7.$$s || this;\n\n        \n          \n          if (arg == null) {\n            arg = nil;\n          };\n          return self.$String(arg);}, $$7.$$s = self, $$7.$$arity = 1, $$7)).$join($gvars[\",\"]));\n        return nil;\n      }, $Writable_print$6.$$arity = -1);\n      \n      Opal.def(self, '$puts', $Writable_puts$8 = function $$puts($a) {\n        var $post_args, args, $$9, self = this, newline = nil;\n        if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        newline = $gvars[\"/\"];\n        if ($truthy(args['$empty?']())) {\n          self.$write($gvars[\"/\"])\n        } else {\n          self.$write($send(args, 'map', [], ($$9 = function(arg){var self = $$9.$$s || this;\n\n          \n            \n            if (arg == null) {\n              arg = nil;\n            };\n            return self.$String(arg).$chomp();}, $$9.$$s = self, $$9.$$arity = 1, $$9)).$concat([nil]).$join(newline))\n        };\n        return nil;\n      }, $Writable_puts$8.$$arity = -1);\n    })($nesting[0], $nesting);\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'Readable');\n\n      var $nesting = [self].concat($parent_nesting), $Readable_readbyte$10, $Readable_readchar$11, $Readable_readline$12, $Readable_readpartial$13;\n\n      \n      \n      Opal.def(self, '$readbyte', $Readable_readbyte$10 = function $$readbyte() {\n        var self = this;\n\n        return self.$getbyte()\n      }, $Readable_readbyte$10.$$arity = 0);\n      \n      Opal.def(self, '$readchar', $Readable_readchar$11 = function $$readchar() {\n        var self = this;\n\n        return self.$getc()\n      }, $Readable_readchar$11.$$arity = 0);\n      \n      Opal.def(self, '$readline', $Readable_readline$12 = function $$readline(sep) {\n        var self = this;\n        if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n        \n        \n        if (sep == null) {\n          sep = $gvars[\"/\"];\n        };\n        return self.$raise($$($nesting, 'NotImplementedError'));\n      }, $Readable_readline$12.$$arity = -1);\n      \n      Opal.def(self, '$readpartial', $Readable_readpartial$13 = function $$readpartial(integer, outbuf) {\n        var self = this;\n\n        \n        \n        if (outbuf == null) {\n          outbuf = nil;\n        };\n        return self.$raise($$($nesting, 'NotImplementedError'));\n      }, $Readable_readpartial$13.$$arity = -2);\n    })($nesting[0], $nesting);\n  })($nesting[0], null, $nesting);\n  Opal.const_set($nesting[0], 'STDERR', ($gvars.stderr = $$($nesting, 'IO').$new()));\n  Opal.const_set($nesting[0], 'STDIN', ($gvars.stdin = $$($nesting, 'IO').$new()));\n  Opal.const_set($nesting[0], 'STDOUT', ($gvars.stdout = $$($nesting, 'IO').$new()));\n  var console = Opal.global.console;\n  \n  $writer = [typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}];\n  $send($$($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));\n  $writer[$rb_minus($writer[\"length\"], 1)];;\n  \n  $writer = [typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}];\n  $send($$($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));\n  $writer[$rb_minus($writer[\"length\"], 1)];;\n  $$($nesting, 'STDOUT').$extend($$$($$($nesting, 'IO'), 'Writable'));\n  return $$($nesting, 'STDERR').$extend($$$($$($nesting, 'IO'), 'Writable'));\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/main\"] = function(Opal) {\n  var $to_s$1, $include$2, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$include']);\n  \n  Opal.defs(self, '$to_s', $to_s$1 = function $$to_s() {\n    var self = this;\n\n    return \"main\"\n  }, $to_s$1.$$arity = 0);\n  return (Opal.defs(self, '$include', $include$2 = function $$include(mod) {\n    var self = this;\n\n    return $$($nesting, 'Object').$include(mod)\n  }, $include$2.$$arity = 1), nil) && 'include';\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/dir\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$[]']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Dir');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $chdir$1, $pwd$2, $home$3;\n\n      \n      \n      Opal.def(self, '$chdir', $chdir$1 = function $$chdir(dir) {\n        var $iter = $chdir$1.$$p, $yield = $iter || nil, self = this, prev_cwd = nil;\n\n        if ($iter) $chdir$1.$$p = null;\n        return (function() { try {\n        \n        prev_cwd = Opal.current_dir;\n        Opal.current_dir = dir;\n        return Opal.yieldX($yield, []);;\n        } finally {\n          Opal.current_dir = prev_cwd\n        }; })()\n      }, $chdir$1.$$arity = 1);\n      \n      Opal.def(self, '$pwd', $pwd$2 = function $$pwd() {\n        var self = this;\n\n        return Opal.current_dir || '.';\n      }, $pwd$2.$$arity = 0);\n      Opal.alias(self, \"getwd\", \"pwd\");\n      return (Opal.def(self, '$home', $home$3 = function $$home() {\n        var $a, self = this;\n\n        return ($truthy($a = $$($nesting, 'ENV')['$[]'](\"HOME\")) ? $a : \".\")\n      }, $home$3.$$arity = 0), nil) && 'home';\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/file\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;\n\n  Opal.add_stubs(['$respond_to?', '$to_path', '$pwd', '$split', '$sub', '$+', '$unshift', '$join', '$home', '$raise', '$start_with?', '$absolute_path', '$coerce_to!', '$basename', '$empty?', '$rindex', '$[]', '$nil?', '$==', '$-', '$length', '$gsub', '$find', '$=~', '$map', '$each_with_index', '$flatten', '$reject', '$to_proc', '$end_with?']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), windows_root_rx = nil;\n\n    \n    Opal.const_set($nesting[0], 'Separator', Opal.const_set($nesting[0], 'SEPARATOR', \"/\"));\n    Opal.const_set($nesting[0], 'ALT_SEPARATOR', nil);\n    Opal.const_set($nesting[0], 'PATH_SEPARATOR', \":\");\n    Opal.const_set($nesting[0], 'FNM_SYSCASE', 0);\n    windows_root_rx = /^[a-zA-Z]:(?:\\\\|\\/)/;\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $absolute_path$1, $expand_path$2, $dirname$3, $basename$4, $extname$5, $exist$ques$6, $directory$ques$7, $join$9, $split$12;\n\n      \n      \n      Opal.def(self, '$absolute_path', $absolute_path$1 = function $$absolute_path(path, basedir) {\n        var $a, self = this, sep = nil, sep_chars = nil, new_parts = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;\n\n        \n        \n        if (basedir == null) {\n          basedir = nil;\n        };\n        sep = $$($nesting, 'SEPARATOR');\n        sep_chars = $sep_chars();\n        new_parts = [];\n        path = (function() {if ($truthy(path['$respond_to?'](\"to_path\"))) {\n          return path.$to_path()\n        } else {\n          return path\n        }; return nil; })();\n        basedir = ($truthy($a = basedir) ? $a : $$($nesting, 'Dir').$pwd());\n        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);\n        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);\n        if ($truthy(path_abs)) {\n          \n          parts = path.$split(new RegExp(\"\" + \"[\" + (sep_chars) + \"]\"));\n          leading_sep = windows_root_rx.test(path) ? '' : path.$sub(new RegExp(\"\" + \"^([\" + (sep_chars) + \"]+).*$\"), \"\\\\1\");\n          abs = true;\n        } else {\n          \n          parts = $rb_plus(basedir.$split(new RegExp(\"\" + \"[\" + (sep_chars) + \"]\")), path.$split(new RegExp(\"\" + \"[\" + (sep_chars) + \"]\")));\n          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub(new RegExp(\"\" + \"^([\" + (sep_chars) + \"]+).*$\"), \"\\\\1\");\n          abs = basedir_abs;\n        };\n        \n        var part;\n        for (var i = 0, ii = parts.length; i < ii; i++) {\n          part = parts[i];\n\n          if (\n            (part === nil) ||\n            (part === ''  && ((new_parts.length === 0) || abs)) ||\n            (part === '.' && ((new_parts.length === 0) || abs))\n          ) {\n            continue;\n          }\n          if (part === '..') {\n            new_parts.pop();\n          } else {\n            new_parts.push(part);\n          }\n        }\n\n        if (!abs && parts[0] !== '.') {\n          new_parts.$unshift(\".\")\n        }\n      ;\n        new_path = new_parts.$join(sep);\n        if ($truthy(abs)) {\n          new_path = $rb_plus(leading_sep, new_path)};\n        return new_path;\n      }, $absolute_path$1.$$arity = -2);\n      \n      Opal.def(self, '$expand_path', $expand_path$2 = function $$expand_path(path, basedir) {\n        var self = this, sep = nil, sep_chars = nil, home = nil, leading_sep = nil, home_path_regexp = nil;\n\n        \n        \n        if (basedir == null) {\n          basedir = nil;\n        };\n        sep = $$($nesting, 'SEPARATOR');\n        sep_chars = $sep_chars();\n        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {\n          \n          home = $$($nesting, 'Dir').$home();\n          if ($truthy(home)) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"couldn't find HOME environment -- expanding `~'\")\n          };\n          leading_sep = windows_root_rx.test(home) ? '' : home.$sub(new RegExp(\"\" + \"^([\" + (sep_chars) + \"]+).*$\"), \"\\\\1\");\n          if ($truthy(home['$start_with?'](leading_sep))) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"non-absolute home\")\n          };\n          home = $rb_plus(home, sep);\n          home_path_regexp = new RegExp(\"\" + \"^\\\\~(?:\" + (sep) + \"|$)\");\n          path = path.$sub(home_path_regexp, home);\n          if ($truthy(basedir)) {\n            basedir = basedir.$sub(home_path_regexp, home)};};\n        return self.$absolute_path(path, basedir);\n      }, $expand_path$2.$$arity = -2);\n      Opal.alias(self, \"realpath\", \"expand_path\");\n      \n      // Coerce a given path to a path string using #to_path and #to_str\n      function $coerce_to_path(path) {\n        if ($truthy((path)['$respond_to?'](\"to_path\"))) {\n          path = path.$to_path();\n        }\n\n        path = $$($nesting, 'Opal')['$coerce_to!'](path, $$($nesting, 'String'), \"to_str\");\n\n        return path;\n      }\n\n      // Return a RegExp compatible char class\n      function $sep_chars() {\n        if ($$($nesting, 'ALT_SEPARATOR') === nil) {\n          return Opal.escape_regexp($$($nesting, 'SEPARATOR'));\n        } else {\n          return Opal.escape_regexp($rb_plus($$($nesting, 'SEPARATOR'), $$($nesting, 'ALT_SEPARATOR')));\n        }\n      }\n    ;\n      \n      Opal.def(self, '$dirname', $dirname$3 = function $$dirname(path) {\n        var self = this, sep_chars = nil;\n\n        \n        sep_chars = $sep_chars();\n        path = $coerce_to_path(path);\n        \n        var absolute = path.match(new RegExp(\"\" + \"^[\" + (sep_chars) + \"]\"));\n\n        path = path.replace(new RegExp(\"\" + \"[\" + (sep_chars) + \"]+$\"), ''); // remove trailing separators\n        path = path.replace(new RegExp(\"\" + \"[^\" + (sep_chars) + \"]+$\"), ''); // remove trailing basename\n        path = path.replace(new RegExp(\"\" + \"[\" + (sep_chars) + \"]+$\"), ''); // remove final trailing separators\n\n        if (path === '') {\n          return absolute ? '/' : '.';\n        }\n\n        return path;\n      ;\n      }, $dirname$3.$$arity = 1);\n      \n      Opal.def(self, '$basename', $basename$4 = function $$basename(name, suffix) {\n        var self = this, sep_chars = nil;\n\n        \n        \n        if (suffix == null) {\n          suffix = nil;\n        };\n        sep_chars = $sep_chars();\n        name = $coerce_to_path(name);\n        \n        if (name.length == 0) {\n          return name;\n        }\n\n        if (suffix !== nil) {\n          suffix = $$($nesting, 'Opal')['$coerce_to!'](suffix, $$($nesting, 'String'), \"to_str\")\n        } else {\n          suffix = null;\n        }\n\n        name = name.replace(new RegExp(\"\" + \"(.)[\" + (sep_chars) + \"]*$\"), '$1');\n        name = name.replace(new RegExp(\"\" + \"^(?:.*[\" + (sep_chars) + \"])?([^\" + (sep_chars) + \"]+)$\"), '$1');\n\n        if (suffix === \".*\") {\n          name = name.replace(/\\.[^\\.]+$/, '');\n        } else if(suffix !== null) {\n          suffix = Opal.escape_regexp(suffix);\n          name = name.replace(new RegExp(\"\" + (suffix) + \"$\"), '');\n        }\n\n        return name;\n      ;\n      }, $basename$4.$$arity = -2);\n      \n      Opal.def(self, '$extname', $extname$5 = function $$extname(path) {\n        var $a, self = this, filename = nil, last_dot_idx = nil;\n\n        \n        path = $coerce_to_path(path);\n        filename = self.$basename(path);\n        if ($truthy(filename['$empty?']())) {\n          return \"\"};\n        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(\".\");\n        if ($truthy(($truthy($a = last_dot_idx['$nil?']()) ? $a : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) {\n          return \"\"\n        } else {\n          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))\n        };\n      }, $extname$5.$$arity = 1);\n      \n      Opal.def(self, '$exist?', $exist$ques$6 = function(path) {\n        var self = this;\n\n        return Opal.modules[path] != null\n      }, $exist$ques$6.$$arity = 1);\n      Opal.alias(self, \"exists?\", \"exist?\");\n      \n      Opal.def(self, '$directory?', $directory$ques$7 = function(path) {\n        var $$8, self = this, files = nil, file = nil;\n\n        \n        files = [];\n        \n        for (var key in Opal.modules) {\n          files.push(key)\n        }\n      ;\n        path = path.$gsub(new RegExp(\"\" + \"(^.\" + ($$($nesting, 'SEPARATOR')) + \"+|\" + ($$($nesting, 'SEPARATOR')) + \"+$)\"));\n        file = $send(files, 'find', [], ($$8 = function(f){var self = $$8.$$s || this;\n\n        \n          \n          if (f == null) {\n            f = nil;\n          };\n          return f['$=~'](new RegExp(\"\" + \"^\" + (path)));}, $$8.$$s = self, $$8.$$arity = 1, $$8));\n        return file;\n      }, $directory$ques$7.$$arity = 1);\n      \n      Opal.def(self, '$join', $join$9 = function $$join($a) {\n        var $post_args, paths, $$10, $$11, self = this, result = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        paths = $post_args;;\n        if ($truthy(paths['$empty?']())) {\n          return \"\"};\n        result = \"\";\n        paths = $send(paths.$flatten().$each_with_index(), 'map', [], ($$10 = function(item, index){var self = $$10.$$s || this, $b;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          if ($truthy((($b = index['$=='](0)) ? item['$empty?']() : index['$=='](0)))) {\n            return $$($nesting, 'SEPARATOR')\n          } else if ($truthy((($b = paths.$length()['$==']($rb_plus(index, 1))) ? item['$empty?']() : paths.$length()['$==']($rb_plus(index, 1))))) {\n            return $$($nesting, 'SEPARATOR')\n          } else {\n            return item\n          };}, $$10.$$s = self, $$10.$$arity = 2, $$10));\n        paths = $send(paths, 'reject', [], \"empty?\".$to_proc());\n        $send(paths, 'each_with_index', [], ($$11 = function(item, index){var self = $$11.$$s || this, $b, next_item = nil;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          next_item = paths['$[]']($rb_plus(index, 1));\n          if ($truthy(next_item['$nil?']())) {\n            return (result = \"\" + (result) + (item))\n          } else {\n            \n            if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? next_item['$start_with?']($$($nesting, 'SEPARATOR')) : $b))) {\n              item = item.$sub(new RegExp(\"\" + ($$($nesting, 'SEPARATOR')) + \"+$\"), \"\")};\n            return (result = (function() {if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? $b : next_item['$start_with?']($$($nesting, 'SEPARATOR'))))) {\n              return \"\" + (result) + (item)\n            } else {\n              return \"\" + (result) + (item) + ($$($nesting, 'SEPARATOR'))\n            }; return nil; })());\n          };}, $$11.$$s = self, $$11.$$arity = 2, $$11));\n        return result;\n      }, $join$9.$$arity = -1);\n      return (Opal.def(self, '$split', $split$12 = function $$split(path) {\n        var self = this;\n\n        return path.$split($$($nesting, 'SEPARATOR'))\n      }, $split$12.$$arity = 1), nil) && 'split';\n    })(Opal.get_singleton_class(self), $nesting);\n  })($nesting[0], $$($nesting, 'IO'), $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/process\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$const_set', '$size', '$<<', '$__register_clock__', '$to_f', '$now', '$new', '$[]', '$raise']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Process');\n\n    var $nesting = [self].concat($parent_nesting), $Process___register_clock__$1, $Process_pid$2, $Process_times$3, $Process_clock_gettime$4, monotonic = nil;\n\n    \n    self.__clocks__ = [];\n    Opal.defs(self, '$__register_clock__', $Process___register_clock__$1 = function $$__register_clock__(name, func) {\n      var self = this;\n      if (self.__clocks__ == null) self.__clocks__ = nil;\n\n      \n      self.$const_set(name, self.__clocks__.$size());\n      return self.__clocks__['$<<'](func);\n    }, $Process___register_clock__$1.$$arity = 2);\n    self.$__register_clock__(\"CLOCK_REALTIME\", function() { return Date.now() });\n    monotonic = false;\n    \n    if (Opal.global.performance) {\n      monotonic = function() {\n        return performance.now()\n      };\n    }\n    else if (Opal.global.process && process.hrtime) {\n      // let now be the base to get smaller numbers\n      var hrtime_base = process.hrtime();\n\n      monotonic = function() {\n        var hrtime = process.hrtime(hrtime_base);\n        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;\n        return ((hrtime[0] * 1000) + (us / 1000));\n      };\n    }\n  ;\n    if ($truthy(monotonic)) {\n      self.$__register_clock__(\"CLOCK_MONOTONIC\", monotonic)};\n    Opal.defs(self, '$pid', $Process_pid$2 = function $$pid() {\n      var self = this;\n\n      return 0\n    }, $Process_pid$2.$$arity = 0);\n    Opal.defs(self, '$times', $Process_times$3 = function $$times() {\n      var self = this, t = nil;\n\n      \n      t = $$($nesting, 'Time').$now().$to_f();\n      return $$$($$($nesting, 'Benchmark'), 'Tms').$new(t, t, t, t, t);\n    }, $Process_times$3.$$arity = 0);\n    return (Opal.defs(self, '$clock_gettime', $Process_clock_gettime$4 = function $$clock_gettime(clock_id, unit) {\n      var $a, self = this, clock = nil;\n      if (self.__clocks__ == null) self.__clocks__ = nil;\n\n      \n      \n      if (unit == null) {\n        unit = \"float_second\";\n      };\n      ($truthy($a = (clock = self.__clocks__['$[]'](clock_id))) ? $a : self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'), \"\" + \"clock_gettime(\" + (clock_id) + \") \" + (self.__clocks__['$[]'](clock_id))));\n      \n      var ms = clock();\n      switch (unit) {\n        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)\n        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float\n        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float\n        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer\n        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer\n        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer\n        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer\n        default: self.$raise($$($nesting, 'ArgumentError'), \"\" + \"unexpected unit: \" + (unit))\n      }\n    ;\n    }, $Process_clock_gettime$4.$$arity = -2), nil) && 'clock_gettime';\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Signal');\n\n    var $nesting = [self].concat($parent_nesting), $Signal_trap$5;\n\n    return (Opal.defs(self, '$trap', $Signal_trap$5 = function $$trap($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Signal_trap$5.$$arity = -1), nil) && 'trap'\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'GC');\n\n    var $nesting = [self].concat($parent_nesting), $GC_start$6;\n\n    return (Opal.defs(self, '$start', $GC_start$6 = function $$start() {\n      var self = this;\n\n      return nil\n    }, $GC_start$6.$$arity = 0), nil) && 'start'\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/unsupported\"] = function(Opal) {\n  var $public$35, $private$36, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;\n\n  Opal.add_stubs(['$raise', '$warn', '$%']);\n  \n  \n  var warnings = {};\n\n  function handle_unsupported_feature(message) {\n    switch (Opal.config.unsupported_features_severity) {\n    case 'error':\n      $$($nesting, 'Kernel').$raise($$($nesting, 'NotImplementedError'), message)\n      break;\n    case 'warning':\n      warn(message)\n      break;\n    default: // ignore\n      // noop\n    }\n  }\n\n  function warn(string) {\n    if (warnings[string]) {\n      return;\n    }\n\n    warnings[string] = true;\n    self.$warn(string);\n  }\n;\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String_$lt$lt$1, $String_capitalize$excl$2, $String_chomp$excl$3, $String_chop$excl$4, $String_downcase$excl$5, $String_gsub$excl$6, $String_lstrip$excl$7, $String_next$excl$8, $String_reverse$excl$9, $String_slice$excl$10, $String_squeeze$excl$11, $String_strip$excl$12, $String_sub$excl$13, $String_succ$excl$14, $String_swapcase$excl$15, $String_tr$excl$16, $String_tr_s$excl$17, $String_upcase$excl$18, $String_prepend$19, $String_$$$eq$20, $String_clear$21, $String_encode$excl$22, $String_unicode_normalize$excl$23;\n\n    \n    var ERROR = \"String#%s not supported. Mutable String methods are not supported in Opal.\";\n    \n    Opal.def(self, '$<<', $String_$lt$lt$1 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"<<\"));\n    }, $String_$lt$lt$1.$$arity = -1);\n    \n    Opal.def(self, '$capitalize!', $String_capitalize$excl$2 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"capitalize!\"));\n    }, $String_capitalize$excl$2.$$arity = -1);\n    \n    Opal.def(self, '$chomp!', $String_chomp$excl$3 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"chomp!\"));\n    }, $String_chomp$excl$3.$$arity = -1);\n    \n    Opal.def(self, '$chop!', $String_chop$excl$4 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"chop!\"));\n    }, $String_chop$excl$4.$$arity = -1);\n    \n    Opal.def(self, '$downcase!', $String_downcase$excl$5 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"downcase!\"));\n    }, $String_downcase$excl$5.$$arity = -1);\n    \n    Opal.def(self, '$gsub!', $String_gsub$excl$6 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"gsub!\"));\n    }, $String_gsub$excl$6.$$arity = -1);\n    \n    Opal.def(self, '$lstrip!', $String_lstrip$excl$7 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"lstrip!\"));\n    }, $String_lstrip$excl$7.$$arity = -1);\n    \n    Opal.def(self, '$next!', $String_next$excl$8 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"next!\"));\n    }, $String_next$excl$8.$$arity = -1);\n    \n    Opal.def(self, '$reverse!', $String_reverse$excl$9 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"reverse!\"));\n    }, $String_reverse$excl$9.$$arity = -1);\n    \n    Opal.def(self, '$slice!', $String_slice$excl$10 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"slice!\"));\n    }, $String_slice$excl$10.$$arity = -1);\n    \n    Opal.def(self, '$squeeze!', $String_squeeze$excl$11 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"squeeze!\"));\n    }, $String_squeeze$excl$11.$$arity = -1);\n    \n    Opal.def(self, '$strip!', $String_strip$excl$12 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"strip!\"));\n    }, $String_strip$excl$12.$$arity = -1);\n    \n    Opal.def(self, '$sub!', $String_sub$excl$13 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"sub!\"));\n    }, $String_sub$excl$13.$$arity = -1);\n    \n    Opal.def(self, '$succ!', $String_succ$excl$14 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"succ!\"));\n    }, $String_succ$excl$14.$$arity = -1);\n    \n    Opal.def(self, '$swapcase!', $String_swapcase$excl$15 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"swapcase!\"));\n    }, $String_swapcase$excl$15.$$arity = -1);\n    \n    Opal.def(self, '$tr!', $String_tr$excl$16 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"tr!\"));\n    }, $String_tr$excl$16.$$arity = -1);\n    \n    Opal.def(self, '$tr_s!', $String_tr_s$excl$17 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"tr_s!\"));\n    }, $String_tr_s$excl$17.$$arity = -1);\n    \n    Opal.def(self, '$upcase!', $String_upcase$excl$18 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"upcase!\"));\n    }, $String_upcase$excl$18.$$arity = -1);\n    \n    Opal.def(self, '$prepend', $String_prepend$19 = function $$prepend($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"prepend\"));\n    }, $String_prepend$19.$$arity = -1);\n    \n    Opal.def(self, '$[]=', $String_$$$eq$20 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"[]=\"));\n    }, $String_$$$eq$20.$$arity = -1);\n    \n    Opal.def(self, '$clear', $String_clear$21 = function $$clear($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"clear\"));\n    }, $String_clear$21.$$arity = -1);\n    \n    Opal.def(self, '$encode!', $String_encode$excl$22 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"encode!\"));\n    }, $String_encode$excl$22.$$arity = -1);\n    return (Opal.def(self, '$unicode_normalize!', $String_unicode_normalize$excl$23 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"unicode_normalize!\"));\n    }, $String_unicode_normalize$excl$23.$$arity = -1), nil) && 'unicode_normalize!';\n  })($nesting[0], null, $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_freeze$24, $Kernel_frozen$ques$25;\n\n    \n    var ERROR = \"Object freezing is not supported by Opal\";\n    \n    Opal.def(self, '$freeze', $Kernel_freeze$24 = function $$freeze() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    }, $Kernel_freeze$24.$$arity = 0);\n    \n    Opal.def(self, '$frozen?', $Kernel_frozen$ques$25 = function() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return false;\n    }, $Kernel_frozen$ques$25.$$arity = 0);\n  })($nesting[0], $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_taint$26, $Kernel_untaint$27, $Kernel_tainted$ques$28;\n\n    \n    var ERROR = \"Object tainting is not supported by Opal\";\n    \n    Opal.def(self, '$taint', $Kernel_taint$26 = function $$taint() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    }, $Kernel_taint$26.$$arity = 0);\n    \n    Opal.def(self, '$untaint', $Kernel_untaint$27 = function $$untaint() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    }, $Kernel_untaint$27.$$arity = 0);\n    \n    Opal.def(self, '$tainted?', $Kernel_tainted$ques$28 = function() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return false;\n    }, $Kernel_tainted$ques$28.$$arity = 0);\n  })($nesting[0], $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Module');\n\n    var $nesting = [self].concat($parent_nesting), $Module_public$29, $Module_private_class_method$30, $Module_private_method_defined$ques$31, $Module_private_constant$32;\n\n    \n    \n    Opal.def(self, '$public', $Module_public$29 = function($a) {\n      var $post_args, methods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      methods = $post_args;;\n      \n      if (methods.length === 0) {\n        self.$$module_function = false;\n      }\n\n      return nil;\n    ;\n    }, $Module_public$29.$$arity = -1);\n    Opal.alias(self, \"private\", \"public\");\n    Opal.alias(self, \"protected\", \"public\");\n    Opal.alias(self, \"nesting\", \"public\");\n    \n    Opal.def(self, '$private_class_method', $Module_private_class_method$30 = function $$private_class_method($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self;\n    }, $Module_private_class_method$30.$$arity = -1);\n    Opal.alias(self, \"public_class_method\", \"private_class_method\");\n    \n    Opal.def(self, '$private_method_defined?', $Module_private_method_defined$ques$31 = function(obj) {\n      var self = this;\n\n      return false\n    }, $Module_private_method_defined$ques$31.$$arity = 1);\n    \n    Opal.def(self, '$private_constant', $Module_private_constant$32 = function $$private_constant($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_private_constant$32.$$arity = -1);\n    Opal.alias(self, \"protected_method_defined?\", \"private_method_defined?\");\n    Opal.alias(self, \"public_instance_methods\", \"instance_methods\");\n    Opal.alias(self, \"public_instance_method\", \"instance_method\");\n    return Opal.alias(self, \"public_method_defined?\", \"method_defined?\");\n  })($nesting[0], null, $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_private_methods$33;\n\n    \n    \n    Opal.def(self, '$private_methods', $Kernel_private_methods$33 = function $$private_methods($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return [];\n    }, $Kernel_private_methods$33.$$arity = -1);\n    Opal.alias(self, \"private_instance_methods\", \"private_methods\");\n  })($nesting[0], $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_eval$34;\n\n    \n    Opal.def(self, '$eval', $Kernel_eval$34 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), \"\" + \"To use Kernel#eval, you must first require 'opal-parser'. \" + (\"\" + \"See https://github.com/opal/opal/blob/\" + ($$($nesting, 'RUBY_ENGINE_VERSION')) + \"/docs/opal_parser.md for details.\"));\n    }, $Kernel_eval$34.$$arity = -1)\n  })($nesting[0], $nesting);\n  Opal.defs(self, '$public', $public$35 = function($a) {\n    var $post_args, self = this;\n\n    \n    \n    $post_args = Opal.slice.call(arguments, 0, arguments.length);\n    ;\n    return nil;\n  }, $public$35.$$arity = -1);\n  return (Opal.defs(self, '$private', $private$36 = function($a) {\n    var $post_args, self = this;\n\n    \n    \n    $post_args = Opal.slice.call(arguments, 0, arguments.length);\n    ;\n    return nil;\n  }, $private$36.$$arity = -1), nil) && 'private';\n};\n\n/* Generated by Opal 0.11.99.dev */\n(function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"opal/base\");\n  self.$require(\"opal/mini\");\n  self.$require(\"corelib/string/encoding\");\n  self.$require(\"corelib/struct\");\n  self.$require(\"corelib/io\");\n  self.$require(\"corelib/main\");\n  self.$require(\"corelib/dir\");\n  self.$require(\"corelib/file\");\n  self.$require(\"corelib/process\");\n  return self.$require(\"corelib/unsupported\");\n})(Opal);\n\n\n// UMD Module\n(function (root, factory) {\n  if ( true && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory\n  } else if (true) {\n    // AMD. Register a named module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_RESULT__ = (function (module) {\n      return factory(module.config())\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n}(this, function (moduleConfig) {\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/browser/file\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;\n\n  Opal.add_stubs(['$new']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), $File_read$1;\n\n    return (Opal.defs(self, '$read', $File_read$1 = function $$read(path) {\n      var self = this;\n\n      \n      var data = '';\n      var status = -1;\n      try {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', path, false);\n        xhr.addEventListener('load', function() {\n          status = this.status;\n          // status is 0 for local file mode (i.e., file://)\n          if (status === 0 || status === 200) {\n            data = this.responseText;\n          }\n        });\n        xhr.overrideMimeType('text/plain');\n        xhr.send();\n      }\n      catch (e) {\n        throw $$($nesting, 'IOError').$new('Error reading file or directory: ' + path + '; reason: ' + e.message);\n      }\n      // assume that no data in local file mode means it doesn't exist\n      if (status === 404 || (status === 0 && !data)) {\n        throw $$($nesting, 'IOError').$new('No such file or directory: ' + path);\n      }\n      return data;\n    \n    }, $File_read$1.$$arity = 1), nil) && 'read'\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/browser\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  \n  var platform, engine, framework, ioModule;\n\n  if (typeof moduleConfig === 'object' && typeof moduleConfig.runtime === 'object') {\n    var runtime = moduleConfig.runtime;\n    platform = runtime.platform;\n    engine = runtime.engine;\n    framework = runtime.framework;\n    ioModule = runtime.ioModule;\n  }\n  ioModule = ioModule || 'xmlhttprequest';\n  platform = platform || 'browser';\n  engine = engine || '';\n  framework = framework || '';\n;\n  Opal.const_set($nesting[0], 'JAVASCRIPT_IO_MODULE', ioModule);\n  Opal.const_set($nesting[0], 'JAVASCRIPT_PLATFORM', platform);\n  Opal.const_set($nesting[0], 'JAVASCRIPT_ENGINE', engine);\n  Opal.const_set($nesting[0], 'JAVASCRIPT_FRAMEWORK', framework);\n  return self.$require(\"asciidoctor/js/opal_ext/browser/file\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/abstract_node\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$uriish?', '$[]', '$web_path', '$path_resolver', '$descends_from?', '$base_dir', '$start_with?', '$attr?', '$join', '$prepare_source_string', '$read', '$fetch', '$warn', '$logger', '$normalize_system_path', '$read_asset']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractNode');\n\n      var $nesting = [self].concat($parent_nesting), $AbstractNode_read_contents$1, $AbstractNode_generate_data_uri_from_uri$2;\n\n      self.$$prototype.document = nil;\n      \n      \n      Opal.def(self, '$read_contents', $AbstractNode_read_contents$1 = function $$read_contents(target, opts) {\n        var $a, $b, $c, self = this, doc = nil, start = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        doc = self.document;\n        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : ($truthy($b = ($truthy($c = (start = opts['$[]'](\"start\"))) ? $$($nesting, 'Helpers')['$uriish?'](start) : $c)) ? (target = doc.$path_resolver().$web_path(target, start)) : $b)))) {\n          if ($truthy(($truthy($a = ($truthy($b = doc.$path_resolver()['$descends_from?'](target, doc.$base_dir())) ? $b : target['$start_with?'](\"chrome://\"))) ? $a : doc['$attr?'](\"allow-uri-read\")))) {\n            \n            try {\n              if ($truthy(opts['$[]'](\"normalize\"))) {\n                return $$($nesting, 'Helpers').$prepare_source_string($$$('::', 'File').$read(target)).$join($$($nesting, 'LF'))\n              } else {\n                return $$$('::', 'File').$read(target)\n              }\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n                    self.$logger().$warn(\"\" + \"could not retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target))};\n                  return nil;\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n          } else {\n            \n            if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n              self.$logger().$warn(\"\" + \"cannot retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target) + \" (allow-uri-read attribute not enabled)\")};\n            return nil;\n          }\n        } else {\n          \n          target = self.$normalize_system_path(target, opts['$[]'](\"start\"), nil, $hash2([\"target_name\"], {\"target_name\": ($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")}));\n          return self.$read_asset(target, $hash2([\"normalize\", \"warn_on_failure\", \"label\"], {\"normalize\": opts['$[]'](\"normalize\"), \"warn_on_failure\": opts.$fetch(\"warn_on_failure\", true), \"label\": opts['$[]'](\"label\")}));\n        };\n      }, $AbstractNode_read_contents$1.$$arity = -2);\n      return (Opal.def(self, '$generate_data_uri_from_uri', $AbstractNode_generate_data_uri_from_uri$2 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {\n        var self = this;\n\n        \n        \n        if (cache_uri == null) {\n          cache_uri = false;\n        };\n        \n      var contentType = ''\n      var b64encoded = ''\n      var status = -1\n\n      try {\n        var xhr = new XMLHttpRequest()\n        xhr.open('GET', image_uri, false)\n        // the response type cannot be changed for synchronous requests made from a document\n        // xhr.responseType = 'arraybuffer'\n        xhr.overrideMimeType('text/plain; charset=x-user-defined')\n        xhr.addEventListener('load', function() {\n          status = this.status\n          // status is 0 for local file mode (i.e., file://)\n          if (status === 0 || status === 200) {\n            var binary = ''\n            var rawText = this.responseText\n            for (var i = 0, len = rawText.length; i < len; ++i) {\n              var c = rawText.charCodeAt(i)\n              var byteCode = c & 0xff // byte at offset i\n              binary += String.fromCharCode(byteCode)\n            }\n            b64encoded = btoa(binary)\n            contentType = this.getResponseHeader('content-type')\n          }\n        })\n        xhr.send(null)\n        // try to detect the MIME Type from the file extension\n        if (!contentType) {\n          if (image_uri.endsWith('.jpeg') || image_uri.endsWith('.jpg') || image_uri.endsWith('.jpe')) {\n            contentType = 'image/jpg'\n          } else if (image_uri.endsWith('.png')) {\n            contentType = 'image/png'\n          } else if (image_uri.endsWith('.svg')) {\n            contentType = 'image/svg+xml'\n          } else if (image_uri.endsWith('.bmp')) {\n            contentType = 'image/bmp'\n          } else if (image_uri.endsWith('.tif') || image_uri.endsWith('.tiff')) {\n            contentType = 'image/tiff'\n          }\n        }\n      }\n      catch (e) {\n        // something bad happened!\n        status = 0\n      }\n\n      // assume that no data in local file mode means it doesn't exist\n      if (status === 404 || (status === 0 && (!b64encoded || !contentType))) {\n        self.$logger().$warn('could not retrieve image data from URI: ' + image_uri)\n        return image_uri\n      }\n      return 'data:' + contentType + ';base64,' + b64encoded\n    ;\n      }, $AbstractNode_generate_data_uri_from_uri$2.$$arity = -2), nil) && 'generate_data_uri_from_uri';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/open_uri\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;\n\n  Opal.add_stubs(['$new', '$path']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'OpenURI');\n\n    var $nesting = [self].concat($parent_nesting), $OpenURI_open_uri$1;\n\n    Opal.defs($$($nesting, 'OpenURI'), '$open_uri', $OpenURI_open_uri$1 = function $$open_uri(name, $a) {\n      var $post_args, rest, $iter = $OpenURI_open_uri$1.$$p, $yield = $iter || nil, self = this, file = nil;\n\n      if ($iter) $OpenURI_open_uri$1.$$p = null;\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      rest = $post_args;;\n      file = $send($$($nesting, 'File'), 'new', [self.$path()].concat(Opal.to_a(rest)));\n      if (($yield !== nil)) {\n        return Opal.yield1($yield, file);\n      } else {\n        return file\n      };\n    }, $OpenURI_open_uri$1.$$arity = -2)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/path_resolver\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$absolute_path?', '$start_with?']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PathResolver');\n\n      var $nesting = [self].concat($parent_nesting), $PathResolver_root$ques$1;\n\n      return (Opal.def(self, '$root?', $PathResolver_root$ques$1 = function(path) {\n        var $a, self = this;\n\n        return ($truthy($a = self['$absolute_path?'](path)) ? $a : path['$start_with?'](\"file://\", \"http://\", \"https://\", \"chrome://\"))\n      }, $PathResolver_root$ques$1.$$arity = 1), nil) && 'root?'\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/reader\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$posixify', '$new', '$base_dir', '$start_with?', '$uriish?', '$descends_from?', '$key?', '$attributes', '$replace_next_line', '$absolute_path?', '$==', '$empty?', '$!', '$slice', '$length']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PreprocessorReader');\n\n      var $nesting = [self].concat($parent_nesting), $PreprocessorReader_resolve_include_path$1;\n\n      self.$$prototype.path_resolver = self.$$prototype.document = self.$$prototype.include_stack = self.$$prototype.dir = nil;\n      return (Opal.def(self, '$resolve_include_path', $PreprocessorReader_resolve_include_path$1 = function $$resolve_include_path(target, attrlist, attributes) {\n        var $a, self = this, p_target = nil, target_type = nil, base_dir = nil, inc_path = nil, relpath = nil, ctx_dir = nil, top_level = nil, offset = nil;\n\n        \n        p_target = (self.path_resolver = ($truthy($a = self.path_resolver) ? $a : $$($nesting, 'PathResolver').$new(\"\\\\\"))).$posixify(target);\n        $a = [\"file\", self.document.$base_dir()], (target_type = $a[0]), (base_dir = $a[1]), $a;\n        if ($truthy(p_target['$start_with?'](\"file://\"))) {\n          inc_path = (relpath = p_target)\n        } else if ($truthy($$($nesting, 'Helpers')['$uriish?'](p_target))) {\n          \n          if ($truthy(($truthy($a = self.path_resolver['$descends_from?'](p_target, base_dir)) ? $a : self.document.$attributes()['$key?'](\"allow-uri-read\")))) {\n          } else {\n            return self.$replace_next_line(\"\" + \"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n          };\n          inc_path = (relpath = p_target);\n        } else if ($truthy(self.path_resolver['$absolute_path?'](p_target))) {\n          inc_path = (relpath = \"\" + \"file://\" + ((function() {if ($truthy(p_target['$start_with?'](\"/\"))) {\n            return \"\"\n          } else {\n            return \"/\"\n          }; return nil; })()) + (p_target))\n        } else if ((ctx_dir = (function() {if ($truthy((top_level = self.include_stack['$empty?']()))) {\n          return base_dir\n        } else {\n          return self.dir\n        }; return nil; })())['$=='](\".\")) {\n          inc_path = (relpath = p_target)\n        } else if ($truthy(($truthy($a = ctx_dir['$start_with?'](\"file://\")) ? $a : $$($nesting, 'Helpers')['$uriish?'](ctx_dir)['$!']()))) {\n          \n          inc_path = \"\" + (ctx_dir) + \"/\" + (p_target);\n          if ($truthy(top_level)) {\n            relpath = p_target\n          } else if ($truthy(($truthy($a = base_dir['$=='](\".\")) ? $a : (offset = self.path_resolver['$descends_from?'](inc_path, base_dir))['$!']()))) {\n            relpath = inc_path\n          } else {\n            relpath = inc_path.$slice(offset, inc_path.$length())\n          };\n        } else if ($truthy(top_level)) {\n          inc_path = \"\" + (ctx_dir) + \"/\" + ((relpath = p_target))\n        } else if ($truthy(($truthy($a = (offset = self.path_resolver['$descends_from?'](ctx_dir, base_dir))) ? $a : self.document.$attributes()['$key?'](\"allow-uri-read\")))) {\n          \n          inc_path = \"\" + (ctx_dir) + \"/\" + (p_target);\n          relpath = (function() {if ($truthy(offset)) {\n            \n            return inc_path.$slice(offset, inc_path.$length());\n          } else {\n            return p_target\n          }; return nil; })();\n        } else {\n          return self.$replace_next_line(\"\" + \"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n        };\n        return [inc_path, \"file\", relpath];\n      }, $PreprocessorReader_resolve_include_path$1.$$arity = 3), nil) && 'resolve_include_path'\n    })($nesting[0], $$($nesting, 'Reader'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$==', '$require']);\n  if ($$($nesting, 'JAVASCRIPT_IO_MODULE')['$=='](\"xmlhttprequest\")) {\n    \n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/abstract_node\");\n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/open_uri\");\n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/path_resolver\");\n    return self.$require(\"asciidoctor/js/asciidoctor_ext/browser/reader\");\n  } else {\n    return nil\n  }\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"set\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;\n\n  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Set');\n\n    var $nesting = [self].concat($parent_nesting), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_add$ques$20, $Set_each$21, $Set_empty$ques$22, $Set_eql$ques$23, $Set_clear$25, $Set_include$ques$26, $Set_merge$27, $Set_replace$29, $Set_size$30, $Set_subtract$31, $Set_$$33, $Set_superset$ques$34, $Set_proper_superset$ques$36, $Set_subset$ques$38, $Set_proper_subset$ques$40, $Set_to_a$42;\n\n    self.$$prototype.hash = nil;\n    \n    self.$include($$($nesting, 'Enumerable'));\n    Opal.defs(self, '$[]', $Set_$$$1 = function($a) {\n      var $post_args, ary, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      ary = $post_args;;\n      return self.$new(ary);\n    }, $Set_$$$1.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $Set_initialize$2 = function $$initialize(enum$) {\n      var $iter = $Set_initialize$2.$$p, block = $iter || nil, $$3, self = this;\n\n      if ($iter) $Set_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Set_initialize$2.$$p = null;;\n      \n      if (enum$ == null) {\n        enum$ = nil;\n      };\n      self.hash = $hash2([], {});\n      if ($truthy(enum$['$nil?']())) {\n        return nil};\n      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"value must be enumerable\")\n      };\n      if ($truthy(block)) {\n        return $send(enum$, 'each', [], ($$3 = function(item){var self = $$3.$$s || this;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          return self.$add(Opal.yield1(block, item));}, $$3.$$s = self, $$3.$$arity = 1, $$3))\n      } else {\n        return self.$merge(enum$)\n      };\n    }, $Set_initialize$2.$$arity = -1);\n    \n    Opal.def(self, '$dup', $Set_dup$4 = function $$dup() {\n      var self = this, result = nil;\n\n      \n      result = self.$class().$new();\n      return result.$merge(self);\n    }, $Set_dup$4.$$arity = 0);\n    \n    Opal.def(self, '$-', $Set_$minus$5 = function(enum$) {\n      var self = this;\n\n      \n      if ($truthy(enum$['$respond_to?'](\"each\"))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"value must be enumerable\")\n      };\n      return self.$dup().$subtract(enum$);\n    }, $Set_$minus$5.$$arity = 1);\n    Opal.alias(self, \"difference\", \"-\");\n    \n    Opal.def(self, '$inspect', $Set_inspect$6 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<Set: {\" + (self.$to_a().$join(\",\")) + \"}>\"\n    }, $Set_inspect$6.$$arity = 0);\n    \n    Opal.def(self, '$==', $Set_$eq_eq$7 = function(other) {\n      var $a, $$8, self = this;\n\n      if ($truthy(self['$equal?'](other))) {\n        return true\n      } else if ($truthy(other['$instance_of?'](self.$class()))) {\n        return self.hash['$=='](other.$instance_variable_get(\"@hash\"))\n      } else if ($truthy(($truthy($a = other['$is_a?']($$($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {\n        return $send(other, 'all?', [], ($$8 = function(o){var self = $$8.$$s || this;\n          if (self.hash == null) self.hash = nil;\n\n        \n          \n          if (o == null) {\n            o = nil;\n          };\n          return self.hash['$include?'](o);}, $$8.$$s = self, $$8.$$arity = 1, $$8))\n      } else {\n        return false\n      }\n    }, $Set_$eq_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$add', $Set_add$9 = function $$add(o) {\n      var self = this, $writer = nil;\n\n      \n      \n      $writer = [o, true];\n      $send(self.hash, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      return self;\n    }, $Set_add$9.$$arity = 1);\n    Opal.alias(self, \"<<\", \"add\");\n    \n    Opal.def(self, '$classify', $Set_classify$10 = function $$classify() {\n      var $iter = $Set_classify$10.$$p, block = $iter || nil, $$11, $$12, self = this, result = nil;\n\n      if ($iter) $Set_classify$10.$$p = null;\n      \n      \n      if ($iter) $Set_classify$10.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"classify\")\n      };\n      result = $send($$($nesting, 'Hash'), 'new', [], ($$11 = function(h, k){var self = $$11.$$s || this, $writer = nil;\n\n      \n        \n        if (h == null) {\n          h = nil;\n        };\n        \n        if (k == null) {\n          k = nil;\n        };\n        $writer = [k, self.$class().$new()];\n        $send(h, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];}, $$11.$$s = self, $$11.$$arity = 2, $$11));\n      $send(self, 'each', [], ($$12 = function(item){var self = $$12.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return result['$[]'](Opal.yield1(block, item)).$add(item);}, $$12.$$s = self, $$12.$$arity = 1, $$12));\n      return result;\n    }, $Set_classify$10.$$arity = 0);\n    \n    Opal.def(self, '$collect!', $Set_collect$excl$13 = function() {\n      var $iter = $Set_collect$excl$13.$$p, block = $iter || nil, $$14, self = this, result = nil;\n\n      if ($iter) $Set_collect$excl$13.$$p = null;\n      \n      \n      if ($iter) $Set_collect$excl$13.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"collect!\")\n      };\n      result = self.$class().$new();\n      $send(self, 'each', [], ($$14 = function(item){var self = $$14.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return result['$<<'](Opal.yield1(block, item));}, $$14.$$s = self, $$14.$$arity = 1, $$14));\n      return self.$replace(result);\n    }, $Set_collect$excl$13.$$arity = 0);\n    Opal.alias(self, \"map!\", \"collect!\");\n    \n    Opal.def(self, '$delete', $Set_delete$15 = function(o) {\n      var self = this;\n\n      \n      self.hash.$delete(o);\n      return self;\n    }, $Set_delete$15.$$arity = 1);\n    \n    Opal.def(self, '$delete?', $Set_delete$ques$16 = function(o) {\n      var self = this;\n\n      if ($truthy(self['$include?'](o))) {\n        \n        self.$delete(o);\n        return self;\n      } else {\n        return nil\n      }\n    }, $Set_delete$ques$16.$$arity = 1);\n    \n    Opal.def(self, '$delete_if', $Set_delete_if$17 = function $$delete_if() {\n      var $$18, $$19, $iter = $Set_delete_if$17.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Set_delete_if$17.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return self.$enum_for(\"delete_if\")\n      };\n      $send($send(self, 'select', [], ($$18 = function(o){var self = $$18.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return Opal.yield1($yield, o);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)), 'each', [], ($$19 = function(o){var self = $$19.$$s || this;\n        if (self.hash == null) self.hash = nil;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return self.hash.$delete(o);}, $$19.$$s = self, $$19.$$arity = 1, $$19));\n      return self;\n    }, $Set_delete_if$17.$$arity = 0);\n    \n    Opal.def(self, '$add?', $Set_add$ques$20 = function(o) {\n      var self = this;\n\n      if ($truthy(self['$include?'](o))) {\n        return nil\n      } else {\n        return self.$add(o)\n      }\n    }, $Set_add$ques$20.$$arity = 1);\n    \n    Opal.def(self, '$each', $Set_each$21 = function $$each() {\n      var $iter = $Set_each$21.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Set_each$21.$$p = null;\n      \n      \n      if ($iter) $Set_each$21.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each\")\n      };\n      $send(self.hash, 'each_key', [], block.$to_proc());\n      return self;\n    }, $Set_each$21.$$arity = 0);\n    \n    Opal.def(self, '$empty?', $Set_empty$ques$22 = function() {\n      var self = this;\n\n      return self.hash['$empty?']()\n    }, $Set_empty$ques$22.$$arity = 0);\n    \n    Opal.def(self, '$eql?', $Set_eql$ques$23 = function(other) {\n      var $$24, self = this;\n\n      return self.hash['$eql?']($send(other, 'instance_eval', [], ($$24 = function(){var self = $$24.$$s || this;\n        if (self.hash == null) self.hash = nil;\n\n      return self.hash}, $$24.$$s = self, $$24.$$arity = 0, $$24)))\n    }, $Set_eql$ques$23.$$arity = 1);\n    \n    Opal.def(self, '$clear', $Set_clear$25 = function $$clear() {\n      var self = this;\n\n      \n      self.hash.$clear();\n      return self;\n    }, $Set_clear$25.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Set_include$ques$26 = function(o) {\n      var self = this;\n\n      return self.hash['$include?'](o)\n    }, $Set_include$ques$26.$$arity = 1);\n    Opal.alias(self, \"member?\", \"include?\");\n    \n    Opal.def(self, '$merge', $Set_merge$27 = function $$merge(enum$) {\n      var $$28, self = this;\n\n      \n      $send(enum$, 'each', [], ($$28 = function(item){var self = $$28.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return self.$add(item);}, $$28.$$s = self, $$28.$$arity = 1, $$28));\n      return self;\n    }, $Set_merge$27.$$arity = 1);\n    \n    Opal.def(self, '$replace', $Set_replace$29 = function $$replace(enum$) {\n      var self = this;\n\n      \n      self.$clear();\n      self.$merge(enum$);\n      return self;\n    }, $Set_replace$29.$$arity = 1);\n    \n    Opal.def(self, '$size', $Set_size$30 = function $$size() {\n      var self = this;\n\n      return self.hash.$size()\n    }, $Set_size$30.$$arity = 0);\n    Opal.alias(self, \"length\", \"size\");\n    \n    Opal.def(self, '$subtract', $Set_subtract$31 = function $$subtract(enum$) {\n      var $$32, self = this;\n\n      \n      $send(enum$, 'each', [], ($$32 = function(item){var self = $$32.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return self.$delete(item);}, $$32.$$s = self, $$32.$$arity = 1, $$32));\n      return self;\n    }, $Set_subtract$31.$$arity = 1);\n    \n    Opal.def(self, '$|', $Set_$$33 = function(enum$) {\n      var self = this;\n\n      \n      if ($truthy(enum$['$respond_to?'](\"each\"))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"value must be enumerable\")\n      };\n      return self.$dup().$merge(enum$);\n    }, $Set_$$33.$$arity = 1);\n    \n    Opal.def(self, '$superset?', $Set_superset$ques$34 = function(set) {\n      var $a, $$35, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_lt(self.$size(), set.$size()))) {\n        return false};\n      return $send(set, 'all?', [], ($$35 = function(o){var self = $$35.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return self['$include?'](o);}, $$35.$$s = self, $$35.$$arity = 1, $$35));\n    }, $Set_superset$ques$34.$$arity = 1);\n    Opal.alias(self, \">=\", \"superset?\");\n    \n    Opal.def(self, '$proper_superset?', $Set_proper_superset$ques$36 = function(set) {\n      var $a, $$37, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_le(self.$size(), set.$size()))) {\n        return false};\n      return $send(set, 'all?', [], ($$37 = function(o){var self = $$37.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return self['$include?'](o);}, $$37.$$s = self, $$37.$$arity = 1, $$37));\n    }, $Set_proper_superset$ques$36.$$arity = 1);\n    Opal.alias(self, \">\", \"proper_superset?\");\n    \n    Opal.def(self, '$subset?', $Set_subset$ques$38 = function(set) {\n      var $a, $$39, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_lt(set.$size(), self.$size()))) {\n        return false};\n      return $send(self, 'all?', [], ($$39 = function(o){var self = $$39.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return set['$include?'](o);}, $$39.$$s = self, $$39.$$arity = 1, $$39));\n    }, $Set_subset$ques$38.$$arity = 1);\n    Opal.alias(self, \"<=\", \"subset?\");\n    \n    Opal.def(self, '$proper_subset?', $Set_proper_subset$ques$40 = function(set) {\n      var $a, $$41, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_le(set.$size(), self.$size()))) {\n        return false};\n      return $send(self, 'all?', [], ($$41 = function(o){var self = $$41.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return set['$include?'](o);}, $$41.$$s = self, $$41.$$arity = 1, $$41));\n    }, $Set_proper_subset$ques$40.$$arity = 1);\n    Opal.alias(self, \"<\", \"proper_subset?\");\n    Opal.alias(self, \"+\", \"|\");\n    Opal.alias(self, \"union\", \"|\");\n    return (Opal.def(self, '$to_a', $Set_to_a$42 = function $$to_a() {\n      var self = this;\n\n      return self.hash.$keys()\n    }, $Set_to_a$42.$$arity = 0), nil) && 'to_a';\n  })($nesting[0], null, $nesting);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Enumerable');\n\n    var $nesting = [self].concat($parent_nesting), $Enumerable_to_set$43;\n\n    \n    Opal.def(self, '$to_set', $Enumerable_to_set$43 = function $$to_set($a, $b) {\n      var $iter = $Enumerable_to_set$43.$$p, block = $iter || nil, $post_args, klass, args, self = this;\n\n      if ($iter) $Enumerable_to_set$43.$$p = null;\n      \n      \n      if ($iter) $Enumerable_to_set$43.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      if ($post_args.length > 0) {\n        klass = $post_args[0];\n        $post_args.splice(0, 1);\n      }\n      if (klass == null) {\n        klass = $$($nesting, 'Set');\n      };\n      \n      args = $post_args;;\n      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());\n    }, $Enumerable_to_set$43.$$arity = -1)\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/kernel\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;\n\n  Opal.add_stubs(['$new']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_open$1, $Kernel___dir__$2;\n\n    \n    \n    Opal.def(self, '$open', $Kernel_open$1 = function $$open(path, $a) {\n      var $post_args, rest, $iter = $Kernel_open$1.$$p, $yield = $iter || nil, self = this, file = nil;\n\n      if ($iter) $Kernel_open$1.$$p = null;\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      rest = $post_args;;\n      file = $send($$($nesting, 'File'), 'new', [path].concat(Opal.to_a(rest)));\n      if (($yield !== nil)) {\n        return Opal.yield1($yield, file);\n      } else {\n        return file\n      };\n    }, $Kernel_open$1.$$arity = -2);\n    \n    Opal.def(self, '$__dir__', $Kernel___dir__$2 = function $$__dir__() {\n      var self = this;\n\n      return \"\"\n    }, $Kernel___dir__$2.$$arity = 0);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/file\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$attr_reader', '$delete', '$gsub', '$read', '$size', '$to_enum', '$chomp', '$each_line', '$readlines', '$split']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), $File_initialize$1, $File_read$2, $File_each_line$3, $File_readlines$4;\n\n    self.$$prototype.eof = self.$$prototype.path = nil;\n    \n    self.$attr_reader(\"eof\");\n    self.$attr_reader(\"lineno\");\n    self.$attr_reader(\"path\");\n    \n    Opal.def(self, '$initialize', $File_initialize$1 = function $$initialize(path, flags) {\n      var self = this, encoding_flag_regexp = nil;\n\n      \n      \n      if (flags == null) {\n        flags = \"r\";\n      };\n      self.path = path;\n      self.contents = nil;\n      self.eof = false;\n      self.lineno = 0;\n      flags = flags.$delete(\"b\");\n      encoding_flag_regexp = /:(.*)/;\n      flags = flags.$gsub(encoding_flag_regexp, \"\");\n      return (self.flags = flags);\n    }, $File_initialize$1.$$arity = -2);\n    \n    Opal.def(self, '$read', $File_read$2 = function $$read() {\n      var self = this, res = nil;\n\n      if ($truthy(self.eof)) {\n        return \"\"\n      } else {\n        \n        res = $$($nesting, 'File').$read(self.path);\n        self.eof = true;\n        self.lineno = res.$size();\n        return res;\n      }\n    }, $File_read$2.$$arity = 0);\n    \n    Opal.def(self, '$each_line', $File_each_line$3 = function $$each_line(separator) {\n      var $iter = $File_each_line$3.$$p, block = $iter || nil, self = this, lines = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      if ($iter) $File_each_line$3.$$p = null;\n      \n      \n      if ($iter) $File_each_line$3.$$p = null;;\n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      if ($truthy(self.eof)) {\n        return (function() {if ((block !== nil)) {\n          return self\n        } else {\n          return [].$to_enum()\n        }; return nil; })()};\n      if ((block !== nil)) {\n        \n        lines = $$($nesting, 'File').$read(self.path);\n        \n        self.eof = false;\n        self.lineno = 0;\n        var chomped  = lines.$chomp(),\n            trailing = lines.length != chomped.length,\n            splitted = chomped.split(separator);\n        for (var i = 0, length = splitted.length; i < length; i++) {\n          self.lineno += 1;\n          if (i < length - 1 || trailing) {\n            Opal.yield1(block, splitted[i] + separator);\n          }\n          else {\n            Opal.yield1(block, splitted[i]);\n          }\n        }\n        self.eof = true;\n      ;\n        return self;\n      } else {\n        return self.$read().$each_line()\n      };\n    }, $File_each_line$3.$$arity = -1);\n    \n    Opal.def(self, '$readlines', $File_readlines$4 = function $$readlines() {\n      var self = this;\n\n      return $$($nesting, 'File').$readlines(self.path)\n    }, $File_readlines$4.$$arity = 0);\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $readlines$5, $file$ques$6, $readable$ques$7, $read$8;\n\n      \n      \n      Opal.def(self, '$readlines', $readlines$5 = function $$readlines(path, separator) {\n        var self = this, content = nil;\n        if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n        \n        \n        if (separator == null) {\n          separator = $gvars[\"/\"];\n        };\n        content = $$($nesting, 'File').$read(path);\n        return content.$split(separator);\n      }, $readlines$5.$$arity = -2);\n      \n      Opal.def(self, '$file?', $file$ques$6 = function(path) {\n        var self = this;\n\n        return true\n      }, $file$ques$6.$$arity = 1);\n      \n      Opal.def(self, '$readable?', $readable$ques$7 = function(path) {\n        var self = this;\n\n        return true\n      }, $readable$ques$7.$$arity = 1);\n      return (Opal.def(self, '$read', $read$8 = function $$read(path) {\n        var self = this;\n\n        return \"\"\n      }, $read$8.$$arity = 1), nil) && 'read';\n    })(Opal.get_singleton_class(self), $nesting);\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IO');\n\n    var $nesting = [self].concat($parent_nesting), $IO_read$9;\n\n    return (Opal.defs(self, '$read', $IO_read$9 = function $$read(path) {\n      var self = this;\n\n      return $$($nesting, 'File').$read(path)\n    }, $IO_read$9.$$arity = 1), nil) && 'read'\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/match_data\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;\n\n  Opal.add_stubs(['$[]=', '$-']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'MatchData');\n\n    var $nesting = [self].concat($parent_nesting), $MatchData_$$$eq$1;\n\n    self.$$prototype.matches = nil;\n    return (Opal.def(self, '$[]=', $MatchData_$$$eq$1 = function(idx, val) {\n      var self = this, $writer = nil;\n\n      \n      $writer = [idx, val];\n      $send(self.matches, '[]=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];\n    }, $MatchData_$$$eq$1.$$arity = 2), nil) && '[]='\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/string\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$method_defined?', '$<', '$length', '$bytes', '$to_s', '$byteslice', '$==', '$>=', '$-', '$_original_byteslice', '$_original_unpack']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String_limit_bytesize$1, $String_byteslice$2, $String_unpack$3;\n\n    \n    if ($truthy(self['$method_defined?'](\"limit_bytesize\"))) {\n    } else {\n      \n      Opal.def(self, '$limit_bytesize', $String_limit_bytesize$1 = function $$limit_bytesize(size) {\n        var self = this, result = nil;\n\n        \n        if ($truthy($rb_lt(size, self.$bytes().$length()))) {\n        } else {\n          return self.$to_s()\n        };\n        result = self.$byteslice(0, size);\n        return result.$to_s();\n      }, $String_limit_bytesize$1.$$arity = 1)\n    };\n    if ($truthy(self['$method_defined?'](\"limit\"))) {\n    } else {\n      Opal.alias(self, \"limit\", \"limit_bytesize\")\n    };\n    Opal.alias(self, \"_original_byteslice\", \"byteslice\");\n    \n    Opal.def(self, '$byteslice', $String_byteslice$2 = function $$byteslice(index, length) {\n      var $a, $b, self = this;\n\n      \n      \n      if (length == null) {\n        length = 1;\n      };\n      if ($truthy(($truthy($a = (($b = index['$=='](3)) ? $rb_ge(length, index) : index['$=='](3))) ? self.charCodeAt() === 65279 : $a))) {\n        return (self.substr(1)).$byteslice(0, $rb_minus(length, 3))\n      } else {\n        return self.$_original_byteslice(index, length)\n      };\n    }, $String_byteslice$2.$$arity = -2);\n    Opal.alias(self, \"_original_unpack\", \"unpack\");\n    return (Opal.def(self, '$unpack', $String_unpack$3 = function $$unpack(format) {\n      var self = this;\n\n      if (format['$=='](\"C3\")) {\n        if ($truthy(self.charCodeAt() === 65279)) {\n          return [239, 187, 191]\n        } else {\n          \n          var bytes = []\n          for (var i=0; i < 3; i++) {\n            if (i < self.length) {\n              bytes.push(self.charCodeAt(i))\n            } else {\n              bytes.push(nil)\n            }\n          }\n          return bytes\n        \n        }\n      } else {\n        return self.$_original_unpack(format)\n      }\n    }, $String_unpack$3.$$arity = 1), nil) && 'unpack';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/uri\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  Opal.add_stubs(['$extend']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'URI');\n\n    var $nesting = [self].concat($parent_nesting), $URI_parse$1, $URI_path$2;\n\n    \n    Opal.defs(self, '$parse', $URI_parse$1 = function $$parse(str) {\n      var self = this;\n\n      return str.$extend($$($nesting, 'URI'))\n    }, $URI_parse$1.$$arity = 1);\n    \n    Opal.def(self, '$path', $URI_path$2 = function $$path() {\n      var self = this;\n\n      return self\n    }, $URI_path$2.$$arity = 0);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/base64\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$delete']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Base64');\n\n    var $nesting = [self].concat($parent_nesting), $Base64_decode64$1, $Base64_encode64$2, $Base64_strict_decode64$3, $Base64_strict_encode64$4, $Base64_urlsafe_decode64$5, $Base64_urlsafe_encode64$6;\n\n    \n    \n    var encode, decode;\n    encode = Opal.global.btoa || function (input) {\n      var buffer;\n      if (input instanceof Buffer) {\n        buffer = input;\n      } else {\n        buffer = Buffer.from(input.toString(), 'binary');\n      }\n      return buffer.toString('base64');\n    };\n    decode = Opal.global.atob || function (input) {\n      return Buffer.from(input, 'base64').toString('binary');\n    };\n  ;\n    Opal.defs(self, '$decode64', $Base64_decode64$1 = function $$decode64(string) {\n      var self = this;\n\n      return decode(string.replace(/\\r?\\n/g, ''));\n    }, $Base64_decode64$1.$$arity = 1);\n    Opal.defs(self, '$encode64', $Base64_encode64$2 = function $$encode64(string) {\n      var self = this;\n\n      return encode(string).replace(/(.{60})/g, \"$1\\n\").replace(/([^\\n])$/g, \"$1\\n\");\n    }, $Base64_encode64$2.$$arity = 1);\n    Opal.defs(self, '$strict_decode64', $Base64_strict_decode64$3 = function $$strict_decode64(string) {\n      var self = this;\n\n      return decode(string);\n    }, $Base64_strict_decode64$3.$$arity = 1);\n    Opal.defs(self, '$strict_encode64', $Base64_strict_encode64$4 = function $$strict_encode64(string) {\n      var self = this;\n\n      return encode(string);\n    }, $Base64_strict_encode64$4.$$arity = 1);\n    Opal.defs(self, '$urlsafe_decode64', $Base64_urlsafe_decode64$5 = function $$urlsafe_decode64(string) {\n      var self = this;\n\n      return decode(string.replace(/\\-/g, '+').replace(/_/g, '/'));\n    }, $Base64_urlsafe_decode64$5.$$arity = 1);\n    Opal.defs(self, '$urlsafe_encode64', $Base64_urlsafe_encode64$6 = function $$urlsafe_encode64(string, $kwargs) {\n      var padding, self = this, str = nil;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      padding = $kwargs.$$smap[\"padding\"];\n      if (padding == null) {\n        padding = true\n      };\n      str = encode(string).replace(/\\+/g, '-').replace(/\\//g, '_');\n      if ($truthy(padding)) {\n      } else {\n        str = str.$delete(\"=\")\n      };\n      return str;\n    }, $Base64_urlsafe_encode64$6.$$arity = -2);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/number\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$coerce_to!', '$>']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Number');\n\n    var $nesting = [self].concat($parent_nesting), $Number_round$1;\n\n    return (Opal.def(self, '$round', $Number_round$1 = function $$round(ndigits) {\n      var self = this;\n\n      \n      ;\n      ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy($rb_gt(ndigits, 0))) {\n        return Number(self.toFixed(ndigits));\n      } else {\n        return Math.round(self);\n      };\n    }, $Number_round$1.$$arity = -1), nil) && 'round'\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/js/opal_ext/kernel\");\n  self.$require(\"asciidoctor/js/opal_ext/file\");\n  self.$require(\"asciidoctor/js/opal_ext/match_data\");\n  self.$require(\"asciidoctor/js/opal_ext/string\");\n  self.$require(\"asciidoctor/js/opal_ext/uri\");\n  self.$require(\"asciidoctor/js/opal_ext/base64\");\n  self.$require(\"asciidoctor/js/opal_ext/number\");\n  \n// suppress \"not supported\" warning messages from Opal\nOpal.config.unsupported_features_severity = 'ignore'\n\n// Load specific runtime\nself.$require(\"asciidoctor/js/opal_ext/browser\");\n;\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/rx\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$gsub', '$+', '$unpack_hex_range']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $Asciidoctor_unpack_hex_range$1;\n\n    \n    Opal.const_set($nesting[0], 'HEX_RANGE_RX', /([A-F0-9]{4})(?:-([A-F0-9]{4}))?/);\n    Opal.defs(self, '$unpack_hex_range', $Asciidoctor_unpack_hex_range$1 = function $$unpack_hex_range(str) {\n      var $$2, self = this;\n\n      return $send(str, 'gsub', [$$($nesting, 'HEX_RANGE_RX')], ($$2 = function(){var self = $$2.$$s || this, $a, $b;\n\n      return \"\" + \"\\\\u\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + (($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) ? \"\" + \"-\\\\u\" + ((($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) : $a))}, $$2.$$s = self, $$2.$$arity = 0, $$2))\n    }, $Asciidoctor_unpack_hex_range$1.$$arity = 1);\n    Opal.const_set($nesting[0], 'P_L', $rb_plus(\"A-Za-z\", self.$unpack_hex_range(\"00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D037F03860388-038A038C038E-03A103A3-03F503F7-0481048A-052F0531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A0-08B20904-0939093D09500958-09610971-09800985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16F1-16F81700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191E1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A69DA6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A7ADA7B0A7B1A7F7-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFA9E0-A9E4A9E6-A9EFA9FA-A9FEAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA7E-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EAB30-AB5AAB5C-AB5FAB64AB65ABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\")));\n    Opal.const_set($nesting[0], 'P_Nl', self.$unpack_hex_range(\"16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF\"));\n    Opal.const_set($nesting[0], 'P_Nd', $rb_plus(\"0-9\", self.$unpack_hex_range(\"0660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0DE6-0DEF0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9A9F0-A9F9AA50-AA59ABF0-ABF9FF10-FF19\")));\n    Opal.const_set($nesting[0], 'P_Pc', self.$unpack_hex_range(\"005F203F20402054FE33FE34FE4D-FE4FFF3F\"));\n    Opal.const_set($nesting[0], 'CC_ALPHA', \"\" + ($$($nesting, 'P_L')) + ($$($nesting, 'P_Nl')));\n    Opal.const_set($nesting[0], 'CG_ALPHA', \"\" + \"[\" + ($$($nesting, 'CC_ALPHA')) + \"]\");\n    Opal.const_set($nesting[0], 'CC_ALNUM', \"\" + ($$($nesting, 'CC_ALPHA')) + ($$($nesting, 'P_Nd')));\n    Opal.const_set($nesting[0], 'CG_ALNUM', \"\" + \"[\" + ($$($nesting, 'CC_ALNUM')) + \"]\");\n    Opal.const_set($nesting[0], 'CC_WORD', \"\" + ($$($nesting, 'CC_ALNUM')) + ($$($nesting, 'P_Pc')));\n    Opal.const_set($nesting[0], 'CG_WORD', \"\" + \"[\" + ($$($nesting, 'CC_WORD')) + \"]\");\n    Opal.const_set($nesting[0], 'CG_BLANK', \"[ \\\\t]\");\n    Opal.const_set($nesting[0], 'CC_EOL', \"(?=\\\\n|$)\");\n    Opal.const_set($nesting[0], 'CG_GRAPH', \"[^\\\\s\\\\x00-\\\\x1F\\\\x7F]\");\n    Opal.const_set($nesting[0], 'CC_ALL', \"[\\\\s\\\\S]\");\n    Opal.const_set($nesting[0], 'CC_ANY', \"[^\\\\n]\");\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"strscan\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;\n\n  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$-', '$private']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StringScanner');\n\n    var $nesting = [self].concat($parent_nesting), $StringScanner_initialize$1, $StringScanner_beginning_of_line$ques$2, $StringScanner_scan$3, $StringScanner_scan_until$4, $StringScanner_$$$5, $StringScanner_check$6, $StringScanner_check_until$7, $StringScanner_peek$8, $StringScanner_eos$ques$9, $StringScanner_exist$ques$10, $StringScanner_skip$11, $StringScanner_skip_until$12, $StringScanner_get_byte$13, $StringScanner_match$ques$14, $StringScanner_pos$eq$15, $StringScanner_matched_size$16, $StringScanner_post_match$17, $StringScanner_pre_match$18, $StringScanner_reset$19, $StringScanner_rest$20, $StringScanner_rest$ques$21, $StringScanner_rest_size$22, $StringScanner_terminate$23, $StringScanner_unscan$24, $StringScanner_anchor$25;\n\n    self.$$prototype.pos = self.$$prototype.string = self.$$prototype.working = self.$$prototype.matched = self.$$prototype.prev_pos = self.$$prototype.match = nil;\n    \n    self.$attr_reader(\"pos\");\n    self.$attr_reader(\"matched\");\n    \n    Opal.def(self, '$initialize', $StringScanner_initialize$1 = function $$initialize(string) {\n      var self = this;\n\n      \n      self.string = string;\n      self.pos = 0;\n      self.matched = nil;\n      self.working = string;\n      return (self.match = []);\n    }, $StringScanner_initialize$1.$$arity = 1);\n    self.$attr_reader(\"string\");\n    \n    Opal.def(self, '$beginning_of_line?', $StringScanner_beginning_of_line$ques$2 = function() {\n      var self = this;\n\n      return self.pos === 0 || self.string.charAt(self.pos - 1) === \"\\n\"\n    }, $StringScanner_beginning_of_line$ques$2.$$arity = 0);\n    Opal.alias(self, \"bol?\", \"beginning_of_line?\");\n    \n    Opal.def(self, '$scan', $StringScanner_scan$3 = function $$scan(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n      else if (typeof(result) === 'object') {\n        self.prev_pos = self.pos;\n        self.pos     += result[0].length;\n        self.working  = self.working.substring(result[0].length);\n        self.matched  = result[0];\n        self.match    = result;\n\n        return result[0];\n      }\n      else if (typeof(result) === 'string') {\n        self.pos     += result.length;\n        self.working  = self.working.substring(result.length);\n\n        return result;\n      }\n      else {\n        return nil;\n      }\n    ;\n    }, $StringScanner_scan$3.$$arity = 1);\n    \n    Opal.def(self, '$scan_until', $StringScanner_scan_until$4 = function $$scan_until(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var pos     = self.pos,\n          working = self.working,\n          result;\n\n      while (true) {\n        result   = pattern.exec(working);\n        pos     += 1;\n        working  = working.substr(1);\n\n        if (result == null) {\n          if (working.length === 0) {\n            return self.matched = nil;\n          }\n\n          continue;\n        }\n\n        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);\n        self.prev_pos = pos - 1;\n        self.pos      = pos;\n        self.working  = working.substr(result[0].length);\n\n        return self.matched;\n      }\n    ;\n    }, $StringScanner_scan_until$4.$$arity = 1);\n    \n    Opal.def(self, '$[]', $StringScanner_$$$5 = function(idx) {\n      var self = this;\n\n      \n      var match = self.match;\n\n      if (idx < 0) {\n        idx += match.length;\n      }\n\n      if (idx < 0 || idx >= match.length) {\n        return nil;\n      }\n\n      if (match[idx] == null) {\n        return nil;\n      }\n\n      return match[idx];\n    \n    }, $StringScanner_$$$5.$$arity = 1);\n    \n    Opal.def(self, '$check', $StringScanner_check$6 = function $$check(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n\n      return self.matched = result[0];\n    ;\n    }, $StringScanner_check$6.$$arity = 1);\n    \n    Opal.def(self, '$check_until', $StringScanner_check_until$7 = function $$check_until(pattern) {\n      var self = this;\n\n      \n      var prev_pos = self.prev_pos,\n          pos      = self.pos;\n\n      var result = self.$scan_until(pattern);\n\n      if (result !== nil) {\n        self.matched = result.substr(-1);\n        self.working = self.string.substr(pos);\n      }\n\n      self.prev_pos = prev_pos;\n      self.pos      = pos;\n\n      return result;\n    \n    }, $StringScanner_check_until$7.$$arity = 1);\n    \n    Opal.def(self, '$peek', $StringScanner_peek$8 = function $$peek(length) {\n      var self = this;\n\n      return self.working.substring(0, length)\n    }, $StringScanner_peek$8.$$arity = 1);\n    \n    Opal.def(self, '$eos?', $StringScanner_eos$ques$9 = function() {\n      var self = this;\n\n      return self.working.length === 0\n    }, $StringScanner_eos$ques$9.$$arity = 0);\n    \n    Opal.def(self, '$exist?', $StringScanner_exist$ques$10 = function(pattern) {\n      var self = this;\n\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return nil;\n      }\n      else if (result.index == 0) {\n        return 0;\n      }\n      else {\n        return result.index + 1;\n      }\n    \n    }, $StringScanner_exist$ques$10.$$arity = 1);\n    \n    Opal.def(self, '$skip', $StringScanner_skip$11 = function $$skip(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n      else {\n        var match_str = result[0];\n        var match_len = match_str.length;\n\n        self.matched   = match_str;\n        self.prev_pos  = self.pos;\n        self.pos      += match_len;\n        self.working   = self.working.substring(match_len);\n\n        return match_len;\n      }\n    ;\n    }, $StringScanner_skip$11.$$arity = 1);\n    \n    Opal.def(self, '$skip_until', $StringScanner_skip_until$12 = function $$skip_until(pattern) {\n      var self = this;\n\n      \n      var result = self.$scan_until(pattern);\n\n      if (result === nil) {\n        return nil;\n      }\n      else {\n        self.matched = result.substr(-1);\n\n        return result.length;\n      }\n    \n    }, $StringScanner_skip_until$12.$$arity = 1);\n    \n    Opal.def(self, '$get_byte', $StringScanner_get_byte$13 = function $$get_byte() {\n      var self = this;\n\n      \n      var result = nil;\n\n      if (self.pos < self.string.length) {\n        self.prev_pos  = self.pos;\n        self.pos      += 1;\n        result      = self.matched = self.working.substring(0, 1);\n        self.working   = self.working.substring(1);\n      }\n      else {\n        self.matched = nil;\n      }\n\n      return result;\n    \n    }, $StringScanner_get_byte$13.$$arity = 0);\n    Opal.alias(self, \"getch\", \"get_byte\");\n    \n    Opal.def(self, '$match?', $StringScanner_match$ques$14 = function(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return nil;\n      }\n      else {\n        self.prev_pos = self.pos;\n\n        return result[0].length;\n      }\n    ;\n    }, $StringScanner_match$ques$14.$$arity = 1);\n    \n    Opal.def(self, '$pos=', $StringScanner_pos$eq$15 = function(pos) {\n      var self = this;\n\n      \n      \n      if (pos < 0) {\n        pos += self.string.$length();\n      }\n    ;\n      self.pos = pos;\n      return (self.working = self.string.slice(pos));\n    }, $StringScanner_pos$eq$15.$$arity = 1);\n    \n    Opal.def(self, '$matched_size', $StringScanner_matched_size$16 = function $$matched_size() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.matched.length\n    \n    }, $StringScanner_matched_size$16.$$arity = 0);\n    \n    Opal.def(self, '$post_match', $StringScanner_post_match$17 = function $$post_match() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.string.substr(self.pos);\n    \n    }, $StringScanner_post_match$17.$$arity = 0);\n    \n    Opal.def(self, '$pre_match', $StringScanner_pre_match$18 = function $$pre_match() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.string.substr(0, self.prev_pos);\n    \n    }, $StringScanner_pre_match$18.$$arity = 0);\n    \n    Opal.def(self, '$reset', $StringScanner_reset$19 = function $$reset() {\n      var self = this;\n\n      \n      self.working = self.string;\n      self.matched = nil;\n      return (self.pos = 0);\n    }, $StringScanner_reset$19.$$arity = 0);\n    \n    Opal.def(self, '$rest', $StringScanner_rest$20 = function $$rest() {\n      var self = this;\n\n      return self.working\n    }, $StringScanner_rest$20.$$arity = 0);\n    \n    Opal.def(self, '$rest?', $StringScanner_rest$ques$21 = function() {\n      var self = this;\n\n      return self.working.length !== 0\n    }, $StringScanner_rest$ques$21.$$arity = 0);\n    \n    Opal.def(self, '$rest_size', $StringScanner_rest_size$22 = function $$rest_size() {\n      var self = this;\n\n      return self.$rest().$size()\n    }, $StringScanner_rest_size$22.$$arity = 0);\n    \n    Opal.def(self, '$terminate', $StringScanner_terminate$23 = function $$terminate() {\n      var self = this, $writer = nil;\n\n      \n      self.match = nil;\n      \n      $writer = [self.string.$length()];\n      $send(self, 'pos=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];;\n    }, $StringScanner_terminate$23.$$arity = 0);\n    \n    Opal.def(self, '$unscan', $StringScanner_unscan$24 = function $$unscan() {\n      var self = this;\n\n      \n      self.pos = self.prev_pos;\n      self.prev_pos = nil;\n      self.match = nil;\n      return self;\n    }, $StringScanner_unscan$24.$$arity = 0);\n    self.$private();\n    return (Opal.def(self, '$anchor', $StringScanner_anchor$25 = function $$anchor(pattern) {\n      var self = this;\n\n      \n      var flags = pattern.toString().match(/\\/([^\\/]+)$/);\n      flags = flags ? flags[1] : undefined;\n      return new RegExp('^(?:' + pattern.source + ')', flags);\n    \n    }, $StringScanner_anchor$25.$$arity = 1), nil) && 'anchor';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/js/opal_ext\");\n  self.$require(\"asciidoctor/js/rx\");\n  return self.$require(\"strscan\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext/nil_or_empty\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$method_defined?']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NilClass');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"nil?\")\n    }\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Array');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Hash');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Numeric');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"nil?\")\n    }\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext/hash/merge\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var $$1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$==', '$arity', '$instance_method', '$send', '$new', '$<', '$length', '$dup', '$>', '$inject', '$merge', '$[]']);\n  if ($$($nesting, 'Hash').$instance_method(\"merge\").$arity()['$=='](1)) {\n    return $$($nesting, 'Hash').$send(\"prepend\", $send($$($nesting, 'Module'), 'new', [], ($$1 = function(){var self = $$1.$$s || this, $merge$2;\n\n    return (Opal.def(self, '$merge', $merge$2 = function $$merge($a) {\n        var $post_args, args, $$3, $iter = $merge$2.$$p, $yield = $iter || nil, self = this, len = nil;\n\n        if ($iter) $merge$2.$$p = null;\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        if ($truthy($rb_lt((len = args.$length()), 1))) {\n          return self.$dup()\n        } else {\n          \n          if ($truthy($rb_gt(len, 1))) {\n            return $send(args, 'inject', [self], ($$3 = function(acc, arg){var self = $$3.$$s || this;\n\n            \n              \n              if (acc == null) {\n                acc = nil;\n              };\n              \n              if (arg == null) {\n                arg = nil;\n              };\n              return acc.$merge(arg);}, $$3.$$s = self, $$3.$$arity = 2, $$3))\n          } else {\n            \n            return $send(self, Opal.find_super_dispatcher(self, 'merge', $merge$2, false), [args['$[]'](0)], null);\n          };\n        };\n      }, $merge$2.$$arity = -1), nil) && 'merge'}, $$1.$$s = self, $$1.$$arity = 0, $$1)))\n  } else {\n    return nil\n  }\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext/match_data/names\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $klass = Opal.klass;\n\n  Opal.add_stubs(['$method_defined?']);\n  if ($truthy($$($nesting, 'MatchData')['$method_defined?'](\"names\"))) {\n    return nil\n  } else {\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'MatchData');\n\n      var $nesting = [self].concat($parent_nesting), $MatchData_names$1;\n\n      return (Opal.def(self, '$names', $MatchData_names$1 = function $$names() {\n        var self = this;\n\n        return []\n      }, $MatchData_names$1.$$arity = 0), nil) && 'names'\n    })($nesting[0], null, $nesting)\n  }\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$==']);\n  \n  self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/nil_or_empty\");\n  self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/hash/merge\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    return self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/match_data/names\")\n  } else {\n    return nil\n  };\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/helpers\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$module_function', '$require', '$include?', '$include', '$==', '$===', '$path', '$message', '$raise', '$warn', '$logger', '$chomp', '$empty?', '$slice', '$unpack', '$[]', '$byteslice', '$bytesize', '$[]=', '$-', '$map', '$rstrip', '$encode', '$encoding', '$nil_or_empty?', '$!=', '$tap', '$each_line', '$<<', '$match?', '$gsub', '$rindex', '$index', '$basename', '$extname', '$!', '$length', '$directory?', '$dirname', '$mkdir_p', '$mkdir', '$private_constant', '$join', '$divmod', '$*', '$+', '$to_s', '$to_i', '$succ', '$class_for_name', '$const_get']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Helpers');\n\n      var $nesting = [self].concat($parent_nesting), $Helpers_require_library$1, $Helpers_prepare_source_array$2, $Helpers_prepare_source_string$11, $Helpers_uriish$ques$16, $Helpers_encode_uri_component$17, $Helpers_encode_spaces_in_uri$18, $Helpers_rootname$19, $Helpers_basename$20, $Helpers_extname$ques$21, $Helpers_extname$22, $Helpers_extname$23, $Helpers_mkdir_p$24, $Helpers_int_to_roman$25, $Helpers_nextval$27, $Helpers_resolve_class$28, $Helpers_class_for_name$29;\n\n      \n      self.$module_function();\n      \n      Opal.def(self, '$require_library', $Helpers_require_library$1 = function $$require_library(name, gem_name, on_failure) {\n        var self = this, $case = nil, details = nil;\n        if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n        \n        \n        if (gem_name == null) {\n          gem_name = true;\n        };\n        \n        if (on_failure == null) {\n          on_failure = \"abort\";\n        };\n        try {\n          return self.$require(name)\n        } catch ($err) {\n          if (Opal.rescue($err, [$$$('::', 'LoadError')])) {\n            try {\n              \n              if ($truthy(self['$include?']($$($nesting, 'Logging')))) {\n              } else {\n                self.$include($$($nesting, 'Logging'))\n              };\n              if ($truthy(gem_name)) {\n                \n                if (gem_name['$=='](true)) {\n                  gem_name = name};\n                $case = on_failure;\n                if (\"abort\"['$===']($case)) {\n                details = (function() {if ($gvars[\"!\"].$path()['$=='](gem_name)) {\n                  return \"\"\n                } else {\n                  return \"\" + \" (reason: \" + ((function() {if ($truthy($gvars[\"!\"].$path())) {\n                    return \"\" + \"cannot load '\" + ($gvars[\"!\"].$path()) + \"'\"\n                  } else {\n                    return $gvars[\"!\"].$message()\n                  }; return nil; })()) + \")\"\n                }; return nil; })();\n                self.$raise($$$('::', 'LoadError'), \"\" + \"asciidoctor: FAILED: required gem '\" + (gem_name) + \"' is not available\" + (details) + \". Processing aborted.\");}\n                else if (\"warn\"['$===']($case)) {\n                details = (function() {if ($gvars[\"!\"].$path()['$=='](gem_name)) {\n                  return \"\"\n                } else {\n                  return \"\" + \" (reason: \" + ((function() {if ($truthy($gvars[\"!\"].$path())) {\n                    return \"\" + \"cannot load '\" + ($gvars[\"!\"].$path()) + \"'\"\n                  } else {\n                    return $gvars[\"!\"].$message()\n                  }; return nil; })()) + \")\"\n                }; return nil; })();\n                self.$logger().$warn(\"\" + \"optional gem '\" + (gem_name) + \"' is not available\" + (details) + \". Functionality disabled.\");};\n              } else {\n                $case = on_failure;\n                if (\"abort\"['$===']($case)) {self.$raise($$$('::', 'LoadError'), \"\" + \"asciidoctor: FAILED: \" + ($gvars[\"!\"].$message().$chomp(\".\")) + \". Processing aborted.\")}\n                else if (\"warn\"['$===']($case)) {self.$logger().$warn(\"\" + ($gvars[\"!\"].$message().$chomp(\".\")) + \". Functionality disabled.\")}\n              };\n              return nil;\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $Helpers_require_library$1.$$arity = -2);\n      \n      Opal.def(self, '$prepare_source_array', $Helpers_prepare_source_array$2 = function $$prepare_source_array(data, trim_end) {\n        var $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10, self = this, leading_2_bytes = nil, leading_bytes = nil, first = nil, $writer = nil;\n\n        \n        \n        if (trim_end == null) {\n          trim_end = true;\n        };\n        if ($truthy(data['$empty?']())) {\n          return []};\n        if ((leading_2_bytes = (leading_bytes = (first = data['$[]'](0)).$unpack(\"C3\")).$slice(0, 2))['$==']($$($nesting, 'BOM_BYTES_UTF_16LE'))) {\n          \n          \n          $writer = [0, first.$byteslice(2, first.$bytesize())];\n          $send(data, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return (function() {if ($truthy(trim_end)) {\n            return $send(data, 'map', [], ($$3 = function(line){var self = $$3.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16LE')).$rstrip();}, $$3.$$s = self, $$3.$$arity = 1, $$3))\n          } else {\n            return $send(data, 'map', [], ($$4 = function(line){var self = $$4.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16LE')).$chomp();}, $$4.$$s = self, $$4.$$arity = 1, $$4))\n          }; return nil; })();\n        } else if (leading_2_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_16BE'))) {\n          \n          \n          $writer = [0, first.$byteslice(2, first.$bytesize())];\n          $send(data, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return (function() {if ($truthy(trim_end)) {\n            return $send(data, 'map', [], ($$5 = function(line){var self = $$5.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16BE')).$rstrip();}, $$5.$$s = self, $$5.$$arity = 1, $$5))\n          } else {\n            return $send(data, 'map', [], ($$6 = function(line){var self = $$6.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16BE')).$chomp();}, $$6.$$s = self, $$6.$$arity = 1, $$6))\n          }; return nil; })();\n        } else if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {\n          \n          $writer = [0, first.$byteslice(3, first.$bytesize())];\n          $send(data, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if (first.$encoding()['$==']($$($nesting, 'UTF_8'))) {\n          if ($truthy(trim_end)) {\n            return $send(data, 'map', [], ($$7 = function(line){var self = $$7.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$rstrip();}, $$7.$$s = self, $$7.$$arity = 1, $$7))\n          } else {\n            return $send(data, 'map', [], ($$8 = function(line){var self = $$8.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$chomp();}, $$8.$$s = self, $$8.$$arity = 1, $$8))\n          }\n        } else if ($truthy(trim_end)) {\n          return $send(data, 'map', [], ($$9 = function(line){var self = $$9.$$s || this;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            return line.$encode($$($nesting, 'UTF_8')).$rstrip();}, $$9.$$s = self, $$9.$$arity = 1, $$9))\n        } else {\n          return $send(data, 'map', [], ($$10 = function(line){var self = $$10.$$s || this;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            return line.$encode($$($nesting, 'UTF_8')).$chomp();}, $$10.$$s = self, $$10.$$arity = 1, $$10))\n        };\n      }, $Helpers_prepare_source_array$2.$$arity = -2);\n      \n      Opal.def(self, '$prepare_source_string', $Helpers_prepare_source_string$11 = function $$prepare_source_string(data, trim_end) {\n        var $$12, $$14, self = this, leading_2_bytes = nil, leading_bytes = nil;\n\n        \n        \n        if (trim_end == null) {\n          trim_end = true;\n        };\n        if ($truthy(data['$nil_or_empty?']())) {\n          return []};\n        if ((leading_2_bytes = (leading_bytes = data.$unpack(\"C3\")).$slice(0, 2))['$==']($$($nesting, 'BOM_BYTES_UTF_16LE'))) {\n          data = data.$byteslice(2, data.$bytesize()).$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16LE'))\n        } else if (leading_2_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_16BE'))) {\n          data = data.$byteslice(2, data.$bytesize()).$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16BE'))\n        } else if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {\n          \n          data = data.$byteslice(3, data.$bytesize());\n          if (data.$encoding()['$==']($$($nesting, 'UTF_8'))) {\n          } else {\n            data = data.$encode($$($nesting, 'UTF_8'))\n          };\n        } else if ($truthy(data.$encoding()['$!=']($$($nesting, 'UTF_8')))) {\n          data = data.$encode($$($nesting, 'UTF_8'))};\n        if ($truthy(trim_end)) {\n          return $send([], 'tap', [], ($$12 = function(lines){var self = $$12.$$s || this, $$13;\n\n          \n            \n            if (lines == null) {\n              lines = nil;\n            };\n            return $send(data, 'each_line', [], ($$13 = function(line){var self = $$13.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return lines['$<<'](line.$rstrip());}, $$13.$$s = self, $$13.$$arity = 1, $$13));}, $$12.$$s = self, $$12.$$arity = 1, $$12))\n        } else {\n          return $send([], 'tap', [], ($$14 = function(lines){var self = $$14.$$s || this, $$15;\n\n          \n            \n            if (lines == null) {\n              lines = nil;\n            };\n            return $send(data, 'each_line', [], ($$15 = function(line){var self = $$15.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return lines['$<<'](line.$chomp());}, $$15.$$s = self, $$15.$$arity = 1, $$15));}, $$14.$$s = self, $$14.$$arity = 1, $$14))\n        };\n      }, $Helpers_prepare_source_string$11.$$arity = -2);\n      \n      Opal.def(self, '$uriish?', $Helpers_uriish$ques$16 = function(str) {\n        var $a, self = this;\n\n        return ($truthy($a = str['$include?'](\":\")) ? $$($nesting, 'UriSniffRx')['$match?'](str) : $a)\n      }, $Helpers_uriish$ques$16.$$arity = 1);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        \n        Opal.def(self, '$encode_uri_component', $Helpers_encode_uri_component$17 = function $$encode_uri_component(str) {\n          var self = this;\n\n          \n        return encodeURIComponent(str).replace(/%20|[!'()*]/g, function (m) {\n          return m === '%20' ? '+' : '%' + m.charCodeAt(0).toString(16)\n        })\n      \n        }, $Helpers_encode_uri_component$17.$$arity = 1)\n      } else {\n        nil\n      };\n      \n      Opal.def(self, '$encode_spaces_in_uri', $Helpers_encode_spaces_in_uri$18 = function $$encode_spaces_in_uri(str) {\n        var self = this;\n\n        if ($truthy(str['$include?'](\" \"))) {\n          \n          return str.$gsub(\" \", \"%20\");\n        } else {\n          return str\n        }\n      }, $Helpers_encode_spaces_in_uri$18.$$arity = 1);\n      \n      Opal.def(self, '$rootname', $Helpers_rootname$19 = function $$rootname(filename) {\n        var self = this, last_dot_idx = nil;\n\n        if ($truthy((last_dot_idx = filename.$rindex(\".\")))) {\n          if ($truthy(filename.$index(\"/\", last_dot_idx))) {\n            return filename\n          } else {\n            \n            return filename.$slice(0, last_dot_idx);\n          }\n        } else {\n          return filename\n        }\n      }, $Helpers_rootname$19.$$arity = 1);\n      \n      Opal.def(self, '$basename', $Helpers_basename$20 = function $$basename(filename, drop_ext) {\n        var self = this;\n\n        \n        \n        if (drop_ext == null) {\n          drop_ext = nil;\n        };\n        if ($truthy(drop_ext)) {\n          return $$$('::', 'File').$basename(filename, (function() {if (drop_ext['$=='](true)) {\n            \n            return self.$extname(filename);\n          } else {\n            return drop_ext\n          }; return nil; })())\n        } else {\n          return $$$('::', 'File').$basename(filename)\n        };\n      }, $Helpers_basename$20.$$arity = -2);\n      \n      Opal.def(self, '$extname?', $Helpers_extname$ques$21 = function(path) {\n        var $a, self = this, last_dot_idx = nil;\n\n        return ($truthy($a = (last_dot_idx = path.$rindex(\".\"))) ? path.$index(\"/\", last_dot_idx)['$!']() : $a)\n      }, $Helpers_extname$ques$21.$$arity = 1);\n      if ($truthy($$$($$$('::', 'File'), 'ALT_SEPARATOR'))) {\n        \n        Opal.def(self, '$extname', $Helpers_extname$22 = function $$extname(path, fallback) {\n          var $a, self = this, last_dot_idx = nil;\n\n          \n          \n          if (fallback == null) {\n            fallback = \"\";\n          };\n          if ($truthy((last_dot_idx = path.$rindex(\".\")))) {\n            if ($truthy(($truthy($a = path.$index(\"/\", last_dot_idx)) ? $a : path.$index($$$($$$('::', 'File'), 'ALT_SEPARATOR'), last_dot_idx)))) {\n              return fallback\n            } else {\n              \n              return path.$slice(last_dot_idx, path.$length());\n            }\n          } else {\n            return fallback\n          };\n        }, $Helpers_extname$22.$$arity = -2)\n      } else {\n        \n        Opal.def(self, '$extname', $Helpers_extname$23 = function $$extname(path, fallback) {\n          var self = this, last_dot_idx = nil;\n\n          \n          \n          if (fallback == null) {\n            fallback = \"\";\n          };\n          if ($truthy((last_dot_idx = path.$rindex(\".\")))) {\n            if ($truthy(path.$index(\"/\", last_dot_idx))) {\n              return fallback\n            } else {\n              \n              return path.$slice(last_dot_idx, path.$length());\n            }\n          } else {\n            return fallback\n          };\n        }, $Helpers_extname$23.$$arity = -2)\n      };\n      \n      Opal.def(self, '$mkdir_p', $Helpers_mkdir_p$24 = function $$mkdir_p(dir) {\n        var self = this, parent_dir = nil;\n\n        if ($truthy($$$('::', 'File')['$directory?'](dir))) {\n          return nil\n        } else {\n          \n          if ((parent_dir = $$$('::', 'File').$dirname(dir))['$=='](\".\")) {\n          } else {\n            self.$mkdir_p(parent_dir)\n          };\n          \n          try {\n            return $$$('::', 'Dir').$mkdir(dir)\n          } catch ($err) {\n            if (Opal.rescue($err, [$$$('::', 'SystemCallError')])) {\n              try {\n                if ($truthy($$$('::', 'File')['$directory?'](dir))) {\n                  return nil\n                } else {\n                  return self.$raise()\n                }\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          };;\n        }\n      }, $Helpers_mkdir_p$24.$$arity = 1);\n      Opal.const_set($nesting[0], 'ROMAN_NUMERALS', $hash2([\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"], {\"M\": 1000, \"CM\": 900, \"D\": 500, \"CD\": 400, \"C\": 100, \"XC\": 90, \"L\": 50, \"XL\": 40, \"X\": 10, \"IX\": 9, \"V\": 5, \"IV\": 4, \"I\": 1}));\n      self.$private_constant(\"ROMAN_NUMERALS\");\n      \n      Opal.def(self, '$int_to_roman', $Helpers_int_to_roman$25 = function $$int_to_roman(val) {\n        var $$26, self = this;\n\n        return $send($$($nesting, 'ROMAN_NUMERALS'), 'map', [], ($$26 = function(l, i){var self = $$26.$$s || this, $a, $b, repeat = nil;\n\n        \n          \n          if (l == null) {\n            l = nil;\n          };\n          \n          if (i == null) {\n            i = nil;\n          };\n          $b = val.$divmod(i), $a = Opal.to_ary($b), (repeat = ($a[0] == null ? nil : $a[0])), (val = ($a[1] == null ? nil : $a[1])), $b;\n          return $rb_times(l, repeat);}, $$26.$$s = self, $$26.$$arity = 2, $$26)).$join()\n      }, $Helpers_int_to_roman$25.$$arity = 1);\n      \n      Opal.def(self, '$nextval', $Helpers_nextval$27 = function $$nextval(current) {\n        var self = this, intval = nil;\n\n        if ($truthy($$$('::', 'Integer')['$==='](current))) {\n          return $rb_plus(current, 1)\n        } else if ((intval = current.$to_i()).$to_s()['$=='](current.$to_s())) {\n          return $rb_plus(intval, 1)\n        } else {\n          return current.$succ()\n        }\n      }, $Helpers_nextval$27.$$arity = 1);\n      \n      Opal.def(self, '$resolve_class', $Helpers_resolve_class$28 = function $$resolve_class(object) {\n        var self = this;\n\n        if ($truthy($$$('::', 'Class')['$==='](object))) {\n          return object\n        } else {\n          \n          if ($truthy($$$('::', 'String')['$==='](object))) {\n            \n            return self.$class_for_name(object);\n          } else {\n            return nil\n          };\n        }\n      }, $Helpers_resolve_class$28.$$arity = 1);\n      \n      Opal.def(self, '$class_for_name', $Helpers_class_for_name$29 = function $$class_for_name(qualified_name) {\n        var self = this, resolved = nil;\n\n        try {\n          \n          if ($truthy($$$('::', 'Class')['$===']((resolved = $$$('::', 'Object').$const_get(qualified_name, false))))) {\n          } else {\n            self.$raise()\n          };\n          return resolved;\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              return self.$raise($$$('::', 'NameError'), \"\" + \"Could not resolve class for name: \" + (qualified_name))\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        }\n      }, $Helpers_class_for_name$29.$$arity = 1);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"logger\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$include', '$to_h', '$map', '$constants', '$const_get', '$to_s', '$format', '$chr', '$strftime', '$message_as_string', '$===', '$+', '$message', '$class', '$join', '$backtrace', '$inspect', '$attr_reader', '$attr_accessor', '$new', '$key', '$upcase', '$raise', '$add', '$to_proc', '$<=', '$<', '$write', '$call', '$[]', '$now']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Logger');\n\n    var $nesting = [self].concat($parent_nesting), $Logger$1, $Logger_initialize$4, $Logger_level$eq$5, $Logger_info$6, $Logger_debug$7, $Logger_warn$8, $Logger_error$9, $Logger_fatal$10, $Logger_unknown$11, $Logger_info$ques$12, $Logger_debug$ques$13, $Logger_warn$ques$14, $Logger_error$ques$15, $Logger_fatal$ques$16, $Logger_add$17;\n\n    self.$$prototype.level = self.$$prototype.progname = self.$$prototype.pipe = self.$$prototype.formatter = nil;\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Severity');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      Opal.const_set($nesting[0], 'DEBUG', 0);\n      Opal.const_set($nesting[0], 'INFO', 1);\n      Opal.const_set($nesting[0], 'WARN', 2);\n      Opal.const_set($nesting[0], 'ERROR', 3);\n      Opal.const_set($nesting[0], 'FATAL', 4);\n      Opal.const_set($nesting[0], 'UNKNOWN', 5);\n    })($nesting[0], $nesting);\n    self.$include($$($nesting, 'Severity'));\n    Opal.const_set($nesting[0], 'SEVERITY_LABELS', $send($$($nesting, 'Severity').$constants(), 'map', [], ($Logger$1 = function(s){var self = $Logger$1.$$s || this;\n\n    \n      \n      if (s == null) {\n        s = nil;\n      };\n      return [$$($nesting, 'Severity').$const_get(s), s.$to_s()];}, $Logger$1.$$s = self, $Logger$1.$$arity = 1, $Logger$1)).$to_h());\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Formatter');\n\n      var $nesting = [self].concat($parent_nesting), $Formatter_call$2, $Formatter_message_as_string$3;\n\n      \n      Opal.const_set($nesting[0], 'MESSAGE_FORMAT', \"%s, [%s] %5s -- %s: %s\\n\");\n      Opal.const_set($nesting[0], 'DATE_TIME_FORMAT', \"%Y-%m-%dT%H:%M:%S.%6N\");\n      \n      Opal.def(self, '$call', $Formatter_call$2 = function $$call(severity, time, progname, msg) {\n        var self = this;\n\n        return self.$format($$($nesting, 'MESSAGE_FORMAT'), severity.$chr(), time.$strftime($$($nesting, 'DATE_TIME_FORMAT')), severity, progname, self.$message_as_string(msg))\n      }, $Formatter_call$2.$$arity = 4);\n      return (Opal.def(self, '$message_as_string', $Formatter_message_as_string$3 = function $$message_as_string(msg) {\n        var $a, self = this, $case = nil;\n\n        return (function() {$case = msg;\n        if ($$$('::', 'String')['$===']($case)) {return msg}\n        else if ($$$('::', 'Exception')['$===']($case)) {return $rb_plus(\"\" + (msg.$message()) + \" (\" + (msg.$class()) + \")\\n\", ($truthy($a = msg.$backtrace()) ? $a : []).$join(\"\\n\"))}\n        else {return msg.$inspect()}})()\n      }, $Formatter_message_as_string$3.$$arity = 1), nil) && 'message_as_string';\n    })($nesting[0], null, $nesting);\n    self.$attr_reader(\"level\");\n    self.$attr_accessor(\"progname\");\n    self.$attr_accessor(\"formatter\");\n    \n    Opal.def(self, '$initialize', $Logger_initialize$4 = function $$initialize(pipe) {\n      var self = this;\n\n      \n      self.pipe = pipe;\n      self.level = $$($nesting, 'DEBUG');\n      return (self.formatter = $$($nesting, 'Formatter').$new());\n    }, $Logger_initialize$4.$$arity = 1);\n    \n    Opal.def(self, '$level=', $Logger_level$eq$5 = function(severity) {\n      var self = this, level = nil;\n\n      if ($truthy($$$('::', 'Integer')['$==='](severity))) {\n        return (self.level = severity)\n      } else if ($truthy((level = $$($nesting, 'SEVERITY_LABELS').$key(severity.$to_s().$upcase())))) {\n        return (self.level = level)\n      } else {\n        return self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid log level: \" + (severity))\n      }\n    }, $Logger_level$eq$5.$$arity = 1);\n    \n    Opal.def(self, '$info', $Logger_info$6 = function $$info(progname) {\n      var $iter = $Logger_info$6.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_info$6.$$p = null;\n      \n      \n      if ($iter) $Logger_info$6.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'INFO'), nil, progname], block.$to_proc());\n    }, $Logger_info$6.$$arity = -1);\n    \n    Opal.def(self, '$debug', $Logger_debug$7 = function $$debug(progname) {\n      var $iter = $Logger_debug$7.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_debug$7.$$p = null;\n      \n      \n      if ($iter) $Logger_debug$7.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'DEBUG'), nil, progname], block.$to_proc());\n    }, $Logger_debug$7.$$arity = -1);\n    \n    Opal.def(self, '$warn', $Logger_warn$8 = function $$warn(progname) {\n      var $iter = $Logger_warn$8.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_warn$8.$$p = null;\n      \n      \n      if ($iter) $Logger_warn$8.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'WARN'), nil, progname], block.$to_proc());\n    }, $Logger_warn$8.$$arity = -1);\n    \n    Opal.def(self, '$error', $Logger_error$9 = function $$error(progname) {\n      var $iter = $Logger_error$9.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_error$9.$$p = null;\n      \n      \n      if ($iter) $Logger_error$9.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'ERROR'), nil, progname], block.$to_proc());\n    }, $Logger_error$9.$$arity = -1);\n    \n    Opal.def(self, '$fatal', $Logger_fatal$10 = function $$fatal(progname) {\n      var $iter = $Logger_fatal$10.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_fatal$10.$$p = null;\n      \n      \n      if ($iter) $Logger_fatal$10.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'FATAL'), nil, progname], block.$to_proc());\n    }, $Logger_fatal$10.$$arity = -1);\n    \n    Opal.def(self, '$unknown', $Logger_unknown$11 = function $$unknown(progname) {\n      var $iter = $Logger_unknown$11.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_unknown$11.$$p = null;\n      \n      \n      if ($iter) $Logger_unknown$11.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'UNKNOWN'), nil, progname], block.$to_proc());\n    }, $Logger_unknown$11.$$arity = -1);\n    \n    Opal.def(self, '$info?', $Logger_info$ques$12 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'INFO'))\n    }, $Logger_info$ques$12.$$arity = 0);\n    \n    Opal.def(self, '$debug?', $Logger_debug$ques$13 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'DEBUG'))\n    }, $Logger_debug$ques$13.$$arity = 0);\n    \n    Opal.def(self, '$warn?', $Logger_warn$ques$14 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'WARN'))\n    }, $Logger_warn$ques$14.$$arity = 0);\n    \n    Opal.def(self, '$error?', $Logger_error$ques$15 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'ERROR'))\n    }, $Logger_error$ques$15.$$arity = 0);\n    \n    Opal.def(self, '$fatal?', $Logger_fatal$ques$16 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'FATAL'))\n    }, $Logger_fatal$ques$16.$$arity = 0);\n    return (Opal.def(self, '$add', $Logger_add$17 = function $$add(severity, message, progname) {\n      var $iter = $Logger_add$17.$$p, block = $iter || nil, $a, self = this;\n\n      if ($iter) $Logger_add$17.$$p = null;\n      \n      \n      if ($iter) $Logger_add$17.$$p = null;;\n      \n      if (message == null) {\n        message = nil;\n      };\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      if ($truthy($rb_lt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), self.level))) {\n        return true};\n      progname = ($truthy($a = progname) ? $a : self.progname);\n      if ($truthy(message)) {\n      } else if ((block !== nil)) {\n        message = Opal.yieldX(block, [])\n      } else {\n        \n        message = progname;\n        progname = self.progname;\n      };\n      self.pipe.$write(self.formatter.$call(($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : \"ANY\"), $$$('::', 'Time').$now(), progname, message));\n      return true;\n    }, $Logger_add$17.$$arity = -2), nil) && 'add';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/logging\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$require', '$attr_reader', '$progname=', '$-', '$new', '$formatter=', '$level=', '$>', '$[]', '$===', '$inspect', '$to_h', '$map', '$constants', '$const_get', '$<<', '$clear', '$empty?', '$max', '$attr_accessor', '$memoize_logger', '$private', '$extend', '$private_class_method', '$logger', '$merge']);\n  \n  self.$require(\"logger\");\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Logger');\n\n      var $nesting = [self].concat($parent_nesting), $Logger_initialize$1, $Logger_add$2;\n\n      self.$$prototype.max_severity = nil;\n      \n      self.$attr_reader(\"max_severity\");\n      \n      Opal.def(self, '$initialize', $Logger_initialize$1 = function $$initialize($a) {\n        var $post_args, args, $iter = $Logger_initialize$1.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Logger_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Logger_initialize$1, false), $zuper, $iter);\n        \n        $writer = [\"asciidoctor\"];\n        $send(self, 'progname=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [$$($nesting, 'BasicFormatter').$new()];\n        $send(self, 'formatter=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [$$($nesting, 'WARN')];\n        $send(self, 'level=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $Logger_initialize$1.$$arity = -1);\n      \n      Opal.def(self, '$add', $Logger_add$2 = function $$add(severity, message, progname) {\n        var $a, $iter = $Logger_add$2.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Logger_add$2.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (message == null) {\n          message = nil;\n        };\n        \n        if (progname == null) {\n          progname = nil;\n        };\n        if ($truthy($rb_gt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), (self.max_severity = ($truthy($a = self.max_severity) ? $a : severity))))) {\n          self.max_severity = severity};\n        return $send(self, Opal.find_super_dispatcher(self, 'add', $Logger_add$2, false), $zuper, $iter);\n      }, $Logger_add$2.$$arity = -2);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BasicFormatter');\n\n        var $nesting = [self].concat($parent_nesting), $BasicFormatter_call$3;\n\n        \n        Opal.const_set($nesting[0], 'SEVERITY_LABEL_SUBSTITUTES', $hash2([\"WARN\", \"FATAL\"], {\"WARN\": \"WARNING\", \"FATAL\": \"FAILED\"}));\n        return (Opal.def(self, '$call', $BasicFormatter_call$3 = function $$call(severity, _, progname, msg) {\n          var $a, self = this;\n\n          return \"\" + (progname) + \": \" + (($truthy($a = $$($nesting, 'SEVERITY_LABEL_SUBSTITUTES')['$[]'](severity)) ? $a : severity)) + \": \" + ((function() {if ($truthy($$$('::', 'String')['$==='](msg))) {\n            return msg\n          } else {\n            return msg.$inspect()\n          }; return nil; })()) + ($$($nesting, 'LF'))\n        }, $BasicFormatter_call$3.$$arity = 4), nil) && 'call';\n      })($nesting[0], $$($nesting, 'Formatter'), $nesting);\n      return (function($base, $parent_nesting) {\n        var self = $module($base, 'AutoFormattingMessage');\n\n        var $nesting = [self].concat($parent_nesting), $AutoFormattingMessage_inspect$4;\n\n        \n        Opal.def(self, '$inspect', $AutoFormattingMessage_inspect$4 = function $$inspect() {\n          var self = this, sloc = nil;\n\n          if ($truthy((sloc = self['$[]'](\"source_location\")))) {\n            return \"\" + (sloc) + \": \" + (self['$[]'](\"text\"))\n          } else {\n            return self['$[]'](\"text\")\n          }\n        }, $AutoFormattingMessage_inspect$4.$$arity = 0)\n      })($nesting[0], $nesting);\n    })($nesting[0], $$$('::', 'Logger'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'MemoryLogger');\n\n      var $nesting = [self].concat($parent_nesting), $MemoryLogger$5, $MemoryLogger_initialize$6, $MemoryLogger_add$7, $MemoryLogger_clear$8, $MemoryLogger_empty$ques$9, $MemoryLogger_max_severity$10;\n\n      self.$$prototype.messages = nil;\n      \n      Opal.const_set($nesting[0], 'SEVERITY_SYMBOL_BY_VALUE', $send($$($nesting, 'Severity').$constants(false), 'map', [], ($MemoryLogger$5 = function(c){var self = $MemoryLogger$5.$$s || this;\n\n      \n        \n        if (c == null) {\n          c = nil;\n        };\n        return [$$($nesting, 'Severity').$const_get(c), c];}, $MemoryLogger$5.$$s = self, $MemoryLogger$5.$$arity = 1, $MemoryLogger$5)).$to_h());\n      self.$attr_reader(\"messages\");\n      \n      Opal.def(self, '$initialize', $MemoryLogger_initialize$6 = function $$initialize() {\n        var self = this, $writer = nil;\n\n        \n        \n        $writer = [$$($nesting, 'WARN')];\n        $send(self, 'level=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        return (self.messages = []);\n      }, $MemoryLogger_initialize$6.$$arity = 0);\n      \n      Opal.def(self, '$add', $MemoryLogger_add$7 = function $$add(severity, message, progname) {\n        var $a, $iter = $MemoryLogger_add$7.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $MemoryLogger_add$7.$$p = null;\n        \n        \n        if (message == null) {\n          message = nil;\n        };\n        \n        if (progname == null) {\n          progname = nil;\n        };\n        message = ($truthy($a = message) ? $a : (function() {if (($yield !== nil)) {\n          return Opal.yieldX($yield, []);\n        } else {\n          return progname\n        }; return nil; })());\n        self.messages['$<<']($hash2([\"severity\", \"message\"], {\"severity\": $$($nesting, 'SEVERITY_SYMBOL_BY_VALUE')['$[]'](($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), \"message\": message}));\n        return true;\n      }, $MemoryLogger_add$7.$$arity = -2);\n      \n      Opal.def(self, '$clear', $MemoryLogger_clear$8 = function $$clear() {\n        var self = this;\n\n        return self.messages.$clear()\n      }, $MemoryLogger_clear$8.$$arity = 0);\n      \n      Opal.def(self, '$empty?', $MemoryLogger_empty$ques$9 = function() {\n        var self = this;\n\n        return self.messages['$empty?']()\n      }, $MemoryLogger_empty$ques$9.$$arity = 0);\n      return (Opal.def(self, '$max_severity', $MemoryLogger_max_severity$10 = function $$max_severity() {\n        var $$11, self = this;\n\n        if ($truthy(self['$empty?']())) {\n          return nil\n        } else {\n          return $send(self.messages, 'map', [], ($$11 = function(m){var self = $$11.$$s || this;\n\n          \n            \n            if (m == null) {\n              m = nil;\n            };\n            return $$($nesting, 'Severity').$const_get(m['$[]'](\"severity\"));}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$max()\n        }\n      }, $MemoryLogger_max_severity$10.$$arity = 0), nil) && 'max_severity';\n    })($nesting[0], $$$('::', 'Logger'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'NullLogger');\n\n      var $nesting = [self].concat($parent_nesting), $NullLogger_initialize$12, $NullLogger_add$13;\n\n      self.$$prototype.max_severity = nil;\n      \n      self.$attr_reader(\"max_severity\");\n      \n      Opal.def(self, '$initialize', $NullLogger_initialize$12 = function $$initialize() {\n        var self = this, $writer = nil;\n\n        \n        $writer = [$$($nesting, 'WARN')];\n        $send(self, 'level=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $NullLogger_initialize$12.$$arity = 0);\n      return (Opal.def(self, '$add', $NullLogger_add$13 = function $$add(severity, message, progname) {\n        var $a, self = this;\n\n        \n        \n        if (message == null) {\n          message = nil;\n        };\n        \n        if (progname == null) {\n          progname = nil;\n        };\n        if ($truthy($rb_gt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), (self.max_severity = ($truthy($a = self.max_severity) ? $a : severity))))) {\n          self.max_severity = severity};\n        return true;\n      }, $NullLogger_add$13.$$arity = -2), nil) && 'add';\n    })($nesting[0], $$$('::', 'Logger'), $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'LoggerManager');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      self.logger_class = $$($nesting, 'Logger');\n      (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting), $logger$14, $logger$eq$15, $memoize_logger$16;\n\n        \n        self.$attr_accessor(\"logger_class\");\n        \n        Opal.def(self, '$logger', $logger$14 = function $$logger(pipe) {\n          var $a, self = this;\n          if (self.logger == null) self.logger = nil;\n          if (self.logger_class == null) self.logger_class = nil;\n          if ($gvars.stderr == null) $gvars.stderr = nil;\n\n          \n          \n          if (pipe == null) {\n            pipe = $gvars.stderr;\n          };\n          self.$memoize_logger();\n          return (self.logger = ($truthy($a = self.logger) ? $a : self.logger_class.$new(pipe)));\n        }, $logger$14.$$arity = -1);\n        \n        Opal.def(self, '$logger=', $logger$eq$15 = function(new_logger) {\n          var $a, self = this;\n          if (self.logger_class == null) self.logger_class = nil;\n          if ($gvars.stderr == null) $gvars.stderr = nil;\n\n          return (self.logger = ($truthy($a = new_logger) ? $a : self.logger_class.$new($gvars.stderr)))\n        }, $logger$eq$15.$$arity = 1);\n        self.$private();\n        return (Opal.def(self, '$memoize_logger', $memoize_logger$16 = function $$memoize_logger() {\n          var self = this;\n\n          return (function(self, $parent_nesting) {\n            var $nesting = [self].concat($parent_nesting);\n\n            \n            Opal.alias(self, \"logger\", \"logger\");\n            return self.$attr_reader(\"logger\");\n          })(Opal.get_singleton_class(self), $nesting)\n        }, $memoize_logger$16.$$arity = 0), nil) && 'memoize_logger';\n      })(Opal.get_singleton_class(self), $nesting);\n    })($nesting[0], $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Logging');\n\n      var $nesting = [self].concat($parent_nesting), $Logging_included$17, $Logging_logger$18, $Logging_message_with_context$19;\n\n      \n      Opal.defs(self, '$included', $Logging_included$17 = function $$included(into) {\n        var self = this;\n\n        return into.$extend($$($nesting, 'Logging'))\n      }, $Logging_included$17.$$arity = 1);\n      self.$private_class_method(\"included\");\n      \n      Opal.def(self, '$logger', $Logging_logger$18 = function $$logger() {\n        var self = this;\n\n        return $$($nesting, 'LoggerManager').$logger()\n      }, $Logging_logger$18.$$arity = 0);\n      \n      Opal.def(self, '$message_with_context', $Logging_message_with_context$19 = function $$message_with_context(text, context) {\n        var self = this;\n\n        \n        \n        if (context == null) {\n          context = $hash2([], {});\n        };\n        return $hash2([\"text\"], {\"text\": text}).$merge(context).$extend($$$($$($nesting, 'Logger'), 'AutoFormattingMessage'));\n      }, $Logging_message_with_context$19.$$arity = -2);\n    })($nesting[0], $nesting);\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/rx\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash;\n\n  Opal.add_stubs(['$==', '$join', '$to_a', '$new', '$empty?', '$escape', '$[]=', '$-']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $Asciidoctor$1, $Asciidoctor$2;\n\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Rx');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      nil\n    })($nesting[0], $nesting);\n    Opal.const_set($nesting[0], 'AuthorInfoLineRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-'.]*)(?: +(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-'.]*))?(?: +(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-'.]*))?(?: +<([^>]+)>)?$\"));\n    Opal.const_set($nesting[0], 'AuthorDelimiterRx', /;(?: |$)/);\n    Opal.const_set($nesting[0], 'RevisionInfoLineRx', new RegExp(\"\" + \"^(?:[^\\\\d{]*(\" + ($$($nesting, 'CC_ANY')) + \"*?),)? *(?!:)(\" + ($$($nesting, 'CC_ANY')) + \"*?)(?: *(?!^),?: *(\" + ($$($nesting, 'CC_ANY')) + \"*))?$\"));\n    Opal.const_set($nesting[0], 'ManpageTitleVolnumRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"+?) *\\\\( *(\" + ($$($nesting, 'CC_ANY')) + \"+?) *\\\\)$\"));\n    Opal.const_set($nesting[0], 'ManpageNamePurposeRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"+?) +- +(\" + ($$($nesting, 'CC_ANY')) + \"+)$\"));\n    Opal.const_set($nesting[0], 'ConditionalDirectiveRx', new RegExp(\"\" + \"^(\\\\\\\\)?(ifdef|ifndef|ifeval|endif)::(\\\\S*?(?:([,+])\\\\S*?)?)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'EvalExpressionRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"+?) *([=!><]=|[><]) *(\" + ($$($nesting, 'CC_ANY')) + \"+)$\"));\n    Opal.const_set($nesting[0], 'IncludeDirectiveRx', new RegExp(\"\" + \"^(\\\\\\\\)?include::([^\\\\[][^\\\\[]*)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'TagDirectiveRx', /\\b(?:tag|(e)nd)::(\\S+?)\\[\\](?=$|[ \\r])/m);\n    Opal.const_set($nesting[0], 'AttributeEntryRx', new RegExp(\"\" + \"^:(!?\" + ($$($nesting, 'CG_WORD')) + \"[^:]*):(?:[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*))?$\"));\n    Opal.const_set($nesting[0], 'InvalidAttributeNameCharsRx', new RegExp(\"\" + \"[^\" + ($$($nesting, 'CC_WORD')) + \"-]\"));\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      Opal.const_set($nesting[0], 'AttributeEntryPassMacroRx', new RegExp(\"\" + \"^pass:([a-z]+(?:,[a-z-]+)*)?\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*)\\\\]$\"))\n    } else {\n      nil\n    };\n    Opal.const_set($nesting[0], 'AttributeReferenceRx', new RegExp(\"\" + \"(\\\\\\\\)?\\\\{(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"-]*|(set|counter2?):\" + ($$($nesting, 'CC_ANY')) + \"+?)(\\\\\\\\)?\\\\}\"));\n    Opal.const_set($nesting[0], 'BlockAnchorRx', new RegExp(\"\" + \"^\\\\[\\\\[(?:|([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+))?)\\\\]\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockAttributeListRx', new RegExp(\"\" + \"^\\\\[(|[\" + ($$($nesting, 'CC_WORD')) + \".#%{,\\\"']\" + ($$($nesting, 'CC_ANY')) + \"*)\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockAttributeLineRx', new RegExp(\"\" + \"^\\\\[(?:|[\" + ($$($nesting, 'CC_WORD')) + \".#%{,\\\"']\" + ($$($nesting, 'CC_ANY')) + \"*|\\\\[(?:|[\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*(?:, *\" + ($$($nesting, 'CC_ANY')) + \"+)?)\\\\])\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockTitleRx', new RegExp(\"\" + \"^\\\\.(\\\\.?[^ \\\\t.]\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'AdmonitionParagraphRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'ADMONITION_STYLES').$to_a().$join(\"|\")) + \"):[ \\\\t]+\"));\n    Opal.const_set($nesting[0], 'LiteralParagraphRx', new RegExp(\"\" + \"^([ \\\\t]+\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'AtxSectionTitleRx', new RegExp(\"\" + \"^(=={0,5})[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"+?)(?:[ \\\\t]+\\\\1)?$\"));\n    Opal.const_set($nesting[0], 'ExtAtxSectionTitleRx', new RegExp(\"\" + \"^(=={0,5}|#\\\\\\#{0,5})[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"+?)(?:[ \\\\t]+\\\\1)?$\"));\n    Opal.const_set($nesting[0], 'SetextSectionTitleRx', new RegExp(\"\" + \"^((?!\\\\.)\" + ($$($nesting, 'CC_ANY')) + \"*?\" + ($$($nesting, 'CG_ALNUM')) + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'InlineSectionAnchorRx', new RegExp(\"\" + \" (\\\\\\\\)?\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+))?\\\\]\\\\]$\"));\n    Opal.const_set($nesting[0], 'InvalidSectionIdCharsRx', new RegExp(\"\" + \"<[^>]+>|&(?:[a-z][a-z]+\\\\d{0,2}|#\\\\d\\\\d\\\\d{0,4}|#x[\\\\da-f][\\\\da-f][\\\\da-f]{0,3});|[^ \" + ($$($nesting, 'CC_WORD')) + \"\\\\-.]+?\"));\n    Opal.const_set($nesting[0], 'SectionLevelStyleRx', /^sect\\d$/);\n    Opal.const_set($nesting[0], 'AnyListRx', new RegExp(\"\" + \"^(?:[ \\\\t]*(?:-|\\\\*\\\\**|\\\\.\\\\.*|\\\\u2022|\\\\d+\\\\.|[a-zA-Z]\\\\.|[IVXivx]+\\\\))[ \\\\t]|(?!//[^/])[ \\\\t]*[^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?(?::::{0,2}|;;)(?:$|[ \\\\t])|<(?:\\\\d+|\\\\.)>[ \\\\t])\"));\n    Opal.const_set($nesting[0], 'UnorderedListRx', new RegExp(\"\" + \"^[ \\\\t]*(-|\\\\*\\\\**|\\\\u2022)[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'OrderedListRx', new RegExp(\"\" + \"^[ \\\\t]*(\\\\.\\\\.*|\\\\d+\\\\.|[a-zA-Z]\\\\.|[IVXivx]+\\\\))[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'OrderedListMarkerRxMap', $hash2([\"arabic\", \"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"], {\"arabic\": /\\d+\\./, \"loweralpha\": /[a-z]\\./, \"lowerroman\": /[ivx]+\\)/, \"upperalpha\": /[A-Z]\\./, \"upperroman\": /[IVX]+\\)/}));\n    Opal.const_set($nesting[0], 'DescriptionListRx', new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?)(:::{0,2}|;;)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"));\n    Opal.const_set($nesting[0], 'DescriptionListSiblingRx', $hash2([\"::\", \":::\", \"::::\", \";;\"], {\"::\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?[^:]|[^ \\\\t:])(::)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"), \":::\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?[^:]|[^ \\\\t:])(:::)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"), \"::::\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?[^:]|[^ \\\\t:])(::::)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"), \";;\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?)(;;)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\")}));\n    Opal.const_set($nesting[0], 'CalloutListRx', new RegExp(\"\" + \"^<(\\\\d+|\\\\.)>[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'CalloutExtractRx', /((?:\\/\\/|#|--|;;) ?)?(\\\\)?<!?(|--)(\\d+|\\.)\\3>(?=(?: ?\\\\?<!?\\3(?:\\d+|\\.)\\3>)*$)/);\n    Opal.const_set($nesting[0], 'CalloutExtractRxt', \"(\\\\\\\\)?<()(\\\\d+|\\\\.)>(?=(?: ?\\\\\\\\?<(?:\\\\d+|\\\\.)>)*$)\");\n    Opal.const_set($nesting[0], 'CalloutExtractRxMap', $send($$$('::', 'Hash'), 'new', [], ($Asciidoctor$1 = function(h, k){var self = $Asciidoctor$1.$$s || this, $writer = nil;\n\n    \n      \n      if (h == null) {\n        h = nil;\n      };\n      \n      if (k == null) {\n        k = nil;\n      };\n      $writer = [k, new RegExp(\"\" + \"(\" + ((function() {if ($truthy(k['$empty?']())) {\n        return \"\"\n      } else {\n        return \"\" + ($$$('::', 'Regexp').$escape(k)) + \" ?\"\n      }; return nil; })()) + \")?\" + ($$($nesting, 'CalloutExtractRxt')))];\n      $send(h, '[]=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];}, $Asciidoctor$1.$$s = self, $Asciidoctor$1.$$arity = 2, $Asciidoctor$1)));\n    Opal.const_set($nesting[0], 'CalloutScanRx', new RegExp(\"\" + \"\\\\\\\\?<!?(|--)(\\\\d+|\\\\.)\\\\1>(?=(?: ?\\\\\\\\?<!?\\\\1(?:\\\\d+|\\\\.)\\\\1>)*\" + ($$($nesting, 'CC_EOL')) + \")\"));\n    Opal.const_set($nesting[0], 'CalloutSourceRx', new RegExp(\"\" + \"((?://|#|--|;;) ?)?(\\\\\\\\)?&lt;!?(|--)(\\\\d+|\\\\.)\\\\3&gt;(?=(?: ?\\\\\\\\?&lt;!?\\\\3(?:\\\\d+|\\\\.)\\\\3&gt;)*\" + ($$($nesting, 'CC_EOL')) + \")\"));\n    Opal.const_set($nesting[0], 'CalloutSourceRxt', \"\" + \"(\\\\\\\\)?&lt;()(\\\\d+|\\\\.)&gt;(?=(?: ?\\\\\\\\?&lt;(?:\\\\d+|\\\\.)&gt;)*\" + ($$($nesting, 'CC_EOL')) + \")\");\n    Opal.const_set($nesting[0], 'CalloutSourceRxMap', $send($$$('::', 'Hash'), 'new', [], ($Asciidoctor$2 = function(h, k){var self = $Asciidoctor$2.$$s || this, $writer = nil;\n\n    \n      \n      if (h == null) {\n        h = nil;\n      };\n      \n      if (k == null) {\n        k = nil;\n      };\n      $writer = [k, new RegExp(\"\" + \"(\" + ((function() {if ($truthy(k['$empty?']())) {\n        return \"\"\n      } else {\n        return \"\" + ($$$('::', 'Regexp').$escape(k)) + \" ?\"\n      }; return nil; })()) + \")?\" + ($$($nesting, 'CalloutSourceRxt')))];\n      $send(h, '[]=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];}, $Asciidoctor$2.$$s = self, $Asciidoctor$2.$$arity = 2, $Asciidoctor$2)));\n    Opal.const_set($nesting[0], 'ListRxMap', $hash2([\"ulist\", \"olist\", \"dlist\", \"colist\"], {\"ulist\": $$($nesting, 'UnorderedListRx'), \"olist\": $$($nesting, 'OrderedListRx'), \"dlist\": $$($nesting, 'DescriptionListRx'), \"colist\": $$($nesting, 'CalloutListRx')}));\n    Opal.const_set($nesting[0], 'ColumnSpecRx', /^(?:(\\d+)\\*)?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?(\\d+%?|~)?([a-z])?$/);\n    Opal.const_set($nesting[0], 'CellSpecStartRx', /^[ \\t]*(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$/);\n    Opal.const_set($nesting[0], 'CellSpecEndRx', /[ \\t]+(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$/);\n    Opal.const_set($nesting[0], 'CustomBlockMacroRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"-]*)::(|\\\\S|\\\\S\" + ($$($nesting, 'CC_ANY')) + \"*?\\\\S)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockMediaMacroRx', new RegExp(\"\" + \"^(image|video|audio)::(\\\\S|\\\\S\" + ($$($nesting, 'CC_ANY')) + \"*?\\\\S)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockTocMacroRx', new RegExp(\"\" + \"^toc::\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'InlineAnchorRx', new RegExp(\"\" + \"(\\\\\\\\)?(?:\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]|anchor:([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)\\\\[(?:\\\\]|(\" + ($$($nesting, 'CC_ANY')) + \"*?[^\\\\\\\\])\\\\]))\"));\n    Opal.const_set($nesting[0], 'InlineAnchorScanRx', new RegExp(\"\" + \"(?:^|[^\\\\\\\\\\\\[])\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]|(?:^|[^\\\\\\\\])anchor:([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)\\\\[(?:\\\\]|(\" + ($$($nesting, 'CC_ANY')) + \"*?[^\\\\\\\\])\\\\])\"));\n    Opal.const_set($nesting[0], 'LeadingInlineAnchorRx', new RegExp(\"\" + \"^\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]\"));\n    Opal.const_set($nesting[0], 'InlineBiblioAnchorRx', new RegExp(\"\" + \"^\\\\[\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]\\\\]\"));\n    Opal.const_set($nesting[0], 'InlineEmailRx', new RegExp(\"\" + \"([\\\\\\\\>:/])?\" + ($$($nesting, 'CG_WORD')) + \"(?:&amp;|[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-.%+])*@\" + ($$($nesting, 'CG_ALNUM')) + \"[\" + ($$($nesting, 'CC_ALNUM')) + \"_\\\\-.]*\\\\.[a-zA-Z]{2,5}\\\\b\"));\n    Opal.const_set($nesting[0], 'InlineFootnoteMacroRx', new RegExp(\"\" + \"\\\\\\\\?footnote(?:(ref):|:([\" + ($$($nesting, 'CC_WORD')) + \"-]+)?)\\\\[(?:|(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\]))\\\\](?!</a>)\", 'm'));\n    Opal.const_set($nesting[0], 'InlineImageMacroRx', new RegExp(\"\" + \"\\\\\\\\?i(?:mage|con):([^:\\\\s\\\\[](?:[^\\\\n\\\\[]*[^\\\\s\\\\[])?)\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineIndextermMacroRx', new RegExp(\"\" + \"\\\\\\\\?(?:(indexterm2?):\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]|\\\\(\\\\((\" + ($$($nesting, 'CC_ALL')) + \"+?)\\\\)\\\\)(?!\\\\)))\", 'm'));\n    Opal.const_set($nesting[0], 'InlineKbdBtnMacroRx', new RegExp(\"\" + \"(\\\\\\\\)?(kbd|btn):\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineLinkRx', new RegExp(\"\" + \"(^|link:|\" + ($$($nesting, 'CG_BLANK')) + \"|&lt;|[>\\\\(\\\\)\\\\[\\\\];\\\"'])(\\\\\\\\?(?:https?|file|ftp|irc)://[^\\\\s\\\\[\\\\]<]*([^\\\\s.,\\\\[\\\\]<]))(?:\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\])?\", 'm'));\n    Opal.const_set($nesting[0], 'InlineLinkMacroRx', new RegExp(\"\" + \"\\\\\\\\?(?:link|(mailto)):(|[^:\\\\s\\\\[][^\\\\s\\\\[]*)\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'MacroNameRx', new RegExp(\"\" + \"^\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"-]*$\"));\n    Opal.const_set($nesting[0], 'InlineStemMacroRx', new RegExp(\"\" + \"\\\\\\\\?(stem|(?:latex|ascii)math):([a-z]+(?:,[a-z-]+)*)?\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineMenuMacroRx', new RegExp(\"\" + \"\\\\\\\\?menu:(\" + ($$($nesting, 'CG_WORD')) + \"|[\" + ($$($nesting, 'CC_WORD')) + \"&][^\\\\n\\\\[]*[^\\\\s\\\\[])\\\\[ *(?:|(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\]))\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineMenuRx', new RegExp(\"\" + \"\\\\\\\\?\\\"([\" + ($$($nesting, 'CC_WORD')) + \"&][^\\\"]*?[ \\\\n]+&gt;[ \\\\n]+[^\\\"]*)\\\"\"));\n    Opal.const_set($nesting[0], 'InlinePassRx', $hash(false, [\"+\", \"`\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:])(?:\\\\[([^\\\\]]+)\\\\])?(\\\\\\\\?(\\\\+|`)(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\4)(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], true, [\"`\", nil, new RegExp(\"\" + \"(^|[^`\" + ($$($nesting, 'CC_WORD')) + \"])(?:\\\\[([^\\\\]]+)\\\\])?(\\\\\\\\?(`)([^`\\\\s]|[^`\\\\s]\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\4)(?![`\" + ($$($nesting, 'CC_WORD')) + \"])\", 'm')]));\n    Opal.const_set($nesting[0], 'SinglePlusInlinePassRx', new RegExp(\"\" + \"^(\\\\\\\\)?\\\\+(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\+$\", 'm'));\n    Opal.const_set($nesting[0], 'InlinePassMacroRx', new RegExp(\"\" + \"(?:(?:(\\\\\\\\?)\\\\[([^\\\\]]+)\\\\])?(\\\\\\\\{0,2})(\\\\+\\\\+\\\\+?|\\\\$\\\\$)(\" + ($$($nesting, 'CC_ALL')) + \"*?)\\\\4|(\\\\\\\\?)pass:([a-z]+(?:,[a-z-]+)*)?\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\])\", 'm'));\n    Opal.const_set($nesting[0], 'InlineXrefMacroRx', new RegExp(\"\" + \"\\\\\\\\?(?:&lt;&lt;([\" + ($$($nesting, 'CC_WORD')) + \"#/.:{]\" + ($$($nesting, 'CC_ALL')) + \"*?)&gt;&gt;|xref:([\" + ($$($nesting, 'CC_WORD')) + \"#/.:{]\" + ($$($nesting, 'CC_ALL')) + \"*?)\\\\[(?:\\\\]|(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]))\", 'm'));\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      Opal.const_set($nesting[0], 'HardLineBreakRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"*) \\\\+$\", 'm'))\n    } else {\n      nil\n    };\n    Opal.const_set($nesting[0], 'MarkdownThematicBreakRx', /^ {0,3}([-*_])( *)\\1\\2\\1$/);\n    Opal.const_set($nesting[0], 'ExtLayoutBreakRx', /^(?:'{3,}|<{3,}|([-*_])( *)\\1\\2\\1)$/);\n    Opal.const_set($nesting[0], 'BlankLineRx', /\\n{2,}/);\n    Opal.const_set($nesting[0], 'EscapedSpaceRx', /\\\\([ \\t\\n])/);\n    Opal.const_set($nesting[0], 'ReplaceableTextRx', /[&']|--|\\.\\.\\.|\\([CRT]M?\\)/);\n    Opal.const_set($nesting[0], 'SpaceDelimiterRx', /([^\\\\])[ \\t\\n]+/);\n    Opal.const_set($nesting[0], 'SubModifierSniffRx', /[+-]/);\n    Opal.const_set($nesting[0], 'TrailingDigitsRx', /\\d+$/);\n    Opal.const_set($nesting[0], 'UriSniffRx', new RegExp(\"\" + \"^\" + ($$($nesting, 'CG_ALPHA')) + \"[\" + ($$($nesting, 'CC_ALNUM')) + \".+-]+:/{0,2}\"));\n    Opal.const_set($nesting[0], 'XmlSanitizeRx', /<[^>]+>/);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/substitutors\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $hash = Opal.hash, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$freeze', '$+', '$keys', '$empty?', '$!', '$===', '$[]', '$join', '$include?', '$extract_passthroughs', '$each', '$sub_specialchars', '$sub_quotes', '$sub_attributes', '$sub_replacements', '$sub_macros', '$highlight_source', '$sub_callouts', '$sub_post_replacements', '$warn', '$logger', '$restore_passthroughs', '$clear', '$split', '$apply_subs', '$==', '$gsub', '$match?', '$compat_mode', '$convert_quoted_text', '$attributes', '$shift', '$store_attribute', '$!=', '$attribute_undefined', '$counter', '$key?', '$downcase', '$attribute_missing', '$info', '$squeeze', '$delete', '$reject', '$start_with?', '$do_replacement', '$extensions', '$inline_macros?', '$inline_macros', '$regexp', '$instance', '$slice', '$length', '$names', '$config', '$merge', '$[]=', '$-', '$normalize_text', '$parse_attributes', '$process_method', '$expand_subs', '$text', '$text=', '$convert', '$class', '$strip', '$>', '$index', '$min', '$compact', '$end_with?', '$map', '$chop', '$new', '$pop', '$rstrip', '$register', '$tr', '$basename', '$parse', '$lstrip', '$split_simple_csv', '$partition', '$extract_attributes_from_text', '$sub', '$encode_uri_component', '$style', '$extname?', '$rindex', '$info?', '$catalog', '$fetch', '$outfilesuffix', '$natural_xrefs', '$resolve_id', '$find', '$footnotes', '$id', '$<', '$size', '$<<', '$attr?', '$attr', '$to_s', '$read_next_id', '$callouts', '$syntax_highlighter', '$highlight?', '$sub_source', '$extract_callouts', '$name', '$to_sym', '$to_i', '$resolve_lines_to_highlight', '$highlight', '$nil_or_empty?', '$restore_callouts', '$count', '$to_a', '$|', '$sort', '$*', '$parse_quoted_text_attributes', '$resolve_pass_subs', '$extract_inner_passthrough', '$basebackend?', '$error', '$chr', '$drop', '$&', '$resolve_subs', '$resolve_block_subs', '$parse_into', '$private', '$=~', '$shorthand_property_syntax', '$each_char']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Substitutors');\n\n      var $nesting = [self].concat($parent_nesting), $Substitutors_apply_subs$1, $Substitutors_apply_normal_subs$3, $Substitutors_apply_header_subs$4, $Substitutors_apply_reftext_subs$5, $Substitutors_sub_specialchars$6, $Substitutors_sub_quotes$7, $Substitutors_sub_attributes$10, $Substitutors_sub_replacements$16, $Substitutors_sub_macros$19, $Substitutors_sub_post_replacements$42, $Substitutors_sub_source$45, $Substitutors_sub_callouts$46, $Substitutors_highlight_source$48, $Substitutors_resolve_lines_to_highlight$49, $Substitutors_extract_passthroughs$52, $Substitutors_restore_passthroughs$56, $Substitutors_resolve_subs$58, $Substitutors_resolve_block_subs$60, $Substitutors_resolve_pass_subs$61, $Substitutors_expand_subs$62, $Substitutors_commit_subs$64, $Substitutors_parse_attributes$65, $Substitutors_extract_attributes_from_text$66, $Substitutors_extract_callouts$67, $Substitutors_restore_callouts$70, $Substitutors_extract_inner_passthrough$73, $Substitutors_convert_quoted_text$74, $Substitutors_do_replacement$75, $Substitutors_parse_quoted_text_attributes$76, $Substitutors_normalize_text$77, $Substitutors_split_simple_csv$78;\n\n      \n      Opal.const_set($nesting[0], 'SpecialCharsRx', /[<&>]/);\n      Opal.const_set($nesting[0], 'SpecialCharsTr', $hash2([\">\", \"<\", \"&\"], {\">\": \"&gt;\", \"<\": \"&lt;\", \"&\": \"&amp;\"}));\n      Opal.const_set($nesting[0], 'QuotedTextSniffRx', $hash(false, /[*_`#^~]/, true, /[*'_+#^~]/));\n      Opal.const_set($nesting[0], 'BASIC_SUBS', [\"specialcharacters\"]).$freeze();\n      Opal.const_set($nesting[0], 'HEADER_SUBS', [\"specialcharacters\", \"attributes\"]).$freeze();\n      Opal.const_set($nesting[0], 'NO_SUBS', []).$freeze();\n      Opal.const_set($nesting[0], 'NORMAL_SUBS', [\"specialcharacters\", \"quotes\", \"attributes\", \"replacements\", \"macros\", \"post_replacements\"]).$freeze();\n      Opal.const_set($nesting[0], 'REFTEXT_SUBS', [\"specialcharacters\", \"quotes\", \"replacements\"]).$freeze();\n      Opal.const_set($nesting[0], 'VERBATIM_SUBS', [\"specialcharacters\", \"callouts\"]).$freeze();\n      Opal.const_set($nesting[0], 'SUB_GROUPS', $hash2([\"none\", \"normal\", \"verbatim\", \"specialchars\"], {\"none\": $$($nesting, 'NO_SUBS'), \"normal\": $$($nesting, 'NORMAL_SUBS'), \"verbatim\": $$($nesting, 'VERBATIM_SUBS'), \"specialchars\": $$($nesting, 'BASIC_SUBS')}));\n      Opal.const_set($nesting[0], 'SUB_HINTS', $hash2([\"a\", \"m\", \"n\", \"p\", \"q\", \"r\", \"c\", \"v\"], {\"a\": \"attributes\", \"m\": \"macros\", \"n\": \"normal\", \"p\": \"post_replacements\", \"q\": \"quotes\", \"r\": \"replacements\", \"c\": \"specialcharacters\", \"v\": \"verbatim\"}));\n      Opal.const_set($nesting[0], 'SUB_OPTIONS', $hash2([\"block\", \"inline\"], {\"block\": $rb_plus($rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS')), [\"callouts\"]), \"inline\": $rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS'))}));\n      Opal.const_set($nesting[0], 'CAN', \"\\u0018\");\n      Opal.const_set($nesting[0], 'DEL', \"\\u007F\");\n      Opal.const_set($nesting[0], 'PASS_START', \"\\u0096\");\n      Opal.const_set($nesting[0], 'PASS_END', \"\\u0097\");\n      Opal.const_set($nesting[0], 'PassSlotRx', new RegExp(\"\" + ($$($nesting, 'PASS_START')) + \"(\\\\d+)\" + ($$($nesting, 'PASS_END'))));\n      Opal.const_set($nesting[0], 'HighlightedPassSlotRx', new RegExp(\"\" + \"<span\\\\b[^>]*>\" + ($$($nesting, 'PASS_START')) + \"</span>[^\\\\d]*(\\\\d+)[^\\\\d]*<span\\\\b[^>]*>\" + ($$($nesting, 'PASS_END')) + \"</span>\"));\n      Opal.const_set($nesting[0], 'RS', \"\\\\\");\n      Opal.const_set($nesting[0], 'R_SB', \"]\");\n      Opal.const_set($nesting[0], 'ESC_R_SB', \"\\\\]\");\n      Opal.const_set($nesting[0], 'PLUS', \"+\");\n      \n      Opal.def(self, '$apply_subs', $Substitutors_apply_subs$1 = function $$apply_subs(text, subs) {\n        var $a, $$2, self = this, is_multiline = nil, passthrus = nil, clear_passthrus = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n        if (self.passthroughs_locked == null) self.passthroughs_locked = nil;\n\n        \n        \n        if (subs == null) {\n          subs = $$($nesting, 'NORMAL_SUBS');\n        };\n        if ($truthy(($truthy($a = text['$empty?']()) ? $a : subs['$!']()))) {\n          return text};\n        if ($truthy((is_multiline = $$$('::', 'Array')['$==='](text)))) {\n          text = (function() {if ($truthy(text['$[]'](1))) {\n            \n            return text.$join($$($nesting, 'LF'));\n          } else {\n            return text['$[]'](0)\n          }; return nil; })()};\n        if ($truthy(subs['$include?'](\"macros\"))) {\n          \n          text = self.$extract_passthroughs(text);\n          if ($truthy(self.passthroughs['$empty?']())) {\n          } else {\n            \n            passthrus = self.passthroughs;\n            self.passthroughs_locked = ($truthy($a = self.passthroughs_locked) ? $a : (clear_passthrus = true));\n          };};\n        $send(subs, 'each', [], ($$2 = function(type){var self = $$2.$$s || this, $case = nil;\n\n        \n          \n          if (type == null) {\n            type = nil;\n          };\n          return (function() {$case = type;\n          if (\"specialcharacters\"['$===']($case)) {return (text = self.$sub_specialchars(text))}\n          else if (\"quotes\"['$===']($case)) {return (text = self.$sub_quotes(text))}\n          else if (\"attributes\"['$===']($case)) {if ($truthy(text['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n            return (text = self.$sub_attributes(text))\n          } else {\n            return nil\n          }}\n          else if (\"replacements\"['$===']($case)) {return (text = self.$sub_replacements(text))}\n          else if (\"macros\"['$===']($case)) {return (text = self.$sub_macros(text))}\n          else if (\"highlight\"['$===']($case)) {return (text = self.$highlight_source(text, subs['$include?'](\"callouts\")))}\n          else if (\"callouts\"['$===']($case)) {if ($truthy(subs['$include?'](\"highlight\"))) {\n            return nil\n          } else {\n            return (text = self.$sub_callouts(text))\n          }}\n          else if (\"post_replacements\"['$===']($case)) {return (text = self.$sub_post_replacements(text))}\n          else {return self.$logger().$warn(\"\" + \"unknown substitution type \" + (type))}})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n        if ($truthy(passthrus)) {\n          \n          text = self.$restore_passthroughs(text);\n          if ($truthy(clear_passthrus)) {\n            \n            passthrus.$clear();\n            self.passthroughs_locked = nil;};};\n        if ($truthy(is_multiline)) {\n          \n          return text.$split($$($nesting, 'LF'), -1);\n        } else {\n          return text\n        };\n      }, $Substitutors_apply_subs$1.$$arity = -2);\n      \n      Opal.def(self, '$apply_normal_subs', $Substitutors_apply_normal_subs$3 = function $$apply_normal_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$($nesting, 'NORMAL_SUBS'))\n      }, $Substitutors_apply_normal_subs$3.$$arity = 1);\n      \n      Opal.def(self, '$apply_header_subs', $Substitutors_apply_header_subs$4 = function $$apply_header_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$($nesting, 'HEADER_SUBS'))\n      }, $Substitutors_apply_header_subs$4.$$arity = 1);\n      Opal.alias(self, \"apply_title_subs\", \"apply_subs\");\n      \n      Opal.def(self, '$apply_reftext_subs', $Substitutors_apply_reftext_subs$5 = function $$apply_reftext_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$($nesting, 'REFTEXT_SUBS'))\n      }, $Substitutors_apply_reftext_subs$5.$$arity = 1);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        \n        Opal.def(self, '$sub_specialchars', $Substitutors_sub_specialchars$6 = function $$sub_specialchars(text) {\n          var $a, $b, self = this;\n\n          if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\">\")) ? $b : text['$include?'](\"&\"))) ? $a : text['$include?'](\"<\")))) {\n            \n            return text.$gsub($$($nesting, 'SpecialCharsRx'), $$($nesting, 'SpecialCharsTr'));\n          } else {\n            return text\n          }\n        }, $Substitutors_sub_specialchars$6.$$arity = 1)\n      } else {\n        nil\n      };\n      Opal.alias(self, \"sub_specialcharacters\", \"sub_specialchars\");\n      \n      Opal.def(self, '$sub_quotes', $Substitutors_sub_quotes$7 = function $$sub_quotes(text) {\n        var $$8, self = this, compat = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        if ($truthy($$($nesting, 'QuotedTextSniffRx')['$[]']((compat = self.document.$compat_mode()))['$match?'](text))) {\n          $send($$($nesting, 'QUOTE_SUBS')['$[]'](compat), 'each', [], ($$8 = function(type, scope, pattern){var self = $$8.$$s || this, $$9;\n\n          \n            \n            if (type == null) {\n              type = nil;\n            };\n            \n            if (scope == null) {\n              scope = nil;\n            };\n            \n            if (pattern == null) {\n              pattern = nil;\n            };\n            return (text = $send(text, 'gsub', [pattern], ($$9 = function(){var self = $$9.$$s || this;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n            return self.$convert_quoted_text($gvars[\"~\"], type, scope)}, $$9.$$s = self, $$9.$$arity = 0, $$9)));}, $$8.$$s = self, $$8.$$arity = 3, $$8))};\n        return text;\n      }, $Substitutors_sub_quotes$7.$$arity = 1);\n      \n      Opal.def(self, '$sub_attributes', $Substitutors_sub_attributes$10 = function $$sub_attributes(text, opts) {\n        var $$11, $$13, $$14, $$15, self = this, doc_attrs = nil, drop = nil, drop_line = nil, drop_line_severity = nil, drop_empty_line = nil, attribute_undefined = nil, attribute_missing = nil, lines = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        doc_attrs = self.document.$attributes();\n        drop = (drop_line = (drop_line_severity = (drop_empty_line = (attribute_undefined = (attribute_missing = nil)))));\n        text = $send(text, 'gsub', [$$($nesting, 'AttributeReferenceRx')], ($$11 = function(){var self = $$11.$$s || this, $a, $b, $c, $$12, $case = nil, args = nil, _ = nil, value = nil, key = nil;\n          if (self.document == null) self.document = nil;\n\n        if ($truthy(($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$==']($$($nesting, 'RS'))) ? $a : (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))['$==']($$($nesting, 'RS'))))) {\n            return \"\" + \"{\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + \"}\"\n          } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) {\n            return (function() {$case = (args = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$split(\":\", 3)).$shift();\n            if (\"set\"['$===']($case)) {\n            $b = $$($nesting, 'Parser').$store_attribute(args['$[]'](0), ($truthy($c = args['$[]'](1)) ? $c : \"\"), self.document), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;\n            if ($truthy(($truthy($a = value) ? $a : (attribute_undefined = ($truthy($b = attribute_undefined) ? $b : ($truthy($c = doc_attrs['$[]'](\"attribute-undefined\")) ? $c : $$($nesting, 'Compliance').$attribute_undefined())))['$!='](\"drop-line\")))) {\n              return (drop = (drop_empty_line = $$($nesting, 'DEL')))\n            } else {\n              return (drop = (drop_line = $$($nesting, 'CAN')))\n            };}\n            else if (\"counter2\"['$===']($case)) {\n            $send(self.document, 'counter', Opal.to_a(args));\n            return (drop = (drop_empty_line = $$($nesting, 'DEL')));}\n            else {return $send(self.document, 'counter', Opal.to_a(args))}})()\n          } else if ($truthy(doc_attrs['$key?']((key = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$downcase())))) {\n            return doc_attrs['$[]'](key)\n          } else if ($truthy((value = $$($nesting, 'INTRINSIC_ATTRIBUTES')['$[]'](key)))) {\n            return value\n          } else {\n            return (function() {$case = (attribute_missing = ($truthy($a = attribute_missing) ? $a : ($truthy($b = ($truthy($c = opts['$[]'](\"attribute_missing\")) ? $c : doc_attrs['$[]'](\"attribute-missing\"))) ? $b : $$($nesting, 'Compliance').$attribute_missing())));\n            if (\"drop\"['$===']($case)) {return (drop = (drop_empty_line = $$($nesting, 'DEL')))}\n            else if (\"drop-line\"['$===']($case)) {\n            if ((drop_line_severity = ($truthy($a = drop_line_severity) ? $a : ($truthy($b = opts['$[]'](\"drop_line_severity\")) ? $b : \"info\")))['$=='](\"info\")) {\n              $send(self.$logger(), 'info', [], ($$12 = function(){var self = $$12.$$s || this;\n\n              return \"\" + \"dropping line containing reference to missing attribute: \" + (key)}, $$12.$$s = self, $$12.$$arity = 0, $$12))};\n            return (drop = (drop_line = $$($nesting, 'CAN')));}\n            else if (\"warn\"['$===']($case)) {\n            self.$logger().$warn(\"\" + \"skipping reference to missing attribute: \" + (key));\n            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0));}\n            else {return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))}})()\n          }}, $$11.$$s = self, $$11.$$arity = 0, $$11));\n        if ($truthy(drop)) {\n          if ($truthy(drop_empty_line)) {\n            \n            lines = text.$squeeze($$($nesting, 'DEL')).$split($$($nesting, 'LF'), -1);\n            if ($truthy(drop_line)) {\n              return $send(lines, 'reject', [], ($$13 = function(line){var self = $$13.$$s || this, $a, $b, $c;\n\n              \n                \n                if (line == null) {\n                  line = nil;\n                };\n                return ($truthy($a = ($truthy($b = ($truthy($c = line['$==']($$($nesting, 'DEL'))) ? $c : line['$==']($$($nesting, 'CAN')))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, $$13.$$s = self, $$13.$$arity = 1, $$13)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))\n            } else {\n              return $send(lines, 'reject', [], ($$14 = function(line){var self = $$14.$$s || this;\n\n              \n                \n                if (line == null) {\n                  line = nil;\n                };\n                return line['$==']($$($nesting, 'DEL'));}, $$14.$$s = self, $$14.$$arity = 1, $$14)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))\n            };\n          } else if ($truthy(text['$include?']($$($nesting, 'LF')))) {\n            return $send(text.$split($$($nesting, 'LF'), -1), 'reject', [], ($$15 = function(line){var self = $$15.$$s || this, $a, $b;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return ($truthy($a = ($truthy($b = line['$==']($$($nesting, 'CAN'))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, $$15.$$s = self, $$15.$$arity = 1, $$15)).$join($$($nesting, 'LF'))\n          } else {\n            return \"\"\n          }\n        } else {\n          return text\n        };\n      }, $Substitutors_sub_attributes$10.$$arity = -2);\n      \n      Opal.def(self, '$sub_replacements', $Substitutors_sub_replacements$16 = function $$sub_replacements(text) {\n        var $$17, self = this;\n\n        \n        if ($truthy($$($nesting, 'ReplaceableTextRx')['$match?'](text))) {\n          $send($$($nesting, 'REPLACEMENTS'), 'each', [], ($$17 = function(pattern, replacement, restore){var self = $$17.$$s || this, $$18;\n\n          \n            \n            if (pattern == null) {\n              pattern = nil;\n            };\n            \n            if (replacement == null) {\n              replacement = nil;\n            };\n            \n            if (restore == null) {\n              restore = nil;\n            };\n            return (text = $send(text, 'gsub', [pattern], ($$18 = function(){var self = $$18.$$s || this;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n            return self.$do_replacement($gvars[\"~\"], replacement, restore)}, $$18.$$s = self, $$18.$$arity = 0, $$18)));}, $$17.$$s = self, $$17.$$arity = 3, $$17))};\n        return text;\n      }, $Substitutors_sub_replacements$16.$$arity = 1);\n      \n      Opal.def(self, '$sub_macros', $Substitutors_sub_macros$19 = function $$sub_macros(text) {\n        var $a, $$20, $b, $$23, $$26, $$28, $$30, $$31, $$34, $$35, $$36, $$37, $$38, $$39, $$40, self = this, found_square_bracket = nil, found_colon = nil, found_macroish = nil, found_macroish_short = nil, doc_attrs = nil, doc = nil, extensions = nil;\n        if (self.document == null) self.document = nil;\n        if (self.context == null) self.context = nil;\n        if (self.parent == null) self.parent = nil;\n\n        \n        found_square_bracket = text['$include?'](\"[\");\n        found_colon = text['$include?'](\":\");\n        found_macroish = ($truthy($a = found_square_bracket) ? found_colon : $a);\n        found_macroish_short = ($truthy($a = found_macroish) ? text['$include?'](\":[\") : $a);\n        doc_attrs = (doc = self.document).$attributes();\n        if ($truthy(($truthy($a = (extensions = doc.$extensions())) ? extensions['$inline_macros?']() : $a))) {\n          $send(extensions.$inline_macros(), 'each', [], ($$20 = function(extension){var self = $$20.$$s || this, $$21;\n\n          \n            \n            if (extension == null) {\n              extension = nil;\n            };\n            return (text = $send(text, 'gsub', [extension.$instance().$regexp()], ($$21 = function(){var self = $$21.$$s || this, $b, $c, $$22, match = nil, target = nil, content = nil, attributes = nil, default_attrs = nil, ext_config = nil, $writer = nil, replacement = nil, inline_subs = nil;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n            \n              if ($truthy((match = (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)))['$start_with?']($$($nesting, 'RS')))) {\n                return (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$slice(1, (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length());};\n              if ($truthy($gvars[\"~\"].$names()['$empty?']())) {\n                $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](1)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))], (target = $b[0]), (content = $b[1]), $b\n              } else {\n                $b = [(function() { try {\n                  return $gvars[\"~\"]['$[]'](\"target\")\n                } catch ($err) {\n                  if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                    try {\n                      return nil\n                    } finally { Opal.pop_exception() }\n                  } else { throw $err; }\n                }})(), (function() { try {\n                  return $gvars[\"~\"]['$[]'](\"content\")\n                } catch ($err) {\n                  if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                    try {\n                      return nil\n                    } finally { Opal.pop_exception() }\n                  } else { throw $err; }\n                }})()], (target = $b[0]), (content = $b[1]), $b\n              };\n              attributes = (function() {if ($truthy((default_attrs = (ext_config = extension.$config())['$[]'](\"default_attrs\")))) {\n                return default_attrs.$merge()\n              } else {\n                return $hash2([], {})\n              }; return nil; })();\n              if ($truthy(content)) {\n                \n                if ($truthy(content['$empty?']())) {\n                  if (ext_config['$[]'](\"content_model\")['$=='](\"attributes\")) {\n                  } else {\n                    \n                    $writer = [\"text\", content];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];\n                  }\n                } else {\n                  \n                  content = self.$normalize_text(content, true, true);\n                  if (ext_config['$[]'](\"content_model\")['$=='](\"attributes\")) {\n                    self.$parse_attributes(content, ($truthy($b = ($truthy($c = ext_config['$[]'](\"positional_attrs\")) ? $c : ext_config['$[]'](\"pos_attrs\"))) ? $b : []), $hash2([\"into\"], {\"into\": attributes}))\n                  } else {\n                    \n                    $writer = [\"text\", content];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];\n                  };\n                };\n                target = ($truthy($b = target) ? $b : (function() {if (ext_config['$[]'](\"format\")['$=='](\"short\")) {\n                  return content\n                } else {\n                  return target\n                }; return nil; })());};\n              if ($truthy($$($nesting, 'Inline')['$===']((replacement = extension.$process_method()['$[]'](self, target, attributes))))) {\n                \n                if ($truthy(($truthy($b = (inline_subs = replacement.$attributes().$delete(\"subs\"))) ? (inline_subs = self.$expand_subs(inline_subs, \"custom inline macro\")) : $b))) {\n                  \n                  $writer = [self.$apply_subs(replacement.$text(), inline_subs)];\n                  $send(replacement, 'text=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                return replacement.$convert();\n              } else if ($truthy(replacement)) {\n                \n                $send(self.$logger(), 'info', [], ($$22 = function(){var self = $$22.$$s || this;\n\n                return \"\" + \"expected substitution value for custom inline macro to be of type Inline; got \" + (replacement.$class()) + \": \" + (match)}, $$22.$$s = self, $$22.$$arity = 0, $$22));\n                return replacement;\n              } else {\n                return \"\"\n              };}, $$21.$$s = self, $$21.$$arity = 0, $$21)));}, $$20.$$s = self, $$20.$$arity = 1, $$20))};\n        if ($truthy(doc_attrs['$key?'](\"experimental\"))) {\n          \n          if ($truthy(($truthy($a = found_macroish_short) ? ($truthy($b = text['$include?'](\"kbd:\")) ? $b : text['$include?'](\"btn:\")) : $a))) {\n            text = $send(text, 'gsub', [$$($nesting, 'InlineKbdBtnMacroRx')], ($$23 = function(){var self = $$23.$$s || this, $c, $$24, $$25, keys = nil, delim_idx = nil, delim = nil, $writer = nil;\n\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length())\n              } else if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))['$=='](\"kbd\")) {\n                \n                if ($truthy((keys = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$strip())['$include?']($$($nesting, 'R_SB')))) {\n                  keys = keys.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n                if ($truthy(($truthy($c = $rb_gt(keys.$length(), 1)) ? (delim_idx = (function() {if ($truthy((delim_idx = keys.$index(\",\", 1)))) {\n                  return [delim_idx, keys.$index(\"+\", 1)].$compact().$min()\n                } else {\n                  \n                  return keys.$index(\"+\", 1);\n                }; return nil; })()) : $c))) {\n                  \n                  delim = keys.$slice(delim_idx, 1);\n                  if ($truthy(keys['$end_with?'](delim))) {\n                    \n                    keys = $send(keys.$chop().$split(delim, -1), 'map', [], ($$24 = function(key){var self = $$24.$$s || this;\n\n                    \n                      \n                      if (key == null) {\n                        key = nil;\n                      };\n                      return key.$strip();}, $$24.$$s = self, $$24.$$arity = 1, $$24));\n                    \n                    $writer = [-1, $rb_plus(keys['$[]'](-1), delim)];\n                    $send(keys, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                  } else {\n                    keys = $send(keys.$split(delim), 'map', [], ($$25 = function(key){var self = $$25.$$s || this;\n\n                    \n                      \n                      if (key == null) {\n                        key = nil;\n                      };\n                      return key.$strip();}, $$25.$$s = self, $$25.$$arity = 1, $$25))\n                  };\n                } else {\n                  keys = [keys]\n                };\n                return $$($nesting, 'Inline').$new(self, \"kbd\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"keys\"], {\"keys\": keys})})).$convert();\n              } else {\n                return $$($nesting, 'Inline').$new(self, \"button\", self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)), true, true)).$convert()\n              }}, $$23.$$s = self, $$23.$$arity = 0, $$23))};\n          if ($truthy(($truthy($a = found_macroish) ? text['$include?'](\"menu:\") : $a))) {\n            text = $send(text, 'gsub', [$$($nesting, 'InlineMenuMacroRx')], ($$26 = function(){var self = $$26.$$s || this, $c, $$27, menu = nil, items = nil, delim = nil, submenus = nil, menuitem = nil;\n\n            \n              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n              menu = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n              if ($truthy((items = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {\n                \n                if ($truthy(items['$include?']($$($nesting, 'R_SB')))) {\n                  items = items.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n                if ($truthy((delim = (function() {if ($truthy(items['$include?'](\"&gt;\"))) {\n                  return \"&gt;\"\n                } else {\n                  \n                  if ($truthy(items['$include?'](\",\"))) {\n                    return \",\"\n                  } else {\n                    return nil\n                  };\n                }; return nil; })()))) {\n                  \n                  submenus = $send(items.$split(delim), 'map', [], ($$27 = function(it){var self = $$27.$$s || this;\n\n                  \n                    \n                    if (it == null) {\n                      it = nil;\n                    };\n                    return it.$strip();}, $$27.$$s = self, $$27.$$arity = 1, $$27));\n                  menuitem = submenus.$pop();\n                } else {\n                  $c = [[], items.$rstrip()], (submenus = $c[0]), (menuitem = $c[1]), $c\n                };\n              } else {\n                $c = [[], nil], (submenus = $c[0]), (menuitem = $c[1]), $c\n              };\n              return $$($nesting, 'Inline').$new(self, \"menu\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"menu\", \"submenus\", \"menuitem\"], {\"menu\": menu, \"submenus\": submenus, \"menuitem\": menuitem})})).$convert();}, $$26.$$s = self, $$26.$$arity = 0, $$26))};\n          if ($truthy(($truthy($a = text['$include?'](\"\\\"\")) ? text['$include?'](\"&gt;\") : $a))) {\n            text = $send(text, 'gsub', [$$($nesting, 'InlineMenuRx')], ($$28 = function(){var self = $$28.$$s || this, $c, $d, $e, $$29, menu = nil, submenus = nil, menuitem = nil;\n\n            \n              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n              $d = $send((($e = $gvars['~']) === nil ? nil : $e['$[]'](1)).$split(\"&gt;\"), 'map', [], ($$29 = function(it){var self = $$29.$$s || this;\n\n              \n                \n                if (it == null) {\n                  it = nil;\n                };\n                return it.$strip();}, $$29.$$s = self, $$29.$$arity = 1, $$29)), $c = Opal.to_ary($d), (menu = ($c[0] == null ? nil : $c[0])), (submenus = $slice.call($c, 1)), $d;\n              menuitem = submenus.$pop();\n              return $$($nesting, 'Inline').$new(self, \"menu\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"menu\", \"submenus\", \"menuitem\"], {\"menu\": menu, \"submenus\": submenus, \"menuitem\": menuitem})})).$convert();}, $$28.$$s = self, $$28.$$arity = 0, $$28))};};\n        if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?'](\"image:\")) ? $b : text['$include?'](\"icon:\")) : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineImageMacroRx')], ($$30 = function(){var self = $$30.$$s || this, $c, type = nil, posattrs = nil, target = nil, attrs = nil, $writer = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n            } else if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?'](\"icon:\"))) {\n              $c = [\"icon\", [\"size\"]], (type = $c[0]), (posattrs = $c[1]), $c\n            } else {\n              $c = [\"image\", [\"alt\", \"width\", \"height\"]], (type = $c[0]), (posattrs = $c[1]), $c\n            };\n            target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n            attrs = self.$parse_attributes((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), posattrs, $hash2([\"unescape_input\"], {\"unescape_input\": true}));\n            if (type['$=='](\"icon\")) {\n            } else {\n              \n              doc.$register(\"images\", target);\n              \n              $writer = [\"imagesdir\", doc_attrs['$[]'](\"imagesdir\")];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n            };\n            ($truthy($c = attrs['$[]'](\"alt\")) ? $c : (($writer = [\"alt\", (($writer = [\"default-alt\", $$($nesting, 'Helpers').$basename(target, true).$tr(\"_-\", \" \")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            return $$($nesting, 'Inline').$new(self, \"image\", nil, $hash2([\"type\", \"target\", \"attributes\"], {\"type\": type, \"target\": target, \"attributes\": attrs})).$convert();}, $$30.$$s = self, $$30.$$arity = 0, $$30))};\n        if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\"((\")) ? text['$include?'](\"))\") : $b)) ? $a : ($truthy($b = found_macroish_short) ? text['$include?'](\"dexterm\") : $b)))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineIndextermMacroRx')], ($$31 = function(){var self = $$31.$$s || this, $c, $$32, $d, $$33, $case = nil, attrlist = nil, primary = nil, attrs = nil, $writer = nil, see_also = nil, term = nil, encl_text = nil, visible = nil, before = nil, after = nil, _ = nil, see = nil, subbed_term = nil, terms = nil;\n\n          return (function() {$case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n            if (\"indexterm\"['$===']($case)) {\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((attrlist = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), true, true))['$include?'](\"=\"))) {\n              if ($truthy((primary = (attrs = $$($nesting, 'AttributeList').$new(attrlist, self).$parse())['$[]'](1)))) {\n                \n                \n                $writer = [\"terms\", [primary]];\n                $send(attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if ($truthy((see_also = attrs['$[]'](\"see-also\")))) {\n                  \n                  $writer = [\"see-also\", (function() {if ($truthy(see_also['$include?'](\",\"))) {\n                    return $send(see_also.$split(\",\"), 'map', [], ($$32 = function(it){var self = $$32.$$s || this;\n\n                    \n                      \n                      if (it == null) {\n                        it = nil;\n                      };\n                      return it.$lstrip();}, $$32.$$s = self, $$32.$$arity = 1, $$32))\n                  } else {\n                    return [see_also]\n                  }; return nil; })()];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n              } else {\n                attrs = $hash2([\"terms\"], {\"terms\": attrlist})\n              }\n            } else {\n              attrs = $hash2([\"terms\"], {\"terms\": self.$split_simple_csv(attrlist)})\n            };\n            return $$($nesting, 'Inline').$new(self, \"indexterm\", nil, $hash2([\"attributes\"], {\"attributes\": attrs})).$convert();}\n            else if (\"indexterm2\"['$===']($case)) {\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((term = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), true, true))['$include?'](\"=\"))) {\n              \n              term = ($truthy($c = ($truthy($d = (attrs = $$($nesting, 'AttributeList').$new(term, self).$parse())['$[]'](1)) ? $d : (attrs = nil))) ? $c : term);\n              if ($truthy(($truthy($c = attrs) ? (see_also = attrs['$[]'](\"see-also\")) : $c))) {\n                \n                $writer = [\"see-also\", (function() {if ($truthy(see_also['$include?'](\",\"))) {\n                  return $send(see_also.$split(\",\"), 'map', [], ($$33 = function(it){var self = $$33.$$s || this;\n\n                  \n                    \n                    if (it == null) {\n                      it = nil;\n                    };\n                    return it.$lstrip();}, $$33.$$s = self, $$33.$$arity = 1, $$33))\n                } else {\n                  return [see_also]\n                }; return nil; })()];\n                $send(attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};};\n            return $$($nesting, 'Inline').$new(self, \"indexterm\", term, $hash2([\"attributes\", \"type\"], {\"attributes\": attrs, \"type\": \"visible\"})).$convert();}\n            else {\n            encl_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              if ($truthy(($truthy($c = encl_text['$start_with?'](\"(\")) ? encl_text['$end_with?'](\")\") : $c))) {\n                \n                encl_text = encl_text.$slice(1, $rb_minus(encl_text.$length(), 2));\n                $c = [true, \"(\", \")\"], (visible = $c[0]), (before = $c[1]), (after = $c[2]), $c;\n              } else {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n              }\n            } else {\n              \n              visible = true;\n              if ($truthy(encl_text['$start_with?'](\"(\"))) {\n                if ($truthy(encl_text['$end_with?'](\")\"))) {\n                  $c = [encl_text.$slice(1, $rb_minus(encl_text.$length(), 2)), false], (encl_text = $c[0]), (visible = $c[1]), $c\n                } else {\n                  $c = [encl_text.$slice(1, encl_text.$length()), \"(\", \"\"], (encl_text = $c[0]), (before = $c[1]), (after = $c[2]), $c\n                }\n              } else if ($truthy(encl_text['$end_with?'](\")\"))) {\n                $c = [encl_text.$chop(), \"\", \")\"], (encl_text = $c[0]), (before = $c[1]), (after = $c[2]), $c};\n            };\n            if ($truthy(visible)) {\n              \n              if ($truthy((term = self.$normalize_text(encl_text, true))['$include?'](\";&\"))) {\n                if ($truthy(term['$include?'](\" &gt;&gt; \"))) {\n                  \n                  $d = term.$partition(\" &gt;&gt; \"), $c = Opal.to_ary($d), (term = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (see = ($c[2] == null ? nil : $c[2])), $d;\n                  attrs = $hash2([\"see\"], {\"see\": see});\n                } else if ($truthy(term['$include?'](\" &amp;&gt; \"))) {\n                  \n                  $d = term.$split(\" &amp;&gt; \"), $c = Opal.to_ary($d), (term = ($c[0] == null ? nil : $c[0])), (see_also = $slice.call($c, 1)), $d;\n                  attrs = $hash2([\"see-also\"], {\"see-also\": see_also});}};\n              subbed_term = $$($nesting, 'Inline').$new(self, \"indexterm\", term, $hash2([\"attributes\", \"type\"], {\"attributes\": attrs, \"type\": \"visible\"})).$convert();\n            } else {\n              \n              attrs = $hash2([], {});\n              if ($truthy((terms = self.$normalize_text(encl_text, true))['$include?'](\";&\"))) {\n                if ($truthy(terms['$include?'](\" &gt;&gt; \"))) {\n                  \n                  $d = terms.$partition(\" &gt;&gt; \"), $c = Opal.to_ary($d), (terms = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (see = ($c[2] == null ? nil : $c[2])), $d;\n                  \n                  $writer = [\"see\", see];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                } else if ($truthy(terms['$include?'](\" &amp;&gt; \"))) {\n                  \n                  $d = terms.$split(\" &amp;&gt; \"), $c = Opal.to_ary($d), (terms = ($c[0] == null ? nil : $c[0])), (see_also = $slice.call($c, 1)), $d;\n                  \n                  $writer = [\"see-also\", see_also];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;}};\n              \n              $writer = [\"terms\", self.$split_simple_csv(terms)];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              subbed_term = $$($nesting, 'Inline').$new(self, \"indexterm\", nil, $hash2([\"attributes\"], {\"attributes\": attrs})).$convert();\n            };\n            if ($truthy(before)) {\n              return \"\" + (before) + (subbed_term) + (after)\n            } else {\n              return subbed_term\n            };}})()}, $$31.$$s = self, $$31.$$arity = 0, $$31))};\n        if ($truthy(($truthy($a = found_colon) ? text['$include?'](\"://\") : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineLinkRx')], ($$34 = function(){var self = $$34.$$s || this, $c, $d, target = nil, prefix = nil, suffix = nil, link_text = nil, $case = nil, attrs = nil, link_opts = nil, new_link_text = nil, $writer = nil, bare = nil;\n\n          \n            if ($truthy((target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))['$start_with?']($$($nesting, 'RS')))) {\n              return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + (target.$slice(1, target.$length())) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](4)));};\n            $c = [(($d = $gvars['~']) === nil ? nil : $d['$[]'](1)), \"\"], (prefix = $c[0]), (suffix = $c[1]), $c;\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](4)))) {\n              \n              if (prefix['$=='](\"link:\")) {\n                prefix = \"\"};\n              if ($truthy((link_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4)))['$empty?']())) {\n                link_text = nil};\n            } else {\n              \n              $case = prefix;\n              if (\"link:\"['$===']($case) || \"\\\"\"['$===']($case) || \"'\"['$===']($case)) {return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};\n              $case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));\n              if (\")\"['$===']($case) || \"?\"['$===']($case) || \"!\"['$===']($case)) {\n              target = target.$chop();\n              if ($truthy((($c = (suffix = (($d = $gvars['~']) === nil ? nil : $d['$[]'](3)))['$=='](\")\")) ? target['$end_with?'](\".\", \"?\", \"!\") : (suffix = (($d = $gvars['~']) === nil ? nil : $d['$[]'](3)))['$=='](\")\")))) {\n                \n                suffix = $rb_plus(target['$[]'](-1), suffix);\n                target = target.$chop();};\n              if ($truthy(target['$end_with?'](\"://\"))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};}\n              else if (\";\"['$===']($case)) {\n              if ($truthy(($truthy($c = prefix['$start_with?'](\"&lt;\")) ? target['$end_with?'](\"&gt;\") : $c))) {\n                \n                prefix = prefix.$slice(4, prefix.$length());\n                target = target.$slice(0, $rb_minus(target.$length(), 4));\n              } else if ($truthy((target = target.$chop())['$end_with?'](\")\"))) {\n                \n                target = target.$chop();\n                suffix = \");\";\n              } else {\n                suffix = \";\"\n              };\n              if ($truthy(target['$end_with?'](\"://\"))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};}\n              else if (\":\"['$===']($case)) {\n              if ($truthy((target = target.$chop())['$end_with?'](\")\"))) {\n                \n                target = target.$chop();\n                suffix = \"):\";\n              } else {\n                suffix = \":\"\n              };\n              if ($truthy(target['$end_with?'](\"://\"))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};};\n            };\n            $c = [nil, $hash2([\"type\"], {\"type\": \"link\"})], (attrs = $c[0]), (link_opts = $c[1]), $c;\n            if ($truthy(link_text)) {\n              \n              if ($truthy(link_text['$include?']($$($nesting, 'R_SB')))) {\n                new_link_text = (link_text = link_text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB')))};\n              if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? link_text['$include?'](\"=\") : $c))) {\n                \n                $d = self.$extract_attributes_from_text(link_text, \"\"), $c = Opal.to_ary($d), (link_text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d;\n                new_link_text = link_text;\n                \n                $writer = [\"id\", attrs['$[]'](\"id\")];\n                $send(link_opts, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;};\n              if ($truthy(link_text['$end_with?'](\"^\"))) {\n                \n                new_link_text = (link_text = link_text.$chop());\n                if ($truthy(attrs)) {\n                  ($truthy($c = attrs['$[]'](\"window\")) ? $c : (($writer = [\"window\", \"_blank\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n                } else {\n                  attrs = $hash2([\"window\"], {\"window\": \"_blank\"})\n                };};\n              if ($truthy(($truthy($c = new_link_text) ? new_link_text['$empty?']() : $c))) {\n                \n                link_text = (function() {if ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\"))) {\n                  \n                  return target.$sub($$($nesting, 'UriSniffRx'), \"\");\n                } else {\n                  return target\n                }; return nil; })();\n                bare = true;};\n            } else {\n              \n              link_text = (function() {if ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\"))) {\n                \n                return target.$sub($$($nesting, 'UriSniffRx'), \"\");\n              } else {\n                return target\n              }; return nil; })();\n              bare = true;\n            };\n            if ($truthy(bare)) {\n              if ($truthy(attrs)) {\n                \n                $writer = [\"role\", (function() {if ($truthy(attrs['$key?'](\"role\"))) {\n                  return \"\" + \"bare \" + (attrs['$[]'](\"role\"))\n                } else {\n                  return \"bare\"\n                }; return nil; })()];\n                $send(attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              } else {\n                attrs = $hash2([\"role\"], {\"role\": \"bare\"})\n              }};\n            doc.$register(\"links\", (($writer = [\"target\", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            if ($truthy(attrs)) {\n              \n              $writer = [\"attributes\", attrs];\n              $send(link_opts, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            return \"\" + (prefix) + ($$($nesting, 'Inline').$new(self, \"anchor\", link_text, link_opts).$convert()) + (suffix);}, $$34.$$s = self, $$34.$$arity = 0, $$34))};\n        if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?'](\"link:\")) ? $b : text['$include?'](\"ilto:\")) : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineLinkMacroRx')], ($$35 = function(){var self = $$35.$$s || this, $c, $d, mailto = nil, target = nil, mailto_text = nil, attrs = nil, link_opts = nil, link_text = nil, $writer = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n            } else if ($truthy((mailto = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))))) {\n              target = $rb_plus(\"mailto:\", (mailto_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))\n            } else {\n              target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))\n            };\n            $c = [nil, $hash2([\"type\"], {\"type\": \"link\"})], (attrs = $c[0]), (link_opts = $c[1]), $c;\n            if ($truthy((link_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))['$empty?']())) {\n            } else {\n              \n              if ($truthy(link_text['$include?']($$($nesting, 'R_SB')))) {\n                link_text = link_text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n              if ($truthy(mailto)) {\n                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? link_text['$include?'](\",\") : $c))) {\n                  \n                  $d = self.$extract_attributes_from_text(link_text, \"\"), $c = Opal.to_ary($d), (link_text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d;\n                  \n                  $writer = [\"id\", attrs['$[]'](\"id\")];\n                  $send(link_opts, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  if ($truthy(attrs['$key?'](2))) {\n                    if ($truthy(attrs['$key?'](3))) {\n                      target = \"\" + (target) + \"?subject=\" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](2))) + \"&amp;body=\" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](3)))\n                    } else {\n                      target = \"\" + (target) + \"?subject=\" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](2)))\n                    }};}\n              } else if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? link_text['$include?'](\"=\") : $c))) {\n                \n                $d = self.$extract_attributes_from_text(link_text, \"\"), $c = Opal.to_ary($d), (link_text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d;\n                \n                $writer = [\"id\", attrs['$[]'](\"id\")];\n                $send(link_opts, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;};\n              if ($truthy(link_text['$end_with?'](\"^\"))) {\n                \n                link_text = link_text.$chop();\n                if ($truthy(attrs)) {\n                  ($truthy($c = attrs['$[]'](\"window\")) ? $c : (($writer = [\"window\", \"_blank\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n                } else {\n                  attrs = $hash2([\"window\"], {\"window\": \"_blank\"})\n                };};\n            };\n            if ($truthy(link_text['$empty?']())) {\n              if ($truthy(mailto)) {\n                link_text = mailto_text\n              } else {\n                \n                if ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\"))) {\n                  if ($truthy((link_text = target.$sub($$($nesting, 'UriSniffRx'), \"\"))['$empty?']())) {\n                    link_text = target}\n                } else {\n                  link_text = target\n                };\n                if ($truthy(attrs)) {\n                  \n                  $writer = [\"role\", (function() {if ($truthy(attrs['$key?'](\"role\"))) {\n                    return \"\" + \"bare \" + (attrs['$[]'](\"role\"))\n                  } else {\n                    return \"bare\"\n                  }; return nil; })()];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  attrs = $hash2([\"role\"], {\"role\": \"bare\"})\n                };\n              }};\n            doc.$register(\"links\", (($writer = [\"target\", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            if ($truthy(attrs)) {\n              \n              $writer = [\"attributes\", attrs];\n              $send(link_opts, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            return $$($nesting, 'Inline').$new(self, \"anchor\", link_text, link_opts).$convert();}, $$35.$$s = self, $$35.$$arity = 0, $$35))};\n        if ($truthy(text['$include?'](\"@\"))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineEmailRx')], ($$36 = function(){var self = $$36.$$s || this, $c, target = nil, address = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n              return (function() {if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$==']($$($nesting, 'RS'))) {\n                \n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n              } else {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0))\n              }; return nil; })();};\n            target = $rb_plus(\"mailto:\", (address = (($c = $gvars['~']) === nil ? nil : $c['$[]'](0))));\n            doc.$register(\"links\", target);\n            return $$($nesting, 'Inline').$new(self, \"anchor\", address, $hash2([\"type\", \"target\"], {\"type\": \"link\", \"target\": target})).$convert();}, $$36.$$s = self, $$36.$$arity = 0, $$36))};\n        if ($truthy(($truthy($a = ($truthy($b = found_square_bracket) ? self.context['$=='](\"list_item\") : $b)) ? self.parent.$style()['$=='](\"bibliography\") : $a))) {\n          text = $send(text, 'sub', [$$($nesting, 'InlineBiblioAnchorRx')], ($$37 = function(){var self = $$37.$$s || this, $c;\n\n          return $$($nesting, 'Inline').$new(self, \"anchor\", (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), $hash2([\"type\", \"id\"], {\"type\": \"bibref\", \"id\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))})).$convert()}, $$37.$$s = self, $$37.$$arity = 0, $$37))};\n        if ($truthy(($truthy($a = ($truthy($b = found_square_bracket) ? text['$include?'](\"[[\") : $b)) ? $a : ($truthy($b = found_macroish) ? text['$include?'](\"or:\") : $b)))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineAnchorRx')], ($$38 = function(){var self = $$38.$$s || this, $c, $d, id = nil, reftext = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {\n              reftext = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))\n            } else {\n              \n              id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));\n              if ($truthy(($truthy($c = (reftext = (($d = $gvars['~']) === nil ? nil : $d['$[]'](5)))) ? reftext['$include?']($$($nesting, 'R_SB')) : $c))) {\n                reftext = reftext.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n            };\n            return $$($nesting, 'Inline').$new(self, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id})).$convert();}, $$38.$$s = self, $$38.$$arity = 0, $$38))};\n        if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\"&\")) ? text['$include?'](\";&l\") : $b)) ? $a : ($truthy($b = found_macroish) ? text['$include?'](\"xref:\") : $b)))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineXrefMacroRx')], ($$39 = function(){var self = $$39.$$s || this, $c, $d, attrs = nil, refid = nil, _ = nil, link_text = nil, macro = nil, fragment = nil, hash_idx = nil, fragment_len = nil, path = nil, src2src = nil, target = nil, $writer = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            attrs = $hash2([], {});\n            if ($truthy((refid = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))))) {\n              if ($truthy(refid['$include?'](\",\"))) {\n                \n                $d = refid.$partition(\",\"), $c = Opal.to_ary($d), (refid = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (link_text = ($c[2] == null ? nil : $c[2])), $d;\n                if ($truthy((link_text = link_text.$lstrip())['$empty?']())) {\n                  link_text = nil};}\n            } else {\n              \n              macro = true;\n              refid = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n              if ($truthy((link_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))))) {\n                \n                if ($truthy(link_text['$include?']($$($nesting, 'R_SB')))) {\n                  link_text = link_text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? link_text['$include?'](\"=\") : $c))) {\n                  $d = self.$extract_attributes_from_text(link_text), $c = Opal.to_ary($d), (link_text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d};};\n            };\n            if ($truthy(doc.$compat_mode())) {\n              fragment = refid\n            } else if ($truthy((hash_idx = refid.$index(\"#\")))) {\n              if ($truthy($rb_gt(hash_idx, 0))) {\n                \n                if ($truthy($rb_gt((fragment_len = $rb_minus($rb_minus(refid.$length(), 1), hash_idx)), 0))) {\n                  $c = [refid.$slice(0, hash_idx), refid.$slice($rb_plus(hash_idx, 1), fragment_len)], (path = $c[0]), (fragment = $c[1]), $c\n                } else {\n                  path = refid.$chop()\n                };\n                if ($truthy(macro)) {\n                  if ($truthy(path['$end_with?'](\".adoc\"))) {\n                    src2src = (path = path.$slice(0, $rb_minus(path.$length(), 5)))\n                  } else if ($truthy($$($nesting, 'Helpers')['$extname?'](path)['$!']())) {\n                    src2src = path}\n                } else if ($truthy($send(path, 'end_with?', Opal.to_a($$($nesting, 'ASCIIDOC_EXTENSIONS').$keys())))) {\n                  src2src = (path = path.$slice(0, path.$rindex(\".\")))\n                } else {\n                  src2src = path\n                };\n              } else {\n                $c = [refid, refid.$slice(1, refid.$length())], (target = $c[0]), (fragment = $c[1]), $c\n              }\n            } else if ($truthy(macro)) {\n              if ($truthy(refid['$end_with?'](\".adoc\"))) {\n                src2src = (path = refid.$slice(0, $rb_minus(refid.$length(), 5)))\n              } else if ($truthy($$($nesting, 'Helpers')['$extname?'](refid))) {\n                path = refid\n              } else {\n                fragment = refid\n              }\n            } else {\n              fragment = refid\n            };\n            if ($truthy(target)) {\n              \n              refid = fragment;\n              if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]'](\"refs\")['$[]'](refid)['$!']() : $c))) {\n                self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n            } else if ($truthy(path)) {\n              if ($truthy(($truthy($c = src2src) ? ($truthy($d = doc.$attributes()['$[]'](\"docname\")['$=='](path)) ? $d : doc.$catalog()['$[]'](\"includes\")['$[]'](path)) : $c))) {\n                if ($truthy(fragment)) {\n                  \n                  $c = [fragment, nil, \"\" + \"#\" + (fragment)], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c;\n                  if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]'](\"refs\")['$[]'](refid)['$!']() : $c))) {\n                    self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n                } else {\n                  $c = [nil, nil, \"#\"], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c\n                }\n              } else {\n                \n                $c = [path, \"\" + (($truthy($d = doc.$attributes()['$[]'](\"relfileprefix\")) ? $d : \"\")) + (path) + ((function() {if ($truthy(src2src)) {\n                  \n                  return doc.$attributes().$fetch(\"relfilesuffix\", doc.$outfilesuffix());\n                } else {\n                  return \"\"\n                }; return nil; })())], (refid = $c[0]), (path = $c[1]), $c;\n                if ($truthy(fragment)) {\n                  $c = [\"\" + (refid) + \"#\" + (fragment), \"\" + (path) + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c\n                } else {\n                  target = path\n                };\n              }\n            } else if ($truthy(($truthy($c = doc.$compat_mode()) ? $c : $$($nesting, 'Compliance').$natural_xrefs()['$!']()))) {\n              \n              $c = [fragment, \"\" + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;\n              if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]'](\"refs\")['$[]'](refid)['$!']() : $c))) {\n                self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n            } else if ($truthy(doc.$catalog()['$[]'](\"refs\")['$[]'](fragment))) {\n              $c = [fragment, \"\" + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c\n            } else if ($truthy(($truthy($c = ($truthy($d = fragment['$include?'](\" \")) ? $d : fragment.$downcase()['$!='](fragment))) ? (refid = doc.$resolve_id(fragment)) : $c))) {\n              $c = [refid, \"\" + \"#\" + (refid)], (fragment = $c[0]), (target = $c[1]), $c\n            } else {\n              \n              $c = [fragment, \"\" + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;\n              if ($truthy(self.$logger()['$info?']())) {\n                self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n            };\n            \n            $writer = [\"path\", path];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"fragment\", fragment];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"refid\", refid];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return $$($nesting, 'Inline').$new(self, \"anchor\", link_text, $hash2([\"type\", \"target\", \"attributes\"], {\"type\": \"xref\", \"target\": target, \"attributes\": attrs})).$convert();}, $$39.$$s = self, $$39.$$arity = 0, $$39))};\n        if ($truthy(($truthy($a = found_macroish) ? text['$include?'](\"tnote\") : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineFootnoteMacroRx')], ($$40 = function(){var self = $$40.$$s || this, $c, $d, $e, $$41, id = nil, content = nil, footnote = nil, index = nil, type = nil, target = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))) {\n                \n                $d = (($e = $gvars['~']) === nil ? nil : $e['$[]'](3)).$split(\",\", 2), $c = Opal.to_ary($d), (id = ($c[0] == null ? nil : $c[0])), (content = ($c[1] == null ? nil : $c[1])), $d;\n                if ($truthy(doc.$compat_mode())) {\n                } else {\n                  self.$logger().$warn(\"\" + \"found deprecated footnoteref macro: \" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))) + \"; use footnote macro with target instead\")\n                };\n              } else {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));\n              }\n            } else {\n              \n              id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n              content = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));\n            };\n            if ($truthy(id)) {\n              if ($truthy((footnote = $send(doc.$footnotes(), 'find', [], ($$41 = function(candidate){var self = $$41.$$s || this;\n\n              \n                \n                if (candidate == null) {\n                  candidate = nil;\n                };\n                return candidate.$id()['$=='](id);}, $$41.$$s = self, $$41.$$arity = 1, $$41))))) {\n                \n                $c = [footnote.$index(), footnote.$text()], (index = $c[0]), (content = $c[1]), $c;\n                $c = [\"xref\", id, nil], (type = $c[0]), (target = $c[1]), (id = $c[2]), $c;\n              } else if ($truthy(content)) {\n                \n                content = self.$restore_passthroughs(self.$normalize_text(content, true, true));\n                index = doc.$counter(\"footnote-number\");\n                doc.$register(\"footnotes\", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, content));\n                $c = [\"ref\", nil], (type = $c[0]), (target = $c[1]), $c;\n              } else {\n                \n                self.$logger().$warn(\"\" + \"invalid footnote reference: \" + (id));\n                $c = [\"xref\", id, id, nil], (type = $c[0]), (target = $c[1]), (content = $c[2]), (id = $c[3]), $c;\n              }\n            } else if ($truthy(content)) {\n              \n              content = self.$restore_passthroughs(self.$normalize_text(content, true, true));\n              index = doc.$counter(\"footnote-number\");\n              doc.$register(\"footnotes\", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, content));\n              type = (target = nil);\n            } else {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));\n            };\n            return $$($nesting, 'Inline').$new(self, \"footnote\", content, $hash2([\"attributes\", \"id\", \"target\", \"type\"], {\"attributes\": $hash2([\"index\"], {\"index\": index}), \"id\": id, \"target\": target, \"type\": type})).$convert();}, $$40.$$s = self, $$40.$$arity = 0, $$40))};\n        return text;\n      }, $Substitutors_sub_macros$19.$$arity = 1);\n      \n      Opal.def(self, '$sub_post_replacements', $Substitutors_sub_post_replacements$42 = function $$sub_post_replacements(text) {\n        var $a, $$43, $$44, self = this, lines = nil, last = nil;\n        if (self.attributes == null) self.attributes = nil;\n        if (self.document == null) self.document = nil;\n\n        if ($truthy(($truthy($a = self.attributes['$[]'](\"hardbreaks-option\")) ? $a : self.document.$attributes()['$[]'](\"hardbreaks-option\")))) {\n          \n          lines = text.$split($$($nesting, 'LF'), -1);\n          if ($truthy($rb_lt(lines.$size(), 2))) {\n            return text};\n          last = lines.$pop();\n          return $send(lines, 'map', [], ($$43 = function(line){var self = $$43.$$s || this;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            return $$($nesting, 'Inline').$new(self, \"break\", (function() {if ($truthy(line['$end_with?']($$($nesting, 'HARD_LINE_BREAK')))) {\n              \n              return line.$slice(0, $rb_minus(line.$length(), 2));\n            } else {\n              return line\n            }; return nil; })(), $hash2([\"type\"], {\"type\": \"line\"})).$convert();}, $$43.$$s = self, $$43.$$arity = 1, $$43))['$<<'](last).$join($$($nesting, 'LF'));\n        } else if ($truthy(($truthy($a = text['$include?']($$($nesting, 'PLUS'))) ? text['$include?']($$($nesting, 'HARD_LINE_BREAK')) : $a))) {\n          return $send(text, 'gsub', [$$($nesting, 'HardLineBreakRx')], ($$44 = function(){var self = $$44.$$s || this, $b;\n\n          return $$($nesting, 'Inline').$new(self, \"break\", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), $hash2([\"type\"], {\"type\": \"line\"})).$convert()}, $$44.$$s = self, $$44.$$arity = 0, $$44))\n        } else {\n          return text\n        }\n      }, $Substitutors_sub_post_replacements$42.$$arity = 1);\n      \n      Opal.def(self, '$sub_source', $Substitutors_sub_source$45 = function $$sub_source(source, process_callouts) {\n        var self = this;\n\n        if ($truthy(process_callouts)) {\n          return self.$sub_callouts(self.$sub_specialchars(source))\n        } else {\n          \n          return self.$sub_specialchars(source);\n        }\n      }, $Substitutors_sub_source$45.$$arity = 2);\n      \n      Opal.def(self, '$sub_callouts', $Substitutors_sub_callouts$46 = function $$sub_callouts(text) {\n        var $$47, self = this, callout_rx = nil, autonum = nil;\n\n        \n        callout_rx = (function() {if ($truthy(self['$attr?'](\"line-comment\"))) {\n          return $$($nesting, 'CalloutSourceRxMap')['$[]'](self.$attr(\"line-comment\"))\n        } else {\n          return $$($nesting, 'CalloutSourceRx')\n        }; return nil; })();\n        autonum = 0;\n        return $send(text, 'gsub', [callout_rx], ($$47 = function(){var self = $$47.$$s || this, $a, $b;\n          if (self.document == null) self.document = nil;\n\n        if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {\n            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$($nesting, 'RS'), \"\")\n          } else {\n            return $$($nesting, 'Inline').$new(self, \"callout\", (function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4))['$=='](\".\")) {\n              return (autonum = $rb_plus(autonum, 1)).$to_s()\n            } else {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))\n            }; return nil; })(), $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": ($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))) ? $a : (function() {if ((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$=='](\"--\")) {\n              return [\"<!--\", \"-->\"]\n            } else {\n              return nil\n            }; return nil; })())})})).$convert()\n          }}, $$47.$$s = self, $$47.$$arity = 0, $$47));\n      }, $Substitutors_sub_callouts$46.$$arity = 1);\n      \n      Opal.def(self, '$highlight_source', $Substitutors_highlight_source$48 = function $$highlight_source(source, process_callouts) {\n        var $a, $b, $c, self = this, syntax_hl = nil, callout_marks = nil, doc_attrs = nil, syntax_hl_name = nil, linenums_mode = nil, start_line_number = nil, highlight_lines = nil, highlighted = nil, source_offset = nil;\n        if (self.document == null) self.document = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        if ($truthy(($truthy($a = (syntax_hl = self.document.$syntax_highlighter())) ? syntax_hl['$highlight?']() : $a))) {\n        } else {\n          return self.$sub_source(source, process_callouts)\n        };\n        if ($truthy(process_callouts)) {\n          $b = self.$extract_callouts(source), $a = Opal.to_ary($b), (source = ($a[0] == null ? nil : $a[0])), (callout_marks = ($a[1] == null ? nil : $a[1])), $b};\n        doc_attrs = self.document.$attributes();\n        syntax_hl_name = syntax_hl.$name();\n        if ($truthy(($truthy($a = (linenums_mode = (function() {if ($truthy(self['$attr?'](\"linenums\"))) {\n          return ($truthy($b = doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-linenums-mode\")) ? $b : \"table\").$to_sym()\n        } else {\n          return nil\n        }; return nil; })())) ? $rb_lt((start_line_number = self.$attr(\"start\", 1).$to_i()), 1) : $a))) {\n          start_line_number = 1};\n        if ($truthy(self['$attr?'](\"highlight\"))) {\n          highlight_lines = self.$resolve_lines_to_highlight(source, self.$attr(\"highlight\"), start_line_number)};\n        $b = syntax_hl.$highlight(self, source, self.$attr(\"language\"), $hash2([\"callouts\", \"css_mode\", \"highlight_lines\", \"number_lines\", \"start_line_number\", \"style\"], {\"callouts\": callout_marks, \"css_mode\": ($truthy($c = doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-css\")) ? $c : \"class\").$to_sym(), \"highlight_lines\": highlight_lines, \"number_lines\": linenums_mode, \"start_line_number\": start_line_number, \"style\": doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-style\")})), $a = Opal.to_ary($b), (highlighted = ($a[0] == null ? nil : $a[0])), (source_offset = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy(self.passthroughs['$empty?']())) {\n        } else {\n          highlighted = highlighted.$gsub($$($nesting, 'HighlightedPassSlotRx'), \"\" + ($$($nesting, 'PASS_START')) + \"\\\\1\" + ($$($nesting, 'PASS_END')))\n        };\n        if ($truthy(callout_marks['$nil_or_empty?']())) {\n          return highlighted\n        } else {\n          \n          return self.$restore_callouts(highlighted, callout_marks, source_offset);\n        };\n      }, $Substitutors_highlight_source$48.$$arity = 2);\n      \n      Opal.def(self, '$resolve_lines_to_highlight', $Substitutors_resolve_lines_to_highlight$49 = function $$resolve_lines_to_highlight(source, spec, start) {\n        var $$50, $$51, self = this, lines = nil, shift = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        lines = [];\n        if ($truthy(spec['$include?'](\" \"))) {\n          spec = spec.$delete(\" \")};\n        $send((function() {if ($truthy(spec['$include?'](\",\"))) {\n          \n          return spec.$split(\",\");\n        } else {\n          \n          return spec.$split(\";\");\n        }; return nil; })(), 'map', [], ($$50 = function(entry){var self = $$50.$$s || this, $a, $b, negate = nil, delim = nil, from = nil, _ = nil, to = nil, line = nil;\n\n        \n          \n          if (entry == null) {\n            entry = nil;\n          };\n          if ($truthy(entry['$start_with?'](\"!\"))) {\n            \n            entry = entry.$slice(1, entry.$length());\n            negate = true;};\n          if ($truthy((delim = (function() {if ($truthy(entry['$include?'](\"..\"))) {\n            return \"..\"\n          } else {\n            \n            if ($truthy(entry['$include?'](\"-\"))) {\n              return \"-\"\n            } else {\n              return nil\n            };\n          }; return nil; })()))) {\n            \n            $b = entry.$partition(delim), $a = Opal.to_ary($b), (from = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (to = ($a[2] == null ? nil : $a[2])), $b;\n            if ($truthy(($truthy($a = to['$empty?']()) ? $a : $rb_lt((to = to.$to_i()), 0)))) {\n              to = $rb_plus(source.$count($$($nesting, 'LF')), 1)};\n            if ($truthy(negate)) {\n              return (lines = $rb_minus(lines, Opal.Range.$new(from.$to_i(), to, false).$to_a()))\n            } else {\n              return (lines = lines['$|'](Opal.Range.$new(from.$to_i(), to, false).$to_a()))\n            };\n          } else if ($truthy(negate)) {\n            return lines.$delete(entry.$to_i())\n          } else if ($truthy(lines['$include?']((line = entry.$to_i()))['$!']())) {\n            return lines['$<<'](line)\n          } else {\n            return nil\n          };}, $$50.$$s = self, $$50.$$arity = 1, $$50));\n        if ((shift = (function() {if ($truthy(start)) {\n          return $rb_minus(start, 1)\n        } else {\n          return 0\n        }; return nil; })())['$=='](0)) {\n        } else {\n          lines = $send(lines, 'map', [], ($$51 = function(it){var self = $$51.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return $rb_minus(it, shift);}, $$51.$$s = self, $$51.$$arity = 1, $$51))\n        };\n        return lines.$sort();\n      }, $Substitutors_resolve_lines_to_highlight$49.$$arity = -3);\n      \n      Opal.def(self, '$extract_passthroughs', $Substitutors_extract_passthroughs$52 = function $$extract_passthroughs(text) {\n        var $a, $b, $$53, $$54, $$55, self = this, compat_mode = nil, passthrus = nil, pass_inline_char1 = nil, pass_inline_char2 = nil, pass_inline_rx = nil;\n        if (self.document == null) self.document = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        compat_mode = self.document.$compat_mode();\n        passthrus = self.passthroughs;\n        if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\"++\")) ? $b : text['$include?'](\"$$\"))) ? $a : text['$include?'](\"ss:\")))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlinePassMacroRx')], ($$53 = function(){var self = $$53.$$s || this, $c, boundary = nil, attrlist = nil, escape_count = nil, preceding = nil, old_behavior = nil, attributes = nil, subs = nil, $writer = nil, passthru_key = nil;\n\n          \n            if ($truthy((boundary = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4))))) {\n              \n              if ($truthy(($truthy($c = compat_mode) ? boundary['$=='](\"++\") : $c))) {\n                return \"\" + ((function() {if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))) {\n                  return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + \"[\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + \"]\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))\n                } else {\n                  return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))\n                }; return nil; })()) + \"++\" + (self.$extract_passthroughs((($c = $gvars['~']) === nil ? nil : $c['$[]'](5)))) + \"++\";};\n              if ($truthy((attrlist = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {\n                if ($truthy($rb_gt((escape_count = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$length()), 0))) {\n                  return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + \"[\" + (attrlist) + \"]\" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](5))) + (boundary);\n                } else if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$==']($$($nesting, 'RS'))) {\n                  preceding = \"\" + \"[\" + (attrlist) + \"]\"\n                } else {\n                  \n                  if ($truthy((($c = boundary['$=='](\"++\")) ? attrlist['$end_with?'](\"x-\") : boundary['$=='](\"++\")))) {\n                    \n                    old_behavior = true;\n                    attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2));};\n                  attributes = self.$parse_quoted_text_attributes(attrlist);\n                }\n              } else if ($truthy($rb_gt((escape_count = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$length()), 0))) {\n                return \"\" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](5))) + (boundary);};\n              subs = (function() {if (boundary['$=='](\"+++\")) {\n                return []\n              } else {\n                return $$($nesting, 'BASIC_SUBS')\n              }; return nil; })();\n              if ($truthy(attributes)) {\n                if ($truthy(old_behavior)) {\n                  \n                  $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\", \"attributes\"], {\"text\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), \"subs\": $$($nesting, 'NORMAL_SUBS'), \"type\": \"monospaced\", \"attributes\": attributes})];\n                  $send(passthrus, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  \n                  $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\", \"attributes\"], {\"text\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), \"subs\": subs, \"type\": \"unquoted\", \"attributes\": attributes})];\n                  $send(passthrus, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];\n                }\n              } else {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), \"subs\": subs})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n            } else {\n              \n              if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](6))['$==']($$($nesting, 'RS'))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n              if ($truthy((subs = (($c = $gvars['~']) === nil ? nil : $c['$[]'](7))))) {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](8)), nil, true), \"subs\": self.$resolve_pass_subs(subs)})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              } else {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\"], {\"text\": self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](8)), nil, true)})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n            };\n            return \"\" + (($truthy($c = preceding) ? $c : \"\")) + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, $$53.$$s = self, $$53.$$arity = 0, $$53))};\n        $b = $$($nesting, 'InlinePassRx')['$[]'](compat_mode), $a = Opal.to_ary($b), (pass_inline_char1 = ($a[0] == null ? nil : $a[0])), (pass_inline_char2 = ($a[1] == null ? nil : $a[1])), (pass_inline_rx = ($a[2] == null ? nil : $a[2])), $b;\n        if ($truthy(($truthy($a = text['$include?'](pass_inline_char1)) ? $a : ($truthy($b = pass_inline_char2) ? text['$include?'](pass_inline_char2) : $b)))) {\n          text = $send(text, 'gsub', [pass_inline_rx], ($$54 = function(){var self = $$54.$$s || this, $c, preceding = nil, attrlist = nil, quoted_text = nil, escape_mark = nil, format_mark = nil, content = nil, old_behavior = nil, attributes = nil, $writer = nil, passthru_key = nil, subs = nil;\n\n          \n            preceding = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n            attrlist = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n            if ($truthy((quoted_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))['$start_with?']($$($nesting, 'RS')))) {\n              escape_mark = $$($nesting, 'RS')};\n            format_mark = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));\n            content = (($c = $gvars['~']) === nil ? nil : $c['$[]'](5));\n            if ($truthy(compat_mode)) {\n              old_behavior = true\n            } else if ($truthy((old_behavior = ($truthy($c = attrlist) ? attrlist['$end_with?'](\"x-\") : $c)))) {\n              attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2))};\n            if ($truthy(attrlist)) {\n              if ($truthy((($c = format_mark['$=='](\"`\")) ? old_behavior['$!']() : format_mark['$=='](\"`\")))) {\n                return self.$extract_inner_passthrough(content, \"\" + (preceding) + \"[\" + (attrlist) + \"]\" + (escape_mark));\n              } else if ($truthy(escape_mark)) {\n                return \"\" + (preceding) + \"[\" + (attrlist) + \"]\" + (quoted_text.$slice(1, quoted_text.$length()));\n              } else if (preceding['$==']($$($nesting, 'RS'))) {\n                preceding = \"\" + \"[\" + (attrlist) + \"]\"\n              } else {\n                attributes = self.$parse_quoted_text_attributes(attrlist)\n              }\n            } else if ($truthy((($c = format_mark['$=='](\"`\")) ? old_behavior['$!']() : format_mark['$=='](\"`\")))) {\n              return self.$extract_inner_passthrough(content, \"\" + (preceding) + (escape_mark));\n            } else if ($truthy(escape_mark)) {\n              return \"\" + (preceding) + (quoted_text.$slice(1, quoted_text.$length()));};\n            if ($truthy(compat_mode)) {\n              \n              $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": $$($nesting, 'BASIC_SUBS'), \"attributes\": attributes, \"type\": \"monospaced\"})];\n              $send(passthrus, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else if ($truthy(attributes)) {\n              if ($truthy(old_behavior)) {\n                \n                subs = (function() {if (format_mark['$=='](\"`\")) {\n                  return $$($nesting, 'BASIC_SUBS')\n                } else {\n                  return $$($nesting, 'NORMAL_SUBS')\n                }; return nil; })();\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": subs, \"attributes\": attributes, \"type\": \"monospaced\"})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n              } else {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": $$($nesting, 'BASIC_SUBS'), \"attributes\": attributes, \"type\": \"unquoted\"})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              }\n            } else {\n              \n              $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": content, \"subs\": $$($nesting, 'BASIC_SUBS')})];\n              $send(passthrus, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            return \"\" + (preceding) + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, $$54.$$s = self, $$54.$$arity = 0, $$54))};\n        if ($truthy(($truthy($a = text['$include?'](\":\")) ? ($truthy($b = text['$include?'](\"stem:\")) ? $b : text['$include?'](\"math:\")) : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineStemMacroRx')], ($$55 = function(){var self = $$55.$$s || this, $c, $d, type = nil, subs = nil, content = nil, $writer = nil, passthru_key = nil;\n            if (self.document == null) self.document = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ((type = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$to_sym())['$=='](\"stem\")) {\n              type = $$($nesting, 'STEM_TYPE_ALIASES')['$[]'](self.document.$attributes()['$[]'](\"stem\")).$to_sym()};\n            subs = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n            content = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)), nil, true);\n            if ($truthy(($truthy($c = (($d = type['$=='](\"latexmath\")) ? content['$start_with?'](\"$\") : type['$=='](\"latexmath\"))) ? content['$end_with?'](\"$\") : $c))) {\n              content = content.$slice(1, $rb_minus(content.$length(), 2))};\n            subs = (function() {if ($truthy(subs)) {\n              \n              return self.$resolve_pass_subs(subs);\n            } else {\n              \n              if ($truthy(self.document['$basebackend?'](\"html\"))) {\n                return $$($nesting, 'BASIC_SUBS')\n              } else {\n                return nil\n              };\n            }; return nil; })();\n            \n            $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\"], {\"text\": content, \"subs\": subs, \"type\": type})];\n            $send(passthrus, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return \"\" + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, $$55.$$s = self, $$55.$$arity = 0, $$55))};\n        return text;\n      }, $Substitutors_extract_passthroughs$52.$$arity = 1);\n      \n      Opal.def(self, '$restore_passthroughs', $Substitutors_restore_passthroughs$56 = function $$restore_passthroughs(text) {\n        var $$57, self = this, passthrus = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        passthrus = self.passthroughs;\n        return $send(text, 'gsub', [$$($nesting, 'PassSlotRx')], ($$57 = function(){var self = $$57.$$s || this, $a, pass = nil, subbed_text = nil, type = nil, attributes = nil, id = nil;\n\n        if ($truthy((pass = passthrus['$[]']((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i())))) {\n            \n            subbed_text = self.$apply_subs(pass['$[]'](\"text\"), pass['$[]'](\"subs\"));\n            if ($truthy((type = pass['$[]'](\"type\")))) {\n              \n              if ($truthy((attributes = pass['$[]'](\"attributes\")))) {\n                id = attributes['$[]'](\"id\")};\n              subbed_text = $$($nesting, 'Inline').$new(self, \"quoted\", subbed_text, $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert();};\n            if ($truthy(subbed_text['$include?']($$($nesting, 'PASS_START')))) {\n              return self.$restore_passthroughs(subbed_text)\n            } else {\n              return subbed_text\n            };\n          } else {\n            \n            self.$logger().$error(\"\" + \"unresolved passthrough detected: \" + (text));\n            return \"??pass??\";\n          }}, $$57.$$s = self, $$57.$$arity = 0, $$57));\n      }, $Substitutors_restore_passthroughs$56.$$arity = 1);\n      \n      Opal.def(self, '$resolve_subs', $Substitutors_resolve_subs$58 = function $$resolve_subs(subs, type, defaults, subject) {\n        var $$59, self = this, candidates = nil, modifiers_present = nil, resolved = nil, invalid = nil;\n\n        \n        \n        if (type == null) {\n          type = \"block\";\n        };\n        \n        if (defaults == null) {\n          defaults = nil;\n        };\n        \n        if (subject == null) {\n          subject = nil;\n        };\n        if ($truthy(subs['$nil_or_empty?']())) {\n          return nil};\n        candidates = nil;\n        if ($truthy(subs['$include?'](\" \"))) {\n          subs = subs.$delete(\" \")};\n        modifiers_present = $$($nesting, 'SubModifierSniffRx')['$match?'](subs);\n        $send(subs.$split(\",\"), 'each', [], ($$59 = function(key){var self = $$59.$$s || this, $a, $b, modifier_operation = nil, first = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, $case = nil;\n\n        \n          \n          if (key == null) {\n            key = nil;\n          };\n          modifier_operation = nil;\n          if ($truthy(modifiers_present)) {\n            if ((first = key.$chr())['$=='](\"+\")) {\n              \n              modifier_operation = \"append\";\n              key = key.$slice(1, key.$length());\n            } else if (first['$=='](\"-\")) {\n              \n              modifier_operation = \"remove\";\n              key = key.$slice(1, key.$length());\n            } else if ($truthy(key['$end_with?'](\"+\"))) {\n              \n              modifier_operation = \"prepend\";\n              key = key.$chop();}};\n          key = key.$to_sym();\n          if ($truthy((($a = type['$=='](\"inline\")) ? ($truthy($b = key['$=='](\"verbatim\")) ? $b : key['$=='](\"v\")) : type['$=='](\"inline\")))) {\n            resolved_keys = $$($nesting, 'BASIC_SUBS')\n          } else if ($truthy($$($nesting, 'SUB_GROUPS')['$key?'](key))) {\n            resolved_keys = $$($nesting, 'SUB_GROUPS')['$[]'](key)\n          } else if ($truthy(($truthy($a = (($b = type['$=='](\"inline\")) ? key.$length()['$=='](1) : type['$=='](\"inline\"))) ? $$($nesting, 'SUB_HINTS')['$key?'](key) : $a))) {\n            \n            resolved_key = $$($nesting, 'SUB_HINTS')['$[]'](key);\n            if ($truthy((candidate = $$($nesting, 'SUB_GROUPS')['$[]'](resolved_key)))) {\n              resolved_keys = candidate\n            } else {\n              resolved_keys = [resolved_key]\n            };\n          } else {\n            resolved_keys = [key]\n          };\n          if ($truthy(modifier_operation)) {\n            \n            candidates = ($truthy($a = candidates) ? $a : (function() {if ($truthy(defaults)) {\n              \n              return defaults.$drop(0);\n            } else {\n              return []\n            }; return nil; })());\n            return (function() {$case = modifier_operation;\n            if (\"append\"['$===']($case)) {return (candidates = $rb_plus(candidates, resolved_keys))}\n            else if (\"prepend\"['$===']($case)) {return (candidates = $rb_plus(resolved_keys, candidates))}\n            else if (\"remove\"['$===']($case)) {return (candidates = $rb_minus(candidates, resolved_keys))}\n            else { return nil }})();\n          } else {\n            \n            candidates = ($truthy($a = candidates) ? $a : []);\n            return (candidates = $rb_plus(candidates, resolved_keys));\n          };}, $$59.$$s = self, $$59.$$arity = 1, $$59));\n        if ($truthy(candidates)) {\n        } else {\n          return nil\n        };\n        resolved = candidates['$&']($$($nesting, 'SUB_OPTIONS')['$[]'](type));\n        if ($truthy($rb_minus(candidates, resolved)['$empty?']())) {\n        } else {\n          \n          invalid = $rb_minus(candidates, resolved);\n          self.$logger().$warn(\"\" + \"invalid substitution type\" + ((function() {if ($truthy($rb_gt(invalid.$size(), 1))) {\n            return \"s\"\n          } else {\n            return \"\"\n          }; return nil; })()) + ((function() {if ($truthy(subject)) {\n            return \" for \"\n          } else {\n            return \"\"\n          }; return nil; })()) + (subject) + \": \" + (invalid.$join(\", \")));\n        };\n        return resolved;\n      }, $Substitutors_resolve_subs$58.$$arity = -2);\n      \n      Opal.def(self, '$resolve_block_subs', $Substitutors_resolve_block_subs$60 = function $$resolve_block_subs(subs, defaults, subject) {\n        var self = this;\n\n        return self.$resolve_subs(subs, \"block\", defaults, subject)\n      }, $Substitutors_resolve_block_subs$60.$$arity = 3);\n      \n      Opal.def(self, '$resolve_pass_subs', $Substitutors_resolve_pass_subs$61 = function $$resolve_pass_subs(subs) {\n        var self = this;\n\n        return self.$resolve_subs(subs, \"inline\", nil, \"passthrough macro\")\n      }, $Substitutors_resolve_pass_subs$61.$$arity = 1);\n      \n      Opal.def(self, '$expand_subs', $Substitutors_expand_subs$62 = function $$expand_subs(subs, subject) {\n        var $a, $$63, self = this, $case = nil, expanded_subs = nil;\n\n        \n        \n        if (subject == null) {\n          subject = nil;\n        };\n        return (function() {$case = subs;\n        if ($$$('::', 'Symbol')['$===']($case)) {if (subs['$=='](\"none\")) {\n          return nil\n        } else {\n          return ($truthy($a = $$($nesting, 'SUB_GROUPS')['$[]'](subs)) ? $a : [subs])\n        }}\n        else if ($$$('::', 'Array')['$===']($case)) {\n        expanded_subs = [];\n        $send(subs, 'each', [], ($$63 = function(key){var self = $$63.$$s || this, sub_group = nil;\n\n        \n          \n          if (key == null) {\n            key = nil;\n          };\n          if (key['$=='](\"none\")) {\n            return nil\n          } else if ($truthy((sub_group = $$($nesting, 'SUB_GROUPS')['$[]'](key)))) {\n            return (expanded_subs = $rb_plus(expanded_subs, sub_group))\n          } else {\n            return expanded_subs['$<<'](key)\n          };}, $$63.$$s = self, $$63.$$arity = 1, $$63));\n        if ($truthy(expanded_subs['$empty?']())) {\n          return nil\n        } else {\n          return expanded_subs\n        };}\n        else {return self.$resolve_subs(subs, \"inline\", nil, subject)}})();\n      }, $Substitutors_expand_subs$62.$$arity = -2);\n      \n      Opal.def(self, '$commit_subs', $Substitutors_commit_subs$64 = function $$commit_subs() {\n        var $a, $b, $c, $d, self = this, default_subs = nil, $case = nil, custom_subs = nil, syntax_hl = nil, idx = nil, $writer = nil;\n        if (self.default_subs == null) self.default_subs = nil;\n        if (self.content_model == null) self.content_model = nil;\n        if (self.context == null) self.context = nil;\n        if (self.subs == null) self.subs = nil;\n        if (self.attributes == null) self.attributes = nil;\n        if (self.style == null) self.style = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        if ($truthy((default_subs = self.default_subs))) {\n        } else {\n          $case = self.content_model;\n          if (\"simple\"['$===']($case)) {default_subs = $$($nesting, 'NORMAL_SUBS')}\n          else if (\"verbatim\"['$===']($case)) {default_subs = (function() {if (self.context['$=='](\"verse\")) {\n            return $$($nesting, 'NORMAL_SUBS')\n          } else {\n            return $$($nesting, 'VERBATIM_SUBS')\n          }; return nil; })()}\n          else if (\"raw\"['$===']($case)) {default_subs = (function() {if (self.context['$=='](\"stem\")) {\n            return $$($nesting, 'BASIC_SUBS')\n          } else {\n            return $$($nesting, 'NO_SUBS')\n          }; return nil; })()}\n          else {return self.subs}\n        };\n        if ($truthy((custom_subs = self.attributes['$[]'](\"subs\")))) {\n          self.subs = ($truthy($a = self.$resolve_block_subs(custom_subs, default_subs, self.context)) ? $a : [])\n        } else {\n          self.subs = default_subs.$drop(0)\n        };\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (($d = self.context['$=='](\"listing\")) ? self.style['$=='](\"source\") : self.context['$=='](\"listing\"))) ? (syntax_hl = self.document.$syntax_highlighter()) : $c)) ? syntax_hl['$highlight?']() : $b)) ? (idx = self.subs.$index(\"specialcharacters\")) : $a))) {\n          \n          $writer = [idx, \"highlight\"];\n          $send(self.subs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        return nil;\n      }, $Substitutors_commit_subs$64.$$arity = 0);\n      \n      Opal.def(self, '$parse_attributes', $Substitutors_parse_attributes$65 = function $$parse_attributes(attrlist, posattrs, opts) {\n        var $a, self = this, block = nil, into = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        \n        if (posattrs == null) {\n          posattrs = [];\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy((function() {if ($truthy(attrlist)) {\n          return attrlist['$empty?']()\n        } else {\n          return true\n        }; return nil; })())) {\n          return $hash2([], {})};\n        if ($truthy(opts['$[]'](\"unescape_input\"))) {\n          attrlist = self.$normalize_text(attrlist, true, true)};\n        if ($truthy(($truthy($a = opts['$[]'](\"sub_input\")) ? attrlist['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {\n          attrlist = self.document.$sub_attributes(attrlist)};\n        if ($truthy(opts['$[]'](\"sub_result\"))) {\n          block = self};\n        if ($truthy((into = opts['$[]'](\"into\")))) {\n          return $$($nesting, 'AttributeList').$new(attrlist, block).$parse_into(into, posattrs)\n        } else {\n          return $$($nesting, 'AttributeList').$new(attrlist, block).$parse(posattrs)\n        };\n      }, $Substitutors_parse_attributes$65.$$arity = -2);\n      self.$private();\n      \n      Opal.def(self, '$extract_attributes_from_text', $Substitutors_extract_attributes_from_text$66 = function $$extract_attributes_from_text(text, default_text) {\n        var self = this, attrlist = nil, resolved_text = nil, attrs = nil;\n\n        \n        \n        if (default_text == null) {\n          default_text = nil;\n        };\n        attrlist = (function() {if ($truthy(text['$include?']($$($nesting, 'LF')))) {\n          \n          return text.$tr($$($nesting, 'LF'), \" \");\n        } else {\n          return text\n        }; return nil; })();\n        if ($truthy((resolved_text = (attrs = $$($nesting, 'AttributeList').$new(attrlist, self).$parse())['$[]'](1)))) {\n          if (resolved_text['$=='](attrlist)) {\n            return [text, attrs.$clear()]\n          } else {\n            return [resolved_text, attrs]\n          }\n        } else {\n          return [default_text, attrs]\n        };\n      }, $Substitutors_extract_attributes_from_text$66.$$arity = -2);\n      \n      Opal.def(self, '$extract_callouts', $Substitutors_extract_callouts$67 = function $$extract_callouts(source) {\n        var $$68, self = this, callout_marks = nil, autonum = nil, lineno = nil, last_lineno = nil, callout_rx = nil;\n\n        \n        callout_marks = $hash2([], {});\n        autonum = (lineno = 0);\n        last_lineno = nil;\n        callout_rx = (function() {if ($truthy(self['$attr?'](\"line-comment\"))) {\n          return $$($nesting, 'CalloutExtractRxMap')['$[]'](self.$attr(\"line-comment\"))\n        } else {\n          return $$($nesting, 'CalloutExtractRx')\n        }; return nil; })();\n        source = $send(source.$split($$($nesting, 'LF'), -1), 'map', [], ($$68 = function(line){var self = $$68.$$s || this, $$69;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          lineno = $rb_plus(lineno, 1);\n          return $send(line, 'gsub', [callout_rx], ($$69 = function(){var self = $$69.$$s || this, $a, $b, $writer = nil;\n\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$($nesting, 'RS'), \"\")\n            } else {\n              \n              ($truthy($a = callout_marks['$[]'](lineno)) ? $a : (($writer = [lineno, []]), $send(callout_marks, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<']([($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))) ? $a : (function() {if ((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$=='](\"--\")) {\n                return [\"<!--\", \"-->\"]\n              } else {\n                return nil\n              }; return nil; })()), (function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4))['$=='](\".\")) {\n                return (autonum = $rb_plus(autonum, 1)).$to_s()\n              } else {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))\n              }; return nil; })()]);\n              last_lineno = lineno;\n              return \"\";\n            }}, $$69.$$s = self, $$69.$$arity = 0, $$69));}, $$68.$$s = self, $$68.$$arity = 1, $$68)).$join($$($nesting, 'LF'));\n        if ($truthy(last_lineno)) {\n          if (last_lineno['$=='](lineno)) {\n            source = \"\" + (source) + ($$($nesting, 'LF'))}\n        } else {\n          callout_marks = nil\n        };\n        return [source, callout_marks];\n      }, $Substitutors_extract_callouts$67.$$arity = 1);\n      \n      Opal.def(self, '$restore_callouts', $Substitutors_restore_callouts$70 = function $$restore_callouts(source, callout_marks, source_offset) {\n        var $$71, self = this, preamble = nil, lineno = nil;\n\n        \n        \n        if (source_offset == null) {\n          source_offset = nil;\n        };\n        if ($truthy(source_offset)) {\n          \n          preamble = source.$slice(0, source_offset);\n          source = source.$slice(source_offset, source.$length());\n        } else {\n          preamble = \"\"\n        };\n        lineno = 0;\n        return $rb_plus(preamble, $send(source.$split($$($nesting, 'LF'), -1), 'map', [], ($$71 = function(line){var self = $$71.$$s || this, $a, $b, $$72, conums = nil, guard = nil, numeral = nil;\n          if (self.document == null) self.document = nil;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          if ($truthy((conums = callout_marks.$delete((lineno = $rb_plus(lineno, 1)))))) {\n            if (conums.$size()['$=='](1)) {\n              \n              $b = conums['$[]'](0), $a = Opal.to_ary($b), (guard = ($a[0] == null ? nil : $a[0])), (numeral = ($a[1] == null ? nil : $a[1])), $b;\n              return \"\" + (line) + ($$($nesting, 'Inline').$new(self, \"callout\", numeral, $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": guard})})).$convert());\n            } else {\n              return \"\" + (line) + ($send(conums, 'map', [], ($$72 = function(guard_it, numeral_it){var self = $$72.$$s || this;\n                if (self.document == null) self.document = nil;\n\n              \n                \n                if (guard_it == null) {\n                  guard_it = nil;\n                };\n                \n                if (numeral_it == null) {\n                  numeral_it = nil;\n                };\n                return $$($nesting, 'Inline').$new(self, \"callout\", numeral_it, $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": guard_it})})).$convert();}, $$72.$$s = self, $$72.$$arity = 2, $$72)).$join(\" \"))\n            }\n          } else {\n            return line\n          };}, $$71.$$s = self, $$71.$$arity = 1, $$71)).$join($$($nesting, 'LF')));\n      }, $Substitutors_restore_callouts$70.$$arity = -3);\n      \n      Opal.def(self, '$extract_inner_passthrough', $Substitutors_extract_inner_passthrough$73 = function $$extract_inner_passthrough(text, pre) {\n        var $a, $b, self = this, $writer = nil, passthru_key = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        if ($truthy(($truthy($a = ($truthy($b = text['$end_with?'](\"+\")) ? text['$start_with?'](\"+\", \"\\\\+\") : $b)) ? $$($nesting, 'SinglePlusInlinePassRx')['$=~'](text) : $a))) {\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n            return \"\" + (pre) + \"`+\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + \"+`\"\n          } else {\n            \n            \n            $writer = [(passthru_key = self.passthroughs.$size()), $hash2([\"text\", \"subs\"], {\"text\": (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), \"subs\": $$($nesting, 'BASIC_SUBS')})];\n            $send(self.passthroughs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return \"\" + (pre) + \"`\" + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END')) + \"`\";\n          }\n        } else {\n          return \"\" + (pre) + \"`\" + (text) + \"`\"\n        }\n      }, $Substitutors_extract_inner_passthrough$73.$$arity = 2);\n      \n      Opal.def(self, '$convert_quoted_text', $Substitutors_convert_quoted_text$74 = function $$convert_quoted_text(match, type, scope) {\n        var $a, self = this, attrs = nil, unescaped_attrs = nil, attrlist = nil, id = nil, attributes = nil;\n\n        \n        if ($truthy(match['$[]'](0)['$start_with?']($$($nesting, 'RS')))) {\n          if ($truthy((($a = scope['$=='](\"constrained\")) ? (attrs = match['$[]'](2)) : scope['$=='](\"constrained\")))) {\n            unescaped_attrs = \"\" + \"[\" + (attrs) + \"]\"\n          } else {\n            return match['$[]'](0).$slice(1, match['$[]'](0).$length())\n          }};\n        if (scope['$=='](\"constrained\")) {\n          if ($truthy(unescaped_attrs)) {\n            return \"\" + (unescaped_attrs) + ($$($nesting, 'Inline').$new(self, \"quoted\", match['$[]'](3), $hash2([\"type\"], {\"type\": type})).$convert())\n          } else {\n            \n            if ($truthy((attrlist = match['$[]'](2)))) {\n              \n              id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]'](\"id\");\n              if (type['$=='](\"mark\")) {\n                type = \"unquoted\"};};\n            return \"\" + (match['$[]'](1)) + ($$($nesting, 'Inline').$new(self, \"quoted\", match['$[]'](3), $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert());\n          }\n        } else {\n          \n          if ($truthy((attrlist = match['$[]'](1)))) {\n            \n            id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]'](\"id\");\n            if (type['$=='](\"mark\")) {\n              type = \"unquoted\"};};\n          return $$($nesting, 'Inline').$new(self, \"quoted\", match['$[]'](2), $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert();\n        };\n      }, $Substitutors_convert_quoted_text$74.$$arity = 3);\n      \n      Opal.def(self, '$do_replacement', $Substitutors_do_replacement$75 = function $$do_replacement(m, replacement, restore) {\n        var self = this, captured = nil, $case = nil;\n\n        if ($truthy((captured = m['$[]'](0))['$include?']($$($nesting, 'RS')))) {\n          return captured.$sub($$($nesting, 'RS'), \"\")\n        } else {\n          return (function() {$case = restore;\n          if (\"none\"['$===']($case)) {return replacement}\n          else if (\"bounding\"['$===']($case)) {return $rb_plus($rb_plus(m['$[]'](1), replacement), m['$[]'](2))}\n          else {return $rb_plus(m['$[]'](1), replacement)}})()\n        }\n      }, $Substitutors_do_replacement$75.$$arity = 3);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      } else {\n        nil\n      };\n      \n      Opal.def(self, '$parse_quoted_text_attributes', $Substitutors_parse_quoted_text_attributes$76 = function $$parse_quoted_text_attributes(str) {\n        var $a, $b, self = this, before = nil, _ = nil, after = nil, attrs = nil, $writer = nil, id = nil, roles = nil;\n\n        \n        if ($truthy(str['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n          str = self.$sub_attributes(str)};\n        if ($truthy(str['$include?'](\",\"))) {\n          str = str.$slice(0, str.$index(\",\"))};\n        if ($truthy((str = str.$strip())['$empty?']())) {\n          return $hash2([], {})\n        } else if ($truthy(($truthy($a = str['$start_with?'](\".\", \"#\")) ? $$($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {\n          \n          $b = str.$partition(\"#\"), $a = Opal.to_ary($b), (before = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (after = ($a[2] == null ? nil : $a[2])), $b;\n          attrs = $hash2([], {});\n          if ($truthy(after['$empty?']())) {\n            if ($truthy($rb_gt(before.$length(), 1))) {\n              \n              $writer = [\"role\", before.$tr(\".\", \" \").$lstrip()];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];}\n          } else {\n            \n            $b = after.$partition(\".\"), $a = Opal.to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (roles = ($a[2] == null ? nil : $a[2])), $b;\n            if ($truthy(id['$empty?']())) {\n            } else {\n              \n              $writer = [\"id\", id];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if ($truthy(roles['$empty?']())) {\n              if ($truthy($rb_gt(before.$length(), 1))) {\n                \n                $writer = [\"role\", before.$tr(\".\", \" \").$lstrip()];\n                $send(attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];}\n            } else if ($truthy($rb_gt(before.$length(), 1))) {\n              \n              $writer = [\"role\", $rb_plus($rb_plus(before, \".\"), roles).$tr(\".\", \" \").$lstrip()];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              \n              $writer = [\"role\", roles.$tr(\".\", \" \")];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          };\n          return attrs;\n        } else {\n          return $hash2([\"role\"], {\"role\": str})\n        };\n      }, $Substitutors_parse_quoted_text_attributes$76.$$arity = 1);\n      \n      Opal.def(self, '$normalize_text', $Substitutors_normalize_text$77 = function $$normalize_text(text, normalize_whitespace, unescape_closing_square_brackets) {\n        var $a, self = this;\n\n        \n        \n        if (normalize_whitespace == null) {\n          normalize_whitespace = nil;\n        };\n        \n        if (unescape_closing_square_brackets == null) {\n          unescape_closing_square_brackets = nil;\n        };\n        if ($truthy(text['$empty?']())) {\n        } else {\n          \n          if ($truthy(normalize_whitespace)) {\n            text = text.$strip().$tr($$($nesting, 'LF'), \" \")};\n          if ($truthy(($truthy($a = unescape_closing_square_brackets) ? text['$include?']($$($nesting, 'R_SB')) : $a))) {\n            text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n        };\n        return text;\n      }, $Substitutors_normalize_text$77.$$arity = -2);\n      \n      Opal.def(self, '$split_simple_csv', $Substitutors_split_simple_csv$78 = function $$split_simple_csv(str) {\n        var $$79, $$80, self = this, values = nil, accum = nil, quote_open = nil;\n\n        if ($truthy(str['$empty?']())) {\n          return []\n        } else if ($truthy(str['$include?'](\"\\\"\"))) {\n          \n          values = [];\n          accum = \"\";\n          quote_open = nil;\n          $send(str, 'each_char', [], ($$79 = function(c){var self = $$79.$$s || this, $case = nil;\n\n          \n            \n            if (c == null) {\n              c = nil;\n            };\n            return (function() {$case = c;\n            if (\",\"['$===']($case)) {if ($truthy(quote_open)) {\n              return (accum = $rb_plus(accum, c))\n            } else {\n              \n              values['$<<'](accum.$strip());\n              return (accum = \"\");\n            }}\n            else if (\"\\\"\"['$===']($case)) {return (quote_open = quote_open['$!']())}\n            else {return (accum = $rb_plus(accum, c))}})();}, $$79.$$s = self, $$79.$$arity = 1, $$79));\n          return values['$<<'](accum.$strip());\n        } else {\n          return $send(str.$split(\",\"), 'map', [], ($$80 = function(it){var self = $$80.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return it.$strip();}, $$80.$$s = self, $$80.$$arity = 1, $$80))\n        }\n      }, $Substitutors_split_simple_csv$78.$$arity = 1);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/version\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    Opal.const_set($nesting[0], 'VERSION', \"2.0.17\")\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/abstract_node\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$include', '$attr_reader', '$attr_accessor', '$==', '$document', '$to_s', '$[]', '$merge', '$raise', '$converter', '$attributes', '$key?', '$[]=', '$-', '$delete', '$tap', '$new', '$each_key', '$end_with?', '$<<', '$slice', '$length', '$update', '$split', '$include?', '$===', '$join', '$empty?', '$apply_reftext_subs', '$attr?', '$attr', '$extname?', '$image_uri', '$<', '$safe', '$uriish?', '$encode_spaces_in_uri', '$normalize_web_path', '$generate_data_uri_from_uri', '$generate_data_uri', '$extname', '$normalize_system_path', '$readable?', '$strict_encode64', '$binread', '$warn', '$logger', '$require_library', '$!', '$open_uri', '$content_type', '$read', '$base_dir', '$root?', '$path_resolver', '$system_path', '$web_path', '$!=', '$prepare_source_string', '$fetch', '$read_asset']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractNode');\n\n      var $nesting = [self].concat($parent_nesting), $AbstractNode_initialize$1, $AbstractNode_block$ques$2, $AbstractNode_inline$ques$3, $AbstractNode_converter$4, $AbstractNode_parent$eq$5, $AbstractNode_attr$6, $AbstractNode_attr$ques$7, $AbstractNode_set_attr$8, $AbstractNode_remove_attr$9, $AbstractNode_option$ques$10, $AbstractNode_set_option$11, $AbstractNode_enabled_options$12, $AbstractNode_update_attributes$15, $AbstractNode_role$16, $AbstractNode_roles$17, $AbstractNode_role$ques$18, $AbstractNode_has_role$ques$19, $AbstractNode_role$eq$20, $AbstractNode_add_role$21, $AbstractNode_remove_role$22, $AbstractNode_reftext$23, $AbstractNode_reftext$ques$24, $AbstractNode_icon_uri$25, $AbstractNode_image_uri$26, $AbstractNode_media_uri$27, $AbstractNode_generate_data_uri$28, $AbstractNode_generate_data_uri_from_uri$29, $AbstractNode_normalize_asset_path$31, $AbstractNode_normalize_system_path$32, $AbstractNode_normalize_web_path$33, $AbstractNode_read_asset$34, $AbstractNode_read_contents$35, $AbstractNode_is_uri$ques$38;\n\n      self.$$prototype.document = self.$$prototype.attributes = self.$$prototype.parent = nil;\n      \n      self.$include($$($nesting, 'Logging'));\n      self.$include($$($nesting, 'Substitutors'));\n      self.$attr_reader(\"attributes\");\n      self.$attr_reader(\"context\");\n      self.$attr_reader(\"document\");\n      self.$attr_accessor(\"id\");\n      self.$attr_reader(\"node_name\");\n      self.$attr_reader(\"parent\");\n      \n      Opal.def(self, '$initialize', $AbstractNode_initialize$1 = function $$initialize(parent, context, opts) {\n        var self = this, attrs = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if (context['$=='](\"document\")) {\n          self.document = self\n        } else if ($truthy(parent)) {\n          self.document = (self.parent = parent).$document()};\n        self.node_name = (self.context = context).$to_s();\n        self.attributes = (function() {if ($truthy((attrs = opts['$[]'](\"attributes\")))) {\n          return attrs.$merge()\n        } else {\n          return $hash2([], {})\n        }; return nil; })();\n        return (self.passthroughs = []);\n      }, $AbstractNode_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$block?', $AbstractNode_block$ques$2 = function() {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'))\n      }, $AbstractNode_block$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$inline?', $AbstractNode_inline$ques$3 = function() {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'))\n      }, $AbstractNode_inline$ques$3.$$arity = 0);\n      \n      Opal.def(self, '$converter', $AbstractNode_converter$4 = function $$converter() {\n        var self = this;\n\n        return self.document.$converter()\n      }, $AbstractNode_converter$4.$$arity = 0);\n      \n      Opal.def(self, '$parent=', $AbstractNode_parent$eq$5 = function(parent) {\n        var $a, self = this;\n\n        return $a = [parent, parent.$document()], (self.parent = $a[0]), (self.document = $a[1]), $a\n      }, $AbstractNode_parent$eq$5.$$arity = 1);\n      \n      Opal.def(self, '$attr', $AbstractNode_attr$6 = function $$attr(name, default_value, fallback_name) {\n        var $a, $b, $c, $d, self = this;\n\n        \n        \n        if (default_value == null) {\n          default_value = nil;\n        };\n        \n        if (fallback_name == null) {\n          fallback_name = nil;\n        };\n        return ($truthy($a = self.attributes['$[]'](name.$to_s())) ? $a : ($truthy($b = ($truthy($c = ($truthy($d = fallback_name) ? self.parent : $d)) ? self.document.$attributes()['$[]']((function() {if (fallback_name['$=='](true)) {\n          return name\n        } else {\n          return fallback_name\n        }; return nil; })().$to_s()) : $c)) ? $b : default_value));\n      }, $AbstractNode_attr$6.$$arity = -2);\n      \n      Opal.def(self, '$attr?', $AbstractNode_attr$ques$7 = function(name, expected_value, fallback_name) {\n        var $a, $b, self = this;\n\n        \n        \n        if (expected_value == null) {\n          expected_value = nil;\n        };\n        \n        if (fallback_name == null) {\n          fallback_name = nil;\n        };\n        if ($truthy(expected_value)) {\n          return expected_value['$=='](($truthy($a = self.attributes['$[]'](name.$to_s())) ? $a : (function() {if ($truthy(($truthy($b = fallback_name) ? self.parent : $b))) {\n            return self.document.$attributes()['$[]']((function() {if (fallback_name['$=='](true)) {\n              return name\n            } else {\n              return fallback_name\n            }; return nil; })().$to_s())\n          } else {\n            return nil\n          }; return nil; })()))\n        } else {\n          return ($truthy($a = self.attributes['$key?'](name.$to_s())) ? $a : (function() {if ($truthy(($truthy($b = fallback_name) ? self.parent : $b))) {\n            \n            return self.document.$attributes()['$key?']((function() {if (fallback_name['$=='](true)) {\n              return name\n            } else {\n              return fallback_name\n            }; return nil; })().$to_s());\n          } else {\n            return false\n          }; return nil; })())\n        };\n      }, $AbstractNode_attr$ques$7.$$arity = -2);\n      \n      Opal.def(self, '$set_attr', $AbstractNode_set_attr$8 = function $$set_attr(name, value, overwrite) {\n        var $a, self = this, $writer = nil;\n\n        \n        \n        if (value == null) {\n          value = \"\";\n        };\n        \n        if (overwrite == null) {\n          overwrite = true;\n        };\n        if ($truthy((($a = overwrite['$=='](false)) ? self.attributes['$key?'](name) : overwrite['$=='](false)))) {\n          return false\n        } else {\n          \n          \n          $writer = [name, value];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return true;\n        };\n      }, $AbstractNode_set_attr$8.$$arity = -2);\n      \n      Opal.def(self, '$remove_attr', $AbstractNode_remove_attr$9 = function $$remove_attr(name) {\n        var self = this;\n\n        return self.attributes.$delete(name)\n      }, $AbstractNode_remove_attr$9.$$arity = 1);\n      \n      Opal.def(self, '$option?', $AbstractNode_option$ques$10 = function(name) {\n        var self = this;\n\n        if ($truthy(self.attributes['$[]'](\"\" + (name) + \"-option\"))) {\n          return true\n        } else {\n          return false\n        }\n      }, $AbstractNode_option$ques$10.$$arity = 1);\n      \n      Opal.def(self, '$set_option', $AbstractNode_set_option$11 = function $$set_option(name) {\n        var self = this, $writer = nil;\n\n        \n        \n        $writer = [\"\" + (name) + \"-option\", \"\"];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        return nil;\n      }, $AbstractNode_set_option$11.$$arity = 1);\n      \n      Opal.def(self, '$enabled_options', $AbstractNode_enabled_options$12 = function $$enabled_options() {\n        var $$13, self = this;\n\n        return $send($$$('::', 'Set').$new(), 'tap', [], ($$13 = function(accum){var self = $$13.$$s || this, $$14;\n          if (self.attributes == null) self.attributes = nil;\n\n        \n          \n          if (accum == null) {\n            accum = nil;\n          };\n          return $send(self.attributes, 'each_key', [], ($$14 = function(k){var self = $$14.$$s || this;\n\n          \n            \n            if (k == null) {\n              k = nil;\n            };\n            if ($truthy(k.$to_s()['$end_with?'](\"-option\"))) {\n              return accum['$<<'](k.$slice(0, $rb_minus(k.$length(), 7)))\n            } else {\n              return nil\n            };}, $$14.$$s = self, $$14.$$arity = 1, $$14));}, $$13.$$s = self, $$13.$$arity = 1, $$13))\n      }, $AbstractNode_enabled_options$12.$$arity = 0);\n      \n      Opal.def(self, '$update_attributes', $AbstractNode_update_attributes$15 = function $$update_attributes(new_attributes) {\n        var self = this;\n\n        return self.attributes.$update(new_attributes)\n      }, $AbstractNode_update_attributes$15.$$arity = 1);\n      \n      Opal.def(self, '$role', $AbstractNode_role$16 = function $$role() {\n        var self = this;\n\n        return self.attributes['$[]'](\"role\")\n      }, $AbstractNode_role$16.$$arity = 0);\n      \n      Opal.def(self, '$roles', $AbstractNode_roles$17 = function $$roles() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          return val.$split()\n        } else {\n          return []\n        }\n      }, $AbstractNode_roles$17.$$arity = 0);\n      \n      Opal.def(self, '$role?', $AbstractNode_role$ques$18 = function(expected_value) {\n        var self = this;\n\n        \n        \n        if (expected_value == null) {\n          expected_value = nil;\n        };\n        if ($truthy(expected_value)) {\n          return expected_value['$=='](self.attributes['$[]'](\"role\"))\n        } else {\n          \n          return self.attributes['$key?'](\"role\");\n        };\n      }, $AbstractNode_role$ques$18.$$arity = -1);\n      \n      Opal.def(self, '$has_role?', $AbstractNode_has_role$ques$19 = function(name) {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          \n          return (((\"\" + \" \") + (val)) + \" \")['$include?'](\"\" + \" \" + (name) + \" \");\n        } else {\n          return false\n        }\n      }, $AbstractNode_has_role$ques$19.$$arity = 1);\n      \n      Opal.def(self, '$role=', $AbstractNode_role$eq$20 = function(names) {\n        var self = this, $writer = nil;\n\n        \n        $writer = [\"role\", (function() {if ($truthy($$$('::', 'Array')['$==='](names))) {\n          \n          return names.$join(\" \");\n        } else {\n          return names\n        }; return nil; })()];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $AbstractNode_role$eq$20.$$arity = 1);\n      \n      Opal.def(self, '$add_role', $AbstractNode_add_role$21 = function $$add_role(name) {\n        var self = this, val = nil, $writer = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          if ($truthy((((\"\" + \" \") + (val)) + \" \")['$include?'](\"\" + \" \" + (name) + \" \"))) {\n            return false\n          } else {\n            \n            \n            $writer = [\"role\", \"\" + (val) + \" \" + (name)];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return true;\n          }\n        } else {\n          \n          \n          $writer = [\"role\", name];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return true;\n        }\n      }, $AbstractNode_add_role$21.$$arity = 1);\n      \n      Opal.def(self, '$remove_role', $AbstractNode_remove_role$22 = function $$remove_role(name) {\n        var $a, self = this, val = nil, $writer = nil;\n\n        if ($truthy(($truthy($a = (val = self.attributes['$[]'](\"role\"))) ? (val = val.$split()).$delete(name) : $a))) {\n          \n          if ($truthy(val['$empty?']())) {\n            self.attributes.$delete(\"role\")\n          } else {\n            \n            $writer = [\"role\", val.$join(\" \")];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          return true;\n        } else {\n          return false\n        }\n      }, $AbstractNode_remove_role$22.$$arity = 1);\n      \n      Opal.def(self, '$reftext', $AbstractNode_reftext$23 = function $$reftext() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"reftext\")))) {\n          \n          return self.$apply_reftext_subs(val);\n        } else {\n          return nil\n        }\n      }, $AbstractNode_reftext$23.$$arity = 0);\n      \n      Opal.def(self, '$reftext?', $AbstractNode_reftext$ques$24 = function() {\n        var self = this;\n\n        return self.attributes['$key?'](\"reftext\")\n      }, $AbstractNode_reftext$ques$24.$$arity = 0);\n      \n      Opal.def(self, '$icon_uri', $AbstractNode_icon_uri$25 = function $$icon_uri(name) {\n        var self = this, icon = nil;\n\n        \n        if ($truthy(self['$attr?'](\"icon\"))) {\n          \n          icon = self.$attr(\"icon\");\n          if ($truthy($$($nesting, 'Helpers')['$extname?'](icon))) {\n          } else {\n            icon = \"\" + (icon) + \".\" + (self.document.$attr(\"icontype\", \"png\"))\n          };\n        } else {\n          icon = \"\" + (name) + \".\" + (self.document.$attr(\"icontype\", \"png\"))\n        };\n        return self.$image_uri(icon, \"iconsdir\");\n      }, $AbstractNode_icon_uri$25.$$arity = 1);\n      \n      Opal.def(self, '$image_uri', $AbstractNode_image_uri$26 = function $$image_uri(target_image, asset_dir_key) {\n        var $a, $b, $c, $d, self = this, doc = nil, images_base = nil;\n\n        \n        \n        if (asset_dir_key == null) {\n          asset_dir_key = \"imagesdir\";\n        };\n        if ($truthy(($truthy($a = $rb_lt((doc = self.document).$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE'))) ? doc['$attr?'](\"data-uri\") : $a))) {\n          if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Helpers')['$uriish?'](target_image)) ? (target_image = $$($nesting, 'Helpers').$encode_spaces_in_uri(target_image)) : $b)) ? $a : ($truthy($b = ($truthy($c = ($truthy($d = asset_dir_key) ? (images_base = doc.$attr(asset_dir_key)) : $d)) ? $$($nesting, 'Helpers')['$uriish?'](images_base) : $c)) ? (target_image = self.$normalize_web_path(target_image, images_base, false)) : $b)))) {\n            if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n              \n              return self.$generate_data_uri_from_uri(target_image, doc['$attr?'](\"cache-uri\"));\n            } else {\n              return target_image\n            }\n          } else {\n            return self.$generate_data_uri(target_image, asset_dir_key)\n          }\n        } else {\n          return self.$normalize_web_path(target_image, (function() {if ($truthy(asset_dir_key)) {\n            \n            return doc.$attr(asset_dir_key);\n          } else {\n            return nil\n          }; return nil; })())\n        };\n      }, $AbstractNode_image_uri$26.$$arity = -2);\n      \n      Opal.def(self, '$media_uri', $AbstractNode_media_uri$27 = function $$media_uri(target, asset_dir_key) {\n        var self = this;\n\n        \n        \n        if (asset_dir_key == null) {\n          asset_dir_key = \"imagesdir\";\n        };\n        return self.$normalize_web_path(target, (function() {if ($truthy(asset_dir_key)) {\n          return self.document.$attr(asset_dir_key)\n        } else {\n          return nil\n        }; return nil; })());\n      }, $AbstractNode_media_uri$27.$$arity = -2);\n      \n      Opal.def(self, '$generate_data_uri', $AbstractNode_generate_data_uri$28 = function $$generate_data_uri(target_image, asset_dir_key) {\n        var self = this, ext = nil, mimetype = nil, image_path = nil;\n\n        \n        \n        if (asset_dir_key == null) {\n          asset_dir_key = nil;\n        };\n        if ($truthy((ext = $$($nesting, 'Helpers').$extname(target_image, nil)))) {\n          mimetype = (function() {if (ext['$=='](\".svg\")) {\n            return \"image/svg+xml\"\n          } else {\n            return \"\" + \"image/\" + (ext.$slice(1, ext.$length()))\n          }; return nil; })()\n        } else {\n          mimetype = \"application/octet-stream\"\n        };\n        if ($truthy(asset_dir_key)) {\n          image_path = self.$normalize_system_path(target_image, self.document.$attr(asset_dir_key), nil, $hash2([\"target_name\"], {\"target_name\": \"image\"}))\n        } else {\n          image_path = self.$normalize_system_path(target_image)\n        };\n        if ($truthy($$$('::', 'File')['$readable?'](image_path))) {\n          return \"\" + \"data:\" + (mimetype) + \";base64,\" + ($$$('::', 'Base64').$strict_encode64($$$('::', 'File').$binread(image_path)))\n        } else {\n          \n          self.$logger().$warn(\"\" + \"image to embed not found or not readable: \" + (image_path));\n          return \"\" + \"data:\" + (mimetype) + \";base64,\";\n        };\n      }, $AbstractNode_generate_data_uri$28.$$arity = -2);\n      \n      Opal.def(self, '$generate_data_uri_from_uri', $AbstractNode_generate_data_uri_from_uri$29 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {\n        var $a, $b, $$30, self = this, mimetype = nil, bindata = nil;\n\n        \n        \n        if (cache_uri == null) {\n          cache_uri = false;\n        };\n        if ($truthy(cache_uri)) {\n          $$($nesting, 'Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")\n        } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL')['$!']())) {\n          $$$('::', 'OpenURI')};\n        \n        try {\n          \n          $b = $send($$$('::', 'OpenURI'), 'open_uri', [image_uri, $$($nesting, 'URI_READ_MODE')], ($$30 = function(f){var self = $$30.$$s || this;\n\n          \n            \n            if (f == null) {\n              f = nil;\n            };\n            return [f.$content_type(), f.$read()];}, $$30.$$s = self, $$30.$$arity = 1, $$30)), $a = Opal.to_ary($b), (mimetype = ($a[0] == null ? nil : $a[0])), (bindata = ($a[1] == null ? nil : $a[1])), $b;\n          return \"\" + \"data:\" + (mimetype) + \";base64,\" + ($$$('::', 'Base64').$strict_encode64(bindata));\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              \n              self.$logger().$warn(\"\" + \"could not retrieve image data from URI: \" + (image_uri));\n              return image_uri;\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };;\n      }, $AbstractNode_generate_data_uri_from_uri$29.$$arity = -2);\n      \n      Opal.def(self, '$normalize_asset_path', $AbstractNode_normalize_asset_path$31 = function $$normalize_asset_path(asset_ref, asset_name, autocorrect) {\n        var self = this;\n\n        \n        \n        if (asset_name == null) {\n          asset_name = \"path\";\n        };\n        \n        if (autocorrect == null) {\n          autocorrect = true;\n        };\n        return self.$normalize_system_path(asset_ref, self.document.$base_dir(), nil, $hash2([\"target_name\", \"recover\"], {\"target_name\": asset_name, \"recover\": autocorrect}));\n      }, $AbstractNode_normalize_asset_path$31.$$arity = -2);\n      \n      Opal.def(self, '$normalize_system_path', $AbstractNode_normalize_system_path$32 = function $$normalize_system_path(target, start, jail, opts) {\n        var $a, self = this, doc = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        \n        if (jail == null) {\n          jail = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy($rb_lt((doc = self.document).$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n          if ($truthy(start)) {\n            if ($truthy(doc.$path_resolver()['$root?'](start))) {\n            } else {\n              start = $$$('::', 'File').$join(doc.$base_dir(), start)\n            }\n          } else {\n            start = doc.$base_dir()\n          }\n        } else {\n          \n          start = ($truthy($a = start) ? $a : doc.$base_dir());\n          jail = ($truthy($a = jail) ? $a : doc.$base_dir());\n        };\n        return doc.$path_resolver().$system_path(target, start, jail, opts);\n      }, $AbstractNode_normalize_system_path$32.$$arity = -2);\n      \n      Opal.def(self, '$normalize_web_path', $AbstractNode_normalize_web_path$33 = function $$normalize_web_path(target, start, preserve_uri_target) {\n        var $a, self = this;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        \n        if (preserve_uri_target == null) {\n          preserve_uri_target = true;\n        };\n        if ($truthy(($truthy($a = preserve_uri_target) ? $$($nesting, 'Helpers')['$uriish?'](target) : $a))) {\n          return $$($nesting, 'Helpers').$encode_spaces_in_uri(target)\n        } else {\n          return self.document.$path_resolver().$web_path(target, start)\n        };\n      }, $AbstractNode_normalize_web_path$33.$$arity = -2);\n      \n      Opal.def(self, '$read_asset', $AbstractNode_read_asset$34 = function $$read_asset(path, opts) {\n        var $a, self = this;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy($$$('::', 'Hash')['$==='](opts))) {\n        } else {\n          opts = $hash2([\"warn_on_failure\"], {\"warn_on_failure\": opts['$!='](false)})\n        };\n        if ($truthy($$$('::', 'File')['$readable?'](path))) {\n          if ($truthy(opts['$[]'](\"normalize\"))) {\n            \n            return $$($nesting, 'Helpers').$prepare_source_string($$$('::', 'File').$read(path, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_READ_MODE')}))).$join($$($nesting, 'LF'));\n          } else {\n            \n            return $$$('::', 'File').$read(path, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_READ_MODE')}));\n          }\n        } else if ($truthy(opts['$[]'](\"warn_on_failure\"))) {\n          \n          self.$logger().$warn(\"\" + (($truthy($a = self.$attr(\"docfile\")) ? $a : \"<stdin>\")) + \": \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"file\")) + \" does not exist or cannot be read: \" + (path));\n          return nil;\n        } else {\n          return nil\n        };\n      }, $AbstractNode_read_asset$34.$$arity = -2);\n      \n      Opal.def(self, '$read_contents', $AbstractNode_read_contents$35 = function $$read_contents(target, opts) {\n        var $a, $b, $c, $$36, $$37, self = this, doc = nil, start = nil, contents = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        doc = self.document;\n        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : ($truthy($b = ($truthy($c = (start = opts['$[]'](\"start\"))) ? $$($nesting, 'Helpers')['$uriish?'](start) : $c)) ? (target = doc.$path_resolver().$web_path(target, start)) : $b)))) {\n          if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n            \n            if ($truthy(doc['$attr?'](\"cache-uri\"))) {\n              $$($nesting, 'Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")};\n            \n            try {\n              if ($truthy(opts['$[]'](\"normalize\"))) {\n                contents = $$($nesting, 'Helpers').$prepare_source_string($send($$$('::', 'OpenURI'), 'open_uri', [target, $$($nesting, 'URI_READ_MODE')], ($$36 = function(f){var self = $$36.$$s || this;\n\n                \n                  \n                  if (f == null) {\n                    f = nil;\n                  };\n                  return f.$read();}, $$36.$$s = self, $$36.$$arity = 1, $$36))).$join($$($nesting, 'LF'))\n              } else {\n                contents = $send($$$('::', 'OpenURI'), 'open_uri', [target, $$($nesting, 'URI_READ_MODE')], ($$37 = function(f){var self = $$37.$$s || this;\n\n                \n                  \n                  if (f == null) {\n                    f = nil;\n                  };\n                  return f.$read();}, $$37.$$s = self, $$37.$$arity = 1, $$37))\n              }\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n                    self.$logger().$warn(\"\" + \"could not retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target))}\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };;\n          } else if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n            self.$logger().$warn(\"\" + \"cannot retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target) + \" (allow-uri-read attribute not enabled)\")}\n        } else {\n          \n          target = self.$normalize_system_path(target, opts['$[]'](\"start\"), nil, $hash2([\"target_name\"], {\"target_name\": ($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")}));\n          contents = self.$read_asset(target, $hash2([\"normalize\", \"warn_on_failure\", \"label\"], {\"normalize\": opts['$[]'](\"normalize\"), \"warn_on_failure\": opts.$fetch(\"warn_on_failure\", true), \"label\": opts['$[]'](\"label\")}));\n        };\n        if ($truthy(($truthy($a = ($truthy($b = contents) ? opts['$[]'](\"warn_if_empty\") : $b)) ? contents['$empty?']() : $a))) {\n          self.$logger().$warn(\"\" + \"contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" is empty: \" + (target))};\n        return contents;\n      }, $AbstractNode_read_contents$35.$$arity = -2);\n      return (Opal.def(self, '$is_uri?', $AbstractNode_is_uri$ques$38 = function(str) {\n        var self = this;\n\n        return $$($nesting, 'Helpers')['$uriish?'](str)\n      }, $AbstractNode_is_uri$ques$38.$$arity = 1), nil) && 'is_uri?';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/abstract_block\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_reader', '$attr_writer', '$attr_accessor', '$==', '$===', '$level', '$file', '$lineno', '$playback_attributes', '$convert', '$converter', '$join', '$map', '$to_s', '$parent', '$parent=', '$-', '$<<', '$empty?', '$Integer', '$find_by_internal', '$to_proc', '$context', '$[]', '$items', '$+', '$find_index', '$include?', '$next_adjacent_block', '$blocks', '$select', '$sub_specialchars', '$match?', '$sub_replacements', '$title', '$apply_title_subs', '$delete', '$reftext', '$!', '$nil_or_empty?', '$sub_placeholder', '$sub_quotes', '$compat_mode', '$attributes', '$chomp', '$increment_and_store_counter', '$index=', '$numbered', '$sectname', '$counter', '$numeral=', '$numeral', '$caption=', '$int_to_roman', '$each', '$assign_numeral', '$reindex_sections', '$protected', '$has_role?', '$raise', '$header?', '$!=', '$flatten', '$head', '$rows', '$merge', '$body', '$foot', '$style', '$inner_document']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractBlock');\n\n      var $nesting = [self].concat($parent_nesting), $AbstractBlock_initialize$1, $AbstractBlock_block$ques$2, $AbstractBlock_inline$ques$3, $AbstractBlock_file$4, $AbstractBlock_lineno$5, $AbstractBlock_convert$6, $AbstractBlock_content$7, $AbstractBlock_context$eq$9, $AbstractBlock_$lt$lt$10, $AbstractBlock_blocks$ques$11, $AbstractBlock_sections$ques$12, $AbstractBlock_number$13, $AbstractBlock_number$eq$14, $AbstractBlock_find_by$15, $AbstractBlock_next_adjacent_block$16, $AbstractBlock_sections$18, $AbstractBlock_alt$20, $AbstractBlock_caption$21, $AbstractBlock_captioned_title$22, $AbstractBlock_list_marker_keyword$23, $AbstractBlock_title$24, $AbstractBlock_title$ques$25, $AbstractBlock_title$eq$26, $AbstractBlock_sub$ques$27, $AbstractBlock_remove_sub$28, $AbstractBlock_xreftext$29, $AbstractBlock_assign_caption$30, $AbstractBlock_assign_numeral$31, $AbstractBlock_reindex_sections$32, $AbstractBlock_find_by_internal$34;\n\n      self.$$prototype.source_location = self.$$prototype.document = self.$$prototype.attributes = self.$$prototype.blocks = self.$$prototype.numeral = self.$$prototype.context = self.$$prototype.parent = self.$$prototype.caption = self.$$prototype.style = self.$$prototype.converted_title = self.$$prototype.title = self.$$prototype.subs = self.$$prototype.next_section_index = self.$$prototype.next_section_ordinal = self.$$prototype.id = self.$$prototype.header = nil;\n      \n      self.$attr_reader(\"blocks\");\n      self.$attr_writer(\"caption\");\n      self.$attr_accessor(\"content_model\");\n      self.$attr_accessor(\"level\");\n      self.$attr_accessor(\"numeral\");\n      self.$attr_accessor(\"source_location\");\n      self.$attr_accessor(\"style\");\n      self.$attr_reader(\"subs\");\n      \n      Opal.def(self, '$initialize', $AbstractBlock_initialize$1 = function $$initialize(parent, context, opts) {\n        var $a, $iter = $AbstractBlock_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $AbstractBlock_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $AbstractBlock_initialize$1, false), $zuper, $iter);\n        self.content_model = \"compound\";\n        self.blocks = [];\n        self.subs = [];\n        self.id = (self.title = (self.caption = (self.numeral = (self.style = (self.default_subs = (self.source_location = nil))))));\n        if ($truthy(($truthy($a = context['$=='](\"document\")) ? $a : context['$=='](\"section\")))) {\n          \n          self.level = (self.next_section_index = 0);\n          return (self.next_section_ordinal = 1);\n        } else if ($truthy($$($nesting, 'AbstractBlock')['$==='](parent))) {\n          return (self.level = parent.$level())\n        } else {\n          return (self.level = nil)\n        };\n      }, $AbstractBlock_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$block?', $AbstractBlock_block$ques$2 = function() {\n        var self = this;\n\n        return true\n      }, $AbstractBlock_block$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$inline?', $AbstractBlock_inline$ques$3 = function() {\n        var self = this;\n\n        return false\n      }, $AbstractBlock_inline$ques$3.$$arity = 0);\n      \n      Opal.def(self, '$file', $AbstractBlock_file$4 = function $$file() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$file() : $a)\n      }, $AbstractBlock_file$4.$$arity = 0);\n      \n      Opal.def(self, '$lineno', $AbstractBlock_lineno$5 = function $$lineno() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$lineno() : $a)\n      }, $AbstractBlock_lineno$5.$$arity = 0);\n      \n      Opal.def(self, '$convert', $AbstractBlock_convert$6 = function $$convert() {\n        var self = this;\n\n        \n        self.document.$playback_attributes(self.attributes);\n        return self.$converter().$convert(self);\n      }, $AbstractBlock_convert$6.$$arity = 0);\n      Opal.alias(self, \"render\", \"convert\");\n      \n      Opal.def(self, '$content', $AbstractBlock_content$7 = function $$content() {\n        var $$8, self = this;\n\n        return $send(self.blocks, 'map', [], ($$8 = function(b){var self = $$8.$$s || this;\n\n        \n          \n          if (b == null) {\n            b = nil;\n          };\n          return b.$convert();}, $$8.$$s = self, $$8.$$arity = 1, $$8)).$join($$($nesting, 'LF'))\n      }, $AbstractBlock_content$7.$$arity = 0);\n      \n      Opal.def(self, '$context=', $AbstractBlock_context$eq$9 = function(context) {\n        var self = this;\n\n        return (self.node_name = (self.context = context).$to_s())\n      }, $AbstractBlock_context$eq$9.$$arity = 1);\n      \n      Opal.def(self, '$<<', $AbstractBlock_$lt$lt$10 = function(block) {\n        var self = this, $writer = nil;\n\n        \n        if (block.$parent()['$=='](self)) {\n        } else {\n          \n          $writer = [self];\n          $send(block, 'parent=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        self.blocks['$<<'](block);\n        return self;\n      }, $AbstractBlock_$lt$lt$10.$$arity = 1);\n      Opal.alias(self, \"append\", \"<<\");\n      \n      Opal.def(self, '$blocks?', $AbstractBlock_blocks$ques$11 = function() {\n        var self = this;\n\n        if ($truthy(self.blocks['$empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      }, $AbstractBlock_blocks$ques$11.$$arity = 0);\n      \n      Opal.def(self, '$sections?', $AbstractBlock_sections$ques$12 = function() {\n        var self = this;\n\n        return false\n      }, $AbstractBlock_sections$ques$12.$$arity = 0);\n      \n      Opal.def(self, '$number', $AbstractBlock_number$13 = function $$number() {\n        var self = this;\n\n        try {\n          \n          return self.$Integer(self.numeral);\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              return self.numeral\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        }\n      }, $AbstractBlock_number$13.$$arity = 0);\n      \n      Opal.def(self, '$number=', $AbstractBlock_number$eq$14 = function(val) {\n        var self = this;\n\n        return (self.numeral = val.$to_s())\n      }, $AbstractBlock_number$eq$14.$$arity = 1);\n      \n      Opal.def(self, '$find_by', $AbstractBlock_find_by$15 = function $$find_by(selector) {\n        var $iter = $AbstractBlock_find_by$15.$$p, block = $iter || nil, self = this, result = nil;\n\n        if ($iter) $AbstractBlock_find_by$15.$$p = null;\n        \n        \n        if ($iter) $AbstractBlock_find_by$15.$$p = null;;\n        \n        if (selector == null) {\n          selector = $hash2([], {});\n        };\n        try {\n          return $send(self, 'find_by_internal', [selector, (result = [])], block.$to_proc())\n        } catch ($err) {\n          if (Opal.rescue($err, [$$$('::', 'StopIteration')])) {\n            try {\n              return result\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $AbstractBlock_find_by$15.$$arity = -1);\n      Opal.alias(self, \"query\", \"find_by\");\n      \n      Opal.def(self, '$next_adjacent_block', $AbstractBlock_next_adjacent_block$16 = function $$next_adjacent_block() {\n        var $a, $$17, self = this, p = nil, sib = nil;\n\n        if (self.context['$=='](\"document\")) {\n          return nil\n        } else if ($truthy((($a = (p = self.parent).$context()['$=='](\"dlist\")) ? self.context['$=='](\"list_item\") : (p = self.parent).$context()['$=='](\"dlist\")))) {\n          if ($truthy((sib = p.$items()['$[]']($rb_plus($send(p.$items(), 'find_index', [], ($$17 = function(terms, desc){var self = $$17.$$s || this, $b;\n\n          \n            \n            if (terms == null) {\n              terms = nil;\n            };\n            \n            if (desc == null) {\n              desc = nil;\n            };\n            return ($truthy($b = terms['$include?'](self)) ? $b : desc['$=='](self));}, $$17.$$s = self, $$17.$$arity = 2, $$17)), 1))))) {\n            return sib\n          } else {\n            return p.$next_adjacent_block()\n          }\n        } else if ($truthy((sib = p.$blocks()['$[]']($rb_plus(p.$blocks().$find_index(self), 1))))) {\n          return sib\n        } else {\n          return p.$next_adjacent_block()\n        }\n      }, $AbstractBlock_next_adjacent_block$16.$$arity = 0);\n      \n      Opal.def(self, '$sections', $AbstractBlock_sections$18 = function $$sections() {\n        var $$19, self = this;\n\n        return $send(self.blocks, 'select', [], ($$19 = function(block){var self = $$19.$$s || this;\n\n        \n          \n          if (block == null) {\n            block = nil;\n          };\n          return block.$context()['$=='](\"section\");}, $$19.$$s = self, $$19.$$arity = 1, $$19))\n      }, $AbstractBlock_sections$18.$$arity = 0);\n      \n      Opal.def(self, '$alt', $AbstractBlock_alt$20 = function $$alt() {\n        var self = this, text = nil;\n\n        if ($truthy((text = self.attributes['$[]'](\"alt\")))) {\n          if (text['$=='](self.attributes['$[]'](\"default-alt\"))) {\n            return self.$sub_specialchars(text)\n          } else {\n            \n            text = self.$sub_specialchars(text);\n            if ($truthy($$($nesting, 'ReplaceableTextRx')['$match?'](text))) {\n              \n              return self.$sub_replacements(text);\n            } else {\n              return text\n            };\n          }\n        } else {\n          return \"\"\n        }\n      }, $AbstractBlock_alt$20.$$arity = 0);\n      \n      Opal.def(self, '$caption', $AbstractBlock_caption$21 = function $$caption() {\n        var self = this;\n\n        if (self.context['$=='](\"admonition\")) {\n          return self.attributes['$[]'](\"textlabel\")\n        } else {\n          return self.caption\n        }\n      }, $AbstractBlock_caption$21.$$arity = 0);\n      \n      Opal.def(self, '$captioned_title', $AbstractBlock_captioned_title$22 = function $$captioned_title() {\n        var self = this;\n\n        return \"\" + (self.caption) + (self.$title())\n      }, $AbstractBlock_captioned_title$22.$$arity = 0);\n      \n      Opal.def(self, '$list_marker_keyword', $AbstractBlock_list_marker_keyword$23 = function $$list_marker_keyword(list_type) {\n        var $a, self = this;\n\n        \n        \n        if (list_type == null) {\n          list_type = nil;\n        };\n        return $$($nesting, 'ORDERED_LIST_KEYWORDS')['$[]'](($truthy($a = list_type) ? $a : self.style));\n      }, $AbstractBlock_list_marker_keyword$23.$$arity = -1);\n      \n      Opal.def(self, '$title', $AbstractBlock_title$24 = function $$title() {\n        var $a, $b, self = this;\n\n        return (self.converted_title = ($truthy($a = self.converted_title) ? $a : ($truthy($b = self.title) ? self.$apply_title_subs(self.title) : $b)))\n      }, $AbstractBlock_title$24.$$arity = 0);\n      \n      Opal.def(self, '$title?', $AbstractBlock_title$ques$25 = function() {\n        var self = this;\n\n        if ($truthy(self.title)) {\n          return true\n        } else {\n          return false\n        }\n      }, $AbstractBlock_title$ques$25.$$arity = 0);\n      \n      Opal.def(self, '$title=', $AbstractBlock_title$eq$26 = function(val) {\n        var self = this;\n\n        \n        self.converted_title = nil;\n        return (self.title = val);\n      }, $AbstractBlock_title$eq$26.$$arity = 1);\n      \n      Opal.def(self, '$sub?', $AbstractBlock_sub$ques$27 = function(name) {\n        var self = this;\n\n        return self.subs['$include?'](name)\n      }, $AbstractBlock_sub$ques$27.$$arity = 1);\n      \n      Opal.def(self, '$remove_sub', $AbstractBlock_remove_sub$28 = function $$remove_sub(sub) {\n        var self = this;\n\n        \n        self.subs.$delete(sub);\n        return nil;\n      }, $AbstractBlock_remove_sub$28.$$arity = 1);\n      \n      Opal.def(self, '$xreftext', $AbstractBlock_xreftext$29 = function $$xreftext(xrefstyle) {\n        var $a, $b, self = this, val = nil, $case = nil, quoted_title = nil, caption_attr_name = nil, prefix = nil;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {\n          return val\n        } else if ($truthy(($truthy($a = ($truthy($b = xrefstyle) ? self.title : $b)) ? self.caption['$nil_or_empty?']()['$!']() : $a))) {\n          return (function() {$case = xrefstyle;\n          if (\"full\"['$===']($case)) {\n          quoted_title = self.$sub_placeholder(self.$sub_quotes((function() {if ($truthy(self.document.$compat_mode())) {\n            return \"``%s''\"\n          } else {\n            return \"\\\"`%s`\\\"\"\n          }; return nil; })()), self.$title());\n          if ($truthy(($truthy($a = ($truthy($b = self.numeral) ? (caption_attr_name = $$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](self.context)) : $b)) ? (prefix = self.document.$attributes()['$[]'](caption_attr_name)) : $a))) {\n            return \"\" + (prefix) + \" \" + (self.numeral) + \", \" + (quoted_title)\n          } else {\n            return \"\" + (self.caption.$chomp(\". \")) + \", \" + (quoted_title)\n          };}\n          else if (\"short\"['$===']($case)) {if ($truthy(($truthy($a = ($truthy($b = self.numeral) ? (caption_attr_name = $$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](self.context)) : $b)) ? (prefix = self.document.$attributes()['$[]'](caption_attr_name)) : $a))) {\n            return \"\" + (prefix) + \" \" + (self.numeral)\n          } else {\n            return self.caption.$chomp(\". \")\n          }}\n          else {return self.$title()}})()\n        } else {\n          return self.$title()\n        };\n      }, $AbstractBlock_xreftext$29.$$arity = -1);\n      \n      Opal.def(self, '$assign_caption', $AbstractBlock_assign_caption$30 = function $$assign_caption(value, caption_context) {\n        var $a, $b, self = this, attr_name = nil, prefix = nil;\n\n        \n        \n        if (caption_context == null) {\n          caption_context = self.context;\n        };\n        if ($truthy(($truthy($a = ($truthy($b = self.caption) ? $b : self.title['$!']())) ? $a : (self.caption = ($truthy($b = value) ? $b : self.document.$attributes()['$[]'](\"caption\")))))) {\n          return nil\n        } else if ($truthy(($truthy($a = (attr_name = $$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](caption_context))) ? (prefix = self.document.$attributes()['$[]'](attr_name)) : $a))) {\n          \n          self.caption = \"\" + (prefix) + \" \" + ((self.numeral = self.document.$increment_and_store_counter(\"\" + (caption_context) + \"-number\", self))) + \". \";\n          return nil;\n        } else {\n          return nil\n        };\n      }, $AbstractBlock_assign_caption$30.$$arity = -2);\n      \n      Opal.def(self, '$assign_numeral', $AbstractBlock_assign_numeral$31 = function $$assign_numeral(section) {\n        var $a, self = this, $writer = nil, like = nil, sectname = nil, caption = nil;\n\n        \n        self.next_section_index = $rb_plus((($writer = [self.next_section_index]), $send(section, 'index=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]), 1);\n        if ($truthy((like = section.$numbered()))) {\n          if ((sectname = section.$sectname())['$=='](\"appendix\")) {\n            \n            \n            $writer = [self.document.$counter(\"appendix-number\", \"A\")];\n            $send(section, 'numeral=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [(function() {if ($truthy((caption = self.document.$attributes()['$[]'](\"appendix-caption\")))) {\n              return \"\" + (caption) + \" \" + (section.$numeral()) + \": \"\n            } else {\n              return \"\" + (section.$numeral()) + \". \"\n            }; return nil; })()];\n            $send(section, 'caption=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else if ($truthy(($truthy($a = sectname['$=='](\"chapter\")) ? $a : like['$=='](\"chapter\")))) {\n            \n            $writer = [self.document.$counter(\"chapter-number\", 1).$to_s()];\n            $send(section, 'numeral=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            \n            $writer = [(function() {if (sectname['$=='](\"part\")) {\n              \n              return $$($nesting, 'Helpers').$int_to_roman(self.next_section_ordinal);\n            } else {\n              return self.next_section_ordinal.$to_s()\n            }; return nil; })()];\n            $send(section, 'numeral=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            self.next_section_ordinal = $rb_plus(self.next_section_ordinal, 1);\n          }};\n        return nil;\n      }, $AbstractBlock_assign_numeral$31.$$arity = 1);\n      \n      Opal.def(self, '$reindex_sections', $AbstractBlock_reindex_sections$32 = function $$reindex_sections() {\n        var $$33, self = this;\n\n        \n        self.next_section_index = 0;\n        self.next_section_ordinal = 1;\n        return $send(self.blocks, 'each', [], ($$33 = function(block){var self = $$33.$$s || this;\n\n        \n          \n          if (block == null) {\n            block = nil;\n          };\n          if (block.$context()['$=='](\"section\")) {\n            \n            self.$assign_numeral(block);\n            return block.$reindex_sections();\n          } else {\n            return nil\n          };}, $$33.$$s = self, $$33.$$arity = 1, $$33));\n      }, $AbstractBlock_reindex_sections$32.$$arity = 0);\n      self.$protected();\n      return (Opal.def(self, '$find_by_internal', $AbstractBlock_find_by_internal$34 = function $$find_by_internal(selector, result) {\n        var $iter = $AbstractBlock_find_by_internal$34.$$p, block = $iter || nil, $a, $b, $c, $d, $$35, $$36, $$37, $$39, $$41, $$43, self = this, any_context = nil, context_selector = nil, style_selector = nil, role_selector = nil, id_selector = nil, verdict = nil, $case = nil;\n\n        if ($iter) $AbstractBlock_find_by_internal$34.$$p = null;\n        \n        \n        if ($iter) $AbstractBlock_find_by_internal$34.$$p = null;;\n        \n        if (selector == null) {\n          selector = $hash2([], {});\n        };\n        \n        if (result == null) {\n          result = [];\n        };\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = (any_context = (function() {if ($truthy((context_selector = selector['$[]'](\"context\")))) {\n          return nil\n        } else {\n          return true\n        }; return nil; })())) ? $d : context_selector['$=='](self.context))) ? ($truthy($d = (style_selector = selector['$[]'](\"style\"))['$!']()) ? $d : style_selector['$=='](self.style)) : $c)) ? ($truthy($c = (role_selector = selector['$[]'](\"role\"))['$!']()) ? $c : self['$has_role?'](role_selector)) : $b)) ? ($truthy($b = (id_selector = selector['$[]'](\"id\"))['$!']()) ? $b : id_selector['$=='](self.id)) : $a))) {\n          if ((block !== nil)) {\n            if ($truthy((verdict = Opal.yield1(block, self)))) {\n              $case = verdict;\n              if (\"prune\"['$===']($case)) {\n              result['$<<'](self);\n              if ($truthy(id_selector)) {\n                self.$raise($$$('::', 'StopIteration'))};\n              return result;}\n              else if (\"reject\"['$===']($case)) {\n              if ($truthy(id_selector)) {\n                self.$raise($$$('::', 'StopIteration'))};\n              return result;}\n              else if (\"stop\"['$===']($case)) {self.$raise($$$('::', 'StopIteration'))}\n              else {\n              result['$<<'](self);\n              if ($truthy(id_selector)) {\n                self.$raise($$$('::', 'StopIteration'))};}\n            } else if ($truthy(id_selector)) {\n              self.$raise($$$('::', 'StopIteration'))}\n          } else {\n            \n            result['$<<'](self);\n            if ($truthy(id_selector)) {\n              self.$raise($$$('::', 'StopIteration'))};\n          }};\n        $case = self.context;\n        if (\"document\"['$===']($case)) {if (context_selector['$=='](\"document\")) {\n        } else {\n          \n          if ($truthy(($truthy($a = self['$header?']()) ? ($truthy($b = any_context) ? $b : context_selector['$=='](\"section\")) : $a))) {\n            $send(self.header, 'find_by_internal', [selector, result], block.$to_proc())};\n          $send(self.blocks, 'each', [], ($$35 = function(b){var self = $$35.$$s || this, $e;\n\n          \n            \n            if (b == null) {\n              b = nil;\n            };\n            if ($truthy((($e = context_selector['$=='](\"section\")) ? b.$context()['$!='](\"section\") : context_selector['$=='](\"section\")))) {\n              return nil;};\n            return $send(b, 'find_by_internal', [selector, result], block.$to_proc());}, $$35.$$s = self, $$35.$$arity = 1, $$35));\n        }}\n        else if (\"dlist\"['$===']($case)) {if ($truthy(($truthy($a = any_context) ? $a : context_selector['$!='](\"section\")))) {\n          $send(self.blocks.$flatten(), 'each', [], ($$36 = function(b){var self = $$36.$$s || this;\n\n          \n            \n            if (b == null) {\n              b = nil;\n            };\n            if ($truthy(b)) {\n              return $send(b, 'find_by_internal', [selector, result], block.$to_proc())\n            } else {\n              return nil\n            };}, $$36.$$s = self, $$36.$$arity = 1, $$36))}}\n        else if (\"table\"['$===']($case)) {if ($truthy(selector['$[]'](\"traverse_documents\"))) {\n          \n          $send(self.$rows().$head(), 'each', [], ($$37 = function(r){var self = $$37.$$s || this, $$38;\n\n          \n            \n            if (r == null) {\n              r = nil;\n            };\n            return $send(r, 'each', [], ($$38 = function(c){var self = $$38.$$s || this;\n\n            \n              \n              if (c == null) {\n                c = nil;\n              };\n              return $send(c, 'find_by_internal', [selector, result], block.$to_proc());}, $$38.$$s = self, $$38.$$arity = 1, $$38));}, $$37.$$s = self, $$37.$$arity = 1, $$37));\n          if (context_selector['$=='](\"inner_document\")) {\n            selector = selector.$merge($hash2([\"context\"], {\"context\": \"document\"}))};\n          $send($rb_plus(self.$rows().$body(), self.$rows().$foot()), 'each', [], ($$39 = function(r){var self = $$39.$$s || this, $$40;\n\n          \n            \n            if (r == null) {\n              r = nil;\n            };\n            return $send(r, 'each', [], ($$40 = function(c){var self = $$40.$$s || this;\n\n            \n              \n              if (c == null) {\n                c = nil;\n              };\n              $send(c, 'find_by_internal', [selector, result], block.$to_proc());\n              if (c.$style()['$=='](\"asciidoc\")) {\n                return $send(c.$inner_document(), 'find_by_internal', [selector, result], block.$to_proc())\n              } else {\n                return nil\n              };}, $$40.$$s = self, $$40.$$arity = 1, $$40));}, $$39.$$s = self, $$39.$$arity = 1, $$39));\n        } else {\n          $send($rb_plus($rb_plus(self.$rows().$head(), self.$rows().$body()), self.$rows().$foot()), 'each', [], ($$41 = function(r){var self = $$41.$$s || this, $$42;\n\n          \n            \n            if (r == null) {\n              r = nil;\n            };\n            return $send(r, 'each', [], ($$42 = function(c){var self = $$42.$$s || this;\n\n            \n              \n              if (c == null) {\n                c = nil;\n              };\n              return $send(c, 'find_by_internal', [selector, result], block.$to_proc());}, $$42.$$s = self, $$42.$$arity = 1, $$42));}, $$41.$$s = self, $$41.$$arity = 1, $$41))\n        }}\n        else {$send(self.blocks, 'each', [], ($$43 = function(b){var self = $$43.$$s || this, $e;\n\n        \n          \n          if (b == null) {\n            b = nil;\n          };\n          if ($truthy((($e = context_selector['$=='](\"section\")) ? b.$context()['$!='](\"section\") : context_selector['$=='](\"section\")))) {\n            return nil;};\n          return $send(b, 'find_by_internal', [selector, result], block.$to_proc());}, $$43.$$s = self, $$43.$$arity = 1, $$43))};\n        return result;\n      }, $AbstractBlock_find_by_internal$34.$$arity = -1), nil) && 'find_by_internal';\n    })($nesting[0], $$($nesting, 'AbstractNode'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/attribute_list\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$new', '$[]', '$update', '$parse', '$parse_attribute', '$eos?', '$skip_delimiter', '$+', '$rekey', '$each_with_index', '$[]=', '$-', '$private', '$skip_blank', '$peek', '$===', '$parse_attribute_value', '$get_byte', '$start_with?', '$scan_name', '$end_with?', '$rstrip', '$string', '$==', '$unscan', '$scan_to_delimiter', '$*', '$include?', '$delete', '$each', '$split', '$empty?', '$apply_subs', '$scan_to_quote', '$gsub', '$skip', '$scan']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AttributeList');\n\n      var $nesting = [self].concat($parent_nesting), $AttributeList_initialize$1, $AttributeList_parse_into$2, $AttributeList_parse$3, $AttributeList_rekey$4, $AttributeList_rekey$5, $AttributeList_parse_attribute$7, $AttributeList_parse_attribute_value$9, $AttributeList_skip_blank$10, $AttributeList_skip_delimiter$11, $AttributeList_scan_name$12, $AttributeList_scan_to_delimiter$13, $AttributeList_scan_to_quote$14;\n\n      self.$$prototype.attributes = self.$$prototype.scanner = self.$$prototype.delimiter = self.$$prototype.block = self.$$prototype.delimiter_skip_pattern = self.$$prototype.delimiter_boundary_pattern = nil;\n      \n      Opal.const_set($nesting[0], 'APOS', \"'\");\n      Opal.const_set($nesting[0], 'BACKSLASH', \"\\\\\");\n      Opal.const_set($nesting[0], 'QUOT', \"\\\"\");\n      Opal.const_set($nesting[0], 'BoundaryRx', $hash($$($nesting, 'QUOT'), /.*?[^\\\\](?=\")/, $$($nesting, 'APOS'), /.*?[^\\\\](?=')/, \",\", /.*?(?=[ \\t]*(,|$))/));\n      Opal.const_set($nesting[0], 'EscapedQuotes', $hash($$($nesting, 'QUOT'), \"\\\\\\\"\", $$($nesting, 'APOS'), \"\\\\'\"));\n      Opal.const_set($nesting[0], 'NameRx', new RegExp(\"\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-.]*\"));\n      Opal.const_set($nesting[0], 'BlankRx', /[ \\t]+/);\n      Opal.const_set($nesting[0], 'SkipRx', $hash2([\",\"], {\",\": /[ \\t]*(,|$)/}));\n      \n      Opal.def(self, '$initialize', $AttributeList_initialize$1 = function $$initialize(source, block, delimiter) {\n        var self = this;\n\n        \n        \n        if (block == null) {\n          block = nil;\n        };\n        \n        if (delimiter == null) {\n          delimiter = \",\";\n        };\n        self.scanner = $$$('::', 'StringScanner').$new(source);\n        self.block = block;\n        self.delimiter = delimiter;\n        self.delimiter_skip_pattern = $$($nesting, 'SkipRx')['$[]'](delimiter);\n        self.delimiter_boundary_pattern = $$($nesting, 'BoundaryRx')['$[]'](delimiter);\n        return (self.attributes = nil);\n      }, $AttributeList_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$parse_into', $AttributeList_parse_into$2 = function $$parse_into(attributes, positional_attrs) {\n        var self = this;\n\n        \n        \n        if (positional_attrs == null) {\n          positional_attrs = [];\n        };\n        return attributes.$update(self.$parse(positional_attrs));\n      }, $AttributeList_parse_into$2.$$arity = -2);\n      \n      Opal.def(self, '$parse', $AttributeList_parse$3 = function $$parse(positional_attrs) {\n        var $a, self = this, index = nil;\n\n        \n        \n        if (positional_attrs == null) {\n          positional_attrs = [];\n        };\n        if ($truthy(self.attributes)) {\n          return self.attributes};\n        self.attributes = $hash2([], {});\n        index = 0;\n        while ($truthy(self.$parse_attribute(index, positional_attrs))) {\n          \n          if ($truthy(self.scanner['$eos?']())) {\n            break;};\n          self.$skip_delimiter();\n          index = $rb_plus(index, 1);\n        };\n        return self.attributes;\n      }, $AttributeList_parse$3.$$arity = -1);\n      \n      Opal.def(self, '$rekey', $AttributeList_rekey$4 = function $$rekey(positional_attrs) {\n        var self = this;\n\n        return $$($nesting, 'AttributeList').$rekey(self.attributes, positional_attrs)\n      }, $AttributeList_rekey$4.$$arity = 1);\n      Opal.defs(self, '$rekey', $AttributeList_rekey$5 = function $$rekey(attributes, positional_attrs) {\n        var $$6, self = this;\n\n        \n        $send(positional_attrs, 'each_with_index', [], ($$6 = function(key, index){var self = $$6.$$s || this, $a, val = nil, $writer = nil;\n\n        \n          \n          if (key == null) {\n            key = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          if ($truthy(($truthy($a = key) ? (val = attributes['$[]']($rb_plus(index, 1))) : $a))) {\n            \n            $writer = [key, val];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            return nil\n          };}, $$6.$$s = self, $$6.$$arity = 2, $$6));\n        return attributes;\n      }, $AttributeList_rekey$5.$$arity = 2);\n      self.$private();\n      \n      Opal.def(self, '$parse_attribute', $AttributeList_parse_attribute$7 = function $$parse_attribute(index, positional_attrs) {\n        var $a, $b, $$8, self = this, continue$ = nil, $case = nil, name = nil, single_quoted = nil, skipped = nil, c = nil, value = nil, $writer = nil, positional_attr_name = nil;\n\n        \n        continue$ = true;\n        self.$skip_blank();\n        $case = self.scanner.$peek(1);\n        if ($$($nesting, 'QUOT')['$===']($case)) {name = self.$parse_attribute_value(self.scanner.$get_byte())}\n        else if ($$($nesting, 'APOS')['$===']($case)) {\n        name = self.$parse_attribute_value(self.scanner.$get_byte());\n        if ($truthy(name['$start_with?']($$($nesting, 'APOS')))) {\n        } else {\n          single_quoted = true\n        };}\n        else {\n        skipped = ($truthy($a = ($truthy($b = (name = self.$scan_name())) ? self.$skip_blank() : $b)) ? $a : 0);\n        if ($truthy(self.scanner['$eos?']())) {\n          \n          if ($truthy(($truthy($a = name) ? $a : self.scanner.$string().$rstrip()['$end_with?'](self.delimiter)))) {\n          } else {\n            return nil\n          };\n          continue$ = nil;\n        } else if ((c = self.scanner.$get_byte())['$=='](self.delimiter)) {\n          self.scanner.$unscan()\n        } else if ($truthy(name)) {\n          if (c['$=='](\"=\")) {\n            \n            self.$skip_blank();\n            $case = (c = self.scanner.$get_byte());\n            if ($$($nesting, 'QUOT')['$===']($case)) {value = self.$parse_attribute_value(c)}\n            else if ($$($nesting, 'APOS')['$===']($case)) {\n            value = self.$parse_attribute_value(c);\n            if ($truthy(value['$start_with?']($$($nesting, 'APOS')))) {\n            } else {\n              single_quoted = true\n            };}\n            else if (self.delimiter['$===']($case)) {\n            value = \"\";\n            self.scanner.$unscan();}\n            else if (nil['$===']($case)) {value = \"\"}\n            else {\n            value = \"\" + (c) + (self.$scan_to_delimiter());\n            if (value['$=='](\"None\")) {\n              return true};};\n          } else {\n            name = \"\" + (name) + ($rb_times(\" \", skipped)) + (c) + (self.$scan_to_delimiter())\n          }\n        } else {\n          name = \"\" + (c) + (self.$scan_to_delimiter())\n        };};\n        if ($truthy(value)) {\n          $case = name;\n          if (\"options\"['$===']($case) || \"opts\"['$===']($case)) {if ($truthy(value['$include?'](\",\"))) {\n            \n            if ($truthy(value['$include?'](\" \"))) {\n              value = value.$delete(\" \")};\n            $send(value.$split(\",\"), 'each', [], ($$8 = function(opt){var self = $$8.$$s || this, $writer = nil;\n              if (self.attributes == null) self.attributes = nil;\n\n            \n              \n              if (opt == null) {\n                opt = nil;\n              };\n              if ($truthy(opt['$empty?']())) {\n                return nil\n              } else {\n                \n                $writer = [\"\" + (opt) + \"-option\", \"\"];\n                $send(self.attributes, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];\n              };}, $$8.$$s = self, $$8.$$arity = 1, $$8));\n          } else if ($truthy(value['$empty?']())) {\n          } else {\n            \n            $writer = [\"\" + (value) + \"-option\", \"\"];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          }}\n          else {if ($truthy(($truthy($a = single_quoted) ? self.block : $a))) {\n            $case = name;\n            if (\"title\"['$===']($case) || \"reftext\"['$===']($case)) {\n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else {\n            $writer = [name, self.block.$apply_subs(value)];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n          } else {\n            \n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          }}\n        } else {\n          \n          if ($truthy(($truthy($a = single_quoted) ? self.block : $a))) {\n            name = self.block.$apply_subs(name)};\n          if ($truthy(($truthy($a = (positional_attr_name = positional_attrs['$[]'](index))) ? name : $a))) {\n            \n            $writer = [positional_attr_name, name];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          \n          $writer = [$rb_plus(index, 1), name];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        };\n        return continue$;\n      }, $AttributeList_parse_attribute$7.$$arity = 2);\n      \n      Opal.def(self, '$parse_attribute_value', $AttributeList_parse_attribute_value$9 = function $$parse_attribute_value(quote) {\n        var self = this, value = nil;\n\n        if (self.scanner.$peek(1)['$=='](quote)) {\n          \n          self.scanner.$get_byte();\n          return \"\";\n        } else if ($truthy((value = self.$scan_to_quote(quote)))) {\n          \n          self.scanner.$get_byte();\n          if ($truthy(value['$include?']($$($nesting, 'BACKSLASH')))) {\n            \n            return value.$gsub($$($nesting, 'EscapedQuotes')['$[]'](quote), quote);\n          } else {\n            return value\n          };\n        } else {\n          return \"\" + (quote) + (self.$scan_to_delimiter())\n        }\n      }, $AttributeList_parse_attribute_value$9.$$arity = 1);\n      \n      Opal.def(self, '$skip_blank', $AttributeList_skip_blank$10 = function $$skip_blank() {\n        var self = this;\n\n        return self.scanner.$skip($$($nesting, 'BlankRx'))\n      }, $AttributeList_skip_blank$10.$$arity = 0);\n      \n      Opal.def(self, '$skip_delimiter', $AttributeList_skip_delimiter$11 = function $$skip_delimiter() {\n        var self = this;\n\n        return self.scanner.$skip(self.delimiter_skip_pattern)\n      }, $AttributeList_skip_delimiter$11.$$arity = 0);\n      \n      Opal.def(self, '$scan_name', $AttributeList_scan_name$12 = function $$scan_name() {\n        var self = this;\n\n        return self.scanner.$scan($$($nesting, 'NameRx'))\n      }, $AttributeList_scan_name$12.$$arity = 0);\n      \n      Opal.def(self, '$scan_to_delimiter', $AttributeList_scan_to_delimiter$13 = function $$scan_to_delimiter() {\n        var self = this;\n\n        return self.scanner.$scan(self.delimiter_boundary_pattern)\n      }, $AttributeList_scan_to_delimiter$13.$$arity = 0);\n      return (Opal.def(self, '$scan_to_quote', $AttributeList_scan_to_quote$14 = function $$scan_to_quote(quote) {\n        var self = this;\n\n        return self.scanner.$scan($$($nesting, 'BoundaryRx')['$[]'](quote))\n      }, $AttributeList_scan_to_quote$14.$$arity = 1), nil) && 'scan_to_quote';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/block\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$default=', '$-', '$attr_accessor', '$[]', '$key?', '$===', '$drop', '$delete', '$to_s', '$[]=', '$commit_subs', '$nil_or_empty?', '$prepare_source_string', '$apply_subs', '$join', '$<', '$size', '$empty?', '$rstrip', '$shift', '$pop', '$==', '$warn', '$logger', '$class', '$object_id', '$inspect']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Block');\n\n      var $nesting = [self].concat($parent_nesting), $Block_initialize$1, $Block_content$2, $Block_source$3, $Block_to_s$4, $writer = nil;\n\n      self.$$prototype.attributes = self.$$prototype.content_model = self.$$prototype.lines = self.$$prototype.subs = self.$$prototype.blocks = self.$$prototype.context = self.$$prototype.style = nil;\n      \n      \n      $writer = [\"simple\"];\n      $send(Opal.const_set($nesting[0], 'DEFAULT_CONTENT_MODEL', $hash2([\"audio\", \"image\", \"listing\", \"literal\", \"stem\", \"open\", \"page_break\", \"pass\", \"thematic_break\", \"video\"], {\"audio\": \"empty\", \"image\": \"empty\", \"listing\": \"verbatim\", \"literal\": \"verbatim\", \"stem\": \"raw\", \"open\": \"compound\", \"page_break\": \"empty\", \"pass\": \"raw\", \"thematic_break\": \"empty\", \"video\": \"empty\"})), 'default=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      Opal.alias(self, \"blockname\", \"context\");\n      self.$attr_accessor(\"lines\");\n      \n      Opal.def(self, '$initialize', $Block_initialize$1 = function $$initialize(parent, context, opts) {\n        var $a, $iter = $Block_initialize$1.$$p, $yield = $iter || nil, self = this, subs = nil, $case = nil, $writer = nil, raw_source = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Block_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Block_initialize$1, false), $zuper, $iter);\n        self.content_model = ($truthy($a = opts['$[]'](\"content_model\")) ? $a : $$($nesting, 'DEFAULT_CONTENT_MODEL')['$[]'](context));\n        if ($truthy(opts['$key?'](\"subs\"))) {\n          if ($truthy((subs = opts['$[]'](\"subs\")))) {\n            \n            $case = subs;\n            if (\"default\"['$===']($case)) {self.default_subs = opts['$[]'](\"default_subs\")}\n            else if ($$$('::', 'Array')['$===']($case)) {\n            self.default_subs = subs.$drop(0);\n            self.attributes.$delete(\"subs\");}\n            else {\n            self.default_subs = nil;\n            \n            $writer = [\"subs\", subs.$to_s()];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;};\n            self.$commit_subs();\n          } else {\n            \n            self.default_subs = [];\n            self.attributes.$delete(\"subs\");\n          }\n        } else {\n          self.default_subs = nil\n        };\n        if ($truthy((raw_source = opts['$[]'](\"source\"))['$nil_or_empty?']())) {\n          return (self.lines = [])\n        } else if ($truthy($$$('::', 'String')['$==='](raw_source))) {\n          return (self.lines = $$($nesting, 'Helpers').$prepare_source_string(raw_source))\n        } else {\n          return (self.lines = raw_source.$drop(0))\n        };\n      }, $Block_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$content', $Block_content$2 = function $$content() {\n        var $a, $b, $iter = $Block_content$2.$$p, $yield = $iter || nil, self = this, $case = nil, result = nil, first = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Block_content$2.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        return (function() {$case = self.content_model;\n        if (\"compound\"['$===']($case)) {return $send(self, Opal.find_super_dispatcher(self, 'content', $Block_content$2, false), $zuper, $iter)}\n        else if (\"simple\"['$===']($case)) {return self.$apply_subs(self.lines.$join($$($nesting, 'LF')), self.subs)}\n        else if (\"verbatim\"['$===']($case) || \"raw\"['$===']($case)) {\n        result = self.$apply_subs(self.lines, self.subs);\n        if ($truthy($rb_lt(result.$size(), 2))) {\n          return result['$[]'](0)\n        } else {\n          \n          while ($truthy(($truthy($b = (first = result['$[]'](0))) ? first.$rstrip()['$empty?']() : $b))) {\n            result.$shift()\n          };\n          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last.$rstrip()['$empty?']() : $b))) {\n            result.$pop()\n          };\n          return result.$join($$($nesting, 'LF'));\n        };}\n        else {\n        if (self.content_model['$=='](\"empty\")) {\n        } else {\n          self.$logger().$warn(\"\" + \"Unknown content model '\" + (self.content_model) + \"' for block: \" + (self))\n        };\n        return nil;}})()\n      }, $Block_content$2.$$arity = 0);\n      \n      Opal.def(self, '$source', $Block_source$3 = function $$source() {\n        var self = this;\n\n        return self.lines.$join($$($nesting, 'LF'))\n      }, $Block_source$3.$$arity = 0);\n      return (Opal.def(self, '$to_s', $Block_to_s$4 = function $$to_s() {\n        var self = this, content_summary = nil;\n\n        \n        content_summary = (function() {if (self.content_model['$=='](\"compound\")) {\n          return \"\" + \"blocks: \" + (self.blocks.$size())\n        } else {\n          return \"\" + \"lines: \" + (self.lines.$size())\n        }; return nil; })();\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {context: \" + (self.context.$inspect()) + \", content_model: \" + (self.content_model.$inspect()) + \", style: \" + (self.style.$inspect()) + \", \" + (content_summary) + \"}>\";\n      }, $Block_to_s$4.$$arity = 0), nil) && 'to_s';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/callouts\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$next_list', '$<<', '$current_list', '$to_i', '$generate_next_callout_id', '$+', '$<=', '$size', '$[]', '$-', '$chop', '$join', '$map', '$==', '$<', '$private', '$generate_callout_id']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Callouts');\n\n      var $nesting = [self].concat($parent_nesting), $Callouts_initialize$1, $Callouts_register$2, $Callouts_read_next_id$3, $Callouts_callout_ids$4, $Callouts_current_list$6, $Callouts_next_list$7, $Callouts_rewind$8, $Callouts_generate_next_callout_id$9, $Callouts_generate_callout_id$10;\n\n      self.$$prototype.co_index = self.$$prototype.lists = self.$$prototype.list_index = nil;\n      \n      \n      Opal.def(self, '$initialize', $Callouts_initialize$1 = function $$initialize() {\n        var self = this;\n\n        \n        self.lists = [];\n        self.list_index = 0;\n        return self.$next_list();\n      }, $Callouts_initialize$1.$$arity = 0);\n      \n      Opal.def(self, '$register', $Callouts_register$2 = function $$register(li_ordinal) {\n        var self = this, id = nil;\n\n        \n        self.$current_list()['$<<']($hash2([\"ordinal\", \"id\"], {\"ordinal\": li_ordinal.$to_i(), \"id\": (id = self.$generate_next_callout_id())}));\n        self.co_index = $rb_plus(self.co_index, 1);\n        return id;\n      }, $Callouts_register$2.$$arity = 1);\n      \n      Opal.def(self, '$read_next_id', $Callouts_read_next_id$3 = function $$read_next_id() {\n        var self = this, id = nil, list = nil;\n\n        \n        id = nil;\n        list = self.$current_list();\n        if ($truthy($rb_le(self.co_index, list.$size()))) {\n          id = list['$[]']($rb_minus(self.co_index, 1))['$[]'](\"id\")};\n        self.co_index = $rb_plus(self.co_index, 1);\n        return id;\n      }, $Callouts_read_next_id$3.$$arity = 0);\n      \n      Opal.def(self, '$callout_ids', $Callouts_callout_ids$4 = function $$callout_ids(li_ordinal) {\n        var $$5, self = this;\n\n        return $send(self.$current_list(), 'map', [], ($$5 = function(it){var self = $$5.$$s || this;\n\n        \n          \n          if (it == null) {\n            it = nil;\n          };\n          if (it['$[]'](\"ordinal\")['$=='](li_ordinal)) {\n            return \"\" + (it['$[]'](\"id\")) + \" \"\n          } else {\n            return \"\"\n          };}, $$5.$$s = self, $$5.$$arity = 1, $$5)).$join().$chop()\n      }, $Callouts_callout_ids$4.$$arity = 1);\n      \n      Opal.def(self, '$current_list', $Callouts_current_list$6 = function $$current_list() {\n        var self = this;\n\n        return self.lists['$[]']($rb_minus(self.list_index, 1))\n      }, $Callouts_current_list$6.$$arity = 0);\n      \n      Opal.def(self, '$next_list', $Callouts_next_list$7 = function $$next_list() {\n        var self = this;\n\n        \n        self.list_index = $rb_plus(self.list_index, 1);\n        if ($truthy($rb_lt(self.lists.$size(), self.list_index))) {\n          self.lists['$<<']([])};\n        self.co_index = 1;\n        return nil;\n      }, $Callouts_next_list$7.$$arity = 0);\n      \n      Opal.def(self, '$rewind', $Callouts_rewind$8 = function $$rewind() {\n        var self = this;\n\n        \n        self.list_index = 1;\n        self.co_index = 1;\n        return nil;\n      }, $Callouts_rewind$8.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$generate_next_callout_id', $Callouts_generate_next_callout_id$9 = function $$generate_next_callout_id() {\n        var self = this;\n\n        return self.$generate_callout_id(self.list_index, self.co_index)\n      }, $Callouts_generate_next_callout_id$9.$$arity = 0);\n      return (Opal.def(self, '$generate_callout_id', $Callouts_generate_callout_id$10 = function $$generate_callout_id(list_index, co_index) {\n        var self = this;\n\n        return \"\" + \"CO\" + (list_index) + \"-\" + (co_index)\n      }, $Callouts_generate_callout_id$10.$$arity = 2), nil) && 'generate_callout_id';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/converter\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $klass = Opal.klass, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$autoload', '$__dir__', '$==', '$attr_reader', '$raise', '$class', '$[]', '$sub', '$slice', '$length', '$[]=', '$backend_traits', '$-', '$derive_backend_traits', '$register', '$map', '$to_s', '$new', '$create', '$default', '$each', '$default=', '$registry', '$for', '$===', '$supports_templates?', '$merge', '$private', '$include', '$delete', '$clear', '$send', '$extend', '$private_class_method', '$node_name', '$+', '$receiver', '$name', '$warn', '$logger', '$respond_to?', '$content']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Converter');\n\n      var $nesting = [self].concat($parent_nesting), $Converter_initialize$1, $Converter_convert$2, $Converter_handles$ques$3, $Converter_derive_backend_traits$4, $Converter_included$28;\n\n      \n      self.$autoload(\"CompositeConverter\", \"\" + (self.$__dir__()) + \"/converter/composite\");\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      } else {\n        nil\n      };\n      self.$attr_reader(\"backend\");\n      \n      Opal.def(self, '$initialize', $Converter_initialize$1 = function $$initialize(backend, opts) {\n        var self = this;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        return (self.backend = backend);\n      }, $Converter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$convert', $Converter_convert$2 = function $$convert(node, transform, opts) {\n        var self = this;\n        if (self.backend == null) self.backend = nil;\n\n        \n        \n        if (transform == null) {\n          transform = nil;\n        };\n        \n        if (opts == null) {\n          opts = nil;\n        };\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + (self.$class()) + \" (backend: \" + (self.backend) + \") must implement the #\" + (\"convert\") + \" method\");\n      }, $Converter_convert$2.$$arity = -2);\n      \n      Opal.def(self, '$handles?', $Converter_handles$ques$3 = function(transform) {\n        var self = this;\n\n        return true\n      }, $Converter_handles$ques$3.$$arity = 1);\n      Opal.defs(self, '$derive_backend_traits', $Converter_derive_backend_traits$4 = function $$derive_backend_traits(backend, basebackend) {\n        var $a, self = this, outfilesuffix = nil, filetype = nil;\n\n        \n        \n        if (basebackend == null) {\n          basebackend = nil;\n        };\n        if ($truthy(backend)) {\n        } else {\n          return $hash2([], {})\n        };\n        if ($truthy((outfilesuffix = $$($nesting, 'DEFAULT_EXTENSIONS')['$[]']((basebackend = ($truthy($a = basebackend) ? $a : backend.$sub($$($nesting, 'TrailingDigitsRx'), \"\"))))))) {\n          filetype = outfilesuffix.$slice(1, outfilesuffix.$length())\n        } else {\n          outfilesuffix = \"\" + \".\" + ((filetype = basebackend))\n        };\n        if (filetype['$=='](\"html\")) {\n          return $hash2([\"basebackend\", \"filetype\", \"htmlsyntax\", \"outfilesuffix\"], {\"basebackend\": basebackend, \"filetype\": filetype, \"htmlsyntax\": \"html\", \"outfilesuffix\": outfilesuffix})\n        } else {\n          return $hash2([\"basebackend\", \"filetype\", \"outfilesuffix\"], {\"basebackend\": basebackend, \"filetype\": filetype, \"outfilesuffix\": outfilesuffix})\n        };\n      }, $Converter_derive_backend_traits$4.$$arity = -2);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'BackendTraits');\n\n        var $nesting = [self].concat($parent_nesting), $BackendTraits_basebackend$5, $BackendTraits_filetype$6, $BackendTraits_htmlsyntax$7, $BackendTraits_outfilesuffix$8, $BackendTraits_supports_templates$9, $BackendTraits_supports_templates$ques$10, $BackendTraits_init_backend_traits$11, $BackendTraits_backend_traits$12, $BackendTraits_derive_backend_traits$13;\n\n        \n        \n        Opal.def(self, '$basebackend', $BackendTraits_basebackend$5 = function $$basebackend(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"basebackend\", value];\n            $send(self.$backend_traits(value), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"basebackend\")\n          };\n        }, $BackendTraits_basebackend$5.$$arity = -1);\n        \n        Opal.def(self, '$filetype', $BackendTraits_filetype$6 = function $$filetype(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"filetype\", value];\n            $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"filetype\")\n          };\n        }, $BackendTraits_filetype$6.$$arity = -1);\n        \n        Opal.def(self, '$htmlsyntax', $BackendTraits_htmlsyntax$7 = function $$htmlsyntax(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"htmlsyntax\", value];\n            $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"htmlsyntax\")\n          };\n        }, $BackendTraits_htmlsyntax$7.$$arity = -1);\n        \n        Opal.def(self, '$outfilesuffix', $BackendTraits_outfilesuffix$8 = function $$outfilesuffix(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"outfilesuffix\", value];\n            $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"outfilesuffix\")\n          };\n        }, $BackendTraits_outfilesuffix$8.$$arity = -1);\n        \n        Opal.def(self, '$supports_templates', $BackendTraits_supports_templates$9 = function $$supports_templates(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = true;\n          };\n          $writer = [\"supports_templates\", value];\n          $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        }, $BackendTraits_supports_templates$9.$$arity = -1);\n        \n        Opal.def(self, '$supports_templates?', $BackendTraits_supports_templates$ques$10 = function() {\n          var self = this;\n\n          return self.$backend_traits()['$[]'](\"supports_templates\")\n        }, $BackendTraits_supports_templates$ques$10.$$arity = 0);\n        \n        Opal.def(self, '$init_backend_traits', $BackendTraits_init_backend_traits$11 = function $$init_backend_traits(value) {\n          var $a, self = this;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          return (self.backend_traits = ($truthy($a = value) ? $a : $hash2([], {})));\n        }, $BackendTraits_init_backend_traits$11.$$arity = -1);\n        \n        Opal.def(self, '$backend_traits', $BackendTraits_backend_traits$12 = function $$backend_traits(basebackend) {\n          var $a, self = this;\n          if (self.backend_traits == null) self.backend_traits = nil;\n          if (self.backend == null) self.backend = nil;\n\n          \n          \n          if (basebackend == null) {\n            basebackend = nil;\n          };\n          return (self.backend_traits = ($truthy($a = self.backend_traits) ? $a : $$($nesting, 'Converter').$derive_backend_traits(self.backend, basebackend)));\n        }, $BackendTraits_backend_traits$12.$$arity = -1);\n        Opal.alias(self, \"backend_info\", \"backend_traits\");\n        Opal.defs(self, '$derive_backend_traits', $BackendTraits_derive_backend_traits$13 = function $$derive_backend_traits(backend, basebackend) {\n          var self = this;\n\n          \n          \n          if (basebackend == null) {\n            basebackend = nil;\n          };\n          return $$($nesting, 'Converter').$derive_backend_traits(backend, basebackend);\n        }, $BackendTraits_derive_backend_traits$13.$$arity = -2);\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Config');\n\n        var $nesting = [self].concat($parent_nesting), $Config_register_for$14;\n\n        \n        Opal.def(self, '$register_for', $Config_register_for$14 = function $$register_for($a) {\n          var $post_args, backends, $$15, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          backends = $post_args;;\n          return $send($$($nesting, 'Converter'), 'register', [self].concat(Opal.to_a($send(backends, 'map', [], ($$15 = function(backend){var self = $$15.$$s || this;\n\n          \n            \n            if (backend == null) {\n              backend = nil;\n            };\n            return backend.$to_s();}, $$15.$$s = self, $$15.$$arity = 1, $$15)))));\n        }, $Config_register_for$14.$$arity = -1)\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $Factory_new$16, $Factory_default$17, $Factory_create$18, $Factory_register$19, $Factory_for$21, $Factory_create$22, $Factory_converters$23, $Factory_registry$24;\n\n        \n        Opal.defs(self, '$new', $Factory_new$16 = function($a, $b) {\n          var $post_args, $kwargs, converters, proxy_default, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          $kwargs = Opal.extract_kwargs($post_args);\n          \n          if ($kwargs == null) {\n            $kwargs = $hash2([], {});\n          } else if (!$kwargs.$$is_hash) {\n            throw Opal.ArgumentError.$new('expected kwargs');\n          };\n          \n          if ($post_args.length > 0) {\n            converters = $post_args[0];\n            $post_args.splice(0, 1);\n          }\n          if (converters == null) {\n            converters = nil;\n          };\n          \n          proxy_default = $kwargs.$$smap[\"proxy_default\"];\n          if (proxy_default == null) {\n            proxy_default = true\n          };\n          if ($truthy(proxy_default)) {\n            \n            return $$($nesting, 'DefaultFactoryProxy').$new(converters);\n          } else {\n            \n            return $$($nesting, 'CustomFactory').$new(converters);\n          };\n        }, $Factory_new$16.$$arity = -1);\n        Opal.defs(self, '$default', $Factory_default$17 = function($a) {\n          var $post_args, args, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $$($nesting, 'Converter');\n        }, $Factory_default$17.$$arity = -1);\n        Opal.defs(self, '$create', $Factory_create$18 = function $$create(backend, opts) {\n          var self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          return self.$default().$create(backend, opts);\n        }, $Factory_create$18.$$arity = -2);\n        \n        Opal.def(self, '$register', $Factory_register$19 = function $$register(converter, $a) {\n          var $post_args, backends, $$20, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          backends = $post_args;;\n          return $send(backends, 'each', [], ($$20 = function(backend){var self = $$20.$$s || this, $writer = nil;\n\n          \n            \n            if (backend == null) {\n              backend = nil;\n            };\n            if (backend['$=='](\"*\")) {\n              \n              \n              $writer = [converter];\n              $send(self.$registry(), 'default=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else {\n              \n              \n              $writer = [backend, converter];\n              $send(self.$registry(), '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            };}, $$20.$$s = self, $$20.$$arity = 1, $$20));\n        }, $Factory_register$19.$$arity = -2);\n        \n        Opal.def(self, '$for', $Factory_for$21 = function(backend) {\n          var self = this;\n\n          return self.$registry()['$[]'](backend)\n        }, $Factory_for$21.$$arity = 1);\n        \n        Opal.def(self, '$create', $Factory_create$22 = function $$create(backend, opts) {\n          var $a, $b, self = this, converter = nil, template_dirs = nil, delegate_backend = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((converter = self.$for(backend)))) {\n            \n            if ($truthy($$$('::', 'Class')['$==='](converter))) {\n              converter = converter.$new(backend, opts)};\n            if ($truthy(($truthy($a = ($truthy($b = (template_dirs = opts['$[]'](\"template_dirs\"))) ? $$($nesting, 'BackendTraits')['$==='](converter) : $b)) ? converter['$supports_templates?']() : $a))) {\n              return $$($nesting, 'CompositeConverter').$new(backend, $$($nesting, 'TemplateConverter').$new(backend, template_dirs, opts), converter, $hash2([\"backend_traits_source\"], {\"backend_traits_source\": converter}))\n            } else {\n              return converter\n            };\n          } else if ($truthy((template_dirs = opts['$[]'](\"template_dirs\")))) {\n            if ($truthy(($truthy($a = (delegate_backend = opts['$[]'](\"delegate_backend\"))) ? (converter = self.$for(delegate_backend)) : $a))) {\n              \n              if ($truthy($$$('::', 'Class')['$==='](converter))) {\n                converter = converter.$new(delegate_backend, opts)};\n              return $$($nesting, 'CompositeConverter').$new(backend, $$($nesting, 'TemplateConverter').$new(backend, template_dirs, opts), converter, $hash2([\"backend_traits_source\"], {\"backend_traits_source\": converter}));\n            } else {\n              return $$($nesting, 'TemplateConverter').$new(backend, template_dirs, opts)\n            }\n          } else {\n            return nil\n          };\n        }, $Factory_create$22.$$arity = -2);\n        \n        Opal.def(self, '$converters', $Factory_converters$23 = function $$converters() {\n          var self = this;\n\n          return self.$registry().$merge()\n        }, $Factory_converters$23.$$arity = 0);\n        self.$private();\n        \n        Opal.def(self, '$registry', $Factory_registry$24 = function $$registry() {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Factory')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"registry\") + \" method\")\n        }, $Factory_registry$24.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'CustomFactory');\n\n        var $nesting = [self].concat($parent_nesting), $CustomFactory_initialize$25, $CustomFactory_unregister_all$26;\n\n        \n        self.$include($$($nesting, 'Factory'));\n        \n        Opal.def(self, '$initialize', $CustomFactory_initialize$25 = function $$initialize(seed_registry) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (seed_registry == null) {\n            seed_registry = nil;\n          };\n          if ($truthy(seed_registry)) {\n            \n            \n            $writer = [seed_registry.$delete(\"*\")];\n            $send(seed_registry, 'default=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return (self.registry = seed_registry);\n          } else {\n            return (self.registry = $hash2([], {}))\n          };\n        }, $CustomFactory_initialize$25.$$arity = -1);\n        \n        Opal.def(self, '$unregister_all', $CustomFactory_unregister_all$26 = function $$unregister_all() {\n          var self = this, $writer = nil;\n\n          \n          $writer = [nil];\n          $send(self.$registry().$clear(), 'default=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        }, $CustomFactory_unregister_all$26.$$arity = 0);\n        self.$private();\n        return self.$attr_reader(\"registry\");\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DefaultFactory');\n\n        var $nesting = [self].concat($parent_nesting), $DefaultFactory_registry$27;\n\n        \n        self.$include($$($nesting, 'Factory'));\n        self.$private();\n        (Opal.class_variable_set($nesting[0], '@@registry', $hash2([], {})));\n        \n        Opal.def(self, '$registry', $DefaultFactory_registry$27 = function $$registry() {\n          var $a, self = this;\n\n          return (($a = $nesting[0].$$cvars['@@registry']) == null ? nil : $a)\n        }, $DefaultFactory_registry$27.$$arity = 0);\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        } else {\n          nil\n        };\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DefaultFactoryProxy');\n\n        var $nesting = [self].concat($parent_nesting);\n\n        \n        self.$include($$($nesting, 'DefaultFactory'));\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n          return nil\n        } else {\n          return nil\n        };\n      })($nesting[0], $$($nesting, 'CustomFactory'), $nesting);\n      Opal.defs(self, '$included', $Converter_included$28 = function $$included(into) {\n        var self = this;\n\n        \n        into.$send(\"include\", $$($nesting, 'BackendTraits'));\n        return into.$extend($$($nesting, 'Config'));\n      }, $Converter_included$28.$$arity = 1);\n      self.$private_class_method(\"included\");\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Base');\n\n        var $nesting = [self].concat($parent_nesting), $Base_convert$29, $Base_handles$ques$30, $Base_content_only$31, $Base_skip$32;\n\n        self.$$prototype.backend = nil;\n        \n        self.$include($$($nesting, 'Logging'));\n        self.$include($$($nesting, 'Converter'));\n        \n        Opal.def(self, '$convert', $Base_convert$29 = function $$convert(node, transform, opts) {\n          var $a, $b, self = this, ex = nil;\n          if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n          \n          \n          if (transform == null) {\n            transform = node.$node_name();\n          };\n          \n          if (opts == null) {\n            opts = nil;\n          };\n          try {\n            if ($truthy(opts)) {\n              \n              return self.$send($rb_plus(\"convert_\", transform), node, opts);\n            } else {\n              \n              return self.$send($rb_plus(\"convert_\", transform), node);\n            }\n          } catch ($err) {\n            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n              try {\n                \n                if ($truthy(($truthy($a = ($truthy($b = $$$('::', 'NoMethodError')['$===']((ex = $gvars[\"!\"]))) ? ex.$receiver()['$=='](self) : $b)) ? ex.$name().$to_s()['$=='](transform) : $a))) {\n                } else {\n                  self.$raise()\n                };\n                self.$logger().$warn(\"\" + \"missing convert handler for \" + (ex.$name()) + \" node in \" + (self.backend) + \" backend (\" + (self.$class()) + \")\");\n                return nil;\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          };\n        }, $Base_convert$29.$$arity = -2);\n        \n        Opal.def(self, '$handles?', $Base_handles$ques$30 = function(transform) {\n          var self = this;\n\n          return self['$respond_to?'](\"\" + \"convert_\" + (transform))\n        }, $Base_handles$ques$30.$$arity = 1);\n        \n        Opal.def(self, '$content_only', $Base_content_only$31 = function $$content_only(node) {\n          var self = this;\n\n          return node.$content()\n        }, $Base_content_only$31.$$arity = 1);\n        return (Opal.def(self, '$skip', $Base_skip$32 = function $$skip(node) {\n          var self = this;\n\n          return nil\n        }, $Base_skip$32.$$arity = 1), nil) && 'skip';\n      })($nesting[0], null, $nesting);\n      self.$extend($$($nesting, 'DefaultFactory'));\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/document\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $hash = Opal.hash, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$new', '$attr_reader', '$nil?', '$<<', '$[]', '$[]=', '$-', '$include?', '$strip', '$squeeze', '$gsub', '$empty?', '$!', '$rpartition', '$attr_accessor', '$delete', '$base_dir', '$options', '$merge', '$catalog', '$instance_variable_get', '$attributes', '$safe', '$compat_mode', '$outfilesuffix', '$sourcemap', '$path_resolver', '$converter', '$extensions', '$syntax_highlighter', '$each', '$end_with?', '$start_with?', '$slice', '$length', '$chop', '$==', '$downcase', '$===', '$extname', '$value_for_name', '$key?', '$freeze', '$attribute_undefined', '$attribute_missing', '$update', '$&', '$keys', '$name_for_value', '$expand_path', '$pwd', '$to_s', '$>=', '$+', '$abs', '$to_i', '$delete_if', '$update_doctype_attributes', '$cursor', '$parse', '$restore_attributes', '$update_backend_attributes', '$fetch', '$fill_datetime_attributes', '$activate', '$groups', '$create', '$to_proc', '$preprocessors?', '$preprocessors', '$process_method', '$tree_processors?', '$tree_processors', '$!=', '$counter', '$attribute_locked?', '$nil_or_empty?', '$nextval', '$value', '$save_to', '$register', '$tap', '$xreftext', '$>', '$source', '$source_lines', '$doctitle', '$sectname=', '$title=', '$first_section', '$title', '$reftext', '$<', '$find', '$context', '$assign_numeral', '$clear_playback_attributes', '$save_attributes', '$name', '$negate', '$rewind', '$replace', '$apply_attribute_value_subs', '$delete?', '$start', '$doctype', '$content_model', '$warn', '$logger', '$content', '$convert', '$postprocessors?', '$postprocessors', '$record', '$write', '$respond_to?', '$chomp', '$class', '$write_alternate_pages', '$map', '$split', '$resolve_docinfo_subs', '$normalize_system_path', '$read_asset', '$apply_subs', '$docinfo_processors?', '$join', '$concat', '$compact', '$docinfo_processors', '$object_id', '$inspect', '$size', '$private', '$=~', '$resolve_pass_subs', '$apply_header_subs', '$limit_bytesize', '$bytesize', '$valid_encoding?', '$byteslice', '$resolve_subs', '$utc', '$at', '$Integer', '$now', '$index', '$strftime', '$year', '$utc_offset', '$partition', '$create_converter', '$basebackend', '$filetype', '$htmlsyntax', '$derive_backend_traits', '$raise']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Document');\n\n      var $nesting = [self].concat($parent_nesting), $Document$1, $Document_initialize$8, $Document_parse$11, $Document_parsed$ques$14, $Document_counter$15, $Document_increment_and_store_counter$16, $Document_register$17, $Document_resolve_id$18, $Document_sections$ques$22, $Document_footnotes$ques$23, $Document_footnotes$24, $Document_callouts$25, $Document_nested$ques$26, $Document_embedded$ques$27, $Document_extensions$ques$28, $Document_source$29, $Document_source_lines$30, $Document_basebackend$ques$31, $Document_title$32, $Document_title$eq$33, $Document_doctitle$34, $Document_xreftext$35, $Document_author$36, $Document_authors$37, $Document_revdate$38, $Document_notitle$39, $Document_noheader$40, $Document_nofooter$41, $Document_first_section$42, $Document_header$ques$44, $Document_$lt$lt$45, $Document_finalize_header$46, $Document_playback_attributes$47, $Document_restore_attributes$49, $Document_set_attribute$50, $Document_delete_attribute$51, $Document_attribute_locked$ques$52, $Document_set_header_attribute$53, $Document_convert$54, $Document_write$56, $Document_content$57, $Document_docinfo$58, $Document_docinfo_processors$ques$61, $Document_to_s$62, $Document_apply_attribute_value_subs$63, $Document_limit_bytesize$64, $Document_resolve_docinfo_subs$65, $Document_create_converter$66, $Document_clear_playback_attributes$67, $Document_save_attributes$68, $Document_fill_datetime_attributes$70, $Document_update_backend_attributes$71, $Document_update_doctype_attributes$72;\n\n      self.$$prototype.attributes = self.$$prototype.safe = self.$$prototype.sourcemap = self.$$prototype.reader = self.$$prototype.base_dir = self.$$prototype.parsed = self.$$prototype.parent_document = self.$$prototype.extensions = self.$$prototype.options = self.$$prototype.counters = self.$$prototype.catalog = self.$$prototype.reftexts = self.$$prototype.next_section_index = self.$$prototype.header = self.$$prototype.blocks = self.$$prototype.header_attributes = self.$$prototype.attributes_modified = self.$$prototype.backend = self.$$prototype.attribute_overrides = self.$$prototype.timings = self.$$prototype.converter = self.$$prototype.outfilesuffix = self.$$prototype.docinfo_processor_extensions = self.$$prototype.document = self.$$prototype.max_attribute_value_size = self.$$prototype.id = self.$$prototype.doctype = nil;\n      \n      Opal.const_set($nesting[0], 'ImageReference', $send($$$('::', 'Struct'), 'new', [\"target\", \"imagesdir\"], ($Document$1 = function(){var self = $Document$1.$$s || this;\n\n      return Opal.alias(self, \"to_s\", \"target\")}, $Document$1.$$s = self, $Document$1.$$arity = 0, $Document$1)));\n      Opal.const_set($nesting[0], 'Footnote', $$$('::', 'Struct').$new(\"index\", \"id\", \"text\"));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'AttributeEntry');\n\n        var $nesting = [self].concat($parent_nesting), $AttributeEntry_initialize$2, $AttributeEntry_save_to$3;\n\n        \n        self.$attr_reader(\"name\", \"value\", \"negate\");\n        \n        Opal.def(self, '$initialize', $AttributeEntry_initialize$2 = function $$initialize(name, value, negate) {\n          var self = this;\n\n          \n          \n          if (negate == null) {\n            negate = nil;\n          };\n          self.name = name;\n          self.value = value;\n          return (self.negate = (function() {if ($truthy(negate['$nil?']())) {\n            return value['$nil?']()\n          } else {\n            return negate\n          }; return nil; })());\n        }, $AttributeEntry_initialize$2.$$arity = -3);\n        return (Opal.def(self, '$save_to', $AttributeEntry_save_to$3 = function $$save_to(block_attributes) {\n          var $a, self = this, $writer = nil;\n\n          \n          ($truthy($a = block_attributes['$[]'](\"attribute_entries\")) ? $a : (($writer = [\"attribute_entries\", []]), $send(block_attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<'](self);\n          return self;\n        }, $AttributeEntry_save_to$3.$$arity = 1), nil) && 'save_to';\n      })($nesting[0], null, $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Title');\n\n        var $nesting = [self].concat($parent_nesting), $Title_initialize$4, $Title_sanitized$ques$5, $Title_subtitle$ques$6, $Title_to_s$7;\n\n        self.$$prototype.sanitized = self.$$prototype.subtitle = self.$$prototype.combined = nil;\n        \n        self.$attr_reader(\"main\");\n        Opal.alias(self, \"title\", \"main\");\n        self.$attr_reader(\"subtitle\");\n        self.$attr_reader(\"combined\");\n        \n        Opal.def(self, '$initialize', $Title_initialize$4 = function $$initialize(val, opts) {\n          var $a, $b, self = this, sep = nil, _ = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy(($truthy($a = (self.sanitized = opts['$[]'](\"sanitize\"))) ? val['$include?'](\"<\") : $a))) {\n            val = val.$gsub($$($nesting, 'XmlSanitizeRx'), \"\").$squeeze(\" \").$strip()};\n          if ($truthy(($truthy($a = (sep = ($truthy($b = opts['$[]'](\"separator\")) ? $b : \":\"))['$empty?']()) ? $a : val['$include?']((sep = \"\" + (sep) + \" \"))['$!']()))) {\n            \n            self.main = val;\n            self.subtitle = nil;\n          } else {\n            $b = val.$rpartition(sep), $a = Opal.to_ary($b), (self.main = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (self.subtitle = ($a[2] == null ? nil : $a[2])), $b\n          };\n          return (self.combined = val);\n        }, $Title_initialize$4.$$arity = -2);\n        \n        Opal.def(self, '$sanitized?', $Title_sanitized$ques$5 = function() {\n          var self = this;\n\n          return self.sanitized\n        }, $Title_sanitized$ques$5.$$arity = 0);\n        \n        Opal.def(self, '$subtitle?', $Title_subtitle$ques$6 = function() {\n          var self = this;\n\n          if ($truthy(self.subtitle)) {\n            return true\n          } else {\n            return false\n          }\n        }, $Title_subtitle$ques$6.$$arity = 0);\n        return (Opal.def(self, '$to_s', $Title_to_s$7 = function $$to_s() {\n          var self = this;\n\n          return self.combined\n        }, $Title_to_s$7.$$arity = 0), nil) && 'to_s';\n      })($nesting[0], null, $nesting);\n      Opal.const_set($nesting[0], 'Author', $$$('::', 'Struct').$new(\"name\", \"firstname\", \"middlename\", \"lastname\", \"initials\", \"email\"));\n      self.$attr_reader(\"safe\");\n      self.$attr_reader(\"compat_mode\");\n      self.$attr_reader(\"backend\");\n      self.$attr_reader(\"doctype\");\n      self.$attr_accessor(\"sourcemap\");\n      self.$attr_reader(\"catalog\");\n      Opal.alias(self, \"references\", \"catalog\");\n      self.$attr_reader(\"counters\");\n      self.$attr_reader(\"header\");\n      self.$attr_reader(\"base_dir\");\n      self.$attr_reader(\"options\");\n      self.$attr_reader(\"outfilesuffix\");\n      self.$attr_reader(\"parent_document\");\n      self.$attr_reader(\"reader\");\n      self.$attr_reader(\"path_resolver\");\n      self.$attr_reader(\"converter\");\n      self.$attr_reader(\"syntax_highlighter\");\n      self.$attr_reader(\"extensions\");\n      \n      Opal.def(self, '$initialize', $Document_initialize$8 = function $$initialize(data, options) {\n        var $a, $$9, $b, $c, $$10, $d, $e, $f, $g, $iter = $Document_initialize$8.$$p, $yield = $iter || nil, self = this, parent_doc = nil, $writer = nil, attr_overrides = nil, parent_doctype = nil, initialize_extensions = nil, to_file = nil, safe_mode = nil, input_mtime = nil, standalone = nil, attrs = nil, safe_mode_name = nil, base_dir_val = nil, backend_val = nil, doctype_val = nil, size = nil, initial_backend = nil, ext_registry = nil, ext_block = nil;\n\n        if ($iter) $Document_initialize$8.$$p = null;\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Document_initialize$8, false), [self, \"document\"], null);\n        if ($truthy((parent_doc = options.$delete(\"parent\")))) {\n          \n          self.parent_document = parent_doc;\n          ($truthy($a = options['$[]'](\"base_dir\")) ? $a : (($writer = [\"base_dir\", parent_doc.$base_dir()]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          if ($truthy(parent_doc.$options()['$[]'](\"catalog_assets\"))) {\n            \n            $writer = [\"catalog_assets\", true];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          self.catalog = parent_doc.$catalog().$merge($hash2([\"footnotes\"], {\"footnotes\": []}));\n          self.attribute_overrides = (attr_overrides = parent_doc.$instance_variable_get(\"@attribute_overrides\").$merge(parent_doc.$attributes()));\n          attr_overrides.$delete(\"compat-mode\");\n          parent_doctype = attr_overrides.$delete(\"doctype\");\n          attr_overrides.$delete(\"notitle\");\n          attr_overrides.$delete(\"showtitle\");\n          attr_overrides.$delete(\"toc\");\n          \n          $writer = [\"toc-placement\", ($truthy($a = attr_overrides.$delete(\"toc-placement\")) ? $a : \"auto\")];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          attr_overrides.$delete(\"toc-position\");\n          self.safe = parent_doc.$safe();\n          if ($truthy((self.compat_mode = parent_doc.$compat_mode()))) {\n            \n            $writer = [\"compat-mode\", \"\"];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          self.outfilesuffix = parent_doc.$outfilesuffix();\n          self.sourcemap = parent_doc.$sourcemap();\n          self.timings = nil;\n          self.path_resolver = parent_doc.$path_resolver();\n          self.converter = parent_doc.$converter();\n          initialize_extensions = nil;\n          self.extensions = parent_doc.$extensions();\n          self.syntax_highlighter = parent_doc.$syntax_highlighter();\n        } else {\n          \n          self.parent_document = nil;\n          self.catalog = $hash2([\"ids\", \"refs\", \"footnotes\", \"links\", \"images\", \"callouts\", \"includes\"], {\"ids\": $hash2([], {}), \"refs\": $hash2([], {}), \"footnotes\": [], \"links\": [], \"images\": [], \"callouts\": $$($nesting, 'Callouts').$new(), \"includes\": $hash2([], {})});\n          self.attribute_overrides = (attr_overrides = $hash2([], {}));\n          $send(($truthy($a = options['$[]'](\"attributes\")) ? $a : $hash2([], {})), 'each', [], ($$9 = function(key, val){var self = $$9.$$s || this, $b;\n\n          \n            \n            if (key == null) {\n              key = nil;\n            };\n            \n            if (val == null) {\n              val = nil;\n            };\n            if ($truthy(key['$end_with?'](\"@\"))) {\n              if ($truthy(key['$start_with?'](\"!\"))) {\n                $b = [key.$slice(1, $rb_minus(key.$length(), 2)), false], (key = $b[0]), (val = $b[1]), $b\n              } else if ($truthy(key['$end_with?'](\"!@\"))) {\n                $b = [key.$slice(0, $rb_minus(key.$length(), 2)), false], (key = $b[0]), (val = $b[1]), $b\n              } else {\n                $b = [key.$chop(), \"\" + (val) + \"@\"], (key = $b[0]), (val = $b[1]), $b\n              }\n            } else if ($truthy(key['$start_with?'](\"!\"))) {\n              $b = [key.$slice(1, key.$length()), (function() {if (val['$=='](\"@\")) {\n                return false\n              } else {\n                return nil\n              }; return nil; })()], (key = $b[0]), (val = $b[1]), $b\n            } else if ($truthy(key['$end_with?'](\"!\"))) {\n              $b = [key.$chop(), (function() {if (val['$=='](\"@\")) {\n                return false\n              } else {\n                return nil\n              }; return nil; })()], (key = $b[0]), (val = $b[1]), $b};\n            \n            $writer = [key.$downcase(), val];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;}, $$9.$$s = self, $$9.$$arity = 2, $$9));\n          if ($truthy($$$('::', 'String')['$===']((to_file = options['$[]'](\"to_file\"))))) {\n            \n            $writer = [\"outfilesuffix\", $$($nesting, 'Helpers').$extname(to_file)];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy((safe_mode = options['$[]'](\"safe\"))['$!']())) {\n            self.safe = $$$($$($nesting, 'SafeMode'), 'SECURE')\n          } else if ($truthy($$$('::', 'Integer')['$==='](safe_mode))) {\n            self.safe = safe_mode\n          } else {\n            self.safe = (function() { try {\n              \n              return $$($nesting, 'SafeMode').$value_for_name(safe_mode);\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  return $$$($$($nesting, 'SafeMode'), 'SECURE')\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            }})()\n          };\n          input_mtime = options.$delete(\"input_mtime\");\n          self.compat_mode = attr_overrides['$key?'](\"compat-mode\");\n          self.sourcemap = options['$[]'](\"sourcemap\");\n          self.timings = options.$delete(\"timings\");\n          self.path_resolver = $$($nesting, 'PathResolver').$new();\n          initialize_extensions = (function() {if ($truthy(($truthy($a = (($c = $$$('::', 'Asciidoctor', 'skip_raise')) && ($b = $$$($c, 'Extensions', 'skip_raise')) ? 'constant' : nil)) ? $a : options['$key?'](\"extensions\")))) {\n            return $$$($$$('::', 'Asciidoctor'), 'Extensions')\n          } else {\n            return nil\n          }; return nil; })();\n          self.extensions = nil;\n          if ($truthy(($truthy($a = options['$key?'](\"header_footer\")) ? options['$key?'](\"standalone\")['$!']() : $a))) {\n            \n            $writer = [\"standalone\", options['$[]'](\"header_footer\")];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n        };\n        self.parsed = (self.reftexts = (self.header = (self.header_attributes = nil)));\n        self.counters = $hash2([], {});\n        self.attributes_modified = $$$('::', 'Set').$new();\n        self.docinfo_processor_extensions = $hash2([], {});\n        standalone = options['$[]'](\"standalone\");\n        (self.options = options).$freeze();\n        attrs = self.attributes;\n        if ($truthy(parent_doc)) {\n        } else {\n          \n          \n          $writer = [\"attribute-undefined\", $$($nesting, 'Compliance').$attribute_undefined()];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"attribute-missing\", $$($nesting, 'Compliance').$attribute_missing()];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          attrs.$update($$($nesting, 'DEFAULT_ATTRIBUTES'));\n        };\n        if ($truthy(standalone)) {\n          \n          \n          $writer = [\"embedded\", nil];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"copycss\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"iconfont-remote\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"stylesheet\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"webfonts\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        } else {\n          \n          \n          $writer = [\"embedded\", \"\"];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(($truthy($a = attr_overrides['$key?'](\"showtitle\")) ? attr_overrides.$keys()['$&']([\"notitle\", \"showtitle\"])['$[]'](-1)['$=='](\"showtitle\") : $a))) {\n            \n            $writer = [\"notitle\", $hash(nil, \"\", false, \"@\", \"@\", false)['$[]'](attr_overrides['$[]'](\"showtitle\"))];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else if ($truthy(attr_overrides['$key?'](\"notitle\"))) {\n            \n            $writer = [\"showtitle\", $hash(nil, \"\", false, \"@\", \"@\", false)['$[]'](attr_overrides['$[]'](\"notitle\"))];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            $writer = [\"notitle\", \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n        };\n        \n        $writer = [\"asciidoctor\", \"\"];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"asciidoctor-version\", $$$($$$('::', 'Asciidoctor'), 'VERSION')];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"safe-mode-name\", (safe_mode_name = $$($nesting, 'SafeMode').$name_for_value(self.safe))];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"\" + \"safe-mode-\" + (safe_mode_name), \"\"];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"safe-mode-level\", self.safe];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        ($truthy($a = attr_overrides['$[]'](\"max-include-depth\")) ? $a : (($writer = [\"max-include-depth\", 64]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attr_overrides['$[]'](\"allow-uri-read\")) ? $a : (($writer = [\"allow-uri-read\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        if ($truthy(attr_overrides['$key?'](\"numbered\"))) {\n          \n          $writer = [\"sectnums\", attr_overrides.$delete(\"numbered\")];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(attr_overrides['$key?'](\"hardbreaks\"))) {\n          \n          $writer = [\"hardbreaks-option\", attr_overrides.$delete(\"hardbreaks\")];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy((base_dir_val = options['$[]'](\"base_dir\")))) {\n          self.base_dir = (($writer = [\"docdir\", $$$('::', 'File').$expand_path(base_dir_val)]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n        } else if ($truthy(attr_overrides['$[]'](\"docdir\"))) {\n          self.base_dir = attr_overrides['$[]'](\"docdir\")\n        } else {\n          self.base_dir = (($writer = [\"docdir\", $$$('::', 'Dir').$pwd()]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n        };\n        if ($truthy((backend_val = options['$[]'](\"backend\")))) {\n          \n          $writer = [\"backend\", backend_val.$to_s()];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy((doctype_val = options['$[]'](\"doctype\")))) {\n          \n          $writer = [\"doctype\", doctype_val.$to_s()];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy($rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SERVER')))) {\n          \n          ($truthy($a = attr_overrides['$[]'](\"copycss\")) ? $a : (($writer = [\"copycss\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          ($truthy($a = attr_overrides['$[]'](\"source-highlighter\")) ? $a : (($writer = [\"source-highlighter\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          ($truthy($a = attr_overrides['$[]'](\"backend\")) ? $a : (($writer = [\"backend\", $$($nesting, 'DEFAULT_BACKEND')]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          if ($truthy(($truthy($a = parent_doc['$!']()) ? attr_overrides['$key?'](\"docfile\") : $a))) {\n            \n            $writer = [\"docfile\", attr_overrides['$[]'](\"docfile\")['$[]'](Opal.Range.$new($rb_plus(attr_overrides['$[]'](\"docdir\").$length(), 1), -1, false))];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          \n          $writer = [\"docdir\", \"\"];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          ($truthy($a = attr_overrides['$[]'](\"user-home\")) ? $a : (($writer = [\"user-home\", \".\"]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          if ($truthy($rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SECURE')))) {\n            \n            if ($truthy(attr_overrides['$key?'](\"max-attribute-value-size\"))) {\n            } else {\n              \n              $writer = [\"max-attribute-value-size\", 4096];\n              $send(attr_overrides, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if ($truthy(attr_overrides['$key?'](\"linkcss\"))) {\n            } else {\n              \n              $writer = [\"linkcss\", \"\"];\n              $send(attr_overrides, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            ($truthy($a = attr_overrides['$[]'](\"icons\")) ? $a : (($writer = [\"icons\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));};\n        } else {\n          ($truthy($a = attr_overrides['$[]'](\"user-home\")) ? $a : (($writer = [\"user-home\", $$($nesting, 'USER_HOME')]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n        };\n        self.max_attribute_value_size = (function() {if ($truthy((size = ($truthy($a = attr_overrides['$[]'](\"max-attribute-value-size\")) ? $a : (($writer = [\"max-attribute-value-size\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))))) {\n          return size.$to_i().$abs()\n        } else {\n          return nil\n        }; return nil; })();\n        $send(attr_overrides, 'delete_if', [], ($$10 = function(key, val){var self = $$10.$$s || this, $d, verdict = nil;\n\n        \n          \n          if (key == null) {\n            key = nil;\n          };\n          \n          if (val == null) {\n            val = nil;\n          };\n          if ($truthy(val)) {\n            \n            if ($truthy(($truthy($d = $$$('::', 'String')['$==='](val)) ? val['$end_with?'](\"@\") : $d))) {\n              $d = [val.$chop(), true], (val = $d[0]), (verdict = $d[1]), $d};\n            \n            $writer = [key, val];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            \n            attrs.$delete(key);\n            verdict = val['$=='](false);\n          };\n          return verdict;}, $$10.$$s = self, $$10.$$arity = 2, $$10));\n        if ($truthy(parent_doc)) {\n          \n          self.backend = attrs['$[]'](\"backend\");\n          if ((self.doctype = (($writer = [\"doctype\", parent_doctype]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$==']($$($nesting, 'DEFAULT_DOCTYPE'))) {\n          } else {\n            self.$update_doctype_attributes($$($nesting, 'DEFAULT_DOCTYPE'))\n          };\n          self.reader = $$($nesting, 'Reader').$new(data, options['$[]'](\"cursor\"));\n          if ($truthy(self.sourcemap)) {\n            self.source_location = self.reader.$cursor()};\n          $$($nesting, 'Parser').$parse(self.reader, self);\n          self.$restore_attributes();\n          return (self.parsed = true);\n        } else {\n          \n          self.backend = nil;\n          if ((initial_backend = ($truthy($a = attrs['$[]'](\"backend\")) ? $a : $$($nesting, 'DEFAULT_BACKEND')))['$=='](\"manpage\")) {\n            self.doctype = (($writer = [\"doctype\", (($writer = [\"doctype\", \"manpage\"]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n          } else {\n            self.doctype = ($truthy($a = attrs['$[]'](\"doctype\")) ? $a : (($writer = [\"doctype\", $$($nesting, 'DEFAULT_DOCTYPE')]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n          };\n          self.$update_backend_attributes(initial_backend, true);\n          ($truthy($a = attrs['$[]'](\"stylesdir\")) ? $a : (($writer = [\"stylesdir\", \".\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          ($truthy($a = attrs['$[]'](\"iconsdir\")) ? $a : (($writer = [\"iconsdir\", \"\" + (attrs.$fetch(\"imagesdir\", \"./images\")) + \"/icons\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          self.$fill_datetime_attributes(attrs, input_mtime);\n          if ($truthy(initialize_extensions)) {\n            if ($truthy((ext_registry = options['$[]'](\"extension_registry\")))) {\n              if ($truthy(($truthy($a = $$$($$($nesting, 'Extensions'), 'Registry')['$==='](ext_registry)) ? $a : ($truthy($d = (($g = $$$('::', 'AsciidoctorJ', 'skip_raise')) && ($f = $$$($g, 'Extensions', 'skip_raise')) && ($e = $$$($f, 'ExtensionRegistry', 'skip_raise')) ? 'constant' : nil)) ? $$$($$$($$$('::', 'AsciidoctorJ'), 'Extensions'), 'ExtensionRegistry')['$==='](ext_registry) : $d)))) {\n                self.extensions = ext_registry.$activate(self)}\n            } else if ($truthy((ext_block = options['$[]'](\"extensions\"))['$nil?']())) {\n              if ($truthy($$($nesting, 'Extensions').$groups()['$empty?']())) {\n              } else {\n                self.extensions = $$$($$($nesting, 'Extensions'), 'Registry').$new().$activate(self)\n              }\n            } else if ($truthy($$$('::', 'Proc')['$==='](ext_block))) {\n              self.extensions = $send($$($nesting, 'Extensions'), 'create', [], ext_block.$to_proc()).$activate(self)}};\n          self.reader = $$($nesting, 'PreprocessorReader').$new(self, data, $$$($$($nesting, 'Reader'), 'Cursor').$new(attrs['$[]'](\"docfile\"), self.base_dir), $hash2([\"normalize\"], {\"normalize\": true}));\n          if ($truthy(self.sourcemap)) {\n            return (self.source_location = self.reader.$cursor())\n          } else {\n            return nil\n          };\n        };\n      }, $Document_initialize$8.$$arity = -1);\n      \n      Opal.def(self, '$parse', $Document_parse$11 = function $$parse(data) {\n        var $a, $$12, $$13, self = this, doc = nil, exts = nil;\n\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        if ($truthy(self.parsed)) {\n          return self\n        } else {\n          \n          doc = self;\n          if ($truthy(data)) {\n            \n            self.reader = $$($nesting, 'PreprocessorReader').$new(doc, data, $$$($$($nesting, 'Reader'), 'Cursor').$new(self.attributes['$[]'](\"docfile\"), self.base_dir), $hash2([\"normalize\"], {\"normalize\": true}));\n            if ($truthy(self.sourcemap)) {\n              self.source_location = self.reader.$cursor()};};\n          if ($truthy(($truthy($a = (exts = (function() {if ($truthy(self.parent_document)) {\n            return nil\n          } else {\n            return self.extensions\n          }; return nil; })())) ? exts['$preprocessors?']() : $a))) {\n            $send(exts.$preprocessors(), 'each', [], ($$12 = function(ext){var self = $$12.$$s || this, $b;\n              if (self.reader == null) self.reader = nil;\n\n            \n              \n              if (ext == null) {\n                ext = nil;\n              };\n              return (self.reader = ($truthy($b = ext.$process_method()['$[]'](doc, self.reader)) ? $b : self.reader));}, $$12.$$s = self, $$12.$$arity = 1, $$12))};\n          $$($nesting, 'Parser').$parse(self.reader, doc, $hash2([\"header_only\"], {\"header_only\": self.options['$[]'](\"parse_header_only\")}));\n          self.$restore_attributes();\n          if ($truthy(($truthy($a = exts) ? exts['$tree_processors?']() : $a))) {\n            $send(exts.$tree_processors(), 'each', [], ($$13 = function(ext){var self = $$13.$$s || this, $b, $c, result = nil;\n\n            \n              \n              if (ext == null) {\n                ext = nil;\n              };\n              if ($truthy(($truthy($b = ($truthy($c = (result = ext.$process_method()['$[]'](doc))) ? $$($nesting, 'Document')['$==='](result) : $c)) ? result['$!='](doc) : $b))) {\n                return (doc = result)\n              } else {\n                return nil\n              };}, $$13.$$s = self, $$13.$$arity = 1, $$13))};\n          self.parsed = true;\n          return doc;\n        };\n      }, $Document_parse$11.$$arity = -1);\n      \n      Opal.def(self, '$parsed?', $Document_parsed$ques$14 = function() {\n        var self = this;\n\n        return self.parsed\n      }, $Document_parsed$ques$14.$$arity = 0);\n      \n      Opal.def(self, '$counter', $Document_counter$15 = function $$counter(name, seed) {\n        var $a, $b, self = this, locked = nil, curr_val = nil, next_val = nil, $writer = nil;\n\n        \n        \n        if (seed == null) {\n          seed = nil;\n        };\n        if ($truthy(self.parent_document)) {\n          return self.parent_document.$counter(name, seed)};\n        if ($truthy(($truthy($a = ($truthy($b = (locked = self['$attribute_locked?'](name))) ? (curr_val = self.counters['$[]'](name)) : $b)) ? $a : (curr_val = self.attributes['$[]'](name))['$nil_or_empty?']()['$!']()))) {\n          next_val = (($writer = [name, $$($nesting, 'Helpers').$nextval(curr_val)]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n        } else if ($truthy(seed)) {\n          next_val = (($writer = [name, (function() {if (seed['$=='](seed.$to_i().$to_s())) {\n            return seed.$to_i()\n          } else {\n            return seed\n          }; return nil; })()]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n        } else {\n          next_val = (($writer = [name, 1]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n        };\n        if ($truthy(locked)) {\n        } else {\n          \n          $writer = [name, next_val];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        return next_val;\n      }, $Document_counter$15.$$arity = -2);\n      \n      Opal.def(self, '$increment_and_store_counter', $Document_increment_and_store_counter$16 = function $$increment_and_store_counter(counter_name, block) {\n        var self = this;\n\n        return $$($nesting, 'AttributeEntry').$new(counter_name, self.$counter(counter_name)).$save_to(block.$attributes()).$value()\n      }, $Document_increment_and_store_counter$16.$$arity = 2);\n      Opal.alias(self, \"counter_increment\", \"increment_and_store_counter\");\n      \n      Opal.def(self, '$register', $Document_register$17 = function $$register(type, value) {\n        var $a, self = this, $case = nil, id = nil, $logical_op_recvr_tmp_1 = nil, $writer = nil, ref = nil;\n\n        return (function() {$case = type;\n        if (\"ids\"['$===']($case)) {return self.$register(\"refs\", [(id = value['$[]'](0)), $$($nesting, 'Inline').$new(self, \"anchor\", value['$[]'](1), $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))])}\n        else if (\"refs\"['$===']($case)) {\n        \n        $logical_op_recvr_tmp_1 = self.catalog['$[]'](\"refs\");\n        ($truthy($a = $logical_op_recvr_tmp_1['$[]'](value['$[]'](0))) ? $a : (($writer = [value['$[]'](0), (ref = value['$[]'](1))]), $send($logical_op_recvr_tmp_1, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));;\n        return ref;}\n        else if (\"footnotes\"['$===']($case)) {return self.catalog['$[]'](type)['$<<'](value)}\n        else {if ($truthy(self.options['$[]'](\"catalog_assets\"))) {\n          return self.catalog['$[]'](type)['$<<']((function() {if (type['$=='](\"images\")) {\n            \n            return $$($nesting, 'ImageReference').$new(value, self.attributes['$[]'](\"imagesdir\"));\n          } else {\n            return value\n          }; return nil; })())\n        } else {\n          return nil\n        }}})()\n      }, $Document_register$17.$$arity = 2);\n      \n      Opal.def(self, '$resolve_id', $Document_resolve_id$18 = function $$resolve_id(text) {\n        var $$19, $$21, self = this, resolved_id = nil, accum = nil;\n\n        if ($truthy(self.reftexts)) {\n          return self.reftexts['$[]'](text)\n        } else if ($truthy(self.parsed)) {\n          return $send((self.reftexts = $hash2([], {})), 'tap', [], ($$19 = function(accum){var self = $$19.$$s || this, $$20;\n            if (self.catalog == null) self.catalog = nil;\n\n          \n            \n            if (accum == null) {\n              accum = nil;\n            };\n            return $send(self.catalog['$[]'](\"refs\"), 'each', [], ($$20 = function(id, ref){var self = $$20.$$s || this, $a, $writer = nil;\n\n            \n              \n              if (id == null) {\n                id = nil;\n              };\n              \n              if (ref == null) {\n                ref = nil;\n              };\n              return ($truthy($a = accum['$[]'](ref.$xreftext())) ? $a : (($writer = [ref.$xreftext(), id]), $send(accum, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));}, $$20.$$s = self, $$20.$$arity = 2, $$20));}, $$19.$$s = self, $$19.$$arity = 1, $$19))['$[]'](text)\n        } else {\n          \n          resolved_id = nil;\n          self.reftexts = (accum = $hash2([], {}));\n          (function(){var $brk = Opal.new_brk(); try {return $send(self.catalog['$[]'](\"refs\"), 'each', [], ($$21 = function(id, ref){var self = $$21.$$s || this, $a, xreftext = nil, $writer = nil;\n\n          \n            \n            if (id == null) {\n              id = nil;\n            };\n            \n            if (ref == null) {\n              ref = nil;\n            };\n            if ((xreftext = ref.$xreftext())['$=='](text)) {\n              \n              resolved_id = id;\n              \n              Opal.brk(nil, $brk);};\n            return ($truthy($a = accum['$[]'](xreftext)) ? $a : (($writer = [xreftext, id]), $send(accum, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));}, $$21.$$s = self, $$21.$$brk = $brk, $$21.$$arity = 2, $$21))\n          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n          self.reftexts = nil;\n          return resolved_id;\n        }\n      }, $Document_resolve_id$18.$$arity = 1);\n      \n      Opal.def(self, '$sections?', $Document_sections$ques$22 = function() {\n        var self = this;\n\n        return $rb_gt(self.next_section_index, 0)\n      }, $Document_sections$ques$22.$$arity = 0);\n      \n      Opal.def(self, '$footnotes?', $Document_footnotes$ques$23 = function() {\n        var self = this;\n\n        if ($truthy(self.catalog['$[]'](\"footnotes\")['$empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      }, $Document_footnotes$ques$23.$$arity = 0);\n      \n      Opal.def(self, '$footnotes', $Document_footnotes$24 = function $$footnotes() {\n        var self = this;\n\n        return self.catalog['$[]'](\"footnotes\")\n      }, $Document_footnotes$24.$$arity = 0);\n      \n      Opal.def(self, '$callouts', $Document_callouts$25 = function $$callouts() {\n        var self = this;\n\n        return self.catalog['$[]'](\"callouts\")\n      }, $Document_callouts$25.$$arity = 0);\n      \n      Opal.def(self, '$nested?', $Document_nested$ques$26 = function() {\n        var self = this;\n\n        if ($truthy(self.parent_document)) {\n          return true\n        } else {\n          return false\n        }\n      }, $Document_nested$ques$26.$$arity = 0);\n      \n      Opal.def(self, '$embedded?', $Document_embedded$ques$27 = function() {\n        var self = this;\n\n        return self.attributes['$key?'](\"embedded\")\n      }, $Document_embedded$ques$27.$$arity = 0);\n      \n      Opal.def(self, '$extensions?', $Document_extensions$ques$28 = function() {\n        var self = this;\n\n        if ($truthy(self.extensions)) {\n          return true\n        } else {\n          return false\n        }\n      }, $Document_extensions$ques$28.$$arity = 0);\n      \n      Opal.def(self, '$source', $Document_source$29 = function $$source() {\n        var self = this;\n\n        if ($truthy(self.reader)) {\n          return self.reader.$source()\n        } else {\n          return nil\n        }\n      }, $Document_source$29.$$arity = 0);\n      \n      Opal.def(self, '$source_lines', $Document_source_lines$30 = function $$source_lines() {\n        var self = this;\n\n        if ($truthy(self.reader)) {\n          return self.reader.$source_lines()\n        } else {\n          return nil\n        }\n      }, $Document_source_lines$30.$$arity = 0);\n      \n      Opal.def(self, '$basebackend?', $Document_basebackend$ques$31 = function(base) {\n        var self = this;\n\n        return self.attributes['$[]'](\"basebackend\")['$=='](base)\n      }, $Document_basebackend$ques$31.$$arity = 1);\n      \n      Opal.def(self, '$title', $Document_title$32 = function $$title() {\n        var self = this;\n\n        return self.$doctitle()\n      }, $Document_title$32.$$arity = 0);\n      \n      Opal.def(self, '$title=', $Document_title$eq$33 = function(title) {\n        var self = this, sect = nil, $writer = nil;\n\n        \n        if ($truthy((sect = self.header))) {\n        } else {\n          \n          $writer = [\"header\"];\n          $send((sect = (self.header = $$($nesting, 'Section').$new(self, 0))), 'sectname=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        \n        $writer = [title];\n        $send(sect, 'title=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $Document_title$eq$33.$$arity = 1);\n      \n      Opal.def(self, '$doctitle', $Document_doctitle$34 = function $$doctitle(opts) {\n        var $a, self = this, val = nil, sect = nil, separator = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy((val = self.attributes['$[]'](\"title\")))) {\n        } else if ($truthy((sect = self.$first_section()))) {\n          val = sect.$title()\n        } else if ($truthy(($truthy($a = opts['$[]'](\"use_fallback\")) ? (val = self.attributes['$[]'](\"untitled-label\")) : $a)['$!']())) {\n          return nil};\n        if ($truthy((separator = opts['$[]'](\"partition\")))) {\n          return $$($nesting, 'Title').$new(val, opts.$merge($hash2([\"separator\"], {\"separator\": (function() {if (separator['$=='](true)) {\n            return self.attributes['$[]'](\"title-separator\")\n          } else {\n            return separator\n          }; return nil; })()})))\n        } else if ($truthy(($truthy($a = opts['$[]'](\"sanitize\")) ? val['$include?'](\"<\") : $a))) {\n          return val.$gsub($$($nesting, 'XmlSanitizeRx'), \"\").$squeeze(\" \").$strip()\n        } else {\n          return val\n        };\n      }, $Document_doctitle$34.$$arity = -1);\n      Opal.alias(self, \"name\", \"doctitle\");\n      \n      Opal.def(self, '$xreftext', $Document_xreftext$35 = function $$xreftext(xrefstyle) {\n        var $a, self = this, val = nil;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {\n          return val\n        } else {\n          return self.$title()\n        };\n      }, $Document_xreftext$35.$$arity = -1);\n      \n      Opal.def(self, '$author', $Document_author$36 = function $$author() {\n        var self = this;\n\n        return self.attributes['$[]'](\"author\")\n      }, $Document_author$36.$$arity = 0);\n      \n      Opal.def(self, '$authors', $Document_authors$37 = function $$authors() {\n        var $a, self = this, attrs = nil, authors = nil, num_authors = nil, idx = nil;\n\n        if ($truthy((attrs = self.attributes)['$key?'](\"author\"))) {\n          \n          authors = [$$($nesting, 'Author').$new(attrs['$[]'](\"author\"), attrs['$[]'](\"firstname\"), attrs['$[]'](\"middlename\"), attrs['$[]'](\"lastname\"), attrs['$[]'](\"authorinitials\"), attrs['$[]'](\"email\"))];\n          if ($truthy($rb_gt((num_authors = ($truthy($a = attrs['$[]'](\"authorcount\")) ? $a : 0)), 1))) {\n            \n            idx = 1;\n            while ($truthy($rb_lt(idx, num_authors))) {\n              \n              idx = $rb_plus(idx, 1);\n              authors['$<<']($$($nesting, 'Author').$new(attrs['$[]'](\"\" + \"author_\" + (idx)), attrs['$[]'](\"\" + \"firstname_\" + (idx)), attrs['$[]'](\"\" + \"middlename_\" + (idx)), attrs['$[]'](\"\" + \"lastname_\" + (idx)), attrs['$[]'](\"\" + \"authorinitials_\" + (idx)), attrs['$[]'](\"\" + \"email_\" + (idx))));\n            };};\n          return authors;\n        } else {\n          return []\n        }\n      }, $Document_authors$37.$$arity = 0);\n      \n      Opal.def(self, '$revdate', $Document_revdate$38 = function $$revdate() {\n        var self = this;\n\n        return self.attributes['$[]'](\"revdate\")\n      }, $Document_revdate$38.$$arity = 0);\n      \n      Opal.def(self, '$notitle', $Document_notitle$39 = function $$notitle() {\n        var self = this;\n\n        return self.attributes['$key?'](\"notitle\")\n      }, $Document_notitle$39.$$arity = 0);\n      \n      Opal.def(self, '$noheader', $Document_noheader$40 = function $$noheader() {\n        var self = this;\n\n        return self.attributes['$key?'](\"noheader\")\n      }, $Document_noheader$40.$$arity = 0);\n      \n      Opal.def(self, '$nofooter', $Document_nofooter$41 = function $$nofooter() {\n        var self = this;\n\n        return self.attributes['$key?'](\"nofooter\")\n      }, $Document_nofooter$41.$$arity = 0);\n      \n      Opal.def(self, '$first_section', $Document_first_section$42 = function $$first_section() {\n        var $a, $$43, self = this;\n\n        return ($truthy($a = self.header) ? $a : $send(self.blocks, 'find', [], ($$43 = function(e){var self = $$43.$$s || this;\n\n        \n          \n          if (e == null) {\n            e = nil;\n          };\n          return e.$context()['$=='](\"section\");}, $$43.$$s = self, $$43.$$arity = 1, $$43)))\n      }, $Document_first_section$42.$$arity = 0);\n      \n      Opal.def(self, '$header?', $Document_header$ques$44 = function() {\n        var self = this;\n\n        if ($truthy(self.header)) {\n          return true\n        } else {\n          return false\n        }\n      }, $Document_header$ques$44.$$arity = 0);\n      Opal.alias(self, \"has_header?\", \"header?\");\n      \n      Opal.def(self, '$<<', $Document_$lt$lt$45 = function(block) {\n        var $iter = $Document_$lt$lt$45.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Document_$lt$lt$45.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        if (block.$context()['$=='](\"section\")) {\n          self.$assign_numeral(block)};\n        return $send(self, Opal.find_super_dispatcher(self, '<<', $Document_$lt$lt$45, false), $zuper, $iter);\n      }, $Document_$lt$lt$45.$$arity = 1);\n      \n      Opal.def(self, '$finalize_header', $Document_finalize_header$46 = function $$finalize_header(unrooted_attributes, header_valid) {\n        var self = this, $writer = nil;\n\n        \n        \n        if (header_valid == null) {\n          header_valid = true;\n        };\n        self.$clear_playback_attributes(unrooted_attributes);\n        self.$save_attributes();\n        if ($truthy(header_valid)) {\n        } else {\n          \n          $writer = [\"invalid-header\", true];\n          $send(unrooted_attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        return unrooted_attributes;\n      }, $Document_finalize_header$46.$$arity = -2);\n      \n      Opal.def(self, '$playback_attributes', $Document_playback_attributes$47 = function $$playback_attributes(block_attributes) {\n        var $$48, self = this;\n\n        if ($truthy(block_attributes['$key?'](\"attribute_entries\"))) {\n          return $send(block_attributes['$[]'](\"attribute_entries\"), 'each', [], ($$48 = function(entry){var self = $$48.$$s || this, name = nil, $writer = nil;\n            if (self.attributes == null) self.attributes = nil;\n\n          \n            \n            if (entry == null) {\n              entry = nil;\n            };\n            name = entry.$name();\n            if ($truthy(entry.$negate())) {\n              \n              self.attributes.$delete(name);\n              if (name['$=='](\"compat-mode\")) {\n                return (self.compat_mode = false)\n              } else {\n                return nil\n              };\n            } else {\n              \n              \n              $writer = [name, entry.$value()];\n              $send(self.attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              if (name['$=='](\"compat-mode\")) {\n                return (self.compat_mode = true)\n              } else {\n                return nil\n              };\n            };}, $$48.$$s = self, $$48.$$arity = 1, $$48))\n        } else {\n          return nil\n        }\n      }, $Document_playback_attributes$47.$$arity = 1);\n      \n      Opal.def(self, '$restore_attributes', $Document_restore_attributes$49 = function $$restore_attributes() {\n        var self = this;\n\n        \n        if ($truthy(self.parent_document)) {\n        } else {\n          self.catalog['$[]'](\"callouts\").$rewind()\n        };\n        return self.attributes.$replace(self.header_attributes);\n      }, $Document_restore_attributes$49.$$arity = 0);\n      \n      Opal.def(self, '$set_attribute', $Document_set_attribute$50 = function $$set_attribute(name, value) {\n        var $a, self = this, $writer = nil, $case = nil;\n\n        \n        \n        if (value == null) {\n          value = \"\";\n        };\n        if ($truthy(self['$attribute_locked?'](name))) {\n          return nil\n        } else {\n          \n          if ($truthy(value['$empty?']())) {\n          } else {\n            value = self.$apply_attribute_value_subs(value)\n          };\n          if ($truthy(self.header_attributes)) {\n            \n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            $case = name;\n            if (\"backend\"['$===']($case)) {self.$update_backend_attributes(value, ($truthy($a = self.attributes_modified['$delete?'](\"htmlsyntax\")) ? value['$=='](self.backend) : $a))}\n            else if (\"doctype\"['$===']($case)) {self.$update_doctype_attributes(value)}\n            else {\n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n            self.attributes_modified['$<<'](name);\n          };\n          return value;\n        };\n      }, $Document_set_attribute$50.$$arity = -2);\n      \n      Opal.def(self, '$delete_attribute', $Document_delete_attribute$51 = function $$delete_attribute(name) {\n        var self = this;\n\n        if ($truthy(self['$attribute_locked?'](name))) {\n          return false\n        } else {\n          \n          self.attributes.$delete(name);\n          self.attributes_modified['$<<'](name);\n          return true;\n        }\n      }, $Document_delete_attribute$51.$$arity = 1);\n      \n      Opal.def(self, '$attribute_locked?', $Document_attribute_locked$ques$52 = function(name) {\n        var self = this;\n\n        return self.attribute_overrides['$key?'](name)\n      }, $Document_attribute_locked$ques$52.$$arity = 1);\n      \n      Opal.def(self, '$set_header_attribute', $Document_set_header_attribute$53 = function $$set_header_attribute(name, value, overwrite) {\n        var $a, self = this, attrs = nil, $writer = nil;\n\n        \n        \n        if (value == null) {\n          value = \"\";\n        };\n        \n        if (overwrite == null) {\n          overwrite = true;\n        };\n        attrs = ($truthy($a = self.header_attributes) ? $a : self.attributes);\n        if ($truthy((($a = overwrite['$=='](false)) ? attrs['$key?'](name) : overwrite['$=='](false)))) {\n          return false\n        } else {\n          \n          \n          $writer = [name, value];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return true;\n        };\n      }, $Document_set_header_attribute$53.$$arity = -2);\n      \n      Opal.def(self, '$convert', $Document_convert$54 = function $$convert(opts) {\n        var $a, $$55, self = this, $writer = nil, block = nil, output = nil, transform = nil, exts = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(self.timings)) {\n          self.timings.$start(\"convert\")};\n        if ($truthy(self.parsed)) {\n        } else {\n          self.$parse()\n        };\n        if ($truthy(($truthy($a = $rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SERVER'))) ? $a : opts['$empty?']()))) {\n        } else {\n          \n          if ($truthy((($writer = [\"outfile\", opts['$[]'](\"outfile\")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))) {\n          } else {\n            self.attributes.$delete(\"outfile\")\n          };\n          if ($truthy((($writer = [\"outdir\", opts['$[]'](\"outdir\")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))) {\n          } else {\n            self.attributes.$delete(\"outdir\")\n          };\n        };\n        if (self.$doctype()['$=='](\"inline\")) {\n          if ($truthy((block = ($truthy($a = self.blocks['$[]'](0)) ? $a : self.header)))) {\n            if ($truthy(($truthy($a = block.$content_model()['$=='](\"compound\")) ? $a : block.$content_model()['$=='](\"empty\")))) {\n              self.$logger().$warn(\"no inline candidate; use the inline doctype to convert a single paragragh, verbatim, or raw block\")\n            } else {\n              output = block.$content()\n            }}\n        } else {\n          \n          if ($truthy(opts['$key?'](\"standalone\"))) {\n            transform = (function() {if ($truthy(opts['$[]'](\"standalone\"))) {\n              return \"document\"\n            } else {\n              return \"embedded\"\n            }; return nil; })()\n          } else if ($truthy(opts['$key?'](\"header_footer\"))) {\n            transform = (function() {if ($truthy(opts['$[]'](\"header_footer\"))) {\n              return \"document\"\n            } else {\n              return \"embedded\"\n            }; return nil; })()\n          } else {\n            transform = (function() {if ($truthy(self.options['$[]'](\"standalone\"))) {\n              return \"document\"\n            } else {\n              return \"embedded\"\n            }; return nil; })()\n          };\n          output = self.converter.$convert(self, transform);\n        };\n        if ($truthy(self.parent_document)) {\n        } else if ($truthy(($truthy($a = (exts = self.extensions)) ? exts['$postprocessors?']() : $a))) {\n          $send(exts.$postprocessors(), 'each', [], ($$55 = function(ext){var self = $$55.$$s || this;\n\n          \n            \n            if (ext == null) {\n              ext = nil;\n            };\n            return (output = ext.$process_method()['$[]'](self, output));}, $$55.$$s = self, $$55.$$arity = 1, $$55))};\n        if ($truthy(self.timings)) {\n          self.timings.$record(\"convert\")};\n        return output;\n      }, $Document_convert$54.$$arity = -1);\n      Opal.alias(self, \"render\", \"convert\");\n      \n      Opal.def(self, '$write', $Document_write$56 = function $$write(output, target) {\n        var $a, $b, self = this;\n\n        \n        if ($truthy(self.timings)) {\n          self.timings.$start(\"write\")};\n        if ($truthy($$($nesting, 'Writer')['$==='](self.converter))) {\n          self.converter.$write(output, target)\n        } else {\n          \n          if ($truthy(target['$respond_to?'](\"write\"))) {\n            if ($truthy(output['$nil_or_empty?']())) {\n            } else {\n              \n              target.$write(output.$chomp());\n              target.$write($$($nesting, 'LF'));\n            }\n          } else {\n            $$$('::', 'File').$write(target, output, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}))\n          };\n          if ($truthy(($truthy($a = (($b = self.backend['$=='](\"manpage\")) ? $$$('::', 'String')['$==='](target) : self.backend['$=='](\"manpage\"))) ? self.converter.$class()['$respond_to?'](\"write_alternate_pages\") : $a))) {\n            self.converter.$class().$write_alternate_pages(self.attributes['$[]'](\"mannames\"), self.attributes['$[]'](\"manvolnum\"), target)};\n        };\n        if ($truthy(self.timings)) {\n          self.timings.$record(\"write\")};\n        return nil;\n      }, $Document_write$56.$$arity = 2);\n      \n      Opal.def(self, '$content', $Document_content$57 = function $$content() {\n        var $iter = $Document_content$57.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Document_content$57.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        self.attributes.$delete(\"title\");\n        return $send(self, Opal.find_super_dispatcher(self, 'content', $Document_content$57, false), $zuper, $iter);\n      }, $Document_content$57.$$arity = 0);\n      \n      Opal.def(self, '$docinfo', $Document_docinfo$58 = function $$docinfo(location, suffix) {\n        var $a, $$59, $$60, self = this, qualifier = nil, docinfo = nil, content = nil, docinfo_file = nil, docinfo_dir = nil, docinfo_subs = nil, docinfo_path = nil, shared_docinfo = nil, private_docinfo = nil;\n\n        \n        \n        if (location == null) {\n          location = \"head\";\n        };\n        \n        if (suffix == null) {\n          suffix = nil;\n        };\n        if ($truthy($rb_lt(self.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')))) {\n          \n          if (location['$=='](\"head\")) {\n          } else {\n            qualifier = \"\" + \"-\" + (location)\n          };\n          suffix = ($truthy($a = suffix) ? $a : self.outfilesuffix);\n          if ($truthy((docinfo = self.attributes['$[]'](\"docinfo\"))['$nil_or_empty?']())) {\n            if ($truthy(self.attributes['$key?'](\"docinfo2\"))) {\n              docinfo = [\"private\", \"shared\"]\n            } else if ($truthy(self.attributes['$key?'](\"docinfo1\"))) {\n              docinfo = [\"shared\"]\n            } else {\n              docinfo = (function() {if ($truthy(docinfo)) {\n                return [\"private\"]\n              } else {\n                return nil\n              }; return nil; })()\n            }\n          } else {\n            docinfo = $send(docinfo.$split(\",\"), 'map', [], ($$59 = function(it){var self = $$59.$$s || this;\n\n            \n              \n              if (it == null) {\n                it = nil;\n              };\n              return it.$strip();}, $$59.$$s = self, $$59.$$arity = 1, $$59))\n          };\n          if ($truthy(docinfo)) {\n            \n            content = [];\n            $a = [\"\" + \"docinfo\" + (qualifier) + (suffix), self.attributes['$[]'](\"docinfodir\"), self.$resolve_docinfo_subs()], (docinfo_file = $a[0]), (docinfo_dir = $a[1]), (docinfo_subs = $a[2]), $a;\n            if ($truthy(docinfo['$&']([\"shared\", \"\" + \"shared-\" + (location)])['$empty?']())) {\n            } else {\n              \n              docinfo_path = self.$normalize_system_path(docinfo_file, docinfo_dir);\n              if ($truthy((shared_docinfo = self.$read_asset(docinfo_path, $hash2([\"normalize\"], {\"normalize\": true}))))) {\n                content['$<<'](self.$apply_subs(shared_docinfo, docinfo_subs))};\n            };\n            if ($truthy(($truthy($a = self.attributes['$[]'](\"docname\")['$nil_or_empty?']()) ? $a : docinfo['$&']([\"private\", \"\" + \"private-\" + (location)])['$empty?']()))) {\n            } else {\n              \n              docinfo_path = self.$normalize_system_path(\"\" + (self.attributes['$[]'](\"docname\")) + \"-\" + (docinfo_file), docinfo_dir);\n              if ($truthy((private_docinfo = self.$read_asset(docinfo_path, $hash2([\"normalize\"], {\"normalize\": true}))))) {\n                content['$<<'](self.$apply_subs(private_docinfo, docinfo_subs))};\n            };};};\n        if ($truthy(($truthy($a = self.extensions) ? self['$docinfo_processors?'](location) : $a))) {\n          return ($truthy($a = content) ? $a : []).$concat($send(self.docinfo_processor_extensions['$[]'](location), 'map', [], ($$60 = function(ext){var self = $$60.$$s || this;\n\n          \n            \n            if (ext == null) {\n              ext = nil;\n            };\n            return ext.$process_method()['$[]'](self);}, $$60.$$s = self, $$60.$$arity = 1, $$60)).$compact()).$join($$($nesting, 'LF'))\n        } else if ($truthy(content)) {\n          return content.$join($$($nesting, 'LF'))\n        } else {\n          return \"\"\n        };\n      }, $Document_docinfo$58.$$arity = -1);\n      \n      Opal.def(self, '$docinfo_processors?', $Document_docinfo_processors$ques$61 = function(location) {\n        var $a, self = this, $writer = nil;\n\n        \n        \n        if (location == null) {\n          location = \"head\";\n        };\n        if ($truthy(self.docinfo_processor_extensions['$key?'](location))) {\n          return self.docinfo_processor_extensions['$[]'](location)['$!='](false)\n        } else if ($truthy(($truthy($a = self.extensions) ? self.document.$extensions()['$docinfo_processors?'](location) : $a))) {\n          return (($writer = [location, self.document.$extensions().$docinfo_processors(location)]), $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])['$!']()['$!']()\n        } else {\n          \n          $writer = [location, false];\n          $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n      }, $Document_docinfo_processors$ques$61.$$arity = -1);\n      \n      Opal.def(self, '$to_s', $Document_to_s$62 = function $$to_s() {\n        var $a, self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {doctype: \" + (self.$doctype().$inspect()) + \", doctitle: \" + (($truthy($a = self.header) ? self.header.$title() : $a).$inspect()) + \", blocks: \" + (self.blocks.$size()) + \"}>\"\n      }, $Document_to_s$62.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$apply_attribute_value_subs', $Document_apply_attribute_value_subs$63 = function $$apply_attribute_value_subs(value) {\n        var $a, self = this;\n\n        \n        if ($truthy($$($nesting, 'AttributeEntryPassMacroRx')['$=~'](value))) {\n          \n          value = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n            value = self.$apply_subs(value, self.$resolve_pass_subs((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))};\n        } else {\n          value = self.$apply_header_subs(value)\n        };\n        if ($truthy(self.max_attribute_value_size)) {\n          \n          return self.$limit_bytesize(value, self.max_attribute_value_size);\n        } else {\n          return value\n        };\n      }, $Document_apply_attribute_value_subs$63.$$arity = 1);\n      \n      Opal.def(self, '$limit_bytesize', $Document_limit_bytesize$64 = function $$limit_bytesize(str, max) {\n        var $a, self = this;\n\n        \n        if ($truthy($rb_gt(str.$bytesize(), max))) {\n          while (!($truthy((str = str.$byteslice(0, max))['$valid_encoding?']()))) {\n            max = $rb_minus(max, 1)\n          }};\n        return str;\n      }, $Document_limit_bytesize$64.$$arity = 2);\n      \n      Opal.def(self, '$resolve_docinfo_subs', $Document_resolve_docinfo_subs$65 = function $$resolve_docinfo_subs() {\n        var self = this;\n\n        if ($truthy(self.attributes['$key?'](\"docinfosubs\"))) {\n          \n          return self.$resolve_subs(self.attributes['$[]'](\"docinfosubs\"), \"block\", nil, \"docinfo\");\n        } else {\n          return [\"attributes\"]\n        }\n      }, $Document_resolve_docinfo_subs$65.$$arity = 0);\n      \n      Opal.def(self, '$create_converter', $Document_create_converter$66 = function $$create_converter(backend, delegate_backend) {\n        var $a, self = this, converter_opts = nil, template_dirs = nil, opts = nil, $writer = nil, converter = nil;\n\n        \n        converter_opts = $hash2([\"document\", \"htmlsyntax\"], {\"document\": self, \"htmlsyntax\": self.attributes['$[]'](\"htmlsyntax\")});\n        if ($truthy((template_dirs = ($truthy($a = (opts = self.options)['$[]'](\"template_dirs\")) ? $a : opts['$[]'](\"template_dir\"))))) {\n          \n          \n          $writer = [\"template_dirs\", [].concat(Opal.to_a(template_dirs))];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"template_cache\", opts.$fetch(\"template_cache\", true)];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"template_engine\", opts['$[]'](\"template_engine\")];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"template_engine_options\", opts['$[]'](\"template_engine_options\")];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"eruby\", opts['$[]'](\"eruby\")];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"safe\", self.safe];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(delegate_backend)) {\n            \n            $writer = [\"delegate_backend\", delegate_backend];\n            $send(converter_opts, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};};\n        if ($truthy((converter = opts['$[]'](\"converter\")))) {\n          return $$$($$($nesting, 'Converter'), 'CustomFactory').$new($hash(backend, converter)).$create(backend, converter_opts)\n        } else {\n          return opts.$fetch(\"converter_factory\", $$($nesting, 'Converter')).$create(backend, converter_opts)\n        };\n      }, $Document_create_converter$66.$$arity = 2);\n      \n      Opal.def(self, '$clear_playback_attributes', $Document_clear_playback_attributes$67 = function $$clear_playback_attributes(attributes) {\n        var self = this;\n\n        return attributes.$delete(\"attribute_entries\")\n      }, $Document_clear_playback_attributes$67.$$arity = 1);\n      \n      Opal.def(self, '$save_attributes', $Document_save_attributes$68 = function $$save_attributes() {\n        var $a, $$69, self = this, attrs = nil, doctitle_val = nil, $writer = nil, toc_val = nil, toc_position_val = nil, toc_placement_val = nil, default_toc_position = nil, default_toc_class = nil, position = nil, $case = nil, icons_val = nil, basebackend = nil, syntax_hl_name = nil, syntax_hl_factory = nil, syntax_hls = nil;\n\n        \n        if ($truthy(($truthy($a = (attrs = self.attributes)['$key?'](\"doctitle\")) ? $a : (doctitle_val = self.$doctitle())['$!']()))) {\n        } else {\n          \n          $writer = [\"doctitle\", doctitle_val];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        self.id = ($truthy($a = self.id) ? $a : attrs['$[]'](\"css-signature\"));\n        if ($truthy((toc_val = (function() {if ($truthy(attrs.$delete(\"toc2\"))) {\n          return \"left\"\n        } else {\n          return attrs['$[]'](\"toc\")\n        }; return nil; })()))) {\n          \n          toc_position_val = (function() {if ($truthy(($truthy($a = (toc_placement_val = attrs.$fetch(\"toc-placement\", \"macro\"))) ? toc_placement_val['$!='](\"auto\") : $a))) {\n            return toc_placement_val\n          } else {\n            return attrs['$[]'](\"toc-position\")\n          }; return nil; })();\n          if ($truthy(($truthy($a = toc_val['$empty?']()) ? toc_position_val['$nil_or_empty?']() : $a))) {\n          } else {\n            \n            default_toc_position = \"left\";\n            default_toc_class = \"toc2\";\n            position = (function() {if ($truthy(toc_position_val['$nil_or_empty?']())) {\n              \n              if ($truthy(toc_val['$empty?']())) {\n                return default_toc_position\n              } else {\n                return toc_val\n              };\n            } else {\n              return toc_position_val\n            }; return nil; })();\n            \n            $writer = [\"toc\", \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"toc-placement\", \"auto\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            $case = position;\n            if (\"left\"['$===']($case) || \"<\"['$===']($case) || \"&lt;\"['$===']($case)) {\n            $writer = [\"toc-position\", \"left\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"right\"['$===']($case) || \">\"['$===']($case) || \"&gt;\"['$===']($case)) {\n            $writer = [\"toc-position\", \"right\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"top\"['$===']($case) || \"^\"['$===']($case)) {\n            $writer = [\"toc-position\", \"top\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"bottom\"['$===']($case) || \"v\"['$===']($case)) {\n            $writer = [\"toc-position\", \"bottom\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"preamble\"['$===']($case) || \"macro\"['$===']($case)) {\n            \n            $writer = [\"toc-position\", \"content\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"toc-placement\", position];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            default_toc_class = nil;}\n            else {\n            attrs.$delete(\"toc-position\");\n            default_toc_class = nil;};\n            if ($truthy(default_toc_class)) {\n              ($truthy($a = attrs['$[]'](\"toc-class\")) ? $a : (($writer = [\"toc-class\", default_toc_class]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))};\n          };};\n        if ($truthy(($truthy($a = (icons_val = attrs['$[]'](\"icons\"))) ? attrs['$key?'](\"icontype\")['$!']() : $a))) {\n          $case = icons_val;\n          if (\"\"['$===']($case) || \"font\"['$===']($case)) {nil}\n          else {\n          \n          $writer = [\"icons\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if (icons_val['$=='](\"image\")) {\n          } else {\n            \n            $writer = [\"icontype\", icons_val];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };}};\n        if ($truthy(($truthy($a = (self.compat_mode = attrs['$key?'](\"compat-mode\"))) ? attrs['$key?'](\"language\") : $a))) {\n          \n          $writer = [\"source-language\", attrs['$[]'](\"language\")];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(self.parent_document)) {\n        } else {\n          \n          if ((basebackend = attrs['$[]'](\"basebackend\"))['$=='](\"html\")) {\n            if ($truthy(($truthy($a = (syntax_hl_name = attrs['$[]'](\"source-highlighter\"))) ? attrs['$[]'](\"\" + (syntax_hl_name) + \"-unavailable\")['$!']() : $a))) {\n              if ($truthy((syntax_hl_factory = self.options['$[]'](\"syntax_highlighter_factory\")))) {\n                self.syntax_highlighter = syntax_hl_factory.$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              } else if ($truthy((syntax_hls = self.options['$[]'](\"syntax_highlighters\")))) {\n                self.syntax_highlighter = $$$($$($nesting, 'SyntaxHighlighter'), 'DefaultFactoryProxy').$new(syntax_hls).$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              } else {\n                self.syntax_highlighter = $$($nesting, 'SyntaxHighlighter').$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              }}\n          } else if (basebackend['$=='](\"docbook\")) {\n            \n            if ($truthy(($truthy($a = self['$attribute_locked?'](\"toc\")) ? $a : self.attributes_modified['$include?'](\"toc\")))) {\n            } else {\n              \n              $writer = [\"toc\", \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if ($truthy(($truthy($a = self['$attribute_locked?'](\"sectnums\")) ? $a : self.attributes_modified['$include?'](\"sectnums\")))) {\n            } else {\n              \n              $writer = [\"sectnums\", \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };};\n          self.outfilesuffix = attrs['$[]'](\"outfilesuffix\");\n          $send($$($nesting, 'FLEXIBLE_ATTRIBUTES'), 'each', [], ($$69 = function(name){var self = $$69.$$s || this, $b;\n            if (self.attribute_overrides == null) self.attribute_overrides = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            if ($truthy(($truthy($b = self.attribute_overrides['$key?'](name)) ? self.attribute_overrides['$[]'](name) : $b))) {\n              return self.attribute_overrides.$delete(name)\n            } else {\n              return nil\n            };}, $$69.$$s = self, $$69.$$arity = 1, $$69));\n        };\n        return (self.header_attributes = attrs.$merge());\n      }, $Document_save_attributes$68.$$arity = 0);\n      \n      Opal.def(self, '$fill_datetime_attributes', $Document_fill_datetime_attributes$70 = function $$fill_datetime_attributes(attrs, input_mtime) {\n        var $a, $b, self = this, now = nil, source_date_epoch = nil, localdate = nil, $writer = nil, localtime = nil, docdate = nil, doctime = nil;\n\n        \n        now = (function() {if ($truthy($$$('::', 'ENV')['$key?'](\"SOURCE_DATE_EPOCH\"))) {\n          \n          return (source_date_epoch = $$$('::', 'Time').$at(self.$Integer($$$('::', 'ENV')['$[]'](\"SOURCE_DATE_EPOCH\"))).$utc());\n        } else {\n          return $$$('::', 'Time').$now()\n        }; return nil; })();\n        if ($truthy((localdate = attrs['$[]'](\"localdate\")))) {\n          ($truthy($a = attrs['$[]'](\"localyear\")) ? $a : (($writer = [\"localyear\", (function() {if (localdate.$index(\"-\")['$=='](4)) {\n            \n            return localdate.$slice(0, 4);\n          } else {\n            return nil\n          }; return nil; })()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n        } else {\n          \n          localdate = (($writer = [\"localdate\", now.$strftime(\"%F\")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n          ($truthy($a = attrs['$[]'](\"localyear\")) ? $a : (($writer = [\"localyear\", now.$year().$to_s()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        };\n        localtime = ($truthy($a = attrs['$[]'](\"localtime\")) ? $a : (($writer = [\"localtime\", now.$strftime(\"\" + \"%T \" + ((function() {if (now.$utc_offset()['$=='](0)) {\n          return \"UTC\"\n        } else {\n          return \"%z\"\n        }; return nil; })()))]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attrs['$[]'](\"localdatetime\")) ? $a : (($writer = [\"localdatetime\", \"\" + (localdate) + \" \" + (localtime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        input_mtime = ($truthy($a = ($truthy($b = source_date_epoch) ? $b : input_mtime)) ? $a : now);\n        if ($truthy((docdate = attrs['$[]'](\"docdate\")))) {\n          ($truthy($a = attrs['$[]'](\"docyear\")) ? $a : (($writer = [\"docyear\", (function() {if (docdate.$index(\"-\")['$=='](4)) {\n            \n            return docdate.$slice(0, 4);\n          } else {\n            return nil\n          }; return nil; })()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n        } else {\n          \n          docdate = (($writer = [\"docdate\", input_mtime.$strftime(\"%F\")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n          ($truthy($a = attrs['$[]'](\"docyear\")) ? $a : (($writer = [\"docyear\", input_mtime.$year().$to_s()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        };\n        doctime = ($truthy($a = attrs['$[]'](\"doctime\")) ? $a : (($writer = [\"doctime\", input_mtime.$strftime(\"\" + \"%T \" + ((function() {if (input_mtime.$utc_offset()['$=='](0)) {\n          return \"UTC\"\n        } else {\n          return \"%z\"\n        }; return nil; })()))]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attrs['$[]'](\"docdatetime\")) ? $a : (($writer = [\"docdatetime\", \"\" + (docdate) + \" \" + (doctime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        return nil;\n      }, $Document_fill_datetime_attributes$70.$$arity = 2);\n      \n      Opal.def(self, '$update_backend_attributes', $Document_update_backend_attributes$71 = function $$update_backend_attributes(new_backend, init) {\n        var $a, $b, self = this, current_backend = nil, current_basebackend = nil, attrs = nil, current_doctype = nil, actual_backend = nil, _ = nil, $writer = nil, delegate_backend = nil, converter = nil, new_basebackend = nil, new_filetype = nil, htmlsyntax = nil, backend_traits = nil, current_filetype = nil, page_width = nil;\n\n        \n        \n        if (init == null) {\n          init = nil;\n        };\n        if ($truthy(($truthy($a = init) ? $a : new_backend['$!='](self.backend)))) {\n          \n          current_backend = self.backend;\n          current_basebackend = (attrs = self.attributes)['$[]'](\"basebackend\");\n          current_doctype = self.doctype;\n          if ($truthy(new_backend['$include?'](\":\"))) {\n            $b = new_backend.$partition(\":\"), $a = Opal.to_ary($b), (actual_backend = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (new_backend = ($a[2] == null ? nil : $a[2])), $b};\n          if ($truthy(new_backend['$start_with?'](\"xhtml\"))) {\n            \n            \n            $writer = [\"htmlsyntax\", \"xml\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            new_backend = new_backend.$slice(1, new_backend.$length());\n          } else if ($truthy(new_backend['$start_with?'](\"html\"))) {\n            ($truthy($a = attrs['$[]'](\"htmlsyntax\")) ? $a : (($writer = [\"htmlsyntax\", \"html\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))};\n          new_backend = ($truthy($a = $$($nesting, 'BACKEND_ALIASES')['$[]'](new_backend)) ? $a : new_backend);\n          if ($truthy(actual_backend)) {\n            $a = [actual_backend, new_backend], (new_backend = $a[0]), (delegate_backend = $a[1]), $a};\n          if ($truthy(current_doctype)) {\n            \n            if ($truthy(current_backend)) {\n              \n              attrs.$delete(\"\" + \"backend-\" + (current_backend));\n              attrs.$delete(\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (current_doctype));};\n            \n            $writer = [\"\" + \"backend-\" + (new_backend) + \"-doctype-\" + (current_doctype), \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"\" + \"doctype-\" + (current_doctype), \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else if ($truthy(current_backend)) {\n            attrs.$delete(\"\" + \"backend-\" + (current_backend))};\n          \n          $writer = [\"\" + \"backend-\" + (new_backend), \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          self.backend = (($writer = [\"backend\", new_backend]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n          if ($truthy($$$($$($nesting, 'Converter'), 'BackendTraits')['$===']((converter = self.$create_converter(new_backend, delegate_backend))))) {\n            \n            new_basebackend = converter.$basebackend();\n            new_filetype = converter.$filetype();\n            if ($truthy((htmlsyntax = converter.$htmlsyntax()))) {\n              \n              $writer = [\"htmlsyntax\", htmlsyntax];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(init)) {\n              ($truthy($a = attrs['$[]'](\"outfilesuffix\")) ? $a : (($writer = [\"outfilesuffix\", converter.$outfilesuffix()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n            } else if ($truthy(self['$attribute_locked?'](\"outfilesuffix\"))) {\n            } else {\n              \n              $writer = [\"outfilesuffix\", converter.$outfilesuffix()];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          } else if ($truthy(converter)) {\n            \n            backend_traits = $$($nesting, 'Converter').$derive_backend_traits(new_backend);\n            new_basebackend = backend_traits['$[]'](\"basebackend\");\n            new_filetype = backend_traits['$[]'](\"filetype\");\n            if ($truthy(init)) {\n              ($truthy($a = attrs['$[]'](\"outfilesuffix\")) ? $a : (($writer = [\"outfilesuffix\", backend_traits['$[]'](\"outfilesuffix\")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n            } else if ($truthy(self['$attribute_locked?'](\"outfilesuffix\"))) {\n            } else {\n              \n              $writer = [\"outfilesuffix\", backend_traits['$[]'](\"outfilesuffix\")];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          } else {\n            self.$raise($$$('::', 'NotImplementedError'), \"\" + \"asciidoctor: FAILED: missing converter for backend '\" + (new_backend) + \"'. Processing aborted.\")\n          };\n          self.converter = converter;\n          if ($truthy((current_filetype = attrs['$[]'](\"filetype\")))) {\n            attrs.$delete(\"\" + \"filetype-\" + (current_filetype))};\n          \n          $writer = [\"filetype\", new_filetype];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"\" + \"filetype-\" + (new_filetype), \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy((page_width = $$($nesting, 'DEFAULT_PAGE_WIDTHS')['$[]'](new_basebackend)))) {\n            \n            $writer = [\"pagewidth\", page_width];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            attrs.$delete(\"pagewidth\")\n          };\n          if ($truthy(new_basebackend['$!='](current_basebackend))) {\n            \n            if ($truthy(current_doctype)) {\n              \n              if ($truthy(current_basebackend)) {\n                \n                attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend));\n                attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (current_doctype));};\n              \n              $writer = [\"\" + \"basebackend-\" + (new_basebackend) + \"-doctype-\" + (current_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else if ($truthy(current_basebackend)) {\n              attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend))};\n            \n            $writer = [\"\" + \"basebackend-\" + (new_basebackend), \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"basebackend\", new_basebackend];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;};\n          return new_backend;\n        } else {\n          return nil\n        };\n      }, $Document_update_backend_attributes$71.$$arity = -2);\n      return (Opal.def(self, '$update_doctype_attributes', $Document_update_doctype_attributes$72 = function $$update_doctype_attributes(new_doctype) {\n        var $a, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil, $writer = nil;\n\n        if ($truthy(($truthy($a = new_doctype) ? new_doctype['$!='](self.doctype) : $a))) {\n          \n          $a = [self.backend, (attrs = self.attributes)['$[]'](\"basebackend\"), self.doctype], (current_backend = $a[0]), (current_basebackend = $a[1]), (current_doctype = $a[2]), $a;\n          if ($truthy(current_doctype)) {\n            \n            attrs.$delete(\"\" + \"doctype-\" + (current_doctype));\n            if ($truthy(current_backend)) {\n              \n              attrs.$delete(\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (current_doctype));\n              \n              $writer = [\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n            if ($truthy(current_basebackend)) {\n              \n              attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (current_doctype));\n              \n              $writer = [\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n          } else {\n            \n            if ($truthy(current_backend)) {\n              \n              $writer = [\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(current_basebackend)) {\n              \n              $writer = [\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n          };\n          \n          $writer = [\"\" + \"doctype-\" + (new_doctype), \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return (self.doctype = (($writer = [\"doctype\", new_doctype]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        } else {\n          return nil\n        }\n      }, $Document_update_doctype_attributes$72.$$arity = 1), nil) && 'update_doctype_attributes';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/inline\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$[]', '$convert', '$converter', '$attr', '$==', '$apply_reftext_subs', '$reftext']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Inline');\n\n      var $nesting = [self].concat($parent_nesting), $Inline_initialize$1, $Inline_block$ques$2, $Inline_inline$ques$3, $Inline_convert$4, $Inline_alt$5, $Inline_reftext$ques$6, $Inline_reftext$7, $Inline_xreftext$8;\n\n      self.$$prototype.text = self.$$prototype.type = nil;\n      \n      self.$attr_accessor(\"text\");\n      self.$attr_reader(\"type\");\n      self.$attr_accessor(\"target\");\n      \n      Opal.def(self, '$initialize', $Inline_initialize$1 = function $$initialize(parent, context, text, opts) {\n        var $iter = $Inline_initialize$1.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $Inline_initialize$1.$$p = null;\n        \n        \n        if (text == null) {\n          text = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Inline_initialize$1, false), [parent, context, opts], null);\n        self.node_name = \"\" + \"inline_\" + (context);\n        self.text = text;\n        self.id = opts['$[]'](\"id\");\n        self.type = opts['$[]'](\"type\");\n        return (self.target = opts['$[]'](\"target\"));\n      }, $Inline_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$block?', $Inline_block$ques$2 = function() {\n        var self = this;\n\n        return false\n      }, $Inline_block$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$inline?', $Inline_inline$ques$3 = function() {\n        var self = this;\n\n        return true\n      }, $Inline_inline$ques$3.$$arity = 0);\n      \n      Opal.def(self, '$convert', $Inline_convert$4 = function $$convert() {\n        var self = this;\n\n        return self.$converter().$convert(self)\n      }, $Inline_convert$4.$$arity = 0);\n      Opal.alias(self, \"render\", \"convert\");\n      \n      Opal.def(self, '$alt', $Inline_alt$5 = function $$alt() {\n        var $a, self = this;\n\n        return ($truthy($a = self.$attr(\"alt\")) ? $a : \"\")\n      }, $Inline_alt$5.$$arity = 0);\n      \n      Opal.def(self, '$reftext?', $Inline_reftext$ques$6 = function() {\n        var $a, $b, self = this;\n\n        return ($truthy($a = self.text) ? ($truthy($b = self.type['$=='](\"ref\")) ? $b : self.type['$=='](\"bibref\")) : $a)\n      }, $Inline_reftext$ques$6.$$arity = 0);\n      \n      Opal.def(self, '$reftext', $Inline_reftext$7 = function $$reftext() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.text))) {\n          \n          return self.$apply_reftext_subs(val);\n        } else {\n          return nil\n        }\n      }, $Inline_reftext$7.$$arity = 0);\n      return (Opal.def(self, '$xreftext', $Inline_xreftext$8 = function $$xreftext(xrefstyle) {\n        var self = this;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        return self.$reftext();\n      }, $Inline_xreftext$8.$$arity = -1), nil) && 'xreftext';\n    })($nesting[0], $$($nesting, 'AbstractNode'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/list\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$==', '$next_list', '$callouts', '$class', '$object_id', '$inspect', '$size', '$items', '$attr_accessor', '$level', '$drop', '$nil_or_empty?', '$apply_subs', '$attr_writer', '$empty?', '$===', '$[]', '$outline?', '$!', '$simple?', '$source', '$shift', '$context', '$parent']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'List');\n\n      var $nesting = [self].concat($parent_nesting), $List_initialize$1, $List_outline$ques$2, $List_convert$3, $List_to_s$4;\n\n      self.$$prototype.context = self.$$prototype.document = self.$$prototype.style = nil;\n      \n      Opal.alias(self, \"items\", \"blocks\");\n      Opal.alias(self, \"content\", \"blocks\");\n      Opal.alias(self, \"items?\", \"blocks?\");\n      \n      Opal.def(self, '$initialize', $List_initialize$1 = function $$initialize(parent, context, opts) {\n        var $iter = $List_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $List_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $List_initialize$1, false), $zuper, $iter);\n      }, $List_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$outline?', $List_outline$ques$2 = function() {\n        var $a, self = this;\n\n        return ($truthy($a = self.context['$=='](\"ulist\")) ? $a : self.context['$=='](\"olist\"))\n      }, $List_outline$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$convert', $List_convert$3 = function $$convert() {\n        var $iter = $List_convert$3.$$p, $yield = $iter || nil, self = this, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $List_convert$3.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        if (self.context['$=='](\"colist\")) {\n          \n          result = $send(self, Opal.find_super_dispatcher(self, 'convert', $List_convert$3, false), $zuper, $iter);\n          self.document.$callouts().$next_list();\n          return result;\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'convert', $List_convert$3, false), $zuper, $iter)\n        }\n      }, $List_convert$3.$$arity = 0);\n      Opal.alias(self, \"render\", \"convert\");\n      return (Opal.def(self, '$to_s', $List_to_s$4 = function $$to_s() {\n        var self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {context: \" + (self.context.$inspect()) + \", style: \" + (self.style.$inspect()) + \", items: \" + (self.$items().$size()) + \"}>\"\n      }, $List_to_s$4.$$arity = 0), nil) && 'to_s';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'ListItem');\n\n      var $nesting = [self].concat($parent_nesting), $ListItem_initialize$5, $ListItem_text$ques$6, $ListItem_text$7, $ListItem_simple$ques$8, $ListItem_compound$ques$9, $ListItem_fold_first$10, $ListItem_to_s$11;\n\n      self.$$prototype.text = self.$$prototype.subs = self.$$prototype.blocks = nil;\n      \n      Opal.alias(self, \"list\", \"parent\");\n      self.$attr_accessor(\"marker\");\n      \n      Opal.def(self, '$initialize', $ListItem_initialize$5 = function $$initialize(parent, text) {\n        var $iter = $ListItem_initialize$5.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $ListItem_initialize$5.$$p = null;\n        \n        \n        if (text == null) {\n          text = nil;\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $ListItem_initialize$5, false), [parent, \"list_item\"], null);\n        self.text = text;\n        self.level = parent.$level();\n        return (self.subs = $$($nesting, 'NORMAL_SUBS').$drop(0));\n      }, $ListItem_initialize$5.$$arity = -2);\n      \n      Opal.def(self, '$text?', $ListItem_text$ques$6 = function() {\n        var self = this;\n\n        if ($truthy(self.text['$nil_or_empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      }, $ListItem_text$ques$6.$$arity = 0);\n      \n      Opal.def(self, '$text', $ListItem_text$7 = function $$text() {\n        var $a, self = this;\n\n        return ($truthy($a = self.text) ? self.$apply_subs(self.text, self.subs) : $a)\n      }, $ListItem_text$7.$$arity = 0);\n      self.$attr_writer(\"text\");\n      \n      Opal.def(self, '$simple?', $ListItem_simple$ques$8 = function() {\n        var $a, $b, $c, self = this, blk = nil;\n\n        return ($truthy($a = self.blocks['$empty?']()) ? $a : ($truthy($b = (($c = self.blocks.$size()['$=='](1)) ? $$($nesting, 'List')['$===']((blk = self.blocks['$[]'](0))) : self.blocks.$size()['$=='](1))) ? blk['$outline?']() : $b))\n      }, $ListItem_simple$ques$8.$$arity = 0);\n      \n      Opal.def(self, '$compound?', $ListItem_compound$ques$9 = function() {\n        var self = this;\n\n        return self['$simple?']()['$!']()\n      }, $ListItem_compound$ques$9.$$arity = 0);\n      \n      Opal.def(self, '$fold_first', $ListItem_fold_first$10 = function $$fold_first() {\n        var self = this;\n\n        \n        self.text = (function() {if ($truthy(self.text['$nil_or_empty?']())) {\n          return self.blocks.$shift().$source()\n        } else {\n          return \"\" + (self.text) + ($$($nesting, 'LF')) + (self.blocks.$shift().$source())\n        }; return nil; })();\n        return nil;\n      }, $ListItem_fold_first$10.$$arity = 0);\n      return (Opal.def(self, '$to_s', $ListItem_to_s$11 = function $$to_s() {\n        var $a, self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {list_context: \" + (self.$parent().$context().$inspect()) + \", text: \" + (self.text.$inspect()) + \", blocks: \" + (($truthy($a = self.blocks) ? $a : []).$size()) + \"}>\"\n      }, $ListItem_to_s$11.$$arity = 0), nil) && 'to_s';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/parser\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$include', '$new', '$proc', '$start_with?', '$match?', '$is_delimited_block?', '$private_class_method', '$parse_document_header', '$[]', '$has_more_lines?', '$next_section', '$assign_numeral', '$<<', '$blocks', '$skip_blank_lines', '$parse_block_metadata_lines', '$attributes', '$is_next_line_doctitle?', '$[]=', '$-', '$finalize_header', '$nil_or_empty?', '$title=', '$sourcemap', '$cursor', '$parse_section_title', '$id=', '$include?', '$sub_specialchars', '$sub_attributes', '$source_location=', '$header', '$attribute_locked?', '$id', '$clear', '$delete', '$instance_variable_get', '$parse_header_metadata', '$==', '$!', '$register', '$process_authors', '$update', '$doctype', '$parse_manpage_header', '$=~', '$downcase', '$error', '$logger', '$message_with_context', '$cursor_at_line', '$backend', '$save', '$is_next_line_section?', '$initialize_section', '$join', '$map', '$read_lines_until', '$lstrip', '$split', '$title', '$restore_save', '$discard_save', '$context', '$empty?', '$header?', '$!=', '$attr?', '$attr', '$key?', '$document', '$+', '$level', '$special', '$sectname', '$to_i', '$<', '$>', '$warn', '$next_block', '$blocks?', '$style', '$context=', '$style=', '$parent=', '$size', '$content_model', '$shift', '$unwrap_standalone_preamble', '$source_location', '$merge', '$fetch', '$parse_block_metadata_line', '$extensions', '$block_macros?', '$mark', '$read_line', '$terminator', '$to_s', '$masq', '$to_sym', '$registered_for_block?', '$debug?', '$debug', '$cursor_at_mark', '$strict_verbatim_paragraphs', '$unshift_line', '$markdown_syntax', '$keys', '$chr', '$uniform?', '$length', '$end_with?', '$===', '$parse_attributes', '$attribute_missing', '$tr', '$basename', '$assign_caption', '$registered_for_block_macro?', '$config', '$process_method', '$replace', '$parse_callout_list', '$callouts', '$parse_list', '$parse_description_list', '$underline_style_section_titles', '$is_section_title?', '$peek_line', '$atx_section_title?', '$generate_id', '$level=', '$read_paragraph_lines', '$adjust_indentation!', '$map!', '$slice', '$pop', '$build_block', '$apply_subs', '$chop', '$catalog_inline_anchors', '$rekey', '$index', '$strip', '$parse_table', '$each', '$raise', '$title?', '$update_attributes', '$commit_subs', '$sub?', '$catalog_callouts', '$source', '$remove_sub', '$block_terminates_paragraph', '$to_proc', '$nil?', '$lines', '$parse_blocks', '$parse_list_item', '$items', '$scan', '$gsub', '$count', '$advance', '$dup', '$match', '$callout_ids', '$next_list', '$catalog_inline_anchor', '$marker=', '$catalog_inline_biblio_anchor', '$set_option', '$text=', '$resolve_ordered_list_marker', '$read_lines_for_list_item', '$skip_line_comments', '$unshift_lines', '$fold_first', '$text?', '$is_sibling_list_item?', '$concat', '$find', '$casecmp', '$sectname=', '$special=', '$numbered=', '$numbered', '$lineno', '$peek_lines', '$setext_section_title?', '$abs', '$cursor_at_prev_line', '$process_attribute_entries', '$next_line_empty?', '$apply_header_subs', '$rstrip', '$each_with_index', '$compact', '$to_h', '$squeeze', '$to_a', '$parse_style_attribute', '$process_attribute_entry', '$skip_comment_lines', '$store_attribute', '$sanitize_attribute_name', '$set_attribute', '$save_to', '$delete_attribute', '$ord', '$int_to_roman', '$resolve_list_marker', '$parse_colspecs', '$create_columns', '$has_header_option=', '$format', '$starts_with_delimiter?', '$close_open_cell', '$parse_cellspec', '$delimiter', '$match_delimiter', '$pre_match', '$post_match', '$buffer_has_unclosed_quotes?', '$skip_past_delimiter', '$buffer', '$buffer=', '$skip_past_escaped_delimiter', '$keep_cell_open', '$push_cellspec', '$close_cell', '$cell_open?', '$columns', '$assign_column_widths', '$partition_header_footer', '$upto', '$partition', '$shorthand_property_syntax', '$each_char', '$yield_buffered_attribute', '$any?', '$*', '$each_byte', '$%']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Parser');\n\n      var $nesting = [self].concat($parent_nesting), $Parser$1, $Parser$2, $Parser$3, $Parser_parse$4, $Parser_parse_document_header$5, $Parser_parse_manpage_header$6, $Parser_next_section$9, $Parser_next_block$10, $Parser_read_paragraph_lines$14, $Parser_is_delimited_block$ques$15, $Parser_build_block$16, $Parser_parse_blocks$17, $Parser_parse_list$18, $Parser_catalog_callouts$19, $Parser_catalog_inline_anchor$21, $Parser_catalog_inline_anchors$22, $Parser_catalog_inline_biblio_anchor$24, $Parser_parse_description_list$25, $Parser_parse_callout_list$26, $Parser_parse_list_item$27, $Parser_read_lines_for_list_item$28, $Parser_initialize_section$34, $Parser_is_next_line_section$ques$35, $Parser_is_next_line_doctitle$ques$36, $Parser_is_section_title$ques$37, $Parser_atx_section_title$ques$38, $Parser_setext_section_title$ques$39, $Parser_parse_section_title$40, $Parser_parse_header_metadata$41, $Parser_process_authors$46, $Parser_parse_block_metadata_lines$51, $Parser_parse_block_metadata_line$52, $Parser_process_attribute_entries$53, $Parser_process_attribute_entry$54, $Parser_store_attribute$55, $Parser_resolve_list_marker$56, $Parser_resolve_ordered_list_marker$57, $Parser_is_sibling_list_item$ques$59, $Parser_parse_table$60, $Parser_parse_colspecs$61, $Parser_parse_cellspec$65, $Parser_parse_style_attribute$66, $Parser_yield_buffered_attribute$69, $Parser_adjust_indentation$excl$70, $Parser_uniform$ques$79, $Parser_sanitize_attribute_name$80;\n\n      \n      self.$include($$($nesting, 'Logging'));\n      Opal.const_set($nesting[0], 'BlockMatchData', $$($nesting, 'Struct').$new(\"context\", \"masq\", \"tip\", \"terminator\"));\n      Opal.const_set($nesting[0], 'TAB', \"\\t\");\n      Opal.const_set($nesting[0], 'TabIndentRx', /^\\t+/);\n      Opal.const_set($nesting[0], 'StartOfBlockProc', $send(self, 'proc', [], ($Parser$1 = function(l){var self = $Parser$1.$$s || this, $a, $b;\n\n      \n        \n        if (l == null) {\n          l = nil;\n        };\n        return ($truthy($a = ($truthy($b = l['$start_with?'](\"[\")) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](l) : $b)) ? $a : self['$is_delimited_block?'](l));}, $Parser$1.$$s = self, $Parser$1.$$arity = 1, $Parser$1)));\n      Opal.const_set($nesting[0], 'StartOfListProc', $send(self, 'proc', [], ($Parser$2 = function(l){var self = $Parser$2.$$s || this;\n\n      \n        \n        if (l == null) {\n          l = nil;\n        };\n        return $$($nesting, 'AnyListRx')['$match?'](l);}, $Parser$2.$$s = self, $Parser$2.$$arity = 1, $Parser$2)));\n      Opal.const_set($nesting[0], 'StartOfBlockOrListProc', $send(self, 'proc', [], ($Parser$3 = function(l){var self = $Parser$3.$$s || this, $a, $b, $c;\n\n      \n        \n        if (l == null) {\n          l = nil;\n        };\n        return ($truthy($a = ($truthy($b = self['$is_delimited_block?'](l)) ? $b : ($truthy($c = l['$start_with?'](\"[\")) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](l) : $c))) ? $a : $$($nesting, 'AnyListRx')['$match?'](l));}, $Parser$3.$$s = self, $Parser$3.$$arity = 1, $Parser$3)));\n      Opal.const_set($nesting[0], 'NoOp', nil);\n      Opal.const_set($nesting[0], 'AuthorKeys', [\"author\", \"authorinitials\", \"firstname\", \"middlename\", \"lastname\", \"email\"]);\n      Opal.const_set($nesting[0], 'TableCellHorzAlignments', $hash2([\"<\", \">\", \"^\"], {\"<\": \"left\", \">\": \"right\", \"^\": \"center\"}));\n      Opal.const_set($nesting[0], 'TableCellVertAlignments', $hash2([\"<\", \">\", \"^\"], {\"<\": \"top\", \">\": \"bottom\", \"^\": \"middle\"}));\n      Opal.const_set($nesting[0], 'TableCellStyles', $hash2([\"d\", \"s\", \"e\", \"m\", \"h\", \"l\", \"a\"], {\"d\": \"none\", \"s\": \"strong\", \"e\": \"emphasis\", \"m\": \"monospaced\", \"h\": \"header\", \"l\": \"literal\", \"a\": \"asciidoc\"}));\n      self.$private_class_method(\"new\");\n      Opal.defs(self, '$parse', $Parser_parse$4 = function $$parse(reader, document, options) {\n        var $a, $b, $c, self = this, block_attributes = nil, header_only = nil, new_section = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        block_attributes = self.$parse_document_header(reader, document, (header_only = options['$[]'](\"header_only\")));\n        if ($truthy(header_only)) {\n        } else {\n          while ($truthy(reader['$has_more_lines?']())) {\n            \n            $c = self.$next_section(reader, document, block_attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (block_attributes = ($b[1] == null ? nil : $b[1])), $c;\n            if ($truthy(new_section)) {\n              \n              document.$assign_numeral(new_section);\n              document.$blocks()['$<<'](new_section);};\n          }\n        };\n        return document;\n      }, $Parser_parse$4.$$arity = -3);\n      Opal.defs(self, '$parse_document_header', $Parser_parse_document_header$5 = function $$parse_document_header(reader, document, header_only) {\n        var $a, $b, self = this, block_attrs = nil, doc_attrs = nil, implicit_doctitle = nil, $writer = nil, val = nil, doctitle_attr_val = nil, source_location = nil, _ = nil, l0_section_title = nil, atx = nil, separator = nil, doc_id = nil, role = nil, reftext = nil, modified_attrs = nil, author = nil, author_metadata = nil;\n\n        \n        \n        if (header_only == null) {\n          header_only = false;\n        };\n        block_attrs = (function() {if ($truthy(reader.$skip_blank_lines())) {\n          \n          return self.$parse_block_metadata_lines(reader, document);\n        } else {\n          return $hash2([], {})\n        }; return nil; })();\n        doc_attrs = document.$attributes();\n        if ($truthy(($truthy($a = (implicit_doctitle = self['$is_next_line_doctitle?'](reader, block_attrs, doc_attrs['$[]'](\"leveloffset\")))) ? block_attrs['$[]'](\"title\") : $a))) {\n          \n          \n          $writer = [\"authorcount\", 0];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return document.$finalize_header(block_attrs, false);};\n        if ($truthy((val = doc_attrs['$[]'](\"doctitle\"))['$nil_or_empty?']())) {\n        } else {\n          \n          $writer = [(doctitle_attr_val = val)];\n          $send(document, 'title=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        if ($truthy(implicit_doctitle)) {\n          \n          if ($truthy(document.$sourcemap())) {\n            source_location = reader.$cursor()};\n          $b = self.$parse_section_title(reader, document), $a = Opal.to_ary($b), document['$id='](($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (l0_section_title = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (atx = ($a[4] == null ? nil : $a[4])), $b;\n          if ($truthy(doctitle_attr_val)) {\n            l0_section_title = nil\n          } else {\n            \n            \n            $writer = [l0_section_title];\n            $send(document, 'title=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy((($writer = [\"doctitle\", (doctitle_attr_val = document.$sub_specialchars(l0_section_title))]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n              \n              $writer = [\"doctitle\", (doctitle_attr_val = document.$sub_attributes(doctitle_attr_val, $hash2([\"attribute_missing\"], {\"attribute_missing\": \"skip\"})))];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n          };\n          if ($truthy(source_location)) {\n            \n            $writer = [source_location];\n            $send(document.$header(), 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(($truthy($a = atx) ? $a : document['$attribute_locked?'](\"compat-mode\")))) {\n          } else {\n            \n            $writer = [\"compat-mode\", \"\"];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          if ($truthy((separator = block_attrs['$[]'](\"separator\")))) {\n            if ($truthy(document['$attribute_locked?'](\"title-separator\"))) {\n            } else {\n              \n              $writer = [\"title-separator\", separator];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }};\n          if ($truthy((doc_id = block_attrs['$[]'](\"id\")))) {\n            \n            $writer = [doc_id];\n            $send(document, 'id=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            doc_id = document.$id()\n          };\n          if ($truthy((role = block_attrs['$[]'](\"role\")))) {\n            \n            $writer = [\"role\", role];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy((reftext = block_attrs['$[]'](\"reftext\")))) {\n            \n            $writer = [\"reftext\", reftext];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          block_attrs.$clear();\n          (modified_attrs = document.$instance_variable_get(\"@attributes_modified\")).$delete(\"doctitle\");\n          self.$parse_header_metadata(reader, document, nil);\n          if ($truthy(modified_attrs['$include?'](\"doctitle\"))) {\n            if ($truthy(($truthy($a = (val = doc_attrs['$[]'](\"doctitle\"))['$nil_or_empty?']()) ? $a : val['$=='](doctitle_attr_val)))) {\n              \n              $writer = [\"doctitle\", doctitle_attr_val];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              \n              $writer = [val];\n              $send(document, 'title=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }\n          } else if ($truthy(l0_section_title['$!']())) {\n            modified_attrs['$<<'](\"doctitle\")};\n          if ($truthy(doc_id)) {\n            document.$register(\"refs\", [doc_id, document])};\n        } else if ($truthy((author = doc_attrs['$[]'](\"author\")))) {\n          \n          author_metadata = self.$process_authors(author, true, false);\n          if ($truthy(doc_attrs['$[]'](\"authorinitials\"))) {\n            author_metadata.$delete(\"authorinitials\")};\n          doc_attrs.$update(author_metadata);\n        } else if ($truthy((author = doc_attrs['$[]'](\"authors\")))) {\n          \n          author_metadata = self.$process_authors(author, true);\n          doc_attrs.$update(author_metadata);\n        } else {\n          \n          $writer = [\"authorcount\", 0];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        if (document.$doctype()['$=='](\"manpage\")) {\n          self.$parse_manpage_header(reader, document, block_attrs, header_only)};\n        return document.$finalize_header(block_attrs);\n      }, $Parser_parse_document_header$5.$$arity = -3);\n      Opal.defs(self, '$parse_manpage_header', $Parser_parse_manpage_header$6 = function $$parse_manpage_header(reader, document, block_attributes, header_only) {\n        var $a, $b, $$7, $$8, self = this, doc_attrs = nil, $writer = nil, manvolnum = nil, mantitle = nil, manname = nil, name_section_level = nil, name_section = nil, name_section_buffer = nil, mannames = nil, manpurpose = nil, error_msg = nil;\n\n        \n        \n        if (header_only == null) {\n          header_only = false;\n        };\n        if ($truthy($$($nesting, 'ManpageTitleVolnumRx')['$=~']((doc_attrs = document.$attributes())['$[]'](\"doctitle\")))) {\n          \n          \n          $writer = [\"manvolnum\", (manvolnum = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"mantitle\", (function() {if ($truthy((mantitle = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n            \n            return document.$sub_attributes(mantitle);\n          } else {\n            return mantitle\n          }; return nil; })().$downcase()];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        } else {\n          \n          self.$logger().$error(self.$message_with_context(\"non-conforming manpage title\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_line(1)})));\n          \n          $writer = [\"mantitle\", ($truthy($a = ($truthy($b = doc_attrs['$[]'](\"doctitle\")) ? $b : doc_attrs['$[]'](\"docname\"))) ? $a : \"command\")];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"manvolnum\", (manvolnum = \"1\")];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        };\n        if ($truthy(($truthy($a = (manname = doc_attrs['$[]'](\"manname\"))) ? doc_attrs['$[]'](\"manpurpose\") : $a))) {\n          \n          ($truthy($a = doc_attrs['$[]'](\"manname-title\")) ? $a : (($writer = [\"manname-title\", \"Name\"]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          \n          $writer = [\"mannames\", [manname]];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if (document.$backend()['$=='](\"manpage\")) {\n            \n            \n            $writer = [\"docname\", manname];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"outfilesuffix\", \"\" + \".\" + (manvolnum)];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;};\n        } else if ($truthy(header_only)) {\n        } else {\n          \n          reader.$skip_blank_lines();\n          reader.$save();\n          block_attributes.$update(self.$parse_block_metadata_lines(reader, document));\n          if ($truthy((name_section_level = self['$is_next_line_section?'](reader, $hash2([], {}))))) {\n            if (name_section_level['$=='](1)) {\n              \n              name_section = self.$initialize_section(reader, document, $hash2([], {}));\n              name_section_buffer = $send(reader.$read_lines_until($hash2([\"break_on_blank_lines\", \"skip_line_comments\"], {\"break_on_blank_lines\": true, \"skip_line_comments\": true})), 'map', [], ($$7 = function(l){var self = $$7.$$s || this;\n\n              \n                \n                if (l == null) {\n                  l = nil;\n                };\n                return l.$lstrip();}, $$7.$$s = self, $$7.$$arity = 1, $$7)).$join(\" \");\n              if ($truthy($$($nesting, 'ManpageNamePurposeRx')['$=~'](name_section_buffer))) {\n                \n                if ($truthy((manname = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                  manname = document.$sub_attributes(manname)};\n                if ($truthy(manname['$include?'](\",\"))) {\n                  manname = (mannames = $send(manname.$split(\",\"), 'map', [], ($$8 = function(n){var self = $$8.$$s || this;\n\n                  \n                    \n                    if (n == null) {\n                      n = nil;\n                    };\n                    return n.$lstrip();}, $$8.$$s = self, $$8.$$arity = 1, $$8)))['$[]'](0)\n                } else {\n                  mannames = [manname]\n                };\n                if ($truthy((manpurpose = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                  manpurpose = document.$sub_attributes(manpurpose)};\n                ($truthy($a = doc_attrs['$[]'](\"manname-title\")) ? $a : (($writer = [\"manname-title\", name_section.$title()]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n                if ($truthy(name_section.$id())) {\n                  \n                  $writer = [\"manname-id\", name_section.$id()];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                \n                $writer = [\"manname\", manname];\n                $send(doc_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [\"mannames\", mannames];\n                $send(doc_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [\"manpurpose\", manpurpose];\n                $send(doc_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if (document.$backend()['$=='](\"manpage\")) {\n                  \n                  \n                  $writer = [\"docname\", manname];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  \n                  $writer = [\"outfilesuffix\", \"\" + \".\" + (manvolnum)];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;};\n              } else {\n                error_msg = \"non-conforming name section body\"\n              };\n            } else {\n              error_msg = \"name section must be at level 1\"\n            }\n          } else {\n            error_msg = \"name section expected\"\n          };\n          if ($truthy(error_msg)) {\n            \n            reader.$restore_save();\n            self.$logger().$error(self.$message_with_context(error_msg, $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})));\n            \n            $writer = [\"manname\", (manname = ($truthy($a = doc_attrs['$[]'](\"docname\")) ? $a : \"command\"))];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"mannames\", [manname]];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if (document.$backend()['$=='](\"manpage\")) {\n              \n              \n              $writer = [\"docname\", manname];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              \n              $writer = [\"outfilesuffix\", \"\" + \".\" + (manvolnum)];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n          } else {\n            reader.$discard_save()\n          };\n        };\n        return nil;\n      }, $Parser_parse_manpage_header$6.$$arity = -4);\n      Opal.defs(self, '$next_section', $Parser_next_section$9 = function $$next_section(reader, parent, attributes) {\n        var $a, $b, $c, $d, self = this, preamble = nil, intro = nil, part = nil, has_header = nil, book = nil, document = nil, $writer = nil, section = nil, current_level = nil, expected_next_level = nil, expected_next_level_alt = nil, title = nil, sectname = nil, next_level = nil, expected_condition = nil, new_section = nil, block_cursor = nil, new_block = nil, first_block = nil, child_block = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        preamble = (intro = (part = false));\n        if ($truthy(($truthy($a = (($b = parent.$context()['$=='](\"document\")) ? parent.$blocks()['$empty?']() : parent.$context()['$=='](\"document\"))) ? ($truthy($b = ($truthy($c = (has_header = parent['$header?']())) ? $c : attributes.$delete(\"invalid-header\"))) ? $b : self['$is_next_line_section?'](reader, attributes)['$!']()) : $a))) {\n          \n          book = (document = parent).$doctype()['$=='](\"book\");\n          if ($truthy(($truthy($a = has_header) ? $a : ($truthy($b = book) ? attributes['$[]'](1)['$!='](\"abstract\") : $b)))) {\n            \n            preamble = (intro = $$($nesting, 'Block').$new(parent, \"preamble\", $hash2([\"content_model\"], {\"content_model\": \"compound\"})));\n            if ($truthy(($truthy($a = book) ? parent['$attr?'](\"preface-title\") : $a))) {\n              \n              $writer = [parent.$attr(\"preface-title\")];\n              $send(preamble, 'title=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            parent.$blocks()['$<<'](preamble);};\n          section = parent;\n          current_level = 0;\n          if ($truthy(parent.$attributes()['$key?'](\"fragment\"))) {\n            expected_next_level = -1\n          } else if ($truthy(book)) {\n            $a = [1, 0], (expected_next_level = $a[0]), (expected_next_level_alt = $a[1]), $a\n          } else {\n            expected_next_level = 1\n          };\n        } else {\n          \n          book = (document = parent.$document()).$doctype()['$=='](\"book\");\n          section = self.$initialize_section(reader, parent, attributes);\n          attributes = (function() {if ($truthy((title = attributes['$[]'](\"title\")))) {\n            return $hash2([\"title\"], {\"title\": title})\n          } else {\n            return $hash2([], {})\n          }; return nil; })();\n          expected_next_level = $rb_plus((current_level = section.$level()), 1);\n          if (current_level['$=='](0)) {\n            part = book\n          } else if ($truthy((($a = current_level['$=='](1)) ? section.$special() : current_level['$=='](1)))) {\n            if ($truthy(($truthy($a = ($truthy($b = (sectname = section.$sectname())['$=='](\"appendix\")) ? $b : sectname['$=='](\"preface\"))) ? $a : sectname['$=='](\"abstract\")))) {\n            } else {\n              expected_next_level = nil\n            }};\n        };\n        reader.$skip_blank_lines();\n        while ($truthy(reader['$has_more_lines?']())) {\n          \n          self.$parse_block_metadata_lines(reader, document, attributes);\n          if ($truthy((next_level = self['$is_next_line_section?'](reader, attributes)))) {\n            \n            if ($truthy(document['$attr?'](\"leveloffset\"))) {\n              \n              next_level = $rb_plus(next_level, document.$attr(\"leveloffset\").$to_i());\n              if ($truthy($rb_lt(next_level, 0))) {\n                next_level = 0};};\n            if ($truthy($rb_gt(next_level, current_level))) {\n              \n              if ($truthy(expected_next_level)) {\n                if ($truthy(($truthy($b = ($truthy($c = next_level['$=='](expected_next_level)) ? $c : ($truthy($d = expected_next_level_alt) ? next_level['$=='](expected_next_level_alt) : $d))) ? $b : $rb_lt(expected_next_level, 0)))) {\n                } else {\n                  \n                  expected_condition = (function() {if ($truthy(expected_next_level_alt)) {\n                    return \"\" + \"expected levels \" + (expected_next_level_alt) + \" or \" + (expected_next_level)\n                  } else {\n                    return \"\" + \"expected level \" + (expected_next_level)\n                  }; return nil; })();\n                  self.$logger().$warn(self.$message_with_context(\"\" + \"section title out of sequence: \" + (expected_condition) + \", got level \" + (next_level), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})));\n                }\n              } else {\n                self.$logger().$error(self.$message_with_context(\"\" + (sectname) + \" sections do not support nested sections\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n              };\n              $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (attributes = ($b[1] == null ? nil : $b[1])), $c;\n              section.$assign_numeral(new_section);\n              section.$blocks()['$<<'](new_section);\n            } else if ($truthy((($b = next_level['$=='](0)) ? section['$=='](document) : next_level['$=='](0)))) {\n              \n              if ($truthy(book)) {\n              } else {\n                self.$logger().$error(self.$message_with_context(\"level 0 sections can only be used when doctype is book\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n              };\n              $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (attributes = ($b[1] == null ? nil : $b[1])), $c;\n              section.$assign_numeral(new_section);\n              section.$blocks()['$<<'](new_section);\n            } else {\n              break;\n            };\n          } else {\n            \n            block_cursor = reader.$cursor();\n            if ($truthy((new_block = self.$next_block(reader, ($truthy($b = intro) ? $b : section), attributes, $hash2([\"parse_metadata\"], {\"parse_metadata\": false}))))) {\n              \n              if ($truthy(part)) {\n                if ($truthy(section['$blocks?']()['$!']())) {\n                  if ($truthy(new_block.$style()['$!='](\"partintro\"))) {\n                    if (new_block.$context()['$=='](\"paragraph\")) {\n                      \n                      \n                      $writer = [\"open\"];\n                      $send(new_block, 'context=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      \n                      $writer = [\"partintro\"];\n                      $send(new_block, 'style=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                    } else {\n                      \n                      \n                      $writer = [(intro = $$($nesting, 'Block').$new(section, \"open\", $hash2([\"content_model\"], {\"content_model\": \"compound\"})))];\n                      $send(new_block, 'parent=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      \n                      $writer = [\"partintro\"];\n                      $send(intro, 'style=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      section.$blocks()['$<<'](intro);\n                    }}\n                } else if (section.$blocks().$size()['$=='](1)) {\n                  \n                  first_block = section.$blocks()['$[]'](0);\n                  if ($truthy(($truthy($b = intro['$!']()) ? first_block.$content_model()['$=='](\"compound\") : $b))) {\n                    self.$logger().$error(self.$message_with_context(\"illegal block content outside of partintro block\", $hash2([\"source_location\"], {\"source_location\": block_cursor})))\n                  } else if ($truthy(first_block.$content_model()['$!='](\"compound\"))) {\n                    \n                    \n                    $writer = [(intro = $$($nesting, 'Block').$new(section, \"open\", $hash2([\"content_model\"], {\"content_model\": \"compound\"})))];\n                    $send(new_block, 'parent=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                    \n                    $writer = [\"partintro\"];\n                    $send(intro, 'style=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                    section.$blocks().$shift();\n                    if (first_block.$style()['$=='](\"partintro\")) {\n                      \n                      \n                      $writer = [\"paragraph\"];\n                      $send(first_block, 'context=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      \n                      $writer = [nil];\n                      $send(first_block, 'style=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;};\n                    intro['$<<'](first_block);\n                    section.$blocks()['$<<'](intro);};}};\n              ($truthy($b = intro) ? $b : section).$blocks()['$<<'](new_block);\n              attributes.$clear();};\n          };\n          if ($truthy($b = reader.$skip_blank_lines())) {\n            $b\n          } else {\n            break;\n          };\n        };\n        if ($truthy(part)) {\n          if ($truthy(($truthy($a = section['$blocks?']()) ? section.$blocks()['$[]'](-1).$context()['$=='](\"section\") : $a))) {\n          } else {\n            self.$logger().$error(self.$message_with_context(\"invalid part, must have at least one section (e.g., chapter, appendix, etc.)\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n          }\n        } else if ($truthy(preamble)) {\n          if ($truthy(preamble['$blocks?']())) {\n            if ($truthy(($truthy($a = ($truthy($b = book) ? $b : document.$blocks()['$[]'](1))) ? $a : $$($nesting, 'Compliance').$unwrap_standalone_preamble()['$!']()))) {\n              if ($truthy(document.$sourcemap())) {\n                \n                $writer = [preamble.$blocks()['$[]'](0).$source_location()];\n                $send(preamble, 'source_location=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];}\n            } else {\n              \n              document.$blocks().$shift();\n              while ($truthy((child_block = preamble.$blocks().$shift()))) {\n                document['$<<'](child_block)\n              };\n            }\n          } else {\n            document.$blocks().$shift()\n          }};\n        return [(function() {if (section['$=='](parent)) {\n          return nil\n        } else {\n          return section\n        }; return nil; })(), attributes.$merge()];\n      }, $Parser_next_section$9.$$arity = -3);\n      Opal.defs(self, '$next_block', $Parser_next_block$10 = function $$next_block(reader, parent, attributes, options) {try {\n\n        var $a, $b, $c, $d, $$11, $$12, $$13, self = this, skipped = nil, text_only = nil, document = nil, extensions = nil, block_extensions = nil, block_macro_extensions = nil, this_line = nil, doc_attrs = nil, style = nil, block = nil, block_context = nil, cloaked_context = nil, terminator = nil, delimited_block = nil, $writer = nil, indented = nil, md_syntax = nil, ch0 = nil, layout_break_chars = nil, ll = nil, blk_ctx = nil, target = nil, blk_attrs = nil, $case = nil, posattrs = nil, expanded_target = nil, scaledwidth = nil, block_title = nil, extension = nil, report_unknown_block_macro = nil, content = nil, ext_config = nil, default_attrs = nil, float_id = nil, float_reftext = nil, float_level = nil, lines = nil, content_adjacent = nil, admonition_name = nil, credit_line = nil, attribution = nil, citetitle = nil, language = nil, comma_idx = nil, block_cursor = nil, block_reader = nil, content_model = nil, positional_attrs = nil, block_id = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        if ($truthy((skipped = reader.$skip_blank_lines()))) {\n        } else {\n          return nil\n        };\n        if ($truthy(($truthy($a = (text_only = options['$[]'](\"text_only\"))) ? $rb_gt(skipped, 0) : $a))) {\n          \n          options.$delete(\"text_only\");\n          text_only = nil;};\n        document = parent.$document();\n        if ($truthy(options.$fetch(\"parse_metadata\", true))) {\n          while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {\n            \n            reader.$shift();\n            ($truthy($b = reader.$skip_blank_lines()) ? $b : Opal.ret(nil));\n          }};\n        if ($truthy((extensions = document.$extensions()))) {\n          $a = [extensions['$blocks?'](), extensions['$block_macros?']()], (block_extensions = $a[0]), (block_macro_extensions = $a[1]), $a};\n        reader.$mark();\n        $a = [reader.$read_line(), document.$attributes(), attributes['$[]'](1)], (this_line = $a[0]), (doc_attrs = $a[1]), (style = $a[2]), $a;\n        block = (block_context = (cloaked_context = (terminator = nil)));\n        if ($truthy((delimited_block = self['$is_delimited_block?'](this_line, true)))) {\n          \n          block_context = (cloaked_context = delimited_block.$context());\n          terminator = delimited_block.$terminator();\n          if ($truthy(style)) {\n            if (style['$=='](block_context.$to_s())) {\n            } else if ($truthy(delimited_block.$masq()['$include?'](style))) {\n              block_context = style.$to_sym()\n            } else if ($truthy(($truthy($a = delimited_block.$masq()['$include?'](\"admonition\")) ? $$($nesting, 'ADMONITION_STYLES')['$include?'](style) : $a))) {\n              block_context = \"admonition\"\n            } else if ($truthy(($truthy($a = block_extensions) ? extensions['$registered_for_block?'](style, block_context) : $a))) {\n              block_context = style.$to_sym()\n            } else {\n              \n              if ($truthy(self.$logger()['$debug?']())) {\n                self.$logger().$debug(self.$message_with_context(\"\" + \"unknown style for \" + (block_context) + \" block: \" + (style), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))};\n              style = block_context.$to_s();\n            }\n          } else {\n            style = (($writer = [\"style\", block_context.$to_s()]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n          };};\n        if ($truthy(delimited_block)) {\n        } else {\n          while ($truthy(true)) {\n            \n            if ($truthy(($truthy($b = ($truthy($c = style) ? $$($nesting, 'Compliance').$strict_verbatim_paragraphs() : $c)) ? $$($nesting, 'VERBATIM_STYLES')['$include?'](style) : $b))) {\n              \n              block_context = style.$to_sym();\n              reader.$unshift_line(this_line);\n              break;;};\n            if ($truthy(text_only)) {\n              indented = this_line['$start_with?'](\" \", $$($nesting, 'TAB'))\n            } else {\n              \n              md_syntax = $$($nesting, 'Compliance').$markdown_syntax();\n              if ($truthy(this_line['$start_with?'](\" \"))) {\n                \n                $b = [true, \" \"], (indented = $b[0]), (ch0 = $b[1]), $b;\n                if ($truthy(($truthy($b = ($truthy($c = md_syntax) ? $send(this_line.$lstrip(), 'start_with?', Opal.to_a($$($nesting, 'MARKDOWN_THEMATIC_BREAK_CHARS').$keys())) : $c)) ? $$($nesting, 'MarkdownThematicBreakRx')['$match?'](this_line) : $b))) {\n                  \n                  block = $$($nesting, 'Block').$new(parent, \"thematic_break\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                  break;;};\n              } else if ($truthy(this_line['$start_with?']($$($nesting, 'TAB')))) {\n                $b = [true, $$($nesting, 'TAB')], (indented = $b[0]), (ch0 = $b[1]), $b\n              } else {\n                \n                $b = [false, this_line.$chr()], (indented = $b[0]), (ch0 = $b[1]), $b;\n                layout_break_chars = (function() {if ($truthy(md_syntax)) {\n                  return $$($nesting, 'HYBRID_LAYOUT_BREAK_CHARS')\n                } else {\n                  return $$($nesting, 'LAYOUT_BREAK_CHARS')\n                }; return nil; })();\n                if ($truthy(($truthy($b = layout_break_chars['$key?'](ch0)) ? (function() {if ($truthy(md_syntax)) {\n                  \n                  return $$($nesting, 'ExtLayoutBreakRx')['$match?'](this_line);\n                } else {\n                  return ($truthy($c = self['$uniform?'](this_line, ch0, (ll = this_line.$length()))) ? $rb_gt(ll, 2) : $c)\n                }; return nil; })() : $b))) {\n                  \n                  block = $$($nesting, 'Block').$new(parent, layout_break_chars['$[]'](ch0), $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                  break;;\n                } else if ($truthy(($truthy($b = this_line['$end_with?'](\"]\")) ? this_line['$include?'](\"::\") : $b))) {\n                  if ($truthy(($truthy($b = ($truthy($c = ch0['$=='](\"i\")) ? $c : this_line['$start_with?'](\"video:\", \"audio:\"))) ? $$($nesting, 'BlockMediaMacroRx')['$=~'](this_line) : $b))) {\n                    \n                    $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$to_sym(), (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))], (blk_ctx = $b[0]), (target = $b[1]), (blk_attrs = $b[2]), $b;\n                    block = $$($nesting, 'Block').$new(parent, blk_ctx, $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                    if ($truthy(blk_attrs)) {\n                      \n                      $case = blk_ctx;\n                      if (\"video\"['$===']($case)) {posattrs = [\"poster\", \"width\", \"height\"]}\n                      else if (\"audio\"['$===']($case)) {posattrs = []}\n                      else {posattrs = [\"alt\", \"width\", \"height\"]};\n                      block.$parse_attributes(blk_attrs, posattrs, $hash2([\"sub_input\", \"into\"], {\"sub_input\": true, \"into\": attributes}));};\n                    if ($truthy(attributes['$key?'](\"style\"))) {\n                      attributes.$delete(\"style\")};\n                    if ($truthy(target['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                      if ($truthy(($truthy($b = ($truthy($c = (expanded_target = block.$sub_attributes(target))['$empty?']()) ? ($truthy($d = doc_attrs['$[]'](\"attribute-missing\")) ? $d : $$($nesting, 'Compliance').$attribute_missing())['$=='](\"drop-line\") : $c)) ? block.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : $b))) {\n                        \n                        attributes.$clear();\n                        return nil;\n                      } else {\n                        target = expanded_target\n                      }};\n                    if (blk_ctx['$=='](\"image\")) {\n                      \n                      document.$register(\"images\", target);\n                      \n                      $writer = [\"imagesdir\", doc_attrs['$[]'](\"imagesdir\")];\n                      $send(attributes, '[]=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      ($truthy($b = attributes['$[]'](\"alt\")) ? $b : (($writer = [\"alt\", ($truthy($c = style) ? $c : (($writer = [\"default-alt\", $$($nesting, 'Helpers').$basename(target, true).$tr(\"_-\", \" \")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n                      if ($truthy((scaledwidth = attributes.$delete(\"scaledwidth\"))['$nil_or_empty?']())) {\n                      } else {\n                        \n                        $writer = [\"scaledwidth\", (function() {if ($truthy($$($nesting, 'TrailingDigitsRx')['$match?'](scaledwidth))) {\n                          return \"\" + (scaledwidth) + \"%\"\n                        } else {\n                          return scaledwidth\n                        }; return nil; })()];\n                        $send(attributes, '[]=', Opal.to_a($writer));\n                        $writer[$rb_minus($writer[\"length\"], 1)];\n                      };\n                      if ($truthy(attributes['$[]'](\"title\"))) {\n                        \n                        \n                        $writer = [(block_title = attributes.$delete(\"title\"))];\n                        $send(block, 'title=', Opal.to_a($writer));\n                        $writer[$rb_minus($writer[\"length\"], 1)];;\n                        block.$assign_caption(attributes.$delete(\"caption\"), \"figure\");};};\n                    \n                    $writer = [\"target\", target];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                    break;;\n                  } else if ($truthy(($truthy($b = (($c = ch0['$=='](\"t\")) ? this_line['$start_with?'](\"toc:\") : ch0['$=='](\"t\"))) ? $$($nesting, 'BlockTocMacroRx')['$=~'](this_line) : $b))) {\n                    \n                    block = $$($nesting, 'Block').$new(parent, \"toc\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                    if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)))) {\n                      block.$parse_attributes((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), [], $hash2([\"into\"], {\"into\": attributes}))};\n                    break;;\n                  } else if ($truthy((function() {if ($truthy(block_macro_extensions)) {\n                    \n                    return ($truthy($b = ($truthy($c = $$($nesting, 'CustomBlockMacroRx')['$=~'](this_line)) ? (extension = extensions['$registered_for_block_macro?']((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))) : $c)) ? $b : (report_unknown_block_macro = self.$logger()['$debug?']()));\n                  } else {\n                    \n                    return ($truthy($b = self.$logger()['$debug?']()) ? (report_unknown_block_macro = $$($nesting, 'CustomBlockMacroRx')['$=~'](this_line)) : $b);\n                  }; return nil; })())) {\n                    if ($truthy(report_unknown_block_macro)) {\n                      self.$logger().$debug(self.$message_with_context(\"\" + \"unknown name for block macro: \" + ((($b = $gvars['~']) === nil ? nil : $b['$[]'](1))), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n                    } else {\n                      \n                      content = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3));\n                      if ($truthy((target = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                        if ($truthy(($truthy($b = ($truthy($c = (expanded_target = parent.$sub_attributes(target))['$empty?']()) ? ($truthy($d = doc_attrs['$[]'](\"attribute-missing\")) ? $d : $$($nesting, 'Compliance').$attribute_missing())['$=='](\"drop-line\") : $c)) ? parent.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : $b))) {\n                          \n                          attributes.$clear();\n                          return nil;\n                        } else {\n                          target = expanded_target\n                        }};\n                      if ((ext_config = extension.$config())['$[]'](\"content_model\")['$=='](\"attributes\")) {\n                        if ($truthy(content)) {\n                          document.$parse_attributes(content, ($truthy($b = ($truthy($c = ext_config['$[]'](\"positional_attrs\")) ? $c : ext_config['$[]'](\"pos_attrs\"))) ? $b : []), $hash2([\"sub_input\", \"into\"], {\"sub_input\": true, \"into\": attributes}))}\n                      } else {\n                        \n                        $writer = [\"text\", ($truthy($b = content) ? $b : \"\")];\n                        $send(attributes, '[]=', Opal.to_a($writer));\n                        $writer[$rb_minus($writer[\"length\"], 1)];\n                      };\n                      if ($truthy((default_attrs = ext_config['$[]'](\"default_attrs\")))) {\n                        $send(attributes, 'update', [default_attrs], ($$11 = function(_, old_v){var self = $$11.$$s || this;\n\n                        \n                          \n                          if (_ == null) {\n                            _ = nil;\n                          };\n                          \n                          if (old_v == null) {\n                            old_v = nil;\n                          };\n                          return old_v;}, $$11.$$s = self, $$11.$$arity = 2, $$11))};\n                      if ($truthy(($truthy($b = (block = extension.$process_method()['$[]'](parent, target, attributes))) ? block['$!='](parent) : $b))) {\n                        \n                        attributes.$replace(block.$attributes());\n                        break;;\n                      } else {\n                        \n                        attributes.$clear();\n                        return nil;\n                      };\n                    }}};\n              };\n            };\n            if ($truthy(($truthy($b = ($truthy($c = indented['$!']()) ? (ch0 = ($truthy($d = ch0) ? $d : this_line.$chr()))['$=='](\"<\") : $c)) ? $$($nesting, 'CalloutListRx')['$=~'](this_line) : $b))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_callout_list(reader, $gvars[\"~\"], parent, document.$callouts());\n              \n              $writer = [\"style\", \"arabic\"];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              break;;\n            } else if ($truthy($$($nesting, 'UnorderedListRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              if ($truthy(($truthy($b = ($truthy($c = style['$!']()) ? $$($nesting, 'Section')['$==='](parent) : $c)) ? parent.$sectname()['$=='](\"bibliography\") : $b))) {\n                \n                $writer = [\"style\", (style = \"bibliography\")];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              block = self.$parse_list(reader, \"ulist\", parent, style);\n              break;;\n            } else if ($truthy($$($nesting, 'OrderedListRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_list(reader, \"olist\", parent, style);\n              if ($truthy(block.$style())) {\n                \n                $writer = [\"style\", block.$style()];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              break;;\n            } else if ($truthy(($truthy($b = ($truthy($c = this_line['$include?'](\"::\")) ? $c : this_line['$include?'](\";;\"))) ? $$($nesting, 'DescriptionListRx')['$=~'](this_line) : $b))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_description_list(reader, $gvars[\"~\"], parent);\n              break;;\n            } else if ($truthy(($truthy($b = ($truthy($c = style['$=='](\"float\")) ? $c : style['$=='](\"discrete\"))) ? (function() {if ($truthy($$($nesting, 'Compliance').$underline_style_section_titles())) {\n              \n              return self['$is_section_title?'](this_line, reader.$peek_line());\n            } else {\n              return ($truthy($c = indented['$!']()) ? self['$atx_section_title?'](this_line) : $c)\n            }; return nil; })() : $b))) {\n              \n              reader.$unshift_line(this_line);\n              $c = self.$parse_section_title(reader, document, attributes['$[]'](\"id\")), $b = Opal.to_ary($c), (float_id = ($b[0] == null ? nil : $b[0])), (float_reftext = ($b[1] == null ? nil : $b[1])), (block_title = ($b[2] == null ? nil : $b[2])), (float_level = ($b[3] == null ? nil : $b[3])), $c;\n              if ($truthy(float_reftext)) {\n                \n                $writer = [\"reftext\", float_reftext];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              block = $$($nesting, 'Block').$new(parent, \"floating_title\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n              \n              $writer = [block_title];\n              $send(block, 'title=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              attributes.$delete(\"title\");\n              \n              $writer = [($truthy($b = float_id) ? $b : (function() {if ($truthy(doc_attrs['$key?'](\"sectids\"))) {\n                \n                return $$($nesting, 'Section').$generate_id(block.$title(), document);\n              } else {\n                return nil\n              }; return nil; })())];\n              $send(block, 'id=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              \n              $writer = [float_level];\n              $send(block, 'level=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              break;;\n            } else if ($truthy(($truthy($b = style) ? style['$!='](\"normal\") : $b))) {\n              if ($truthy($$($nesting, 'PARAGRAPH_STYLES')['$include?'](style))) {\n                \n                block_context = style.$to_sym();\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;;\n              } else if ($truthy($$($nesting, 'ADMONITION_STYLES')['$include?'](style))) {\n                \n                block_context = \"admonition\";\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;;\n              } else if ($truthy(($truthy($b = block_extensions) ? extensions['$registered_for_block?'](style, \"paragraph\") : $b))) {\n                \n                block_context = style.$to_sym();\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;;\n              } else {\n                \n                if ($truthy(self.$logger()['$debug?']())) {\n                  self.$logger().$debug(self.$message_with_context(\"\" + \"unknown style for paragraph: \" + (style), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))};\n                style = nil;\n              }};\n            reader.$unshift_line(this_line);\n            if ($truthy(($truthy($b = indented) ? style['$!']() : $b))) {\n              \n              lines = self.$read_paragraph_lines(reader, (content_adjacent = (function() {if (skipped['$=='](0)) {\n                return options['$[]'](\"list_type\")\n              } else {\n                return nil\n              }; return nil; })()), $hash2([\"skip_line_comments\"], {\"skip_line_comments\": text_only}));\n              self['$adjust_indentation!'](lines);\n              if ($truthy(($truthy($b = text_only) ? $b : content_adjacent['$=='](\"dlist\")))) {\n                block = $$($nesting, 'Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}))\n              } else {\n                block = $$($nesting, 'Block').$new(parent, \"literal\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"verbatim\", \"source\": lines, \"attributes\": attributes}))\n              };\n            } else {\n              \n              lines = self.$read_paragraph_lines(reader, (($b = skipped['$=='](0)) ? options['$[]'](\"list_type\") : skipped['$=='](0)), $hash2([\"skip_line_comments\"], {\"skip_line_comments\": true}));\n              if ($truthy(text_only)) {\n                \n                if ($truthy(($truthy($b = indented) ? style['$=='](\"normal\") : $b))) {\n                  self['$adjust_indentation!'](lines)};\n                block = $$($nesting, 'Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              } else if ($truthy(($truthy($b = ($truthy($c = $$($nesting, 'ADMONITION_STYLE_HEADS')['$include?'](ch0)) ? this_line['$include?'](\":\") : $c)) ? $$($nesting, 'AdmonitionParagraphRx')['$=~'](this_line) : $b))) {\n                \n                \n                $writer = [0, (($b = $gvars['~']) === nil ? nil : $b.$post_match())];\n                $send(lines, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [\"name\", (admonition_name = (($writer = [\"style\", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]).$downcase())];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [\"textlabel\", ($truthy($b = attributes.$delete(\"caption\")) ? $b : doc_attrs['$[]'](\"\" + (admonition_name) + \"-caption\"))];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                block = $$($nesting, 'Block').$new(parent, \"admonition\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              } else if ($truthy(($truthy($b = ($truthy($c = md_syntax) ? ch0['$=='](\">\") : $c)) ? this_line['$start_with?'](\"> \") : $b))) {\n                \n                $send(lines, 'map!', [], ($$12 = function(line){var self = $$12.$$s || this;\n\n                \n                  \n                  if (line == null) {\n                    line = nil;\n                  };\n                  if (line['$=='](\">\")) {\n                    \n                    return line.$slice(1, line.$length());\n                  } else {\n                    \n                    if ($truthy(line['$start_with?'](\"> \"))) {\n                      \n                      return line.$slice(2, line.$length());\n                    } else {\n                      return line\n                    };\n                  };}, $$12.$$s = self, $$12.$$arity = 1, $$12));\n                if ($truthy(lines['$[]'](-1)['$start_with?'](\"-- \"))) {\n                  \n                  credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());\n                  if ($truthy(lines['$empty?']())) {\n                  } else {\n                    while ($truthy(lines['$[]'](-1)['$empty?']())) {\n                      lines.$pop()\n                    }\n                  };};\n                \n                $writer = [\"style\", \"quote\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                block = self.$build_block(\"quote\", \"compound\", false, parent, $$($nesting, 'Reader').$new(lines), attributes);\n                if ($truthy(credit_line)) {\n                  \n                  $c = block.$apply_subs(credit_line).$split(\", \", 2), $b = Opal.to_ary($c), (attribution = ($b[0] == null ? nil : $b[0])), (citetitle = ($b[1] == null ? nil : $b[1])), $c;\n                  if ($truthy(attribution)) {\n                    \n                    $writer = [\"attribution\", attribution];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];};\n                  if ($truthy(citetitle)) {\n                    \n                    $writer = [\"citetitle\", citetitle];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];};};\n              } else if ($truthy(($truthy($b = ($truthy($c = (($d = ch0['$=='](\"\\\"\")) ? $rb_gt(lines.$size(), 1) : ch0['$=='](\"\\\"\"))) ? lines['$[]'](-1)['$start_with?'](\"-- \") : $c)) ? lines['$[]'](-2)['$end_with?'](\"\\\"\") : $b))) {\n                \n                \n                $writer = [0, this_line.$slice(1, this_line.$length())];\n                $send(lines, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());\n                while ($truthy(lines['$[]'](-1)['$empty?']())) {\n                  lines.$pop()\n                };\n                lines['$<<'](lines.$pop().$chop());\n                \n                $writer = [\"style\", \"quote\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                block = $$($nesting, 'Block').$new(parent, \"quote\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n                $c = block.$apply_subs(credit_line).$split(\", \", 2), $b = Opal.to_ary($c), (attribution = ($b[0] == null ? nil : $b[0])), (citetitle = ($b[1] == null ? nil : $b[1])), $c;\n                if ($truthy(attribution)) {\n                  \n                  $writer = [\"attribution\", attribution];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                if ($truthy(citetitle)) {\n                  \n                  $writer = [\"citetitle\", citetitle];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n              } else {\n                \n                if ($truthy(($truthy($b = indented) ? style['$=='](\"normal\") : $b))) {\n                  self['$adjust_indentation!'](lines)};\n                block = $$($nesting, 'Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              };\n              self.$catalog_inline_anchors(lines.$join($$($nesting, 'LF')), block, document, reader);\n            };\n            break;;\n          }\n        };\n        if ($truthy(block)) {\n        } else {\n          $case = block_context;\n          if (\"listing\"['$===']($case) || \"source\"['$===']($case)) {\n          if ($truthy(($truthy($a = block_context['$=='](\"source\")) ? $a : ($truthy($b = attributes['$[]'](1)['$!']()) ? (language = ($truthy($c = attributes['$[]'](2)) ? $c : doc_attrs['$[]'](\"source-language\"))) : $b)))) {\n            \n            if ($truthy(language)) {\n              \n              \n              $writer = [\"style\", \"source\"];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              \n              $writer = [\"language\", language];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              $$($nesting, 'AttributeList').$rekey(attributes, [nil, nil, \"linenums\"]);\n            } else {\n              \n              $$($nesting, 'AttributeList').$rekey(attributes, [nil, \"language\", \"linenums\"]);\n              if ($truthy(attributes['$key?'](\"language\"))) {\n              } else if ($truthy(doc_attrs['$key?'](\"source-language\"))) {\n                \n                $writer = [\"language\", doc_attrs['$[]'](\"source-language\")];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n            };\n            if ($truthy(attributes['$key?'](\"linenums\"))) {\n            } else if ($truthy(($truthy($a = attributes['$[]'](\"linenums-option\")) ? $a : doc_attrs['$[]'](\"source-linenums-option\")))) {\n              \n              $writer = [\"linenums\", \"\"];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(attributes['$key?'](\"indent\"))) {\n            } else if ($truthy(doc_attrs['$key?'](\"source-indent\"))) {\n              \n              $writer = [\"indent\", doc_attrs['$[]'](\"source-indent\")];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};};\n          block = self.$build_block(\"listing\", \"verbatim\", terminator, parent, reader, attributes);}\n          else if (\"fenced_code\"['$===']($case)) {\n          \n          $writer = [\"style\", \"source\"];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy($rb_gt((ll = this_line.$length()), 3))) {\n            if ($truthy((comma_idx = (language = this_line.$slice(3, ll)).$index(\",\")))) {\n              if ($truthy($rb_gt(comma_idx, 0))) {\n                \n                language = language.$slice(0, comma_idx).$strip();\n                if ($truthy($rb_lt(comma_idx, $rb_minus(ll, 4)))) {\n                  \n                  $writer = [\"linenums\", \"\"];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n              } else if ($truthy($rb_gt(ll, 4))) {\n                \n                $writer = [\"linenums\", \"\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];}\n            } else {\n              language = language.$lstrip()\n            }};\n          if ($truthy(language['$nil_or_empty?']())) {\n            if ($truthy(doc_attrs['$key?'](\"source-language\"))) {\n              \n              $writer = [\"language\", doc_attrs['$[]'](\"source-language\")];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];}\n          } else {\n            \n            $writer = [\"language\", language];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          if ($truthy(attributes['$key?'](\"linenums\"))) {\n          } else if ($truthy(($truthy($a = attributes['$[]'](\"linenums-option\")) ? $a : doc_attrs['$[]'](\"source-linenums-option\")))) {\n            \n            $writer = [\"linenums\", \"\"];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(attributes['$key?'](\"indent\"))) {\n          } else if ($truthy(doc_attrs['$key?'](\"source-indent\"))) {\n            \n            $writer = [\"indent\", doc_attrs['$[]'](\"source-indent\")];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          terminator = terminator.$slice(0, 3);\n          block = self.$build_block(\"listing\", \"verbatim\", terminator, parent, reader, attributes);}\n          else if (\"table\"['$===']($case)) {\n          block_cursor = reader.$cursor();\n          block_reader = $$($nesting, 'Reader').$new(reader.$read_lines_until($hash2([\"terminator\", \"skip_line_comments\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_line_comments\": true, \"context\": \"table\", \"cursor\": \"at_mark\"})), block_cursor);\n          if ($truthy(terminator['$start_with?'](\"|\", \"!\"))) {\n          } else {\n            ($truthy($a = attributes['$[]'](\"format\")) ? $a : (($writer = [\"format\", (function() {if ($truthy(terminator['$start_with?'](\",\"))) {\n              return \"csv\"\n            } else {\n              return \"dsv\"\n            }; return nil; })()]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n          };\n          block = self.$parse_table(block_reader, parent, attributes);}\n          else if (\"sidebar\"['$===']($case)) {block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes)}\n          else if (\"admonition\"['$===']($case)) {\n          \n          $writer = [\"name\", (admonition_name = style.$downcase())];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"textlabel\", ($truthy($a = attributes.$delete(\"caption\")) ? $a : doc_attrs['$[]'](\"\" + (admonition_name) + \"-caption\"))];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes);}\n          else if (\"open\"['$===']($case) || \"abstract\"['$===']($case) || \"partintro\"['$===']($case)) {block = self.$build_block(\"open\", \"compound\", terminator, parent, reader, attributes)}\n          else if (\"literal\"['$===']($case)) {block = self.$build_block(block_context, \"verbatim\", terminator, parent, reader, attributes)}\n          else if (\"example\"['$===']($case)) {\n          if ($truthy(attributes['$[]'](\"collapsible-option\"))) {\n            \n            $writer = [\"caption\", \"\"];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes);}\n          else if (\"quote\"['$===']($case) || \"verse\"['$===']($case)) {\n          $$($nesting, 'AttributeList').$rekey(attributes, [nil, \"attribution\", \"citetitle\"]);\n          block = self.$build_block(block_context, (function() {if (block_context['$=='](\"verse\")) {\n            return \"verbatim\"\n          } else {\n            return \"compound\"\n          }; return nil; })(), terminator, parent, reader, attributes);}\n          else if (\"stem\"['$===']($case) || \"latexmath\"['$===']($case) || \"asciimath\"['$===']($case)) {\n          if (block_context['$=='](\"stem\")) {\n            \n            $writer = [\"style\", $$($nesting, 'STEM_TYPE_ALIASES')['$[]'](($truthy($a = attributes['$[]'](2)) ? $a : doc_attrs['$[]'](\"stem\")))];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          block = self.$build_block(\"stem\", \"raw\", terminator, parent, reader, attributes);}\n          else if (\"pass\"['$===']($case)) {block = self.$build_block(block_context, \"raw\", terminator, parent, reader, attributes)}\n          else if (\"comment\"['$===']($case)) {\n          self.$build_block(block_context, \"skip\", terminator, parent, reader, attributes);\n          attributes.$clear();\n          return nil;}\n          else {if ($truthy(($truthy($a = block_extensions) ? (extension = extensions['$registered_for_block?'](block_context, cloaked_context)) : $a))) {\n            \n            if ((content_model = (ext_config = extension.$config())['$[]'](\"content_model\"))['$=='](\"skip\")) {\n            } else {\n              \n              if ($truthy((positional_attrs = ($truthy($a = ext_config['$[]'](\"positional_attrs\")) ? $a : ext_config['$[]'](\"pos_attrs\")))['$nil_or_empty?']())) {\n              } else {\n                $$($nesting, 'AttributeList').$rekey(attributes, $rb_plus([nil], positional_attrs))\n              };\n              if ($truthy((default_attrs = ext_config['$[]'](\"default_attrs\")))) {\n                $send(default_attrs, 'each', [], ($$13 = function(k, v){var self = $$13.$$s || this, $e;\n\n                \n                  \n                  if (k == null) {\n                    k = nil;\n                  };\n                  \n                  if (v == null) {\n                    v = nil;\n                  };\n                  return ($truthy($e = attributes['$[]'](k)) ? $e : (($writer = [k, v]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));}, $$13.$$s = self, $$13.$$arity = 2, $$13))};\n              \n              $writer = [\"cloaked-context\", cloaked_context];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n            };\n            if ($truthy((block = self.$build_block(block_context, content_model, terminator, parent, reader, attributes, $hash2([\"extension\"], {\"extension\": extension}))))) {\n            } else {\n              \n              attributes.$clear();\n              return nil;\n            };\n          } else {\n            self.$raise(\"\" + \"Unsupported block type \" + (block_context) + \" at \" + (reader.$cursor()))\n          }}\n        };\n        if ($truthy(document.$sourcemap())) {\n          \n          $writer = [reader.$cursor_at_mark()];\n          $send(block, 'source_location=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(attributes['$[]'](\"title\"))) {\n          \n          \n          $writer = [(block_title = attributes.$delete(\"title\"))];\n          $send(block, 'title=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy($$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](block.$context()))) {\n            block.$assign_caption(attributes.$delete(\"caption\"))};};\n        \n        $writer = [attributes['$[]'](\"style\")];\n        $send(block, 'style=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        if ($truthy((block_id = ($truthy($a = block.$id()) ? $a : (($writer = [attributes['$[]'](\"id\")]), $send(block, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))))) {\n          \n          if ($truthy((function() {if ($truthy(block_title)) {\n            \n            return block_title['$include?']($$($nesting, 'ATTR_REF_HEAD'));\n          } else {\n            return block['$title?']()\n          }; return nil; })())) {\n            block.$title()};\n          if ($truthy(document.$register(\"refs\", [block_id, block]))) {\n          } else {\n            self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to block already in use: \" + (block_id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n          };};\n        if ($truthy(attributes['$empty?']())) {\n        } else {\n          block.$update_attributes(attributes)\n        };\n        block.$commit_subs();\n        if ($truthy(block['$sub?'](\"callouts\"))) {\n          if ($truthy(self.$catalog_callouts(block.$source(), document))) {\n          } else {\n            block.$remove_sub(\"callouts\")\n          }};\n        return block;\n        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n      }, $Parser_next_block$10.$$arity = -3);\n      Opal.defs(self, '$read_paragraph_lines', $Parser_read_paragraph_lines$14 = function $$read_paragraph_lines(reader, break_at_list, opts) {\n        var self = this, $writer = nil, break_condition = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        \n        $writer = [\"break_on_blank_lines\", true];\n        $send(opts, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"break_on_list_continuation\", true];\n        $send(opts, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"preserve_last_line\", true];\n        $send(opts, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        break_condition = (function() {if ($truthy(break_at_list)) {\n          \n          if ($truthy($$($nesting, 'Compliance').$block_terminates_paragraph())) {\n            return $$($nesting, 'StartOfBlockOrListProc')\n          } else {\n            return $$($nesting, 'StartOfListProc')\n          };\n        } else {\n          \n          if ($truthy($$($nesting, 'Compliance').$block_terminates_paragraph())) {\n            return $$($nesting, 'StartOfBlockProc')\n          } else {\n            return $$($nesting, 'NoOp')\n          };\n        }; return nil; })();\n        return $send(reader, 'read_lines_until', [opts], break_condition.$to_proc());\n      }, $Parser_read_paragraph_lines$14.$$arity = -3);\n      Opal.defs(self, '$is_delimited_block?', $Parser_is_delimited_block$ques$15 = function(line, return_match_data) {\n        var $a, $b, self = this, line_len = nil, tip = nil, tip_len = nil, context = nil, masq = nil;\n\n        \n        \n        if (return_match_data == null) {\n          return_match_data = nil;\n        };\n        if ($truthy(($truthy($a = $rb_gt((line_len = line.$length()), 1)) ? $$($nesting, 'DELIMITED_BLOCK_HEADS')['$[]'](line.$slice(0, 2)) : $a))) {\n        } else {\n          return nil\n        };\n        if (line_len['$=='](2)) {\n          \n          tip = line;\n          tip_len = 2;\n        } else {\n          \n          if ($truthy($rb_lt(line_len, 5))) {\n            \n            tip = line;\n            tip_len = line_len;\n          } else {\n            tip = line.$slice(0, (tip_len = 4))\n          };\n          if ($truthy(($truthy($a = $$($nesting, 'Compliance').$markdown_syntax()) ? tip['$start_with?'](\"`\") : $a))) {\n            if (tip_len['$=='](4)) {\n              \n              if ($truthy(($truthy($a = tip['$=='](\"````\")) ? $a : (tip = tip.$chop())['$!='](\"```\")))) {\n                return nil};\n              line = tip;\n              line_len = (tip_len = 3);\n            } else if ($truthy(tip['$!='](\"```\"))) {\n              return nil}\n          } else if (tip_len['$=='](3)) {\n            return nil};\n        };\n        $b = $$($nesting, 'DELIMITED_BLOCKS')['$[]'](tip), $a = Opal.to_ary($b), (context = ($a[0] == null ? nil : $a[0])), (masq = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy(($truthy($a = context) ? ($truthy($b = line_len['$=='](tip_len)) ? $b : self['$uniform?'](line.$slice(1, line_len), $$($nesting, 'DELIMITED_BLOCK_TAILS')['$[]'](tip), $rb_minus(line_len, 1))) : $a))) {\n          if ($truthy(return_match_data)) {\n            \n            return $$($nesting, 'BlockMatchData').$new(context, masq, tip, line);\n          } else {\n            return true\n          }\n        } else {\n          return nil\n        };\n      }, $Parser_is_delimited_block$ques$15.$$arity = -2);\n      Opal.defs(self, '$build_block', $Parser_build_block$16 = function $$build_block(block_context, content_model, terminator, parent, reader, attributes, options) {\n        var $a, $b, self = this, $case = nil, skip_processing = nil, parse_as_content_model = nil, lines = nil, block_reader = nil, block_cursor = nil, tab_size = nil, indent = nil, extension = nil, block = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        $case = content_model;\n        if (\"skip\"['$===']($case)) {$a = [true, \"simple\"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a}\n        else if (\"raw\"['$===']($case)) {$a = [false, \"simple\"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a}\n        else {$a = [false, content_model], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a};\n        if ($truthy(terminator['$nil?']())) {\n          \n          if (parse_as_content_model['$=='](\"verbatim\")) {\n            lines = reader.$read_lines_until($hash2([\"break_on_blank_lines\", \"break_on_list_continuation\"], {\"break_on_blank_lines\": true, \"break_on_list_continuation\": true}))\n          } else {\n            \n            if (content_model['$=='](\"compound\")) {\n              content_model = \"simple\"};\n            lines = self.$read_paragraph_lines(reader, false, $hash2([\"skip_line_comments\", \"skip_processing\"], {\"skip_line_comments\": true, \"skip_processing\": skip_processing}));\n          };\n          block_reader = nil;\n        } else if ($truthy(parse_as_content_model['$!='](\"compound\"))) {\n          \n          lines = reader.$read_lines_until($hash2([\"terminator\", \"skip_processing\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_processing\": skip_processing, \"context\": block_context, \"cursor\": \"at_mark\"}));\n          block_reader = nil;\n        } else if (terminator['$=='](false)) {\n          \n          lines = nil;\n          block_reader = reader;\n        } else {\n          \n          lines = nil;\n          block_cursor = reader.$cursor();\n          block_reader = $$($nesting, 'Reader').$new(reader.$read_lines_until($hash2([\"terminator\", \"skip_processing\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_processing\": skip_processing, \"context\": block_context, \"cursor\": \"at_mark\"})), block_cursor);\n        };\n        $case = content_model;\n        if (\"verbatim\"['$===']($case)) {\n        tab_size = ($truthy($a = attributes['$[]'](\"tabsize\")) ? $a : parent.$document().$attributes()['$[]'](\"tabsize\")).$to_i();\n        if ($truthy((indent = attributes['$[]'](\"indent\")))) {\n          self['$adjust_indentation!'](lines, indent.$to_i(), tab_size)\n        } else if ($truthy($rb_gt(tab_size, 0))) {\n          self['$adjust_indentation!'](lines, -1, tab_size)};}\n        else if (\"skip\"['$===']($case)) {return nil};\n        if ($truthy((extension = options['$[]'](\"extension\")))) {\n          \n          attributes.$delete(\"style\");\n          if ($truthy(($truthy($a = (block = extension.$process_method()['$[]'](parent, ($truthy($b = block_reader) ? $b : $$($nesting, 'Reader').$new(lines)), attributes.$merge()))) ? block['$!='](parent) : $a))) {\n            \n            attributes.$replace(block.$attributes());\n            if ($truthy(($truthy($a = (($b = block.$content_model()['$=='](\"compound\")) ? $$($nesting, 'Block')['$==='](block) : block.$content_model()['$=='](\"compound\"))) ? (lines = block.$lines())['$empty?']()['$!']() : $a))) {\n              \n              content_model = \"compound\";\n              block_reader = $$($nesting, 'Reader').$new(lines);};\n          } else {\n            return nil\n          };\n        } else {\n          block = $$($nesting, 'Block').$new(parent, block_context, $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": content_model, \"source\": lines, \"attributes\": attributes}))\n        };\n        if (content_model['$=='](\"compound\")) {\n          self.$parse_blocks(block_reader, block)};\n        return block;\n      }, $Parser_build_block$16.$$arity = -7);\n      Opal.defs(self, '$parse_blocks', $Parser_parse_blocks$17 = function $$parse_blocks(reader, parent, attributes) {\n        var $a, $b, $c, self = this, block = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = nil;\n        };\n        if ($truthy(attributes)) {\n          while ($truthy(($truthy($b = ($truthy($c = (block = self.$next_block(reader, parent, attributes.$merge()))) ? parent.$blocks()['$<<'](block) : $c)) ? $b : reader['$has_more_lines?']()))) {\n            \n          }\n        } else {\n          while ($truthy(($truthy($b = ($truthy($c = (block = self.$next_block(reader, parent))) ? parent.$blocks()['$<<'](block) : $c)) ? $b : reader['$has_more_lines?']()))) {\n            \n          }\n        };\n        return nil;\n      }, $Parser_parse_blocks$17.$$arity = -3);\n      Opal.defs(self, '$parse_list', $Parser_parse_list$18 = function $$parse_list(reader, list_type, parent, style) {\n        var $a, $b, self = this, list_block = nil, list_rx = nil, list_item = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        list_block = $$($nesting, 'List').$new(parent, list_type);\n        list_rx = $$($nesting, 'ListRxMap')['$[]'](list_type);\n        while ($truthy(($truthy($b = reader['$has_more_lines?']()) ? list_rx['$=~'](reader.$peek_line()) : $b))) {\n          \n          if ($truthy((list_item = self.$parse_list_item(reader, list_block, $gvars[\"~\"], (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), style)))) {\n            list_block.$items()['$<<'](list_item)};\n          if ($truthy($b = reader.$skip_blank_lines())) {\n            $b\n          } else {\n            break;\n          };\n        };\n        return list_block;\n      }, $Parser_parse_list$18.$$arity = 4);\n      Opal.defs(self, '$catalog_callouts', $Parser_catalog_callouts$19 = function $$catalog_callouts(text, document) {\n        var $$20, self = this, found = nil, autonum = nil;\n\n        \n        found = false;\n        autonum = 0;\n        if ($truthy(text['$include?'](\"<\"))) {\n          $send(text, 'scan', [$$($nesting, 'CalloutScanRx')], ($$20 = function(){var self = $$20.$$s || this, $a;\n\n          \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?'](\"\\\\\"))) {\n            } else {\n              document.$callouts().$register((function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))['$=='](\".\")) {\n                return (autonum = $rb_plus(autonum, 1)).$to_s()\n              } else {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))\n              }; return nil; })())\n            };\n            return (found = true);}, $$20.$$s = self, $$20.$$arity = 0, $$20))};\n        return found;\n      }, $Parser_catalog_callouts$19.$$arity = 2);\n      Opal.defs(self, '$catalog_inline_anchor', $Parser_catalog_inline_anchor$21 = function $$catalog_inline_anchor(id, reftext, node, location, doc) {\n        var $a, self = this;\n\n        \n        \n        if (doc == null) {\n          doc = node.$document();\n        };\n        if ($truthy(($truthy($a = reftext) ? reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {\n          reftext = doc.$sub_attributes(reftext)};\n        if ($truthy(doc.$register(\"refs\", [id, $$($nesting, 'Inline').$new(node, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))]))) {\n        } else {\n          \n          if ($truthy($$($nesting, 'Reader')['$==='](location))) {\n            location = location.$cursor()};\n          self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": location})));\n        };\n        return nil;\n      }, $Parser_catalog_inline_anchor$21.$$arity = -5);\n      Opal.defs(self, '$catalog_inline_anchors', $Parser_catalog_inline_anchors$22 = function $$catalog_inline_anchors(text, block, document, reader) {\n        var $a, $$23, self = this;\n\n        \n        if ($truthy(($truthy($a = text['$include?'](\"[[\")) ? $a : text['$include?'](\"or:\")))) {\n          $send(text, 'scan', [$$($nesting, 'InlineAnchorScanRx')], ($$23 = function(){var self = $$23.$$s || this, $b, $c, $d, id = nil, reftext = nil, location = nil, offset = nil;\n\n          \n            if ($truthy((id = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))))) {\n              if ($truthy(($truthy($b = ($truthy($c = (reftext = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2)))) ? reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $c)) ? (reftext = document.$sub_attributes(reftext))['$empty?']() : $b))) {\n                return nil;}\n            } else {\n              \n              id = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3));\n              if ($truthy((reftext = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))))) {\n                if ($truthy(reftext['$include?'](\"]\"))) {\n                  \n                  reftext = reftext.$gsub(\"\\\\]\", \"]\");\n                  if ($truthy(reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                    reftext = document.$sub_attributes(reftext)};\n                } else if ($truthy(($truthy($b = reftext['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (reftext = document.$sub_attributes(reftext))['$empty?']() : $b))) {\n                  return nil;}};\n            };\n            if ($truthy(document.$register(\"refs\", [id, $$($nesting, 'Inline').$new(block, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))]))) {\n              return nil\n            } else {\n              \n              location = reader.$cursor_at_mark();\n              if ($truthy($rb_gt((offset = $rb_plus((($b = $gvars['~']) === nil ? nil : $b.$pre_match()).$count($$($nesting, 'LF')), (function() {if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](0))['$start_with?']($$($nesting, 'LF')))) {\n                return 1\n              } else {\n                return 0\n              }; return nil; })())), 0))) {\n                (location = location.$dup()).$advance(offset)};\n              return self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": location})));\n            };}, $$23.$$s = self, $$23.$$arity = 0, $$23))};\n        return nil;\n      }, $Parser_catalog_inline_anchors$22.$$arity = 4);\n      Opal.defs(self, '$catalog_inline_biblio_anchor', $Parser_catalog_inline_biblio_anchor$24 = function $$catalog_inline_biblio_anchor(id, reftext, node, reader) {\n        var $a, self = this;\n\n        \n        if ($truthy(node.$document().$register(\"refs\", [id, $$($nesting, 'Inline').$new(node, \"anchor\", ($truthy($a = reftext) ? \"\" + \"[\" + (reftext) + \"]\" : $a), $hash2([\"type\", \"id\"], {\"type\": \"bibref\", \"id\": id}))]))) {\n        } else {\n          self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to bibliography anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n        };\n        return nil;\n      }, $Parser_catalog_inline_biblio_anchor$24.$$arity = 4);\n      Opal.defs(self, '$parse_description_list', $Parser_parse_description_list$25 = function $$parse_description_list(reader, match, parent) {\n        var $a, $b, self = this, list_block = nil, sibling_pattern = nil, current_pair = nil, next_pair = nil, $writer = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        list_block = $$($nesting, 'List').$new(parent, \"dlist\");\n        sibling_pattern = $$($nesting, 'DescriptionListSiblingRx')['$[]'](match['$[]'](2));\n        list_block.$items()['$<<']((current_pair = self.$parse_list_item(reader, list_block, match, sibling_pattern)));\n        while ($truthy(($truthy($b = reader['$has_more_lines?']()) ? sibling_pattern['$=~'](reader.$peek_line()) : $b))) {\n          \n          next_pair = self.$parse_list_item(reader, list_block, $gvars[\"~\"], sibling_pattern);\n          if ($truthy(current_pair['$[]'](1))) {\n            list_block.$items()['$<<']((current_pair = next_pair))\n          } else {\n            \n            current_pair['$[]'](0)['$<<'](next_pair['$[]'](0)['$[]'](0));\n            \n            $writer = [1, next_pair['$[]'](1)];\n            $send(current_pair, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          };\n        };\n        return list_block;\n      }, $Parser_parse_description_list$25.$$arity = 3);\n      Opal.defs(self, '$parse_callout_list', $Parser_parse_callout_list$26 = function $$parse_callout_list(reader, match, parent, callouts) {\n        var $a, $b, $c, self = this, list_block = nil, next_index = nil, autonum = nil, num = nil, list_item = nil, coids = nil, $writer = nil;\n\n        \n        list_block = $$($nesting, 'List').$new(parent, \"colist\");\n        next_index = 1;\n        autonum = 0;\n        while ($truthy(($truthy($b = match) ? $b : ($truthy($c = (match = $$($nesting, 'CalloutListRx').$match(reader.$peek_line()))) ? reader.$mark() : $c)))) {\n          \n          if ((num = match['$[]'](1))['$=='](\".\")) {\n            num = (autonum = $rb_plus(autonum, 1)).$to_s()};\n          if (num['$=='](next_index.$to_s())) {\n          } else {\n            self.$logger().$warn(self.$message_with_context(\"\" + \"callout list item index: expected \" + (next_index) + \", got \" + (num), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n          };\n          if ($truthy((list_item = self.$parse_list_item(reader, list_block, match, \"<1>\")))) {\n            \n            list_block.$items()['$<<'](list_item);\n            if ($truthy((coids = callouts.$callout_ids(list_block.$items().$size()))['$empty?']())) {\n              self.$logger().$warn(self.$message_with_context(\"\" + \"no callout found for <\" + (list_block.$items().$size()) + \">\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n            } else {\n              \n              $writer = [\"coids\", coids];\n              $send(list_item.$attributes(), '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };};\n          next_index = $rb_plus(next_index, 1);\n          match = nil;\n        };\n        callouts.$next_list();\n        return list_block;\n      }, $Parser_parse_callout_list$26.$$arity = 4);\n      Opal.defs(self, '$parse_list_item', $Parser_parse_list_item$27 = function $$parse_list_item(reader, list_block, match, sibling_trait, style) {\n        var $a, $b, self = this, list_type = nil, dlist = nil, list_term = nil, term_text = nil, item_text = nil, has_text = nil, list_item = nil, $writer = nil, sourcemap_assignment_deferred = nil, $case = nil, ordinal = nil, implicit_style = nil, block_cursor = nil, list_item_reader = nil, comment_lines = nil, subsequent_line = nil, content_adjacent = nil, block = nil, first_block = nil;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        if ((list_type = list_block.$context())['$=='](\"dlist\")) {\n          \n          dlist = true;\n          list_term = $$($nesting, 'ListItem').$new(list_block, (term_text = match['$[]'](1)));\n          if ($truthy(($truthy($a = term_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](term_text) : $a))) {\n            self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), ($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) ? $a : (($b = $gvars['~']) === nil ? nil : $b.$post_match()).$lstrip()), list_term, reader)};\n          if ($truthy((item_text = match['$[]'](3)))) {\n            has_text = true};\n          list_item = $$($nesting, 'ListItem').$new(list_block, item_text);\n          if ($truthy(list_block.$document().$sourcemap())) {\n            \n            \n            $writer = [reader.$cursor()];\n            $send(list_term, 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(has_text)) {\n              \n              $writer = [list_term.$source_location()];\n              $send(list_item, 'source_location=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              sourcemap_assignment_deferred = true\n            };};\n        } else {\n          \n          has_text = true;\n          list_item = $$($nesting, 'ListItem').$new(list_block, (item_text = match['$[]'](2)));\n          if ($truthy(list_block.$document().$sourcemap())) {\n            \n            $writer = [reader.$cursor()];\n            $send(list_item, 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          $case = list_type;\n          if (\"ulist\"['$===']($case)) {\n          \n          $writer = [sibling_trait];\n          $send(list_item, 'marker=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(item_text['$start_with?'](\"[\"))) {\n            if ($truthy(($truthy($a = style) ? style['$=='](\"bibliography\") : $a))) {\n              if ($truthy($$($nesting, 'InlineBiblioAnchorRx')['$=~'](item_text))) {\n                self.$catalog_inline_biblio_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)}\n            } else if ($truthy(item_text['$start_with?'](\"[[\"))) {\n              if ($truthy($$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text))) {\n                self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)}\n            } else if ($truthy(item_text['$start_with?'](\"[ ] \", \"[x] \", \"[*] \"))) {\n              \n              list_block.$set_option(\"checklist\");\n              \n              $writer = [\"checkbox\", \"\"];\n              $send(list_item.$attributes(), '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              if ($truthy(item_text['$start_with?'](\"[ \"))) {\n              } else {\n                \n                $writer = [\"checked\", \"\"];\n                $send(list_item.$attributes(), '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n              \n              $writer = [item_text.$slice(4, item_text.$length())];\n              $send(list_item, 'text=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;}};}\n          else if (\"olist\"['$===']($case)) {\n          $b = self.$resolve_ordered_list_marker(sibling_trait, (ordinal = list_block.$items().$size()), true, reader), $a = Opal.to_ary($b), (sibling_trait = ($a[0] == null ? nil : $a[0])), (implicit_style = ($a[1] == null ? nil : $a[1])), $b;\n          \n          $writer = [sibling_trait];\n          $send(list_item, 'marker=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy((($a = ordinal['$=='](0)) ? style['$!']() : ordinal['$=='](0)))) {\n            \n            $writer = [($truthy($a = implicit_style) ? $a : ($truthy($b = $$($nesting, 'ORDERED_LIST_STYLES')['$[]']($rb_minus(sibling_trait.$length(), 1))) ? $b : \"arabic\").$to_s())];\n            $send(list_block, 'style=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(($truthy($a = item_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text) : $a))) {\n            self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)};}\n          else {\n          \n          $writer = [sibling_trait];\n          $send(list_item, 'marker=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(($truthy($a = item_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text) : $a))) {\n            self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)};};\n        };\n        reader.$shift();\n        block_cursor = reader.$cursor();\n        list_item_reader = $$($nesting, 'Reader').$new(self.$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), block_cursor);\n        if ($truthy(list_item_reader['$has_more_lines?']())) {\n          \n          if ($truthy(sourcemap_assignment_deferred)) {\n            \n            $writer = [block_cursor];\n            $send(list_item, 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          comment_lines = list_item_reader.$skip_line_comments();\n          if ($truthy((subsequent_line = list_item_reader.$peek_line()))) {\n            \n            if ($truthy(comment_lines['$empty?']())) {\n            } else {\n              list_item_reader.$unshift_lines(comment_lines)\n            };\n            if ($truthy(subsequent_line['$empty?']())) {\n            } else {\n              \n              content_adjacent = true;\n              if ($truthy(dlist)) {\n              } else {\n                has_text = nil\n              };\n            };};\n          if ($truthy((block = self.$next_block(list_item_reader, list_item, $hash2([], {}), $hash2([\"text_only\", \"list_type\"], {\"text_only\": (function() {if ($truthy(has_text)) {\n            return nil\n          } else {\n            return true\n          }; return nil; })(), \"list_type\": list_type}))))) {\n            list_item.$blocks()['$<<'](block)};\n          while ($truthy(list_item_reader['$has_more_lines?']())) {\n            if ($truthy((block = self.$next_block(list_item_reader, list_item, $hash2([], {}), $hash2([\"list_type\"], {\"list_type\": list_type}))))) {\n              list_item.$blocks()['$<<'](block)}\n          };\n          if ($truthy(($truthy($a = ($truthy($b = content_adjacent) ? (first_block = list_item.$blocks()['$[]'](0)) : $b)) ? first_block.$context()['$=='](\"paragraph\") : $a))) {\n            list_item.$fold_first()};};\n        if ($truthy(dlist)) {\n          return [[list_term], (function() {if ($truthy(($truthy($a = list_item['$text?']()) ? $a : list_item['$blocks?']()))) {\n            return list_item\n          } else {\n            return nil\n          }; return nil; })()]\n        } else {\n          return list_item\n        };\n      }, $Parser_parse_list_item$27.$$arity = -5);\n      Opal.defs(self, '$read_lines_for_list_item', $Parser_read_lines_for_list_item$28 = function $$read_lines_for_list_item(reader, list_type, sibling_trait, has_text) {\n        var $a, $b, $c, $$29, $$30, $$31, $$32, $$33, self = this, buffer = nil, continuation = nil, within_nested_list = nil, detached_continuation = nil, dlist = nil, this_line = nil, prev_line = nil, $writer = nil, match = nil, nested_list_type = nil, last_line = nil;\n\n        \n        \n        if (sibling_trait == null) {\n          sibling_trait = nil;\n        };\n        \n        if (has_text == null) {\n          has_text = true;\n        };\n        buffer = [];\n        continuation = \"inactive\";\n        within_nested_list = false;\n        detached_continuation = nil;\n        dlist = list_type['$=='](\"dlist\");\n        while ($truthy(reader['$has_more_lines?']())) {\n          \n          this_line = reader.$read_line();\n          if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n            break;};\n          prev_line = (function() {if ($truthy(buffer['$empty?']())) {\n            return nil\n          } else {\n            return buffer['$[]'](-1)\n          }; return nil; })();\n          if (prev_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n            \n            if (continuation['$=='](\"inactive\")) {\n              \n              continuation = \"active\";\n              has_text = true;\n              if ($truthy(within_nested_list)) {\n              } else {\n                \n                $writer = [-1, \"\"];\n                $send(buffer, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };};\n            if (this_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n              \n              if ($truthy(continuation['$!='](\"frozen\"))) {\n                \n                continuation = \"frozen\";\n                buffer['$<<'](this_line);};\n              this_line = nil;\n              continue;;};};\n          if ($truthy((match = self['$is_delimited_block?'](this_line, true)))) {\n            if (continuation['$=='](\"active\")) {\n              \n              buffer['$<<'](this_line);\n              buffer.$concat(reader.$read_lines_until($hash2([\"terminator\", \"read_last_line\", \"context\"], {\"terminator\": match.$terminator(), \"read_last_line\": true, \"context\": nil})));\n              continuation = \"inactive\";\n            } else {\n              break;\n            }\n          } else if ($truthy(($truthy($b = ($truthy($c = dlist) ? continuation['$!='](\"active\") : $c)) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](this_line) : $b))) {\n            break;\n          } else if ($truthy((($b = continuation['$=='](\"active\")) ? this_line['$empty?']()['$!']() : continuation['$=='](\"active\")))) {\n            if ($truthy($$($nesting, 'LiteralParagraphRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              if ($truthy(dlist)) {\n                buffer.$concat($send(reader, 'read_lines_until', [$hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})], ($$29 = function(line){var self = $$29.$$s || this;\n\n                \n                  \n                  if (line == null) {\n                    line = nil;\n                  };\n                  return self['$is_sibling_list_item?'](line, list_type, sibling_trait);}, $$29.$$s = self, $$29.$$arity = 1, $$29)))\n              } else {\n                buffer.$concat(reader.$read_lines_until($hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})))\n              };\n              continuation = \"inactive\";\n            } else if ($truthy(($truthy($b = ($truthy($c = $$($nesting, 'BlockTitleRx')['$match?'](this_line)) ? $c : $$($nesting, 'BlockAttributeLineRx')['$match?'](this_line))) ? $b : $$($nesting, 'AttributeEntryRx')['$match?'](this_line)))) {\n              buffer['$<<'](this_line)\n            } else {\n              \n              if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {\n                return [\"dlist\"]\n              } else {\n                return $$($nesting, 'NESTABLE_LIST_CONTEXTS')\n              }; return nil; })(), 'find', [], ($$30 = function(ctx){var self = $$30.$$s || this;\n\n              \n                \n                if (ctx == null) {\n                  ctx = nil;\n                };\n                return $$($nesting, 'ListRxMap')['$[]'](ctx)['$match?'](this_line);}, $$30.$$s = self, $$30.$$arity = 1, $$30))))) {\n                \n                within_nested_list = true;\n                if ($truthy((($b = nested_list_type['$=='](\"dlist\")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$=='](\"dlist\")))) {\n                  has_text = false};};\n              buffer['$<<'](this_line);\n              continuation = \"inactive\";\n            }\n          } else if ($truthy(($truthy($b = prev_line) ? prev_line['$empty?']() : $b))) {\n            \n            if ($truthy(this_line['$empty?']())) {\n              \n              if ($truthy((this_line = ($truthy($b = reader.$skip_blank_lines()) ? reader.$read_line() : $b)))) {\n              } else {\n                break;\n              };\n              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n                break;};};\n            if (this_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n              \n              detached_continuation = buffer.$size();\n              buffer['$<<'](this_line);\n            } else if ($truthy(has_text)) {\n              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n                break;\n              } else if ($truthy((nested_list_type = $send($$($nesting, 'NESTABLE_LIST_CONTEXTS'), 'find', [], ($$31 = function(ctx){var self = $$31.$$s || this;\n\n              \n                \n                if (ctx == null) {\n                  ctx = nil;\n                };\n                return $$($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line);}, $$31.$$s = self, $$31.$$arity = 1, $$31))))) {\n                \n                buffer['$<<'](this_line);\n                within_nested_list = true;\n                if ($truthy((($b = nested_list_type['$=='](\"dlist\")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$=='](\"dlist\")))) {\n                  has_text = false};\n              } else if ($truthy($$($nesting, 'LiteralParagraphRx')['$match?'](this_line))) {\n                \n                reader.$unshift_line(this_line);\n                if ($truthy(dlist)) {\n                  buffer.$concat($send(reader, 'read_lines_until', [$hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})], ($$32 = function(line){var self = $$32.$$s || this;\n\n                  \n                    \n                    if (line == null) {\n                      line = nil;\n                    };\n                    return self['$is_sibling_list_item?'](line, list_type, sibling_trait);}, $$32.$$s = self, $$32.$$arity = 1, $$32)))\n                } else {\n                  buffer.$concat(reader.$read_lines_until($hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})))\n                };\n              } else {\n                break;\n              }\n            } else {\n              \n              if ($truthy(within_nested_list)) {\n              } else {\n                buffer.$pop()\n              };\n              buffer['$<<'](this_line);\n              has_text = true;\n            };\n          } else {\n            \n            if ($truthy(this_line['$empty?']())) {\n            } else {\n              has_text = true\n            };\n            if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {\n              return [\"dlist\"]\n            } else {\n              return $$($nesting, 'NESTABLE_LIST_CONTEXTS')\n            }; return nil; })(), 'find', [], ($$33 = function(ctx){var self = $$33.$$s || this;\n\n            \n              \n              if (ctx == null) {\n                ctx = nil;\n              };\n              return $$($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line);}, $$33.$$s = self, $$33.$$arity = 1, $$33))))) {\n              \n              within_nested_list = true;\n              if ($truthy((($b = nested_list_type['$=='](\"dlist\")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$=='](\"dlist\")))) {\n                has_text = false};};\n            buffer['$<<'](this_line);\n          };\n          this_line = nil;\n        };\n        if ($truthy(this_line)) {\n          reader.$unshift_line(this_line)};\n        if ($truthy(detached_continuation)) {\n          \n          $writer = [detached_continuation, \"\"];\n          $send(buffer, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        while (!($truthy(buffer['$empty?']()))) {\n          if ($truthy((last_line = buffer['$[]'](-1))['$empty?']())) {\n            buffer.$pop()\n          } else {\n            \n            if (last_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n              buffer.$pop()};\n            break;;\n          }\n        };\n        return buffer;\n      }, $Parser_read_lines_for_list_item$28.$$arity = -3);\n      Opal.defs(self, '$initialize_section', $Parser_initialize_section$34 = function $$initialize_section(reader, parent, attributes) {\n        var $a, $b, self = this, document = nil, book = nil, doctype = nil, source_location = nil, sect_style = nil, sect_id = nil, sect_reftext = nil, sect_title = nil, sect_level = nil, sect_atx = nil, sect_name = nil, sect_special = nil, sect_numbered = nil, $writer = nil, section = nil, id = nil, generated_id = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        document = parent.$document();\n        book = (doctype = document.$doctype())['$=='](\"book\");\n        if ($truthy(document.$sourcemap())) {\n          source_location = reader.$cursor()};\n        sect_style = attributes['$[]'](1);\n        $b = self.$parse_section_title(reader, document, attributes['$[]'](\"id\")), $a = Opal.to_ary($b), (sect_id = ($a[0] == null ? nil : $a[0])), (sect_reftext = ($a[1] == null ? nil : $a[1])), (sect_title = ($a[2] == null ? nil : $a[2])), (sect_level = ($a[3] == null ? nil : $a[3])), (sect_atx = ($a[4] == null ? nil : $a[4])), $b;\n        if ($truthy(sect_style)) {\n          if ($truthy(($truthy($a = book) ? sect_style['$=='](\"abstract\") : $a))) {\n            $a = [\"chapter\", 1], (sect_name = $a[0]), (sect_level = $a[1]), $a\n          } else if ($truthy(($truthy($a = sect_style['$start_with?'](\"sect\")) ? $$($nesting, 'SectionLevelStyleRx')['$match?'](sect_style) : $a))) {\n            sect_name = \"section\"\n          } else {\n            \n            $a = [sect_style, true], (sect_name = $a[0]), (sect_special = $a[1]), $a;\n            if (sect_level['$=='](0)) {\n              sect_level = 1};\n            sect_numbered = sect_name['$=='](\"appendix\");\n          }\n        } else if ($truthy(book)) {\n          sect_name = (function() {if (sect_level['$=='](0)) {\n            return \"part\"\n          } else {\n            \n            if ($truthy($rb_gt(sect_level, 1))) {\n              return \"section\"\n            } else {\n              return \"chapter\"\n            };\n          }; return nil; })()\n        } else if ($truthy((($a = doctype['$=='](\"manpage\")) ? sect_title.$casecmp(\"synopsis\")['$=='](0) : doctype['$=='](\"manpage\")))) {\n          $a = [\"synopsis\", true], (sect_name = $a[0]), (sect_special = $a[1]), $a\n        } else {\n          sect_name = \"section\"\n        };\n        if ($truthy(sect_reftext)) {\n          \n          $writer = [\"reftext\", sect_reftext];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        section = $$($nesting, 'Section').$new(parent, sect_level);\n        $a = [sect_id, sect_title, sect_name, source_location], section['$id=']($a[0]), section['$title=']($a[1]), section['$sectname=']($a[2]), section['$source_location=']($a[3]), $a;\n        if ($truthy(sect_special)) {\n          \n          \n          $writer = [true];\n          $send(section, 'special=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(sect_numbered)) {\n            \n            $writer = [true];\n            $send(section, 'numbered=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else if (document.$attributes()['$[]'](\"sectnums\")['$=='](\"all\")) {\n            \n            $writer = [(function() {if ($truthy(($truthy($a = book) ? sect_level['$=='](1) : $a))) {\n              return \"chapter\"\n            } else {\n              return true\n            }; return nil; })()];\n            $send(section, 'numbered=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n        } else if ($truthy(($truthy($a = document.$attributes()['$[]'](\"sectnums\")) ? $rb_gt(sect_level, 0) : $a))) {\n          \n          $writer = [(function() {if ($truthy(section.$special())) {\n            return ($truthy($a = parent.$numbered()) ? true : $a)\n          } else {\n            return true\n          }; return nil; })()];\n          $send(section, 'numbered=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy(($truthy($a = ($truthy($b = book) ? sect_level['$=='](0) : $b)) ? document.$attributes()['$[]'](\"partnums\") : $a))) {\n          \n          $writer = [true];\n          $send(section, 'numbered=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy((id = ($truthy($a = section.$id()) ? $a : (($writer = [(function() {if ($truthy(document.$attributes()['$key?'](\"sectids\"))) {\n          \n          return (generated_id = $$($nesting, 'Section').$generate_id(section.$title(), document));\n        } else {\n          return nil\n        }; return nil; })()]), $send(section, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))))) {\n          \n          if ($truthy(($truthy($a = generated_id) ? $a : sect_title['$include?']($$($nesting, 'ATTR_REF_HEAD'))['$!']()))) {\n          } else {\n            section.$title()\n          };\n          if ($truthy(document.$register(\"refs\", [id, section]))) {\n          } else {\n            self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to section already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_line($rb_minus(reader.$lineno(), (function() {if ($truthy(sect_atx)) {\n              return 1\n            } else {\n              return 2\n            }; return nil; })()))})))\n          };};\n        section.$update_attributes(attributes);\n        reader.$skip_blank_lines();\n        return section;\n      }, $Parser_initialize_section$34.$$arity = -3);\n      Opal.defs(self, '$is_next_line_section?', $Parser_is_next_line_section$ques$35 = function(reader, attributes) {\n        var $a, $b, self = this, style = nil, next_lines = nil;\n\n        \n        if ($truthy(($truthy($a = (style = attributes['$[]'](1))) ? ($truthy($b = style['$=='](\"discrete\")) ? $b : style['$=='](\"float\")) : $a))) {\n          return nil};\n        if ($truthy($$($nesting, 'Compliance').$underline_style_section_titles())) {\n          \n          next_lines = reader.$peek_lines(2, ($truthy($a = style) ? style['$=='](\"comment\") : $a));\n          return self['$is_section_title?'](($truthy($a = next_lines['$[]'](0)) ? $a : \"\"), next_lines['$[]'](1));\n        } else {\n          return self['$atx_section_title?'](($truthy($a = reader.$peek_line()) ? $a : \"\"))\n        };\n      }, $Parser_is_next_line_section$ques$35.$$arity = 2);\n      Opal.defs(self, '$is_next_line_doctitle?', $Parser_is_next_line_doctitle$ques$36 = function(reader, attributes, leveloffset) {\n        var $a, self = this, sect_level = nil;\n\n        if ($truthy(leveloffset)) {\n          return ($truthy($a = (sect_level = self['$is_next_line_section?'](reader, attributes))) ? $rb_plus(sect_level, leveloffset.$to_i())['$=='](0) : $a)\n        } else {\n          return self['$is_next_line_section?'](reader, attributes)['$=='](0)\n        }\n      }, $Parser_is_next_line_doctitle$ques$36.$$arity = 3);\n      Opal.defs(self, '$is_section_title?', $Parser_is_section_title$ques$37 = function(line1, line2) {\n        var $a, self = this;\n\n        \n        \n        if (line2 == null) {\n          line2 = nil;\n        };\n        return ($truthy($a = self['$atx_section_title?'](line1)) ? $a : (function() {if ($truthy(line2['$nil_or_empty?']())) {\n          return nil\n        } else {\n          return self['$setext_section_title?'](line1, line2)\n        }; return nil; })());\n      }, $Parser_is_section_title$ques$37.$$arity = -2);\n      Opal.defs(self, '$atx_section_title?', $Parser_atx_section_title$ques$38 = function(line) {\n        var $a, self = this;\n\n        if ($truthy((function() {if ($truthy($$($nesting, 'Compliance').$markdown_syntax())) {\n          \n          return ($truthy($a = line['$start_with?'](\"=\", \"#\")) ? $$($nesting, 'ExtAtxSectionTitleRx')['$=~'](line) : $a);\n        } else {\n          \n          return ($truthy($a = line['$start_with?'](\"=\")) ? $$($nesting, 'AtxSectionTitleRx')['$=~'](line) : $a);\n        }; return nil; })())) {\n          return $rb_minus((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$length(), 1)\n        } else {\n          return nil\n        }\n      }, $Parser_atx_section_title$ques$38.$$arity = 1);\n      Opal.defs(self, '$setext_section_title?', $Parser_setext_section_title$ques$39 = function(line1, line2) {\n        var $a, $b, $c, self = this, level = nil, line2_ch0 = nil, line2_len = nil;\n\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (level = $$($nesting, 'SETEXT_SECTION_LEVELS')['$[]']((line2_ch0 = line2.$chr())))) ? self['$uniform?'](line2, line2_ch0, (line2_len = line2.$length())) : $c)) ? $$($nesting, 'SetextSectionTitleRx')['$match?'](line1) : $b)) ? $rb_lt($rb_minus(line1.$length(), line2_len).$abs(), 2) : $a))) {\n          return level\n        } else {\n          return nil\n        }\n      }, $Parser_setext_section_title$ques$39.$$arity = 2);\n      Opal.defs(self, '$parse_section_title', $Parser_parse_section_title$40 = function $$parse_section_title(reader, document, sect_id) {\n        var $a, $b, $c, $d, $e, self = this, sect_reftext = nil, line1 = nil, sect_level = nil, sect_title = nil, atx = nil, line2 = nil, line2_ch0 = nil, line2_len = nil;\n\n        \n        \n        if (sect_id == null) {\n          sect_id = nil;\n        };\n        sect_reftext = nil;\n        line1 = reader.$read_line();\n        if ($truthy((function() {if ($truthy($$($nesting, 'Compliance').$markdown_syntax())) {\n          \n          return ($truthy($a = line1['$start_with?'](\"=\", \"#\")) ? $$($nesting, 'ExtAtxSectionTitleRx')['$=~'](line1) : $a);\n        } else {\n          \n          return ($truthy($a = line1['$start_with?'](\"=\")) ? $$($nesting, 'AtxSectionTitleRx')['$=~'](line1) : $a);\n        }; return nil; })())) {\n          \n          $a = [$rb_minus((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)).$length(), 1), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), true], (sect_level = $a[0]), (sect_title = $a[1]), (atx = $a[2]), $a;\n          if ($truthy(sect_id)) {\n          } else if ($truthy(($truthy($a = ($truthy($b = sect_title['$end_with?'](\"]]\")) ? $$($nesting, 'InlineSectionAnchorRx')['$=~'](sect_title) : $b)) ? (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$!']() : $a))) {\n            $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a};\n        } else if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = $$($nesting, 'Compliance').$underline_style_section_titles()) ? (line2 = reader.$peek_line(true)) : $e)) ? (sect_level = $$($nesting, 'SETEXT_SECTION_LEVELS')['$[]']((line2_ch0 = line2.$chr()))) : $d)) ? self['$uniform?'](line2, line2_ch0, (line2_len = line2.$length())) : $c)) ? (sect_title = ($truthy($c = $$($nesting, 'SetextSectionTitleRx')['$=~'](line1)) ? (($d = $gvars['~']) === nil ? nil : $d['$[]'](1)) : $c)) : $b)) ? $rb_lt($rb_minus(line1.$length(), line2_len).$abs(), 2) : $a))) {\n          \n          atx = false;\n          if ($truthy(sect_id)) {\n          } else if ($truthy(($truthy($a = ($truthy($b = sect_title['$end_with?'](\"]]\")) ? $$($nesting, 'InlineSectionAnchorRx')['$=~'](sect_title) : $b)) ? (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$!']() : $a))) {\n            $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a};\n          reader.$shift();\n        } else {\n          self.$raise(\"\" + \"Unrecognized section at \" + (reader.$cursor_at_prev_line()))\n        };\n        if ($truthy(document['$attr?'](\"leveloffset\"))) {\n          \n          sect_level = $rb_plus(sect_level, document.$attr(\"leveloffset\").$to_i());\n          if ($truthy($rb_lt(sect_level, 0))) {\n            sect_level = 0};};\n        return [sect_id, sect_reftext, sect_title, sect_level, atx];\n      }, $Parser_parse_section_title$40.$$arity = -3);\n      Opal.defs(self, '$parse_header_metadata', $Parser_parse_header_metadata$41 = function $$parse_header_metadata(reader, document, retrieve) {\n        var $a, $$42, $$43, $$44, self = this, doc_attrs = nil, authorcount = nil, implicit_author_metadata = nil, $writer = nil, implicit_author = nil, implicit_authorinitials = nil, implicit_authors = nil, rev_line = nil, match = nil, rev_metadata = nil, component = nil, author_line = nil, author_metadata = nil, authors = nil, author_idx = nil, author_key = nil, explicit = nil, sparse = nil, author_override = nil;\n\n        \n        \n        if (document == null) {\n          document = nil;\n        };\n        \n        if (retrieve == null) {\n          retrieve = true;\n        };\n        doc_attrs = ($truthy($a = document) ? document.$attributes() : $a);\n        self.$process_attribute_entries(reader, document);\n        if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {\n          \n          authorcount = (implicit_author_metadata = self.$process_authors(reader.$read_line())).$delete(\"authorcount\");\n          if ($truthy(($truthy($a = document) ? $rb_gt((($writer = [\"authorcount\", authorcount]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]), 0) : $a))) {\n            \n            $send(implicit_author_metadata, 'each', [], ($$42 = function(key, val){var self = $$42.$$s || this;\n\n            \n              \n              if (key == null) {\n                key = nil;\n              };\n              \n              if (val == null) {\n                val = nil;\n              };\n              if ($truthy(doc_attrs['$key?'](key))) {\n                return nil\n              } else {\n                \n                $writer = [key, document.$apply_header_subs(val)];\n                $send(doc_attrs, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];\n              };}, $$42.$$s = self, $$42.$$arity = 2, $$42));\n            implicit_author = doc_attrs['$[]'](\"author\");\n            implicit_authorinitials = doc_attrs['$[]'](\"authorinitials\");\n            implicit_authors = doc_attrs['$[]'](\"authors\");};\n          \n          $writer = [\"authorcount\", authorcount];\n          $send(implicit_author_metadata, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          self.$process_attribute_entries(reader, document);\n          if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {\n            \n            rev_line = reader.$read_line();\n            if ($truthy((match = $$($nesting, 'RevisionInfoLineRx').$match(rev_line)))) {\n              \n              rev_metadata = $hash2([], {});\n              if ($truthy(match['$[]'](1))) {\n                \n                $writer = [\"revnumber\", match['$[]'](1).$rstrip()];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              if ($truthy((component = match['$[]'](2).$strip())['$empty?']())) {\n              } else if ($truthy(($truthy($a = match['$[]'](1)['$!']()) ? component['$start_with?'](\"v\") : $a))) {\n                \n                $writer = [\"revnumber\", component.$slice(1, component.$length())];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              } else {\n                \n                $writer = [\"revdate\", component];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n              if ($truthy(match['$[]'](3))) {\n                \n                $writer = [\"revremark\", match['$[]'](3).$rstrip()];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              if ($truthy(($truthy($a = document) ? rev_metadata['$empty?']()['$!']() : $a))) {\n                $send(rev_metadata, 'each', [], ($$43 = function(key, val){var self = $$43.$$s || this;\n\n                \n                  \n                  if (key == null) {\n                    key = nil;\n                  };\n                  \n                  if (val == null) {\n                    val = nil;\n                  };\n                  if ($truthy(doc_attrs['$key?'](key))) {\n                    return nil\n                  } else {\n                    \n                    $writer = [key, document.$apply_header_subs(val)];\n                    $send(doc_attrs, '[]=', Opal.to_a($writer));\n                    return $writer[$rb_minus($writer[\"length\"], 1)];\n                  };}, $$43.$$s = self, $$43.$$arity = 2, $$43))};\n            } else {\n              reader.$unshift_line(rev_line)\n            };};\n          self.$process_attribute_entries(reader, document);\n          reader.$skip_blank_lines();\n        } else {\n          implicit_author_metadata = $hash2([], {})\n        };\n        if ($truthy(document)) {\n          \n          if ($truthy(($truthy($a = doc_attrs['$key?'](\"author\")) ? (author_line = doc_attrs['$[]'](\"author\"))['$!='](implicit_author) : $a))) {\n            \n            author_metadata = self.$process_authors(author_line, true, false);\n            if ($truthy(doc_attrs['$[]'](\"authorinitials\")['$!='](implicit_authorinitials))) {\n              author_metadata.$delete(\"authorinitials\")};\n          } else if ($truthy(($truthy($a = doc_attrs['$key?'](\"authors\")) ? (author_line = doc_attrs['$[]'](\"authors\"))['$!='](implicit_authors) : $a))) {\n            author_metadata = self.$process_authors(author_line, true)\n          } else {\n            \n            $a = [[], 1, \"author_1\", false, false], (authors = $a[0]), (author_idx = $a[1]), (author_key = $a[2]), (explicit = $a[3]), (sparse = $a[4]), $a;\n            while ($truthy(doc_attrs['$key?'](author_key))) {\n              \n              if ((author_override = doc_attrs['$[]'](author_key))['$=='](implicit_author_metadata['$[]'](author_key))) {\n                \n                authors['$<<'](nil);\n                sparse = true;\n              } else {\n                \n                authors['$<<'](author_override);\n                explicit = true;\n              };\n              author_key = \"\" + \"author_\" + ((author_idx = $rb_plus(author_idx, 1)));\n            };\n            if ($truthy(explicit)) {\n              \n              if ($truthy(sparse)) {\n                $send(authors, 'each_with_index', [], ($$44 = function(author, idx){var self = $$44.$$s || this, $$45, name_idx = nil;\n\n                \n                  \n                  if (author == null) {\n                    author = nil;\n                  };\n                  \n                  if (idx == null) {\n                    idx = nil;\n                  };\n                  if ($truthy(author)) {\n                    return nil;};\n                  \n                  $writer = [idx, $send([implicit_author_metadata['$[]'](\"\" + \"firstname_\" + ((name_idx = $rb_plus(idx, 1)))), implicit_author_metadata['$[]'](\"\" + \"middlename_\" + (name_idx)), implicit_author_metadata['$[]'](\"\" + \"lastname_\" + (name_idx))].$compact(), 'map', [], ($$45 = function(it){var self = $$45.$$s || this;\n\n                  \n                    \n                    if (it == null) {\n                      it = nil;\n                    };\n                    return it.$tr(\" \", \"_\");}, $$45.$$s = self, $$45.$$arity = 1, $$45)).$join(\" \")];\n                  $send(authors, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];;}, $$44.$$s = self, $$44.$$arity = 2, $$44))};\n              author_metadata = self.$process_authors(authors, true, false);\n            } else {\n              author_metadata = $hash2([\"authorcount\"], {\"authorcount\": 0})\n            };\n          };\n          if (author_metadata['$[]'](\"authorcount\")['$=='](0)) {\n            if ($truthy(authorcount)) {\n              author_metadata = nil\n            } else {\n              \n              $writer = [\"authorcount\", 0];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }\n          } else {\n            \n            doc_attrs.$update(author_metadata);\n            if ($truthy(($truthy($a = doc_attrs['$key?'](\"email\")['$!']()) ? doc_attrs['$key?'](\"email_1\") : $a))) {\n              \n              $writer = [\"email\", doc_attrs['$[]'](\"email_1\")];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n          };};\n        if ($truthy(retrieve)) {\n          return implicit_author_metadata.$merge(rev_metadata.$to_h(), author_metadata.$to_h())\n        } else {\n          return nil\n        };\n      }, $Parser_parse_header_metadata$41.$$arity = -2);\n      Opal.defs(self, '$process_authors', $Parser_process_authors$46 = function $$process_authors(author_line, names_only, multiple) {\n        var $a, $$47, self = this, author_metadata = nil, author_idx = nil, $writer = nil;\n\n        \n        \n        if (names_only == null) {\n          names_only = false;\n        };\n        \n        if (multiple == null) {\n          multiple = true;\n        };\n        author_metadata = $hash2([], {});\n        author_idx = 0;\n        $send((function() {if ($truthy(($truthy($a = multiple) ? author_line['$include?'](\";\") : $a))) {\n          \n          return author_line.$split($$($nesting, 'AuthorDelimiterRx'));\n        } else {\n          return [].concat(Opal.to_a(author_line))\n        }; return nil; })(), 'each', [], ($$47 = function(author_entry){var self = $$47.$$s || this, $$48, $$49, $b, $$50, key_map = nil, $writer = nil, segments = nil, match = nil, author = nil, fname = nil, mname = nil, lname = nil;\n\n        \n          \n          if (author_entry == null) {\n            author_entry = nil;\n          };\n          if ($truthy(author_entry['$empty?']())) {\n            return nil;};\n          key_map = $hash2([], {});\n          if ((author_idx = $rb_plus(author_idx, 1))['$=='](1)) {\n            $send($$($nesting, 'AuthorKeys'), 'each', [], ($$48 = function(key){var self = $$48.$$s || this, $writer = nil;\n\n            \n              \n              if (key == null) {\n                key = nil;\n              };\n              $writer = [key.$to_sym(), key];\n              $send(key_map, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];}, $$48.$$s = self, $$48.$$arity = 1, $$48))\n          } else {\n            $send($$($nesting, 'AuthorKeys'), 'each', [], ($$49 = function(key){var self = $$49.$$s || this, $writer = nil;\n\n            \n              \n              if (key == null) {\n                key = nil;\n              };\n              $writer = [key.$to_sym(), \"\" + (key) + \"_\" + (author_idx)];\n              $send(key_map, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];}, $$49.$$s = self, $$49.$$arity = 1, $$49))\n          };\n          if ($truthy(names_only)) {\n            \n            if ($truthy(author_entry['$include?'](\"<\"))) {\n              \n              \n              $writer = [key_map['$[]'](\"author\"), author_entry.$tr(\"_\", \" \")];\n              $send(author_metadata, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              author_entry = author_entry.$gsub($$($nesting, 'XmlSanitizeRx'), \"\");};\n            if ((segments = author_entry.$split(nil, 3)).$size()['$=='](3)) {\n              segments['$<<'](segments.$pop().$squeeze(\" \"))};\n          } else if ($truthy((match = $$($nesting, 'AuthorInfoLineRx').$match(author_entry)))) {\n            (segments = match.$to_a()).$shift()};\n          if ($truthy(segments)) {\n            \n            author = (($writer = [key_map['$[]'](\"firstname\"), (fname = segments['$[]'](0).$tr(\"_\", \" \"))]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n            \n            $writer = [key_map['$[]'](\"authorinitials\"), fname.$chr()];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(segments['$[]'](1))) {\n              if ($truthy(segments['$[]'](2))) {\n                \n                \n                $writer = [key_map['$[]'](\"middlename\"), (mname = segments['$[]'](1).$tr(\"_\", \" \"))];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [key_map['$[]'](\"lastname\"), (lname = segments['$[]'](2).$tr(\"_\", \" \"))];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                author = $rb_plus($rb_plus($rb_plus($rb_plus(fname, \" \"), mname), \" \"), lname);\n                \n                $writer = [key_map['$[]'](\"authorinitials\"), \"\" + (fname.$chr()) + (mname.$chr()) + (lname.$chr())];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n              } else {\n                \n                \n                $writer = [key_map['$[]'](\"lastname\"), (lname = segments['$[]'](1).$tr(\"_\", \" \"))];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                author = $rb_plus($rb_plus(fname, \" \"), lname);\n                \n                $writer = [key_map['$[]'](\"authorinitials\"), \"\" + (fname.$chr()) + (lname.$chr())];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n              }};\n            ($truthy($b = author_metadata['$[]'](key_map['$[]'](\"author\"))) ? $b : (($writer = [key_map['$[]'](\"author\"), author]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            if ($truthy(($truthy($b = names_only) ? $b : segments['$[]'](3)['$!']()))) {\n            } else {\n              \n              $writer = [key_map['$[]'](\"email\"), segments['$[]'](3)];\n              $send(author_metadata, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          } else {\n            \n            \n            $writer = [key_map['$[]'](\"author\"), (($writer = [key_map['$[]'](\"firstname\"), (fname = author_entry.$squeeze(\" \").$strip())]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [key_map['$[]'](\"authorinitials\"), fname.$chr()];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          };\n          if (author_idx['$=='](1)) {\n            \n            $writer = [\"authors\", author_metadata['$[]'](key_map['$[]'](\"author\"))];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            if (author_idx['$=='](2)) {\n              $send($$($nesting, 'AuthorKeys'), 'each', [], ($$50 = function(key){var self = $$50.$$s || this;\n\n              \n                \n                if (key == null) {\n                  key = nil;\n                };\n                if ($truthy(author_metadata['$key?'](key))) {\n                  \n                  $writer = [\"\" + (key) + \"_1\", author_metadata['$[]'](key)];\n                  $send(author_metadata, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  return nil\n                };}, $$50.$$s = self, $$50.$$arity = 1, $$50))};\n            \n            $writer = [\"authors\", \"\" + (author_metadata['$[]'](\"authors\")) + \", \" + (author_metadata['$[]'](key_map['$[]'](\"author\")))];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          };}, $$47.$$s = self, $$47.$$arity = 1, $$47));\n        \n        $writer = [\"authorcount\", author_idx];\n        $send(author_metadata, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        return author_metadata;\n      }, $Parser_process_authors$46.$$arity = -2);\n      Opal.defs(self, '$parse_block_metadata_lines', $Parser_parse_block_metadata_lines$51 = function $$parse_block_metadata_lines(reader, document, attributes, options) {\n        var $a, $b, self = this;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {\n          \n          reader.$shift();\n          if ($truthy($b = reader.$skip_blank_lines())) {\n            $b\n          } else {\n            break;\n          };\n        };\n        return attributes;\n      }, $Parser_parse_block_metadata_lines$51.$$arity = -3);\n      Opal.defs(self, '$parse_block_metadata_line', $Parser_parse_block_metadata_line$52 = function $$parse_block_metadata_line(reader, document, attributes, options) {\n        var $a, $b, self = this, next_line = nil, normal = nil, $writer = nil, reftext = nil, current_style = nil, ll = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        if ($truthy(($truthy($a = (next_line = reader.$peek_line())) ? (function() {if ($truthy(options['$[]'](\"text_only\"))) {\n          \n          return next_line['$start_with?'](\"[\", \"/\");\n        } else {\n          \n          return (normal = next_line['$start_with?'](\"[\", \".\", \"/\", \":\"));\n        }; return nil; })() : $a))) {\n          if ($truthy(next_line['$start_with?'](\"[\"))) {\n            if ($truthy(next_line['$start_with?'](\"[[\"))) {\n              if ($truthy(($truthy($a = next_line['$end_with?'](\"]]\")) ? $$($nesting, 'BlockAnchorRx')['$=~'](next_line) : $a))) {\n                \n                \n                $writer = [\"id\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if ($truthy((reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))) {\n                  \n                  $writer = [\"reftext\", (function() {if ($truthy(reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                    \n                    return document.$sub_attributes(reftext);\n                  } else {\n                    return reftext\n                  }; return nil; })()];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                return true;}\n            } else if ($truthy(($truthy($a = next_line['$end_with?'](\"]\")) ? $$($nesting, 'BlockAttributeListRx')['$=~'](next_line) : $a))) {\n              \n              current_style = attributes['$[]'](1);\n              if ($truthy(document.$parse_attributes((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), [], $hash2([\"sub_input\", \"sub_result\", \"into\"], {\"sub_input\": true, \"sub_result\": true, \"into\": attributes}))['$[]'](1))) {\n                \n                $writer = [1, ($truthy($a = self.$parse_style_attribute(attributes, reader)) ? $a : current_style)];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              return true;}\n          } else if ($truthy(($truthy($a = normal) ? next_line['$start_with?'](\".\") : $a))) {\n            if ($truthy($$($nesting, 'BlockTitleRx')['$=~'](next_line))) {\n              \n              \n              $writer = [\"title\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              return true;}\n          } else if ($truthy(($truthy($a = normal['$!']()) ? $a : next_line['$start_with?'](\"/\")))) {\n            if ($truthy(next_line['$start_with?'](\"//\"))) {\n              if (next_line['$=='](\"//\")) {\n                return true\n              } else if ($truthy(($truthy($a = normal) ? self['$uniform?'](next_line, \"/\", (ll = next_line.$length())) : $a))) {\n                if (ll['$=='](3)) {\n                } else {\n                  \n                  reader.$read_lines_until($hash2([\"terminator\", \"skip_first_line\", \"preserve_last_line\", \"skip_processing\", \"context\"], {\"terminator\": next_line, \"skip_first_line\": true, \"preserve_last_line\": true, \"skip_processing\": true, \"context\": \"comment\"}));\n                  return true;\n                }\n              } else if ($truthy(next_line['$start_with?'](\"///\"))) {\n              } else {\n                return true\n              }}\n          } else if ($truthy(($truthy($a = ($truthy($b = normal) ? next_line['$start_with?'](\":\") : $b)) ? $$($nesting, 'AttributeEntryRx')['$=~'](next_line) : $a))) {\n            \n            self.$process_attribute_entry(reader, document, attributes, $gvars[\"~\"]);\n            return true;}};\n        return nil;\n      }, $Parser_parse_block_metadata_line$52.$$arity = -4);\n      Opal.defs(self, '$process_attribute_entries', $Parser_process_attribute_entries$53 = function $$process_attribute_entries(reader, document, attributes) {\n        var $a, self = this;\n\n        \n        \n        if (attributes == null) {\n          attributes = nil;\n        };\n        reader.$skip_comment_lines();\n        while ($truthy(self.$process_attribute_entry(reader, document, attributes))) {\n          \n          reader.$shift();\n          reader.$skip_comment_lines();\n        };\n      }, $Parser_process_attribute_entries$53.$$arity = -3);\n      Opal.defs(self, '$process_attribute_entry', $Parser_process_attribute_entry$54 = function $$process_attribute_entry(reader, document, attributes, match) {\n        var $a, $b, $c, self = this, value = nil, con = nil, next_line = nil, keep_open = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = nil;\n        };\n        \n        if (match == null) {\n          match = nil;\n        };\n        if ($truthy(($truthy($a = match) ? $a : (match = (function() {if ($truthy(reader['$has_more_lines?']())) {\n          \n          return $$($nesting, 'AttributeEntryRx').$match(reader.$peek_line());\n        } else {\n          return nil\n        }; return nil; })())))) {\n          \n          if ($truthy((value = match['$[]'](2))['$nil_or_empty?']())) {\n            value = \"\"\n          } else if ($truthy(value['$end_with?']($$($nesting, 'LINE_CONTINUATION'), $$($nesting, 'LINE_CONTINUATION_LEGACY')))) {\n            \n            $a = [value.$slice($rb_minus(value.$length(), 2), 2), value.$slice(0, $rb_minus(value.$length(), 2)).$rstrip()], (con = $a[0]), (value = $a[1]), $a;\n            while ($truthy(($truthy($b = reader.$advance()) ? (next_line = ($truthy($c = reader.$peek_line()) ? $c : \"\"))['$empty?']()['$!']() : $b))) {\n              \n              next_line = next_line.$lstrip();\n              if ($truthy((keep_open = next_line['$end_with?'](con)))) {\n                next_line = next_line.$slice(0, $rb_minus(next_line.$length(), 2)).$rstrip()};\n              value = \"\" + (value) + ((function() {if ($truthy(value['$end_with?']($$($nesting, 'HARD_LINE_BREAK')))) {\n                return $$($nesting, 'LF')\n              } else {\n                return \" \"\n              }; return nil; })()) + (next_line);\n              if ($truthy(keep_open)) {\n              } else {\n                break;\n              };\n            };};\n          self.$store_attribute(match['$[]'](1), value, document, attributes);\n          return true;\n        } else {\n          return nil\n        };\n      }, $Parser_process_attribute_entry$54.$$arity = -3);\n      Opal.defs(self, '$store_attribute', $Parser_store_attribute$55 = function $$store_attribute(name, value, doc, attrs) {\n        var $a, self = this, resolved_value = nil;\n\n        \n        \n        if (doc == null) {\n          doc = nil;\n        };\n        \n        if (attrs == null) {\n          attrs = nil;\n        };\n        if ($truthy(name['$end_with?'](\"!\"))) {\n          \n          name = name.$chop();\n          value = nil;\n        } else if ($truthy(name['$start_with?'](\"!\"))) {\n          \n          name = name.$slice(1, name.$length());\n          value = nil;};\n        if ((name = self.$sanitize_attribute_name(name))['$=='](\"numbered\")) {\n          name = \"sectnums\"\n        } else if (name['$=='](\"hardbreaks\")) {\n          name = \"hardbreaks-option\"\n        } else if (name['$=='](\"showtitle\")) {\n          self.$store_attribute(\"notitle\", (function() {if ($truthy(value)) {\n            return nil\n          } else {\n            return \"\"\n          }; return nil; })(), doc, attrs)};\n        if ($truthy(doc)) {\n          if ($truthy(value)) {\n            \n            if (name['$=='](\"leveloffset\")) {\n              if ($truthy(value['$start_with?'](\"+\"))) {\n                value = $rb_plus(doc.$attr(\"leveloffset\", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()\n              } else if ($truthy(value['$start_with?'](\"-\"))) {\n                value = $rb_minus(doc.$attr(\"leveloffset\", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()}};\n            if ($truthy((resolved_value = doc.$set_attribute(name, value)))) {\n              \n              value = resolved_value;\n              if ($truthy(attrs)) {\n                $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)};};\n          } else if ($truthy(($truthy($a = doc.$delete_attribute(name)) ? attrs : $a))) {\n            $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)}\n        } else if ($truthy(attrs)) {\n          $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)};\n        return [name, value];\n      }, $Parser_store_attribute$55.$$arity = -3);\n      Opal.defs(self, '$resolve_list_marker', $Parser_resolve_list_marker$56 = function $$resolve_list_marker(list_type, marker, ordinal, validate, reader) {\n        var self = this, $case = nil;\n\n        \n        \n        if (ordinal == null) {\n          ordinal = 0;\n        };\n        \n        if (validate == null) {\n          validate = false;\n        };\n        \n        if (reader == null) {\n          reader = nil;\n        };\n        return (function() {$case = list_type;\n        if (\"ulist\"['$===']($case)) {return marker}\n        else if (\"olist\"['$===']($case)) {return self.$resolve_ordered_list_marker(marker, ordinal, validate, reader)['$[]'](0)}\n        else {return \"<1>\"}})();\n      }, $Parser_resolve_list_marker$56.$$arity = -3);\n      Opal.defs(self, '$resolve_ordered_list_marker', $Parser_resolve_ordered_list_marker$57 = function $$resolve_ordered_list_marker(marker, ordinal, validate, reader) {\n        var $$58, $a, self = this, $case = nil, style = nil, expected = nil, actual = nil;\n\n        \n        \n        if (ordinal == null) {\n          ordinal = 0;\n        };\n        \n        if (validate == null) {\n          validate = false;\n        };\n        \n        if (reader == null) {\n          reader = nil;\n        };\n        if ($truthy(marker['$start_with?'](\".\"))) {\n          return [marker]};\n        $case = (style = $send($$($nesting, 'ORDERED_LIST_STYLES'), 'find', [], ($$58 = function(s){var self = $$58.$$s || this;\n\n        \n          \n          if (s == null) {\n            s = nil;\n          };\n          return $$($nesting, 'OrderedListMarkerRxMap')['$[]'](s)['$match?'](marker);}, $$58.$$s = self, $$58.$$arity = 1, $$58)));\n        if (\"arabic\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $rb_plus(ordinal, 1);\n          actual = marker.$to_i();};\n        marker = \"1.\";}\n        else if (\"loweralpha\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $rb_plus(\"a\"['$[]'](0).$ord(), ordinal).$chr();\n          actual = marker.$chop();};\n        marker = \"a.\";}\n        else if (\"upperalpha\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $rb_plus(\"A\"['$[]'](0).$ord(), ordinal).$chr();\n          actual = marker.$chop();};\n        marker = \"A.\";}\n        else if (\"lowerroman\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $$($nesting, 'Helpers').$int_to_roman($rb_plus(ordinal, 1)).$downcase();\n          actual = marker.$chop();};\n        marker = \"i)\";}\n        else if (\"upperroman\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $$($nesting, 'Helpers').$int_to_roman($rb_plus(ordinal, 1));\n          actual = marker.$chop();};\n        marker = \"I)\";};\n        if ($truthy(($truthy($a = validate) ? expected['$!='](actual) : $a))) {\n          self.$logger().$warn(self.$message_with_context(\"\" + \"list item index: expected \" + (expected) + \", got \" + (actual), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))};\n        return [marker, style];\n      }, $Parser_resolve_ordered_list_marker$57.$$arity = -2);\n      Opal.defs(self, '$is_sibling_list_item?', $Parser_is_sibling_list_item$ques$59 = function(line, list_type, sibling_trait) {\n        var $a, $b, self = this;\n\n        if ($truthy($$$('::', 'Regexp')['$==='](sibling_trait))) {\n          return sibling_trait['$match?'](line)\n        } else {\n          return ($truthy($a = $$($nesting, 'ListRxMap')['$[]'](list_type)['$=~'](line)) ? sibling_trait['$=='](self.$resolve_list_marker(list_type, (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)))) : $a)\n        }\n      }, $Parser_is_sibling_list_item$ques$59.$$arity = 3);\n      Opal.defs(self, '$parse_table', $Parser_parse_table$60 = function $$parse_table(table_reader, parent, attributes) {\n        var $a, $b, $c, $d, self = this, table = nil, colspecs = nil, explicit_colspecs = nil, skipped = nil, $writer = nil, implicit_header = nil, parser_ctx = nil, format = nil, loop_idx = nil, implicit_header_boundary = nil, line = nil, beyond_first = nil, next_cellspec = nil, m = nil, pre_match = nil, post_match = nil, $case = nil, cell_text = nil, $logical_op_recvr_tmp_2 = nil;\n\n        \n        table = $$($nesting, 'Table').$new(parent, attributes);\n        if ($truthy(($truthy($a = attributes['$key?'](\"cols\")) ? (colspecs = self.$parse_colspecs(attributes['$[]'](\"cols\")))['$empty?']()['$!']() : $a))) {\n          \n          table.$create_columns(colspecs);\n          explicit_colspecs = true;};\n        skipped = ($truthy($a = table_reader.$skip_blank_lines()) ? $a : 0);\n        if ($truthy(attributes['$[]'](\"header-option\"))) {\n          \n          $writer = [true];\n          $send(table, 'has_header_option=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy((($a = skipped['$=='](0)) ? attributes['$[]'](\"noheader-option\")['$!']() : skipped['$=='](0)))) {\n          \n          \n          $writer = [\"implicit\"];\n          $send(table, 'has_header_option=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          implicit_header = true;};\n        parser_ctx = $$$($$($nesting, 'Table'), 'ParserContext').$new(table_reader, table, attributes);\n        $a = [parser_ctx.$format(), -1, nil], (format = $a[0]), (loop_idx = $a[1]), (implicit_header_boundary = $a[2]), $a;\n        $a = false; while ($a || $truthy((line = table_reader.$read_line()))) {$a = false;\n          \n          if ($truthy(($truthy($b = (beyond_first = $rb_gt((loop_idx = $rb_plus(loop_idx, 1)), 0))) ? line['$empty?']() : $b))) {\n            \n            line = nil;\n            if ($truthy(implicit_header_boundary)) {\n              implicit_header_boundary = $rb_plus(implicit_header_boundary, 1)};\n          } else if (format['$=='](\"psv\")) {\n            if ($truthy(parser_ctx['$starts_with_delimiter?'](line))) {\n              \n              line = line.$slice(1, line.$length());\n              parser_ctx.$close_open_cell();\n              if ($truthy(implicit_header_boundary)) {\n                implicit_header_boundary = nil};\n            } else {\n              \n              $c = self.$parse_cellspec(line, \"start\", parser_ctx.$delimiter()), $b = Opal.to_ary($c), (next_cellspec = ($b[0] == null ? nil : $b[0])), (line = ($b[1] == null ? nil : $b[1])), $c;\n              if ($truthy(next_cellspec)) {\n                \n                parser_ctx.$close_open_cell(next_cellspec);\n                if ($truthy(implicit_header_boundary)) {\n                  implicit_header_boundary = nil};\n              } else if ($truthy(($truthy($b = implicit_header_boundary) ? implicit_header_boundary['$=='](loop_idx) : $b))) {\n                \n                $writer = [(implicit_header = (implicit_header_boundary = nil))];\n                $send(table, 'has_header_option=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n            }};\n          if ($truthy(beyond_first)) {\n          } else {\n            \n            table_reader.$mark();\n            if ($truthy(implicit_header)) {\n              if ($truthy(($truthy($b = table_reader['$has_more_lines?']()) ? table_reader.$peek_line()['$empty?']() : $b))) {\n                implicit_header_boundary = 1\n              } else {\n                \n                $writer = [(implicit_header = nil)];\n                $send(table, 'has_header_option=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              }};\n          };\n          $b = false; while ($b || $truthy(true)) {$b = false;\n            if ($truthy(($truthy($c = line) ? (m = parser_ctx.$match_delimiter(line)) : $c))) {\n              \n              $c = [m.$pre_match(), m.$post_match()], (pre_match = $c[0]), (post_match = $c[1]), $c;\n              $case = format;\n              if (\"csv\"['$===']($case)) {\n              if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?'](pre_match))) {\n                \n                parser_ctx.$skip_past_delimiter(pre_match);\n                if ($truthy((line = post_match)['$empty?']())) {\n                  break;};\n                $b = true; continue;;};\n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (pre_match)];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;}\n              else if (\"dsv\"['$===']($case)) {\n              if ($truthy(pre_match['$end_with?'](\"\\\\\"))) {\n                \n                parser_ctx.$skip_past_escaped_delimiter(pre_match);\n                if ($truthy((line = post_match)['$empty?']())) {\n                  \n                  \n                  $writer = [\"\" + (parser_ctx.$buffer()) + ($$($nesting, 'LF'))];\n                  $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  parser_ctx.$keep_cell_open();\n                  break;;};\n                $b = true; continue;;};\n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (pre_match)];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;}\n              else {\n              if ($truthy(pre_match['$end_with?'](\"\\\\\"))) {\n                \n                parser_ctx.$skip_past_escaped_delimiter(pre_match);\n                if ($truthy((line = post_match)['$empty?']())) {\n                  \n                  \n                  $writer = [\"\" + (parser_ctx.$buffer()) + ($$($nesting, 'LF'))];\n                  $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  parser_ctx.$keep_cell_open();\n                  break;;};\n                $b = true; continue;;};\n              $d = self.$parse_cellspec(pre_match), $c = Opal.to_ary($d), (next_cellspec = ($c[0] == null ? nil : $c[0])), (cell_text = ($c[1] == null ? nil : $c[1])), $d;\n              parser_ctx.$push_cellspec(next_cellspec);\n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (cell_text)];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n              if ($truthy((line = post_match)['$empty?']())) {\n                line = nil};\n              parser_ctx.$close_cell();\n            } else {\n              \n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (line) + ($$($nesting, 'LF'))];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              $case = format;\n              if (\"csv\"['$===']($case)) {if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?']())) {\n                \n                if ($truthy(($truthy($c = implicit_header_boundary) ? loop_idx['$=='](0) : $c))) {\n                  \n                  $writer = [(implicit_header = (implicit_header_boundary = nil))];\n                  $send(table, 'has_header_option=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                parser_ctx.$keep_cell_open();\n              } else {\n                parser_ctx.$close_cell(true)\n              }}\n              else if (\"dsv\"['$===']($case)) {parser_ctx.$close_cell(true)}\n              else {parser_ctx.$keep_cell_open()};\n              break;;\n            }\n          };\n          if ($truthy(parser_ctx['$cell_open?']())) {\n            if ($truthy(table_reader['$has_more_lines?']())) {\n            } else {\n              parser_ctx.$close_cell(true)\n            }\n          } else {\n            if ($truthy($b = table_reader.$skip_blank_lines())) {\n              $b\n            } else {\n              break;\n            }\n          };\n        };\n        if ($truthy(($truthy($a = (($logical_op_recvr_tmp_2 = table.$attributes()), ($truthy($b = $logical_op_recvr_tmp_2['$[]'](\"colcount\")) ? $b : (($writer = [\"colcount\", table.$columns().$size()]), $send($logical_op_recvr_tmp_2, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])))['$=='](0)) ? $a : explicit_colspecs))) {\n        } else {\n          table.$assign_column_widths()\n        };\n        if ($truthy(implicit_header)) {\n          \n          $writer = [true];\n          $send(table, 'has_header_option=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        table.$partition_header_footer(attributes);\n        return table;\n      }, $Parser_parse_table$60.$$arity = 3);\n      Opal.defs(self, '$parse_colspecs', $Parser_parse_colspecs$61 = function $$parse_colspecs(records) {\n        var $$62, $$63, self = this, specs = nil;\n\n        \n        if ($truthy(records['$include?'](\" \"))) {\n          records = records.$delete(\" \")};\n        if (records['$=='](records.$to_i().$to_s())) {\n          return $send($$$('::', 'Array'), 'new', [records.$to_i()], ($$62 = function(){var self = $$62.$$s || this;\n\n          return $hash2([\"width\"], {\"width\": 1})}, $$62.$$s = self, $$62.$$arity = 0, $$62))};\n        specs = [];\n        $send((function() {if ($truthy(records['$include?'](\",\"))) {\n          \n          return records.$split(\",\", -1);\n        } else {\n          \n          return records.$split(\";\", -1);\n        }; return nil; })(), 'each', [], ($$63 = function(record){var self = $$63.$$s || this, $a, $b, $$64, m = nil, spec = nil, colspec = nil, rowspec = nil, $writer = nil, width = nil;\n\n        \n          \n          if (record == null) {\n            record = nil;\n          };\n          if ($truthy(record['$empty?']())) {\n            return specs['$<<']($hash2([\"width\"], {\"width\": 1}))\n          } else if ($truthy((m = $$($nesting, 'ColumnSpecRx').$match(record)))) {\n            \n            spec = $hash2([], {});\n            if ($truthy(m['$[]'](2))) {\n              \n              $b = m['$[]'](2).$split(\".\"), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n              if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellHorzAlignments')['$key?'](colspec) : $a))) {\n                \n                $writer = [\"halign\", $$($nesting, 'TableCellHorzAlignments')['$[]'](colspec)];\n                $send(spec, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellVertAlignments')['$key?'](rowspec) : $a))) {\n                \n                $writer = [\"valign\", $$($nesting, 'TableCellVertAlignments')['$[]'](rowspec)];\n                $send(spec, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};};\n            if ($truthy((width = m['$[]'](3)))) {\n              \n              $writer = [\"width\", (function() {if (width['$=='](\"~\")) {\n                return -1\n              } else {\n                return width.$to_i()\n              }; return nil; })()];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              \n              $writer = [\"width\", 1];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if ($truthy(($truthy($a = m['$[]'](4)) ? $$($nesting, 'TableCellStyles')['$key?'](m['$[]'](4)) : $a))) {\n              \n              $writer = [\"style\", $$($nesting, 'TableCellStyles')['$[]'](m['$[]'](4))];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(m['$[]'](1))) {\n              return $send((1), 'upto', [m['$[]'](1).$to_i()], ($$64 = function(){var self = $$64.$$s || this;\n\n              return specs['$<<'](spec.$merge())}, $$64.$$s = self, $$64.$$arity = 0, $$64))\n            } else {\n              return specs['$<<'](spec)\n            };\n          } else {\n            return nil\n          };}, $$63.$$s = self, $$63.$$arity = 1, $$63));\n        return specs;\n      }, $Parser_parse_colspecs$61.$$arity = 1);\n      Opal.defs(self, '$parse_cellspec', $Parser_parse_cellspec$65 = function $$parse_cellspec(line, pos, delimiter) {\n        var $a, $b, self = this, m = nil, rest = nil, spec_part = nil, _ = nil, spec = nil, colspec = nil, rowspec = nil, $case = nil, $writer = nil;\n\n        \n        \n        if (pos == null) {\n          pos = \"end\";\n        };\n        \n        if (delimiter == null) {\n          delimiter = nil;\n        };\n        $a = [nil, \"\"], (m = $a[0]), (rest = $a[1]), $a;\n        if (pos['$=='](\"start\")) {\n          if ($truthy(line['$include?'](delimiter))) {\n            \n            $b = line.$partition(delimiter), $a = Opal.to_ary($b), (spec_part = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (rest = ($a[2] == null ? nil : $a[2])), $b;\n            if ($truthy((m = $$($nesting, 'CellSpecStartRx').$match(spec_part)))) {\n              if ($truthy(m['$[]'](0)['$empty?']())) {\n                return [$hash2([], {}), rest]}\n            } else {\n              return [nil, line]\n            };\n          } else {\n            return [nil, line]\n          }\n        } else if ($truthy((m = $$($nesting, 'CellSpecEndRx').$match(line)))) {\n          \n          if ($truthy(m['$[]'](0).$lstrip()['$empty?']())) {\n            return [$hash2([], {}), line.$rstrip()]};\n          rest = m.$pre_match();\n        } else {\n          return [$hash2([], {}), line]\n        };\n        spec = $hash2([], {});\n        if ($truthy(m['$[]'](1))) {\n          \n          $b = m['$[]'](1).$split(\".\"), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n          colspec = (function() {if ($truthy(colspec['$nil_or_empty?']())) {\n            return 1\n          } else {\n            return colspec.$to_i()\n          }; return nil; })();\n          rowspec = (function() {if ($truthy(rowspec['$nil_or_empty?']())) {\n            return 1\n          } else {\n            return rowspec.$to_i()\n          }; return nil; })();\n          $case = m['$[]'](2);\n          if (\"+\"['$===']($case)) {\n          if (colspec['$=='](1)) {\n          } else {\n            \n            $writer = [\"colspan\", colspec];\n            $send(spec, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          if (rowspec['$=='](1)) {\n          } else {\n            \n            $writer = [\"rowspan\", rowspec];\n            $send(spec, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };}\n          else if (\"*\"['$===']($case)) {if (colspec['$=='](1)) {\n          } else {\n            \n            $writer = [\"repeatcol\", colspec];\n            $send(spec, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          }};};\n        if ($truthy(m['$[]'](3))) {\n          \n          $b = m['$[]'](3).$split(\".\"), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellHorzAlignments')['$key?'](colspec) : $a))) {\n            \n            $writer = [\"halign\", $$($nesting, 'TableCellHorzAlignments')['$[]'](colspec)];\n            $send(spec, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellVertAlignments')['$key?'](rowspec) : $a))) {\n            \n            $writer = [\"valign\", $$($nesting, 'TableCellVertAlignments')['$[]'](rowspec)];\n            $send(spec, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};};\n        if ($truthy(($truthy($a = m['$[]'](4)) ? $$($nesting, 'TableCellStyles')['$key?'](m['$[]'](4)) : $a))) {\n          \n          $writer = [\"style\", $$($nesting, 'TableCellStyles')['$[]'](m['$[]'](4))];\n          $send(spec, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        return [spec, rest];\n      }, $Parser_parse_cellspec$65.$$arity = -2);\n      Opal.defs(self, '$parse_style_attribute', $Parser_parse_style_attribute$66 = function $$parse_style_attribute(attributes, reader) {\n        var $a, $b, $$67, $$68, self = this, raw_style = nil, name = nil, accum = nil, parsed_attrs = nil, parsed_style = nil, $writer = nil, existing_role = nil;\n\n        \n        \n        if (reader == null) {\n          reader = nil;\n        };\n        if ($truthy(($truthy($a = ($truthy($b = (raw_style = attributes['$[]'](1))) ? raw_style['$include?'](\" \")['$!']() : $b)) ? $$($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {\n          \n          name = nil;\n          accum = \"\";\n          parsed_attrs = $hash2([], {});\n          $send(raw_style, 'each_char', [], ($$67 = function(c){var self = $$67.$$s || this, $case = nil;\n\n          \n            \n            if (c == null) {\n              c = nil;\n            };\n            return (function() {$case = c;\n            if (\".\"['$===']($case)) {\n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            accum = \"\";\n            return (name = \"role\");}\n            else if (\"#\"['$===']($case)) {\n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            accum = \"\";\n            return (name = \"id\");}\n            else if (\"%\"['$===']($case)) {\n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            accum = \"\";\n            return (name = \"option\");}\n            else {return (accum = $rb_plus(accum, c))}})();}, $$67.$$s = self, $$67.$$arity = 1, $$67));\n          if ($truthy(name)) {\n            \n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            if ($truthy((parsed_style = parsed_attrs['$[]'](\"style\")))) {\n              \n              $writer = [\"style\", parsed_style];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(parsed_attrs['$key?'](\"id\"))) {\n              \n              $writer = [\"id\", parsed_attrs['$[]'](\"id\")];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(parsed_attrs['$key?'](\"role\"))) {\n              \n              $writer = [\"role\", (function() {if ($truthy((existing_role = attributes['$[]'](\"role\"))['$nil_or_empty?']())) {\n                \n                return parsed_attrs['$[]'](\"role\").$join(\" \");\n              } else {\n                return \"\" + (existing_role) + \" \" + (parsed_attrs['$[]'](\"role\").$join(\" \"))\n              }; return nil; })()];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(parsed_attrs['$key?'](\"option\"))) {\n              $send(parsed_attrs['$[]'](\"option\"), 'each', [], ($$68 = function(opt){var self = $$68.$$s || this;\n\n              \n                \n                if (opt == null) {\n                  opt = nil;\n                };\n                $writer = [\"\" + (opt) + \"-option\", \"\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];}, $$68.$$s = self, $$68.$$arity = 1, $$68))};\n            return parsed_style;\n          } else {\n            \n            $writer = [\"style\", raw_style];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n        } else {\n          \n          $writer = [\"style\", raw_style];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n      }, $Parser_parse_style_attribute$66.$$arity = -2);\n      Opal.defs(self, '$yield_buffered_attribute', $Parser_yield_buffered_attribute$69 = function $$yield_buffered_attribute(attrs, name, value, reader) {\n        var $a, self = this, $writer = nil;\n\n        \n        if ($truthy(name)) {\n          if ($truthy(value['$empty?']())) {\n            if ($truthy(reader)) {\n              self.$logger().$warn(self.$message_with_context(\"\" + \"invalid empty \" + (name) + \" detected in style attribute\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})))\n            } else {\n              self.$logger().$warn(\"\" + \"invalid empty \" + (name) + \" detected in style attribute\")\n            }\n          } else if (name['$=='](\"id\")) {\n            \n            if ($truthy(attrs['$key?'](\"id\"))) {\n              if ($truthy(reader)) {\n                self.$logger().$warn(self.$message_with_context(\"multiple ids detected in style attribute\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})))\n              } else {\n                self.$logger().$warn(\"multiple ids detected in style attribute\")\n              }};\n            \n            $writer = [name, value];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            ($truthy($a = attrs['$[]'](name)) ? $a : (($writer = [name, []]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<'](value)\n          }\n        } else if ($truthy(value['$empty?']())) {\n        } else {\n          \n          $writer = [\"style\", value];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        return nil;\n      }, $Parser_yield_buffered_attribute$69.$$arity = 4);\n      Opal.defs(self, '$adjust_indentation!', $Parser_adjust_indentation$excl$70 = function(lines, indent_size, tab_size) {\n        var $a, $$71, $$72, $$75, $$76, $$77, $$78, self = this, full_tab_space = nil, block_indent = nil, new_block_indent = nil;\n\n        \n        \n        if (indent_size == null) {\n          indent_size = 0;\n        };\n        \n        if (tab_size == null) {\n          tab_size = 0;\n        };\n        if ($truthy(lines['$empty?']())) {\n          return nil};\n        if ($truthy(($truthy($a = $rb_gt(tab_size, 0)) ? $send(lines, 'any?', [], ($$71 = function(line){var self = $$71.$$s || this;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          return line['$include?']($$($nesting, 'TAB'));}, $$71.$$s = self, $$71.$$arity = 1, $$71)) : $a))) {\n          \n          full_tab_space = $rb_times(\" \", tab_size);\n          (function(){var $brk = Opal.new_brk(); try {return $send(lines, 'map!', [], ($$72 = function(line){var self = $$72.$$s || this, $b, $$73, $$74, tab_idx = nil, leading_tabs = nil, spaces_added = nil, idx = nil, result = nil;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            if ($truthy(($truthy($b = line['$empty?']()) ? $b : (tab_idx = line.$index($$($nesting, 'TAB')))['$nil?']()))) {\n              return line\n            } else {\n              \n              if (tab_idx['$=='](0)) {\n                \n                leading_tabs = 0;\n                (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_byte', [], ($$73 = function(b){var self = $$73.$$s || this;\n\n                \n                  \n                  if (b == null) {\n                    b = nil;\n                  };\n                  if (b['$=='](9)) {\n                  } else {\n                    \n                    Opal.brk(nil, $brk)\n                  };\n                  return (leading_tabs = $rb_plus(leading_tabs, 1));}, $$73.$$s = self, $$73.$$brk = $brk, $$73.$$arity = 1, $$73))\n                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n                line = \"\" + ($rb_times(full_tab_space, leading_tabs)) + (line.$slice(leading_tabs, line.$length()));\n                if ($truthy(line['$include?']($$($nesting, 'TAB')))) {\n                } else {\n                  return line;\n                };};\n              spaces_added = 0;\n              idx = 0;\n              result = \"\";\n              $send(line, 'each_char', [], ($$74 = function(c){var self = $$74.$$s || this, offset = nil, spaces = nil;\n\n              \n                \n                if (c == null) {\n                  c = nil;\n                };\n                if (c['$==']($$($nesting, 'TAB'))) {\n                  if ((offset = $rb_plus(idx, spaces_added))['$%'](tab_size)['$=='](0)) {\n                    \n                    spaces_added = $rb_plus(spaces_added, $rb_minus(tab_size, 1));\n                    result = $rb_plus(result, full_tab_space);\n                  } else {\n                    \n                    if ((spaces = $rb_minus(tab_size, offset['$%'](tab_size)))['$=='](1)) {\n                    } else {\n                      spaces_added = $rb_plus(spaces_added, $rb_minus(spaces, 1))\n                    };\n                    result = $rb_plus(result, $rb_times(\" \", spaces));\n                  }\n                } else {\n                  result = $rb_plus(result, c)\n                };\n                return (idx = $rb_plus(idx, 1));}, $$74.$$s = self, $$74.$$arity = 1, $$74));\n              return result;\n            };}, $$72.$$s = self, $$72.$$brk = $brk, $$72.$$arity = 1, $$72))\n          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();};\n        if ($truthy($rb_lt(indent_size, 0))) {\n          return nil};\n        block_indent = nil;\n        (function(){var $brk = Opal.new_brk(); try {return $send(lines, 'each', [], ($$75 = function(line){var self = $$75.$$s || this, $b, line_indent = nil;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          if ($truthy(line['$empty?']())) {\n            return nil;};\n          if ((line_indent = $rb_minus(line.$length(), line.$lstrip().$length()))['$=='](0)) {\n            \n            block_indent = nil;\n            \n            Opal.brk(nil, $brk);};\n          if ($truthy(($truthy($b = block_indent) ? $rb_lt(block_indent, line_indent) : $b))) {\n            return nil\n          } else {\n            return (block_indent = line_indent)\n          };}, $$75.$$s = self, $$75.$$brk = $brk, $$75.$$arity = 1, $$75))\n        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n        if (indent_size['$=='](0)) {\n          if ($truthy(block_indent)) {\n            $send(lines, 'map!', [], ($$76 = function(line){var self = $$76.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                \n                return line.$slice(block_indent, line.$length());\n              };}, $$76.$$s = self, $$76.$$arity = 1, $$76))}\n        } else {\n          \n          new_block_indent = $rb_times(\" \", indent_size);\n          if ($truthy(block_indent)) {\n            $send(lines, 'map!', [], ($$77 = function(line){var self = $$77.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                return $rb_plus(new_block_indent, line.$slice(block_indent, line.$length()))\n              };}, $$77.$$s = self, $$77.$$arity = 1, $$77))\n          } else {\n            $send(lines, 'map!', [], ($$78 = function(line){var self = $$78.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                return $rb_plus(new_block_indent, line)\n              };}, $$78.$$s = self, $$78.$$arity = 1, $$78))\n          };\n        };\n        return nil;\n      }, $Parser_adjust_indentation$excl$70.$$arity = -2);\n      Opal.defs(self, '$uniform?', $Parser_uniform$ques$79 = function(str, chr, len) {\n        var self = this;\n\n        return str.$count(chr)['$=='](len)\n      }, $Parser_uniform$ques$79.$$arity = 3);\n      return (Opal.defs(self, '$sanitize_attribute_name', $Parser_sanitize_attribute_name$80 = function $$sanitize_attribute_name(name) {\n        var self = this;\n\n        return name.$gsub($$($nesting, 'InvalidAttributeNameCharsRx'), \"\").$downcase()\n      }, $Parser_sanitize_attribute_name$80.$$arity = 1), nil) && 'sanitize_attribute_name';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/path_resolver\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$include', '$attr_accessor', '$root?', '$posixify', '$expand_path', '$pwd', '$start_with?', '$==', '$match?', '$absolute_path?', '$+', '$length', '$descends_from?', '$slice', '$to_s', '$relative_path_from', '$new', '$include?', '$tr', '$partition_path', '$each', '$pop', '$<<', '$join_path', '$[]', '$web_root?', '$unc?', '$index', '$split', '$delete', '$[]=', '$-', '$join', '$raise', '$!', '$fetch', '$warn', '$logger', '$empty?', '$nil_or_empty?', '$chomp', '$!=', '$>', '$size', '$extract_uri_prefix', '$end_with?', '$gsub', '$private', '$=~']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PathResolver');\n\n      var $nesting = [self].concat($parent_nesting), $PathResolver_initialize$1, $PathResolver_absolute_path$ques$2, $a, $PathResolver_root$ques$3, $PathResolver_unc$ques$4, $PathResolver_web_root$ques$5, $PathResolver_descends_from$ques$6, $PathResolver_relative_path$7, $PathResolver_posixify$8, $PathResolver_expand_path$9, $PathResolver_partition_path$11, $PathResolver_join_path$12, $PathResolver_system_path$13, $PathResolver_web_path$16, $PathResolver_extract_uri_prefix$18;\n\n      self.$$prototype.file_separator = self.$$prototype._partition_path_web = self.$$prototype._partition_path_sys = self.$$prototype.working_dir = nil;\n      \n      self.$include($$($nesting, 'Logging'));\n      Opal.const_set($nesting[0], 'DOT', \".\");\n      Opal.const_set($nesting[0], 'DOT_DOT', \"..\");\n      Opal.const_set($nesting[0], 'DOT_SLASH', \"./\");\n      Opal.const_set($nesting[0], 'SLASH', \"/\");\n      Opal.const_set($nesting[0], 'BACKSLASH', \"\\\\\");\n      Opal.const_set($nesting[0], 'DOUBLE_SLASH', \"//\");\n      Opal.const_set($nesting[0], 'WindowsRootRx', /^(?:[a-zA-Z]:)?[\\\\\\/]/);\n      self.$attr_accessor(\"file_separator\");\n      self.$attr_accessor(\"working_dir\");\n      \n      Opal.def(self, '$initialize', $PathResolver_initialize$1 = function $$initialize(file_separator, working_dir) {\n        var $a, $b, self = this;\n\n        \n        \n        if (file_separator == null) {\n          file_separator = nil;\n        };\n        \n        if (working_dir == null) {\n          working_dir = nil;\n        };\n        self.file_separator = ($truthy($a = ($truthy($b = file_separator) ? $b : $$$($$$('::', 'File'), 'ALT_SEPARATOR'))) ? $a : $$$($$$('::', 'File'), 'SEPARATOR'));\n        self.working_dir = (function() {if ($truthy(working_dir)) {\n          \n          if ($truthy(self['$root?'](working_dir))) {\n            \n            return self.$posixify(working_dir);\n          } else {\n            \n            return $$$('::', 'File').$expand_path(working_dir);\n          };\n        } else {\n          return $$$('::', 'Dir').$pwd()\n        }; return nil; })();\n        self._partition_path_sys = $hash2([], {});\n        return (self._partition_path_web = $hash2([], {}));\n      }, $PathResolver_initialize$1.$$arity = -1);\n      \n      Opal.def(self, '$absolute_path?', $PathResolver_absolute_path$ques$2 = function(path) {\n        var $a, $b, self = this;\n\n        return ($truthy($a = path['$start_with?']($$($nesting, 'SLASH'))) ? $a : (($b = self.file_separator['$==']($$($nesting, 'BACKSLASH'))) ? $$($nesting, 'WindowsRootRx')['$match?'](path) : self.file_separator['$==']($$($nesting, 'BACKSLASH'))))\n      }, $PathResolver_absolute_path$ques$2.$$arity = 1);\n      if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) ? $$$('::', 'JAVASCRIPT_IO_MODULE')['$=='](\"xmlhttprequest\") : $$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")))) {\n        \n        Opal.def(self, '$root?', $PathResolver_root$ques$3 = function(path) {\n          var $a, self = this;\n\n          return ($truthy($a = self['$absolute_path?'](path)) ? $a : path['$start_with?'](\"file://\", \"http://\", \"https://\"))\n        }, $PathResolver_root$ques$3.$$arity = 1)\n      } else {\n        Opal.alias(self, \"root?\", \"absolute_path?\")\n      };\n      \n      Opal.def(self, '$unc?', $PathResolver_unc$ques$4 = function(path) {\n        var self = this;\n\n        return path['$start_with?']($$($nesting, 'DOUBLE_SLASH'))\n      }, $PathResolver_unc$ques$4.$$arity = 1);\n      \n      Opal.def(self, '$web_root?', $PathResolver_web_root$ques$5 = function(path) {\n        var self = this;\n\n        return path['$start_with?']($$($nesting, 'SLASH'))\n      }, $PathResolver_web_root$ques$5.$$arity = 1);\n      \n      Opal.def(self, '$descends_from?', $PathResolver_descends_from$ques$6 = function(path, base) {\n        var $a, self = this;\n\n        if (base['$=='](path)) {\n          return 0\n        } else if (base['$==']($$($nesting, 'SLASH'))) {\n          return ($truthy($a = path['$start_with?']($$($nesting, 'SLASH'))) ? 1 : $a)\n        } else {\n          return ($truthy($a = path['$start_with?']($rb_plus(base, $$($nesting, 'SLASH')))) ? $rb_plus(base.$length(), 1) : $a)\n        }\n      }, $PathResolver_descends_from$ques$6.$$arity = 2);\n      \n      Opal.def(self, '$relative_path', $PathResolver_relative_path$7 = function $$relative_path(path, base) {\n        var self = this, offset = nil;\n\n        if ($truthy(self['$root?'](path))) {\n          if ($truthy((offset = self['$descends_from?'](path, base)))) {\n            return path.$slice(offset, path.$length())\n          } else {\n            \n            try {\n              return $$($nesting, 'Pathname').$new(path).$relative_path_from($$($nesting, 'Pathname').$new(base)).$to_s()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  return path\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n          }\n        } else {\n          return path\n        }\n      }, $PathResolver_relative_path$7.$$arity = 2);\n      \n      Opal.def(self, '$posixify', $PathResolver_posixify$8 = function $$posixify(path) {\n        var $a, self = this;\n\n        if ($truthy(path)) {\n          if ($truthy((($a = self.file_separator['$==']($$($nesting, 'BACKSLASH'))) ? path['$include?']($$($nesting, 'BACKSLASH')) : self.file_separator['$==']($$($nesting, 'BACKSLASH'))))) {\n            \n            return path.$tr($$($nesting, 'BACKSLASH'), $$($nesting, 'SLASH'));\n          } else {\n            return path\n          }\n        } else {\n          return \"\"\n        }\n      }, $PathResolver_posixify$8.$$arity = 1);\n      Opal.alias(self, \"posixfy\", \"posixify\");\n      \n      Opal.def(self, '$expand_path', $PathResolver_expand_path$9 = function $$expand_path(path) {\n        var $a, $b, $$10, self = this, path_segments = nil, path_root = nil, resolved_segments = nil;\n\n        \n        $b = self.$partition_path(path), $a = Opal.to_ary($b), (path_segments = ($a[0] == null ? nil : $a[0])), (path_root = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy(path['$include?']($$($nesting, 'DOT_DOT')))) {\n          \n          resolved_segments = [];\n          $send(path_segments, 'each', [], ($$10 = function(segment){var self = $$10.$$s || this;\n\n          \n            \n            if (segment == null) {\n              segment = nil;\n            };\n            if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n              return resolved_segments.$pop()\n            } else {\n              return resolved_segments['$<<'](segment)\n            };}, $$10.$$s = self, $$10.$$arity = 1, $$10));\n          return self.$join_path(resolved_segments, path_root);\n        } else {\n          return self.$join_path(path_segments, path_root)\n        };\n      }, $PathResolver_expand_path$9.$$arity = 1);\n      \n      Opal.def(self, '$partition_path', $PathResolver_partition_path$11 = function $$partition_path(path, web) {\n        var self = this, result = nil, cache = nil, posix_path = nil, root = nil, path_segments = nil, $writer = nil;\n\n        \n        \n        if (web == null) {\n          web = nil;\n        };\n        if ($truthy((result = (cache = (function() {if ($truthy(web)) {\n          return self._partition_path_web\n        } else {\n          return self._partition_path_sys\n        }; return nil; })())['$[]'](path)))) {\n          return result};\n        posix_path = self.$posixify(path);\n        if ($truthy(web)) {\n          if ($truthy(self['$web_root?'](posix_path))) {\n            root = $$($nesting, 'SLASH')\n          } else if ($truthy(posix_path['$start_with?']($$($nesting, 'DOT_SLASH')))) {\n            root = $$($nesting, 'DOT_SLASH')}\n        } else if ($truthy(self['$root?'](posix_path))) {\n          if ($truthy(self['$unc?'](posix_path))) {\n            root = $$($nesting, 'DOUBLE_SLASH')\n          } else if ($truthy(posix_path['$start_with?']($$($nesting, 'SLASH')))) {\n            root = $$($nesting, 'SLASH')\n          } else {\n            root = posix_path.$slice(0, $rb_plus(posix_path.$index($$($nesting, 'SLASH')), 1))\n          }\n        } else if ($truthy(posix_path['$start_with?']($$($nesting, 'DOT_SLASH')))) {\n          root = $$($nesting, 'DOT_SLASH')};\n        path_segments = (function() {if ($truthy(root)) {\n          \n          return posix_path.$slice(root.$length(), posix_path.$length());\n        } else {\n          return posix_path\n        }; return nil; })().$split($$($nesting, 'SLASH'));\n        path_segments.$delete($$($nesting, 'DOT'));\n        \n        $writer = [path, [path_segments, root]];\n        $send(cache, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $PathResolver_partition_path$11.$$arity = -2);\n      \n      Opal.def(self, '$join_path', $PathResolver_join_path$12 = function $$join_path(segments, root) {\n        var self = this;\n\n        \n        \n        if (root == null) {\n          root = nil;\n        };\n        if ($truthy(root)) {\n          return \"\" + (root) + (segments.$join($$($nesting, 'SLASH')))\n        } else {\n          \n          return segments.$join($$($nesting, 'SLASH'));\n        };\n      }, $PathResolver_join_path$12.$$arity = -2);\n      \n      Opal.def(self, '$system_path', $PathResolver_system_path$13 = function $$system_path(target, start, jail, opts) {\n        var $a, $b, $$14, $$15, self = this, target_path = nil, target_segments = nil, jail_segments = nil, jail_root = nil, recheck = nil, start_segments = nil, start_root = nil, resolved_segments = nil, unresolved_segments = nil, warned = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        \n        if (jail == null) {\n          jail = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(jail)) {\n          \n          if ($truthy(self['$root?'](jail))) {\n          } else {\n            self.$raise($$$('::', 'SecurityError'), \"\" + \"Jail is not an absolute path: \" + (jail))\n          };\n          jail = self.$posixify(jail);};\n        if ($truthy(target)) {\n          if ($truthy(self['$root?'](target))) {\n            \n            target_path = self.$expand_path(target);\n            if ($truthy(($truthy($a = jail) ? self['$descends_from?'](target_path, jail)['$!']() : $a))) {\n              if ($truthy(opts.$fetch(\"recover\", true))) {\n                \n                self.$logger().$warn(\"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" is outside of jail; recovering automatically\");\n                $b = self.$partition_path(target_path), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b;\n                $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;\n                return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);\n              } else {\n                self.$raise($$$('::', 'SecurityError'), \"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" \" + (target) + \" is outside of jail: \" + (jail) + \" (disallowed in safe mode)\")\n              }};\n            return target_path;\n          } else {\n            $b = self.$partition_path(target), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b\n          }\n        } else {\n          target_segments = []\n        };\n        if ($truthy(target_segments['$empty?']())) {\n          if ($truthy(start['$nil_or_empty?']())) {\n            return ($truthy($a = jail) ? $a : self.working_dir)\n          } else if ($truthy(self['$root?'](start))) {\n            if ($truthy(jail)) {\n              start = self.$posixify(start)\n            } else {\n              return self.$expand_path(start)\n            }\n          } else {\n            \n            $b = self.$partition_path(start), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b;\n            start = ($truthy($a = jail) ? $a : self.working_dir);\n          }\n        } else if ($truthy(start['$nil_or_empty?']())) {\n          start = ($truthy($a = jail) ? $a : self.working_dir)\n        } else if ($truthy(self['$root?'](start))) {\n          if ($truthy(jail)) {\n            start = self.$posixify(start)}\n        } else {\n          start = \"\" + (($truthy($a = jail) ? $a : self.working_dir).$chomp(\"/\")) + \"/\" + (start)\n        };\n        if ($truthy(($truthy($a = ($truthy($b = jail) ? (recheck = self['$descends_from?'](start, jail)['$!']()) : $b)) ? self.file_separator['$==']($$($nesting, 'BACKSLASH')) : $a))) {\n          \n          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (start_root = ($a[1] == null ? nil : $a[1])), $b;\n          $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy(start_root['$!='](jail_root))) {\n            if ($truthy(opts.$fetch(\"recover\", true))) {\n              \n              self.$logger().$warn(\"\" + \"start path for \" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" is outside of jail root; recovering automatically\");\n              start_segments = jail_segments;\n              recheck = false;\n            } else {\n              self.$raise($$$('::', 'SecurityError'), \"\" + \"start path for \" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" \" + (start) + \" refers to location outside jail root: \" + (jail) + \" (disallowed in safe mode)\")\n            }};\n        } else {\n          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b\n        };\n        if ($truthy((resolved_segments = $rb_plus(start_segments, target_segments))['$include?']($$($nesting, 'DOT_DOT')))) {\n          \n          $a = [resolved_segments, []], (unresolved_segments = $a[0]), (resolved_segments = $a[1]), $a;\n          if ($truthy(jail)) {\n            \n            if ($truthy(jail_segments)) {\n            } else {\n              $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), $b\n            };\n            warned = false;\n            $send(unresolved_segments, 'each', [], ($$14 = function(segment){var self = $$14.$$s || this, $c;\n\n            \n              \n              if (segment == null) {\n                segment = nil;\n              };\n              if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n                if ($truthy($rb_gt(resolved_segments.$size(), jail_segments.$size()))) {\n                  return resolved_segments.$pop()\n                } else if ($truthy(opts.$fetch(\"recover\", true))) {\n                  if ($truthy(warned)) {\n                    return nil\n                  } else {\n                    \n                    self.$logger().$warn(\"\" + (($truthy($c = opts['$[]'](\"target_name\")) ? $c : \"path\")) + \" has illegal reference to ancestor of jail; recovering automatically\");\n                    return (warned = true);\n                  }\n                } else {\n                  return self.$raise($$$('::', 'SecurityError'), \"\" + (($truthy($c = opts['$[]'](\"target_name\")) ? $c : \"path\")) + \" \" + (target) + \" refers to location outside jail: \" + (jail) + \" (disallowed in safe mode)\")\n                }\n              } else {\n                return resolved_segments['$<<'](segment)\n              };}, $$14.$$s = self, $$14.$$arity = 1, $$14));\n          } else {\n            $send(unresolved_segments, 'each', [], ($$15 = function(segment){var self = $$15.$$s || this;\n\n            \n              \n              if (segment == null) {\n                segment = nil;\n              };\n              if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n                return resolved_segments.$pop()\n              } else {\n                return resolved_segments['$<<'](segment)\n              };}, $$15.$$s = self, $$15.$$arity = 1, $$15))\n          };};\n        if ($truthy(recheck)) {\n          \n          target_path = self.$join_path(resolved_segments, jail_root);\n          if ($truthy(self['$descends_from?'](target_path, jail))) {\n            return target_path\n          } else if ($truthy(opts.$fetch(\"recover\", true))) {\n            \n            self.$logger().$warn(\"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" is outside of jail; recovering automatically\");\n            if ($truthy(jail_segments)) {\n            } else {\n              $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), $b\n            };\n            return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);\n          } else {\n            return self.$raise($$$('::', 'SecurityError'), \"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" \" + (target) + \" is outside of jail: \" + (jail) + \" (disallowed in safe mode)\")\n          };\n        } else {\n          return self.$join_path(resolved_segments, jail_root)\n        };\n      }, $PathResolver_system_path$13.$$arity = -2);\n      \n      Opal.def(self, '$web_path', $PathResolver_web_path$16 = function $$web_path(target, start) {\n        var $a, $b, $$17, self = this, uri_prefix = nil, target_segments = nil, target_root = nil, resolved_segments = nil, resolved_path = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        target = self.$posixify(target);\n        start = self.$posixify(start);\n        if ($truthy(($truthy($a = start['$nil_or_empty?']()) ? $a : self['$web_root?'](target)))) {\n        } else {\n          $b = self.$extract_uri_prefix(\"\" + (start) + ((function() {if ($truthy(start['$end_with?']($$($nesting, 'SLASH')))) {\n            return \"\"\n          } else {\n            return $$($nesting, 'SLASH')\n          }; return nil; })()) + (target)), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (uri_prefix = ($a[1] == null ? nil : $a[1])), $b\n        };\n        $b = self.$partition_path(target, true), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (target_root = ($a[1] == null ? nil : $a[1])), $b;\n        resolved_segments = [];\n        $send(target_segments, 'each', [], ($$17 = function(segment){var self = $$17.$$s || this, $c;\n\n        \n          \n          if (segment == null) {\n            segment = nil;\n          };\n          if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n            if ($truthy(resolved_segments['$empty?']())) {\n              if ($truthy(($truthy($c = target_root) ? target_root['$!=']($$($nesting, 'DOT_SLASH')) : $c))) {\n                return nil\n              } else {\n                return resolved_segments['$<<'](segment)\n              }\n            } else if (resolved_segments['$[]'](-1)['$==']($$($nesting, 'DOT_DOT'))) {\n              return resolved_segments['$<<'](segment)\n            } else {\n              return resolved_segments.$pop()\n            }\n          } else {\n            return resolved_segments['$<<'](segment)\n          };}, $$17.$$s = self, $$17.$$arity = 1, $$17));\n        if ($truthy((resolved_path = self.$join_path(resolved_segments, target_root))['$include?'](\" \"))) {\n          resolved_path = resolved_path.$gsub(\" \", \"%20\")};\n        if ($truthy(uri_prefix)) {\n          return \"\" + (uri_prefix) + (resolved_path)\n        } else {\n          return resolved_path\n        };\n      }, $PathResolver_web_path$16.$$arity = -2);\n      self.$private();\n      return (Opal.def(self, '$extract_uri_prefix', $PathResolver_extract_uri_prefix$18 = function $$extract_uri_prefix(str) {\n        var $a, self = this;\n\n        if ($truthy(($truthy($a = str['$include?'](\":\")) ? $$($nesting, 'UriSniffRx')['$=~'](str) : $a))) {\n          return [str.$slice((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length(), str.$length()), (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))]\n        } else {\n          return str\n        }\n      }, $PathResolver_extract_uri_prefix$18.$$arity = 1), nil) && 'extract_uri_prefix';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/reader\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash = Opal.hash;\n\n  Opal.add_stubs(['$include', '$attr_reader', '$+', '$attr_accessor', '$!', '$===', '$split', '$file', '$dir', '$dirname', '$path', '$basename', '$lineno', '$reverse', '$prepare_lines', '$empty?', '$nil_or_empty?', '$peek_line', '$>', '$slice', '$[]', '$length', '$process_line', '$times', '$shift', '$read_line', '$<<', '$-', '$unshift_all', '$has_more_lines?', '$join', '$read_lines', '$unshift', '$start_with?', '$==', '$*', '$read_lines_until', '$size', '$clear', '$cursor', '$[]=', '$!=', '$fetch', '$cursor_at_mark', '$warn', '$logger', '$message_with_context', '$pop', '$push', '$respond_to?', '$reverse_each', '$new', '$tap', '$each', '$instance_variables', '$instance_variable_get', '$drop', '$instance_variable_set', '$class', '$object_id', '$inspect', '$private', '$prepare_source_array', '$prepare_source_string', '$chomp', '$valid_encoding?', '$to_s', '$raise', '$to_i', '$attributes', '$catalog', '$pop_include', '$parse', '$path=', '$dup', '$end_with?', '$keys', '$rindex', '$rootname', '$key?', '$attr', '$reverse!', '$>=', '$nil?', '$extensions?', '$include_processors?', '$extensions', '$include_processors', '$map', '$skip_front_matter!', '$adjust_indentation!', '$include?', '$=~', '$preprocess_conditional_directive', '$preprocess_include_directive', '$downcase', '$error', '$none?', '$any?', '$all?', '$strip', '$send', '$resolve_expr_val', '$replace_next_line', '$rstrip', '$sub_attributes', '$attribute_missing', '$info', '$parse_attributes', '$find', '$handles?', '$instance', '$process_method', '$safe', '$resolve_include_path', '$method', '$split_delimited_value', '$partition', '$<', '$to_a', '$uniq', '$sort', '$call', '$each_line', '$infinite?', '$push_include', '$delete', '$first', '$values', '$value?', '$create_include_cursor', '$delete_at', '$keep_if', '$read', '$uriish?', '$attr?', '$require_library', '$normalize_system_path', '$file?', '$relative_path', '$path_resolver', '$base_dir', '$to_f']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Reader');\n\n      var $nesting = [self].concat($parent_nesting), $Reader_initialize$4, $Reader_has_more_lines$ques$5, $Reader_empty$ques$6, $Reader_next_line_empty$ques$7, $Reader_peek_line$8, $Reader_peek_lines$9, $Reader_read_line$11, $Reader_read_lines$12, $Reader_read$13, $Reader_advance$14, $Reader_unshift_line$15, $Reader_unshift_lines$16, $Reader_replace_next_line$17, $Reader_skip_blank_lines$18, $Reader_skip_comment_lines$19, $Reader_skip_line_comments$20, $Reader_terminate$21, $Reader_read_lines_until$22, $Reader_shift$23, $Reader_unshift$24, $Reader_unshift_all$25, $Reader_unshift_all$27, $Reader_cursor$28, $Reader_cursor_at_line$29, $Reader_cursor_at_mark$30, $Reader_cursor_before_mark$31, $Reader_cursor_at_prev_line$32, $Reader_mark$33, $Reader_line_info$34, $Reader_lines$35, $Reader_string$36, $Reader_source$37, $Reader_save$38, $Reader_restore_save$41, $Reader_discard_save$43, $Reader_to_s$44, $Reader_prepare_lines$45, $Reader_process_line$46;\n\n      self.$$prototype.file = self.$$prototype.lines = self.$$prototype.look_ahead = self.$$prototype.unescape_next_line = self.$$prototype.lineno = self.$$prototype.process_lines = self.$$prototype.dir = self.$$prototype.path = self.$$prototype.mark = self.$$prototype.source_lines = self.$$prototype.saved = nil;\n      \n      self.$include($$($nesting, 'Logging'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Cursor');\n\n        var $nesting = [self].concat($parent_nesting), $Cursor_initialize$1, $Cursor_advance$2, $Cursor_line_info$3;\n\n        self.$$prototype.lineno = self.$$prototype.path = nil;\n        \n        self.$attr_reader(\"file\", \"dir\", \"path\", \"lineno\");\n        \n        Opal.def(self, '$initialize', $Cursor_initialize$1 = function $$initialize(file, dir, path, lineno) {\n          var $a, self = this;\n\n          \n          \n          if (dir == null) {\n            dir = nil;\n          };\n          \n          if (path == null) {\n            path = nil;\n          };\n          \n          if (lineno == null) {\n            lineno = 1;\n          };\n          return $a = [file, dir, path, lineno], (self.file = $a[0]), (self.dir = $a[1]), (self.path = $a[2]), (self.lineno = $a[3]), $a;\n        }, $Cursor_initialize$1.$$arity = -2);\n        \n        Opal.def(self, '$advance', $Cursor_advance$2 = function $$advance(num) {\n          var self = this;\n\n          return (self.lineno = $rb_plus(self.lineno, num))\n        }, $Cursor_advance$2.$$arity = 1);\n        \n        Opal.def(self, '$line_info', $Cursor_line_info$3 = function $$line_info() {\n          var self = this;\n\n          return \"\" + (self.path) + \": line \" + (self.lineno)\n        }, $Cursor_line_info$3.$$arity = 0);\n        return Opal.alias(self, \"to_s\", \"line_info\");\n      })($nesting[0], null, $nesting);\n      self.$attr_reader(\"file\");\n      self.$attr_reader(\"dir\");\n      self.$attr_reader(\"path\");\n      self.$attr_reader(\"lineno\");\n      self.$attr_reader(\"source_lines\");\n      self.$attr_accessor(\"process_lines\");\n      self.$attr_accessor(\"unterminated\");\n      \n      Opal.def(self, '$initialize', $Reader_initialize$4 = function $$initialize(data, cursor, opts) {\n        var $a, $b, self = this;\n\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        \n        if (cursor == null) {\n          cursor = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(cursor['$!']())) {\n          \n          self.file = nil;\n          self.dir = \".\";\n          self.path = \"<stdin>\";\n          self.lineno = 1;\n        } else if ($truthy($$$('::', 'String')['$==='](cursor))) {\n          \n          self.file = cursor;\n          $b = $$$('::', 'File').$split(self.file), $a = Opal.to_ary($b), (self.dir = ($a[0] == null ? nil : $a[0])), (self.path = ($a[1] == null ? nil : $a[1])), $b;\n          self.lineno = 1;\n        } else {\n          \n          if ($truthy((self.file = cursor.$file()))) {\n            \n            self.dir = ($truthy($a = cursor.$dir()) ? $a : $$$('::', 'File').$dirname(self.file));\n            self.path = ($truthy($a = cursor.$path()) ? $a : $$$('::', 'File').$basename(self.file));\n          } else {\n            \n            self.dir = ($truthy($a = cursor.$dir()) ? $a : \".\");\n            self.path = ($truthy($a = cursor.$path()) ? $a : \"<stdin>\");\n          };\n          self.lineno = ($truthy($a = cursor.$lineno()) ? $a : 1);\n        };\n        self.lines = (self.source_lines = self.$prepare_lines(data, opts)).$reverse();\n        self.mark = nil;\n        self.look_ahead = 0;\n        self.process_lines = true;\n        self.unescape_next_line = false;\n        self.unterminated = nil;\n        return (self.saved = nil);\n      }, $Reader_initialize$4.$$arity = -1);\n      \n      Opal.def(self, '$has_more_lines?', $Reader_has_more_lines$ques$5 = function() {\n        var self = this;\n\n        if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return false;\n        } else {\n          return true\n        }\n      }, $Reader_has_more_lines$ques$5.$$arity = 0);\n      \n      Opal.def(self, '$empty?', $Reader_empty$ques$6 = function() {\n        var self = this;\n\n        if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return true;\n        } else {\n          return false\n        }\n      }, $Reader_empty$ques$6.$$arity = 0);\n      Opal.alias(self, \"eof?\", \"empty?\");\n      \n      Opal.def(self, '$next_line_empty?', $Reader_next_line_empty$ques$7 = function() {\n        var self = this;\n\n        return self.$peek_line()['$nil_or_empty?']()\n      }, $Reader_next_line_empty$ques$7.$$arity = 0);\n      \n      Opal.def(self, '$peek_line', $Reader_peek_line$8 = function $$peek_line(direct) {\n        var $a, self = this, line = nil;\n\n        \n        \n        if (direct == null) {\n          direct = false;\n        };\n        if ($truthy(($truthy($a = direct) ? $a : $rb_gt(self.look_ahead, 0)))) {\n          if ($truthy(self.unescape_next_line)) {\n            \n            return (line = self.lines['$[]'](-1)).$slice(1, line.$length());\n          } else {\n            return self.lines['$[]'](-1)\n          }\n        } else if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return nil;\n        } else {\n          return ($truthy($a = self.$process_line(self.lines['$[]'](-1))) ? $a : self.$peek_line())\n        };\n      }, $Reader_peek_line$8.$$arity = -1);\n      \n      Opal.def(self, '$peek_lines', $Reader_peek_lines$9 = function $$peek_lines(num, direct) {\n        var $a, $$10, self = this, old_look_ahead = nil, result = nil;\n\n        \n        \n        if (num == null) {\n          num = nil;\n        };\n        \n        if (direct == null) {\n          direct = false;\n        };\n        old_look_ahead = self.look_ahead;\n        result = [];\n        (function(){var $brk = Opal.new_brk(); try {return $send(($truthy($a = num) ? $a : $$($nesting, 'MAX_INT')), 'times', [], ($$10 = function(){var self = $$10.$$s || this, line = nil;\n          if (self.lineno == null) self.lineno = nil;\n\n        if ($truthy((line = (function() {if ($truthy(direct)) {\n            return self.$shift()\n          } else {\n            return self.$read_line()\n          }; return nil; })()))) {\n            return result['$<<'](line)\n          } else {\n            \n            if ($truthy(direct)) {\n              self.lineno = $rb_minus(self.lineno, 1)};\n            \n            Opal.brk(nil, $brk);\n          }}, $$10.$$s = self, $$10.$$brk = $brk, $$10.$$arity = 0, $$10))\n        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n        if ($truthy(result['$empty?']())) {\n        } else {\n          \n          self.$unshift_all(result);\n          if ($truthy(direct)) {\n            self.look_ahead = old_look_ahead};\n        };\n        return result;\n      }, $Reader_peek_lines$9.$$arity = -1);\n      \n      Opal.def(self, '$read_line', $Reader_read_line$11 = function $$read_line() {\n        var $a, self = this;\n\n        if ($truthy(($truthy($a = $rb_gt(self.look_ahead, 0)) ? $a : self['$has_more_lines?']()))) {\n          return self.$shift()\n        } else {\n          return nil\n        }\n      }, $Reader_read_line$11.$$arity = 0);\n      \n      Opal.def(self, '$read_lines', $Reader_read_lines$12 = function $$read_lines() {\n        var $a, self = this, lines = nil;\n\n        \n        lines = [];\n        while ($truthy(self['$has_more_lines?']())) {\n          lines['$<<'](self.$shift())\n        };\n        return lines;\n      }, $Reader_read_lines$12.$$arity = 0);\n      Opal.alias(self, \"readlines\", \"read_lines\");\n      \n      Opal.def(self, '$read', $Reader_read$13 = function $$read() {\n        var self = this;\n\n        return self.$read_lines().$join($$($nesting, 'LF'))\n      }, $Reader_read$13.$$arity = 0);\n      \n      Opal.def(self, '$advance', $Reader_advance$14 = function $$advance() {\n        var self = this;\n\n        if ($truthy(self.$shift())) {\n          return true\n        } else {\n          return false\n        }\n      }, $Reader_advance$14.$$arity = 0);\n      \n      Opal.def(self, '$unshift_line', $Reader_unshift_line$15 = function $$unshift_line(line_to_restore) {\n        var self = this;\n\n        \n        self.$unshift(line_to_restore);\n        return nil;\n      }, $Reader_unshift_line$15.$$arity = 1);\n      Opal.alias(self, \"restore_line\", \"unshift_line\");\n      \n      Opal.def(self, '$unshift_lines', $Reader_unshift_lines$16 = function $$unshift_lines(lines_to_restore) {\n        var self = this;\n\n        return self.$unshift_all(lines_to_restore)\n      }, $Reader_unshift_lines$16.$$arity = 1);\n      Opal.alias(self, \"restore_lines\", \"unshift_lines\");\n      \n      Opal.def(self, '$replace_next_line', $Reader_replace_next_line$17 = function $$replace_next_line(replacement) {\n        var self = this;\n\n        \n        self.$shift();\n        self.$unshift(replacement);\n        return true;\n      }, $Reader_replace_next_line$17.$$arity = 1);\n      Opal.alias(self, \"replace_line\", \"replace_next_line\");\n      \n      Opal.def(self, '$skip_blank_lines', $Reader_skip_blank_lines$18 = function $$skip_blank_lines() {\n        var $a, self = this, num_skipped = nil, next_line = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return nil};\n        num_skipped = 0;\n        while ($truthy((next_line = self.$peek_line()))) {\n          if ($truthy(next_line['$empty?']())) {\n            \n            self.$shift();\n            num_skipped = $rb_plus(num_skipped, 1);\n          } else {\n            return num_skipped\n          }\n        };\n      }, $Reader_skip_blank_lines$18.$$arity = 0);\n      \n      Opal.def(self, '$skip_comment_lines', $Reader_skip_comment_lines$19 = function $$skip_comment_lines() {\n        var $a, $b, self = this, next_line = nil, ll = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return nil};\n        while ($truthy(($truthy($b = (next_line = self.$peek_line())) ? next_line['$empty?']()['$!']() : $b))) {\n          if ($truthy(next_line['$start_with?'](\"//\"))) {\n            if ($truthy(next_line['$start_with?'](\"///\"))) {\n              if ($truthy(($truthy($b = $rb_gt((ll = next_line.$length()), 3)) ? next_line['$==']($rb_times(\"/\", ll)) : $b))) {\n                self.$read_lines_until($hash2([\"terminator\", \"skip_first_line\", \"read_last_line\", \"skip_processing\", \"context\"], {\"terminator\": next_line, \"skip_first_line\": true, \"read_last_line\": true, \"skip_processing\": true, \"context\": \"comment\"}))\n              } else {\n                break;\n              }\n            } else {\n              self.$shift()\n            }\n          } else {\n            break;\n          }\n        };\n        return nil;\n      }, $Reader_skip_comment_lines$19.$$arity = 0);\n      \n      Opal.def(self, '$skip_line_comments', $Reader_skip_line_comments$20 = function $$skip_line_comments() {\n        var $a, $b, self = this, comment_lines = nil, next_line = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return []};\n        comment_lines = [];\n        while ($truthy(($truthy($b = (next_line = self.$peek_line())) ? next_line['$empty?']()['$!']() : $b))) {\n          if ($truthy(next_line['$start_with?'](\"//\"))) {\n            comment_lines['$<<'](self.$shift())\n          } else {\n            break;\n          }\n        };\n        return comment_lines;\n      }, $Reader_skip_line_comments$20.$$arity = 0);\n      \n      Opal.def(self, '$terminate', $Reader_terminate$21 = function $$terminate() {\n        var self = this;\n\n        \n        self.lineno = $rb_plus(self.lineno, self.lines.$size());\n        self.lines.$clear();\n        self.look_ahead = 0;\n        return nil;\n      }, $Reader_terminate$21.$$arity = 0);\n      \n      Opal.def(self, '$read_lines_until', $Reader_read_lines_until$22 = function $$read_lines_until(options) {\n        var $a, $b, $c, $d, $e, $f, $iter = $Reader_read_lines_until$22.$$p, $yield = $iter || nil, self = this, result = nil, restore_process_lines = nil, terminator = nil, start_cursor = nil, break_on_blank_lines = nil, break_on_list_continuation = nil, skip_comments = nil, line_read = nil, line_restored = nil, line = nil, $writer = nil, context = nil;\n\n        if ($iter) $Reader_read_lines_until$22.$$p = null;\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        result = [];\n        if ($truthy(($truthy($a = self.process_lines) ? options['$[]'](\"skip_processing\") : $a))) {\n          \n          self.process_lines = false;\n          restore_process_lines = true;};\n        if ($truthy((terminator = options['$[]'](\"terminator\")))) {\n          \n          start_cursor = ($truthy($a = options['$[]'](\"cursor\")) ? $a : self.$cursor());\n          break_on_blank_lines = false;\n          break_on_list_continuation = false;\n        } else {\n          \n          break_on_blank_lines = options['$[]'](\"break_on_blank_lines\");\n          break_on_list_continuation = options['$[]'](\"break_on_list_continuation\");\n        };\n        skip_comments = options['$[]'](\"skip_line_comments\");\n        line_read = (line_restored = nil);\n        if ($truthy(options['$[]'](\"skip_first_line\"))) {\n          self.$shift()};\n        while ($truthy((line = self.$read_line()))) {\n          \n          if ($truthy((function() {if ($truthy(terminator)) {\n            return line['$=='](terminator)\n          } else {\n            \n            return ($truthy($b = ($truthy($c = ($truthy($d = break_on_blank_lines) ? line['$empty?']() : $d)) ? $c : ($truthy($d = ($truthy($e = ($truthy($f = break_on_list_continuation) ? line_read : $f)) ? line['$==']($$($nesting, 'LIST_CONTINUATION')) : $e)) ? (($writer = [\"preserve_last_line\", true]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]) : $d))) ? $b : (($c = ($yield !== nil)) ? Opal.yield1($yield, line) : ($yield !== nil)));\n          }; return nil; })())) {\n            \n            if ($truthy(options['$[]'](\"read_last_line\"))) {\n              result['$<<'](line)};\n            if ($truthy(options['$[]'](\"preserve_last_line\"))) {\n              \n              self.$unshift(line);\n              line_restored = true;};\n            break;;};\n          if ($truthy(($truthy($b = ($truthy($c = skip_comments) ? line['$start_with?'](\"//\") : $c)) ? line['$start_with?'](\"///\")['$!']() : $b))) {\n          } else {\n            \n            result['$<<'](line);\n            line_read = true;\n          };\n        };\n        if ($truthy(restore_process_lines)) {\n          \n          self.process_lines = true;\n          if ($truthy(($truthy($a = line_restored) ? terminator['$!']() : $a))) {\n            self.look_ahead = $rb_minus(self.look_ahead, 1)};};\n        if ($truthy(($truthy($a = ($truthy($b = terminator) ? terminator['$!='](line) : $b)) ? (context = options.$fetch(\"context\", terminator)) : $a))) {\n          \n          if (start_cursor['$=='](\"at_mark\")) {\n            start_cursor = self.$cursor_at_mark()};\n          self.$logger().$warn(self.$message_with_context(\"\" + \"unterminated \" + (context) + \" block\", $hash2([\"source_location\"], {\"source_location\": start_cursor})));\n          self.unterminated = true;};\n        return result;\n      }, $Reader_read_lines_until$22.$$arity = -1);\n      \n      Opal.def(self, '$shift', $Reader_shift$23 = function $$shift() {\n        var self = this;\n\n        \n        self.lineno = $rb_plus(self.lineno, 1);\n        if (self.look_ahead['$=='](0)) {\n        } else {\n          self.look_ahead = $rb_minus(self.look_ahead, 1)\n        };\n        return self.lines.$pop();\n      }, $Reader_shift$23.$$arity = 0);\n      \n      Opal.def(self, '$unshift', $Reader_unshift$24 = function $$unshift(line) {\n        var self = this;\n\n        \n        self.lineno = $rb_minus(self.lineno, 1);\n        self.look_ahead = $rb_plus(self.look_ahead, 1);\n        self.lines.$push(line);\n        return nil;\n      }, $Reader_unshift$24.$$arity = 1);\n      if ($$$('::', 'RUBY_ENGINE')['$=='](\"jruby\")) {\n        \n        Opal.def(self, '$unshift_all', $Reader_unshift_all$25 = function $$unshift_all(lines_to_restore) {\n          var $$26, self = this;\n\n          \n          self.lineno = $rb_minus(self.lineno, lines_to_restore.$size());\n          self.look_ahead = $rb_plus(self.look_ahead, lines_to_restore.$size());\n          if ($truthy(lines_to_restore['$respond_to?'](\"reverse\"))) {\n            $send(self.lines, 'push', Opal.to_a(lines_to_restore.$reverse()))\n          } else {\n            $send(lines_to_restore, 'reverse_each', [], ($$26 = function(it){var self = $$26.$$s || this;\n              if (self.lines == null) self.lines = nil;\n\n            \n              \n              if (it == null) {\n                it = nil;\n              };\n              return self.lines.$push(it);}, $$26.$$s = self, $$26.$$arity = 1, $$26))\n          };\n          return nil;\n        }, $Reader_unshift_all$25.$$arity = 1)\n      } else {\n        \n        Opal.def(self, '$unshift_all', $Reader_unshift_all$27 = function $$unshift_all(lines_to_restore) {\n          var self = this;\n\n          \n          self.lineno = $rb_minus(self.lineno, lines_to_restore.$size());\n          self.look_ahead = $rb_plus(self.look_ahead, lines_to_restore.$size());\n          $send(self.lines, 'push', Opal.to_a(lines_to_restore.$reverse()));\n          return nil;\n        }, $Reader_unshift_all$27.$$arity = 1)\n      };\n      \n      Opal.def(self, '$cursor', $Reader_cursor$28 = function $$cursor() {\n        var self = this;\n\n        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, self.lineno)\n      }, $Reader_cursor$28.$$arity = 0);\n      \n      Opal.def(self, '$cursor_at_line', $Reader_cursor_at_line$29 = function $$cursor_at_line(lineno) {\n        var self = this;\n\n        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, lineno)\n      }, $Reader_cursor_at_line$29.$$arity = 1);\n      \n      Opal.def(self, '$cursor_at_mark', $Reader_cursor_at_mark$30 = function $$cursor_at_mark() {\n        var self = this;\n\n        if ($truthy(self.mark)) {\n          return $send($$($nesting, 'Cursor'), 'new', Opal.to_a(self.mark))\n        } else {\n          return self.$cursor()\n        }\n      }, $Reader_cursor_at_mark$30.$$arity = 0);\n      \n      Opal.def(self, '$cursor_before_mark', $Reader_cursor_before_mark$31 = function $$cursor_before_mark() {\n        var $a, $b, self = this, m_file = nil, m_dir = nil, m_path = nil, m_lineno = nil;\n\n        if ($truthy(self.mark)) {\n          \n          $b = self.mark, $a = Opal.to_ary($b), (m_file = ($a[0] == null ? nil : $a[0])), (m_dir = ($a[1] == null ? nil : $a[1])), (m_path = ($a[2] == null ? nil : $a[2])), (m_lineno = ($a[3] == null ? nil : $a[3])), $b;\n          return $$($nesting, 'Cursor').$new(m_file, m_dir, m_path, $rb_minus(m_lineno, 1));\n        } else {\n          return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))\n        }\n      }, $Reader_cursor_before_mark$31.$$arity = 0);\n      \n      Opal.def(self, '$cursor_at_prev_line', $Reader_cursor_at_prev_line$32 = function $$cursor_at_prev_line() {\n        var self = this;\n\n        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))\n      }, $Reader_cursor_at_prev_line$32.$$arity = 0);\n      \n      Opal.def(self, '$mark', $Reader_mark$33 = function $$mark() {\n        var self = this;\n\n        return (self.mark = [self.file, self.dir, self.path, self.lineno])\n      }, $Reader_mark$33.$$arity = 0);\n      \n      Opal.def(self, '$line_info', $Reader_line_info$34 = function $$line_info() {\n        var self = this;\n\n        return \"\" + (self.path) + \": line \" + (self.lineno)\n      }, $Reader_line_info$34.$$arity = 0);\n      \n      Opal.def(self, '$lines', $Reader_lines$35 = function $$lines() {\n        var self = this;\n\n        return self.lines.$reverse()\n      }, $Reader_lines$35.$$arity = 0);\n      \n      Opal.def(self, '$string', $Reader_string$36 = function $$string() {\n        var self = this;\n\n        return self.lines.$reverse().$join($$($nesting, 'LF'))\n      }, $Reader_string$36.$$arity = 0);\n      \n      Opal.def(self, '$source', $Reader_source$37 = function $$source() {\n        var self = this;\n\n        return self.source_lines.$join($$($nesting, 'LF'))\n      }, $Reader_source$37.$$arity = 0);\n      \n      Opal.def(self, '$save', $Reader_save$38 = function $$save() {\n        var $$39, self = this;\n\n        \n        self.saved = $send($hash2([], {}), 'tap', [], ($$39 = function(accum){var self = $$39.$$s || this, $$40;\n\n        \n          \n          if (accum == null) {\n            accum = nil;\n          };\n          return $send(self.$instance_variables(), 'each', [], ($$40 = function(name){var self = $$40.$$s || this, $a, $writer = nil, val = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            if ($truthy(($truthy($a = name['$=='](\"@saved\")) ? $a : name['$=='](\"@source_lines\")))) {\n              return nil\n            } else {\n              \n              $writer = [name, (function() {if ($truthy($$$('::', 'Array')['$===']((val = self.$instance_variable_get(name))))) {\n                \n                return val.$drop(0);\n              } else {\n                return val\n              }; return nil; })()];\n              $send(accum, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];\n            };}, $$40.$$s = self, $$40.$$arity = 1, $$40));}, $$39.$$s = self, $$39.$$arity = 1, $$39));\n        return nil;\n      }, $Reader_save$38.$$arity = 0);\n      \n      Opal.def(self, '$restore_save', $Reader_restore_save$41 = function $$restore_save() {\n        var $$42, self = this;\n\n        if ($truthy(self.saved)) {\n          \n          $send(self.saved, 'each', [], ($$42 = function(name, val){var self = $$42.$$s || this;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            \n            if (val == null) {\n              val = nil;\n            };\n            return self.$instance_variable_set(name, val);}, $$42.$$s = self, $$42.$$arity = 2, $$42));\n          return (self.saved = nil);\n        } else {\n          return nil\n        }\n      }, $Reader_restore_save$41.$$arity = 0);\n      \n      Opal.def(self, '$discard_save', $Reader_discard_save$43 = function $$discard_save() {\n        var self = this;\n\n        return (self.saved = nil)\n      }, $Reader_discard_save$43.$$arity = 0);\n      \n      Opal.def(self, '$to_s', $Reader_to_s$44 = function $$to_s() {\n        var self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {path: \" + (self.path.$inspect()) + \", line: \" + (self.lineno) + \"}>\"\n      }, $Reader_to_s$44.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$prepare_lines', $Reader_prepare_lines$45 = function $$prepare_lines(data, opts) {\n        var self = this, normalize = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        try {\n          if ($truthy((normalize = opts['$[]'](\"normalize\")))) {\n            if ($truthy($$$('::', 'Array')['$==='](data))) {\n              \n              return $$($nesting, 'Helpers').$prepare_source_array(data, normalize['$!='](\"chomp\"));\n            } else {\n              \n              return $$($nesting, 'Helpers').$prepare_source_string(data, normalize['$!='](\"chomp\"));\n            }\n          } else if ($truthy($$$('::', 'Array')['$==='](data))) {\n            return data.$drop(0)\n          } else if ($truthy(data)) {\n            return data.$chomp().$split($$($nesting, 'LF'), -1)\n          } else {\n            return []\n          }\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              if ($truthy((function() {if ($truthy($$$('::', 'Array')['$==='](data))) {\n                return data.$join()\n              } else {\n                return data.$to_s()\n              }; return nil; })()['$valid_encoding?']())) {\n                return self.$raise()\n              } else {\n                return self.$raise($$$('::', 'ArgumentError'), \"source is either binary or contains invalid Unicode data\")\n              }\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $Reader_prepare_lines$45.$$arity = -2);\n      return (Opal.def(self, '$process_line', $Reader_process_line$46 = function $$process_line(line) {\n        var self = this;\n\n        \n        if ($truthy(self.process_lines)) {\n          self.look_ahead = $rb_plus(self.look_ahead, 1)};\n        return line;\n      }, $Reader_process_line$46.$$arity = 1), nil) && 'process_line';\n    })($nesting[0], null, $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PreprocessorReader');\n\n      var $nesting = [self].concat($parent_nesting), $PreprocessorReader_initialize$47, $PreprocessorReader_has_more_lines$ques$48, $PreprocessorReader_empty$ques$49, $PreprocessorReader_peek_line$50, $PreprocessorReader_push_include$51, $PreprocessorReader_include_depth$52, $PreprocessorReader_exceeds_max_depth$ques$53, $PreprocessorReader_shift$54, $PreprocessorReader_include_processors$ques$55, $PreprocessorReader_create_include_cursor$56, $PreprocessorReader_to_s$57, $PreprocessorReader_prepare_lines$59, $PreprocessorReader_process_line$60, $PreprocessorReader_preprocess_conditional_directive$61, $PreprocessorReader_preprocess_include_directive$66, $PreprocessorReader_resolve_include_path$80, $PreprocessorReader_pop_include$82, $PreprocessorReader_split_delimited_value$83, $PreprocessorReader_skip_front_matter$excl$84, $PreprocessorReader_resolve_expr_val$85;\n\n      self.$$prototype.include_stack = self.$$prototype.lines = self.$$prototype.file = self.$$prototype.dir = self.$$prototype.path = self.$$prototype.lineno = self.$$prototype.maxdepth = self.$$prototype.process_lines = self.$$prototype.includes = self.$$prototype.document = self.$$prototype.unescape_next_line = self.$$prototype.include_processor_extensions = self.$$prototype.look_ahead = self.$$prototype.skipping = self.$$prototype.conditional_stack = nil;\n      \n      self.$attr_reader(\"include_stack\");\n      \n      Opal.def(self, '$initialize', $PreprocessorReader_initialize$47 = function $$initialize(document, data, cursor, opts) {\n        var $a, $iter = $PreprocessorReader_initialize$47.$$p, $yield = $iter || nil, self = this, default_include_depth = nil;\n\n        if ($iter) $PreprocessorReader_initialize$47.$$p = null;\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        \n        if (cursor == null) {\n          cursor = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        self.document = document;\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $PreprocessorReader_initialize$47, false), [data, cursor, opts], null);\n        if ($truthy($rb_gt((default_include_depth = ($truthy($a = document.$attributes()['$[]'](\"max-include-depth\")) ? $a : 64).$to_i()), 0))) {\n          self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": default_include_depth, \"curr\": default_include_depth, \"rel\": default_include_depth})\n        } else {\n          self.maxdepth = nil\n        };\n        self.include_stack = [];\n        self.includes = document.$catalog()['$[]'](\"includes\");\n        self.skipping = false;\n        self.conditional_stack = [];\n        return (self.include_processor_extensions = nil);\n      }, $PreprocessorReader_initialize$47.$$arity = -2);\n      \n      Opal.def(self, '$has_more_lines?', $PreprocessorReader_has_more_lines$ques$48 = function() {\n        var self = this;\n\n        if ($truthy(self.$peek_line())) {\n          return true\n        } else {\n          return false\n        }\n      }, $PreprocessorReader_has_more_lines$ques$48.$$arity = 0);\n      \n      Opal.def(self, '$empty?', $PreprocessorReader_empty$ques$49 = function() {\n        var self = this;\n\n        if ($truthy(self.$peek_line())) {\n          return false\n        } else {\n          return true\n        }\n      }, $PreprocessorReader_empty$ques$49.$$arity = 0);\n      Opal.alias(self, \"eof?\", \"empty?\");\n      \n      Opal.def(self, '$peek_line', $PreprocessorReader_peek_line$50 = function $$peek_line(direct) {\n        var $iter = $PreprocessorReader_peek_line$50.$$p, $yield = $iter || nil, self = this, line = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $PreprocessorReader_peek_line$50.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (direct == null) {\n          direct = false;\n        };\n        if ($truthy((line = $send(self, Opal.find_super_dispatcher(self, 'peek_line', $PreprocessorReader_peek_line$50, false), $zuper, $iter)))) {\n          return line\n        } else if ($truthy(self.include_stack['$empty?']())) {\n          return nil\n        } else {\n          \n          self.$pop_include();\n          return self.$peek_line(direct);\n        };\n      }, $PreprocessorReader_peek_line$50.$$arity = -1);\n      \n      Opal.def(self, '$push_include', $PreprocessorReader_push_include$51 = function $$push_include(data, file, path, lineno, attributes) {\n        var $a, self = this, $writer = nil, dir = nil, rel_maxdepth = nil, curr_maxdepth = nil, abs_maxdepth = nil, leveloffset = nil;\n\n        \n        \n        if (file == null) {\n          file = nil;\n        };\n        \n        if (path == null) {\n          path = nil;\n        };\n        \n        if (lineno == null) {\n          lineno = 1;\n        };\n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        self.include_stack['$<<']([self.lines, self.file, self.dir, self.path, self.lineno, self.maxdepth, self.process_lines]);\n        if ($truthy((self.file = file))) {\n          \n          if ($truthy($$$('::', 'String')['$==='](file))) {\n            self.dir = $$$('::', 'File').$dirname(file)\n          } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n            self.dir = $$$('::', 'URI').$parse($$$('::', 'File').$dirname((file = file.$to_s())))\n          } else {\n            \n            \n            $writer = [(function() {if ((dir = $$$('::', 'File').$dirname(file.$path()))['$=='](\"/\")) {\n              return \"\"\n            } else {\n              return dir\n            }; return nil; })()];\n            $send((self.dir = file.$dup()), 'path=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            file = file.$to_s();\n          };\n          self.path = (path = ($truthy($a = path) ? $a : $$$('::', 'File').$basename(file)));\n          if ($truthy((self.process_lines = $send(file, 'end_with?', Opal.to_a($$($nesting, 'ASCIIDOC_EXTENSIONS').$keys()))))) {\n            \n            $writer = [path.$slice(0, path.$rindex(\".\")), (function() {if ($truthy(attributes['$[]'](\"partial-option\"))) {\n              return nil\n            } else {\n              return true\n            }; return nil; })()];\n            $send(self.includes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n        } else {\n          \n          self.dir = \".\";\n          self.process_lines = true;\n          if ($truthy((self.path = path))) {\n            \n            $writer = [$$($nesting, 'Helpers').$rootname(path), (function() {if ($truthy(attributes['$[]'](\"partial-option\"))) {\n              return nil\n            } else {\n              return true\n            }; return nil; })()];\n            $send(self.includes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            self.path = \"<stdin>\"\n          };\n        };\n        self.lineno = lineno;\n        if ($truthy(($truthy($a = self.maxdepth) ? attributes['$key?'](\"depth\") : $a))) {\n          if ($truthy($rb_gt((rel_maxdepth = attributes['$[]'](\"depth\").$to_i()), 0))) {\n            \n            if ($truthy($rb_gt((curr_maxdepth = $rb_plus(self.include_stack.$size(), rel_maxdepth)), (abs_maxdepth = self.maxdepth['$[]'](\"abs\"))))) {\n              curr_maxdepth = (rel_maxdepth = abs_maxdepth)};\n            self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": abs_maxdepth, \"curr\": curr_maxdepth, \"rel\": rel_maxdepth});\n          } else {\n            self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": self.maxdepth['$[]'](\"abs\"), \"curr\": self.include_stack.$size(), \"rel\": 0})\n          }};\n        if ($truthy((self.lines = self.$prepare_lines(data, $hash2([\"normalize\", \"condense\", \"indent\"], {\"normalize\": ($truthy($a = self.process_lines) ? $a : \"chomp\"), \"condense\": false, \"indent\": attributes['$[]'](\"indent\")})))['$empty?']())) {\n          self.$pop_include()\n        } else {\n          \n          if ($truthy(attributes['$key?'](\"leveloffset\"))) {\n            \n            self.lines = $rb_plus($rb_plus([(function() {if ($truthy((leveloffset = self.document.$attr(\"leveloffset\")))) {\n              return \"\" + \":leveloffset: \" + (leveloffset)\n            } else {\n              return \":leveloffset!:\"\n            }; return nil; })(), \"\"], self.lines.$reverse()), [\"\", \"\" + \":leveloffset: \" + (attributes['$[]'](\"leveloffset\"))]);\n            self.lineno = $rb_minus(self.lineno, 2);\n          } else {\n            self.lines['$reverse!']()\n          };\n          self.look_ahead = 0;\n        };\n        return self;\n      }, $PreprocessorReader_push_include$51.$$arity = -2);\n      \n      Opal.def(self, '$include_depth', $PreprocessorReader_include_depth$52 = function $$include_depth() {\n        var self = this;\n\n        return self.include_stack.$size()\n      }, $PreprocessorReader_include_depth$52.$$arity = 0);\n      \n      Opal.def(self, '$exceeds_max_depth?', $PreprocessorReader_exceeds_max_depth$ques$53 = function() {\n        var $a, $b, self = this;\n\n        return ($truthy($a = ($truthy($b = self.maxdepth) ? $rb_ge(self.include_stack.$size(), self.maxdepth['$[]'](\"curr\")) : $b)) ? self.maxdepth['$[]'](\"rel\") : $a)\n      }, $PreprocessorReader_exceeds_max_depth$ques$53.$$arity = 0);\n      Opal.alias(self, \"exceeded_max_depth?\", \"exceeds_max_depth?\");\n      \n      Opal.def(self, '$shift', $PreprocessorReader_shift$54 = function $$shift() {\n        var $iter = $PreprocessorReader_shift$54.$$p, $yield = $iter || nil, self = this, line = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $PreprocessorReader_shift$54.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        if ($truthy(self.unescape_next_line)) {\n          \n          self.unescape_next_line = false;\n          return (line = $send(self, Opal.find_super_dispatcher(self, 'shift', $PreprocessorReader_shift$54, false), $zuper, $iter)).$slice(1, line.$length());\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'shift', $PreprocessorReader_shift$54, false), $zuper, $iter)\n        }\n      }, $PreprocessorReader_shift$54.$$arity = 0);\n      \n      Opal.def(self, '$include_processors?', $PreprocessorReader_include_processors$ques$55 = function() {\n        var $a, self = this;\n\n        if ($truthy(self.include_processor_extensions['$nil?']())) {\n          if ($truthy(($truthy($a = self.document['$extensions?']()) ? self.document.$extensions()['$include_processors?']() : $a))) {\n            return (self.include_processor_extensions = self.document.$extensions().$include_processors())['$!']()['$!']()\n          } else {\n            return (self.include_processor_extensions = false)\n          }\n        } else {\n          return self.include_processor_extensions['$!='](false)\n        }\n      }, $PreprocessorReader_include_processors$ques$55.$$arity = 0);\n      \n      Opal.def(self, '$create_include_cursor', $PreprocessorReader_create_include_cursor$56 = function $$create_include_cursor(file, path, lineno) {\n        var self = this, dir = nil;\n\n        \n        if ($truthy($$$('::', 'String')['$==='](file))) {\n          dir = $$$('::', 'File').$dirname(file)\n        } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n          dir = $$$('::', 'File').$dirname((file = file.$to_s()))\n        } else {\n          \n          dir = (function() {if ((dir = $$$('::', 'File').$dirname(file.$path()))['$=='](\"\")) {\n            return \"/\"\n          } else {\n            return dir\n          }; return nil; })();\n          file = file.$to_s();\n        };\n        return $$($nesting, 'Cursor').$new(file, dir, path, lineno);\n      }, $PreprocessorReader_create_include_cursor$56.$$arity = 3);\n      \n      Opal.def(self, '$to_s', $PreprocessorReader_to_s$57 = function $$to_s() {\n        var $$58, self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {path: \" + (self.path.$inspect()) + \", line: \" + (self.lineno) + \", include depth: \" + (self.include_stack.$size()) + \", include stack: [\" + ($send(self.include_stack, 'map', [], ($$58 = function(inc){var self = $$58.$$s || this;\n\n        \n          \n          if (inc == null) {\n            inc = nil;\n          };\n          return inc.$to_s();}, $$58.$$s = self, $$58.$$arity = 1, $$58)).$join(\", \")) + \"]}>\"\n      }, $PreprocessorReader_to_s$57.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$prepare_lines', $PreprocessorReader_prepare_lines$59 = function $$prepare_lines(data, opts) {\n        var $a, $b, $iter = $PreprocessorReader_prepare_lines$59.$$p, $yield = $iter || nil, self = this, result = nil, front_matter = nil, $writer = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $PreprocessorReader_prepare_lines$59.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        result = $send(self, Opal.find_super_dispatcher(self, 'prepare_lines', $PreprocessorReader_prepare_lines$59, false), $zuper, $iter);\n        if ($truthy(($truthy($a = ($truthy($b = self.document) ? self.document.$attributes()['$[]'](\"skip-front-matter\") : $b)) ? (front_matter = self['$skip_front_matter!'](result)) : $a))) {\n          \n          $writer = [\"front-matter\", front_matter.$join($$($nesting, 'LF'))];\n          $send(self.document.$attributes(), '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(opts.$fetch(\"condense\", true))) {\n          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last['$empty?']() : $b))) {\n            result.$pop()\n          }};\n        if ($truthy(opts['$[]'](\"indent\"))) {\n          $$($nesting, 'Parser')['$adjust_indentation!'](result, opts['$[]'](\"indent\").$to_i(), self.document.$attr(\"tabsize\").$to_i())};\n        return result;\n      }, $PreprocessorReader_prepare_lines$59.$$arity = -2);\n      \n      Opal.def(self, '$process_line', $PreprocessorReader_process_line$60 = function $$process_line(line) {\n        var $a, $b, self = this;\n\n        \n        if ($truthy(self.process_lines)) {\n        } else {\n          return line\n        };\n        if ($truthy(line['$empty?']())) {\n          \n          self.look_ahead = $rb_plus(self.look_ahead, 1);\n          return line;};\n        if ($truthy(($truthy($a = ($truthy($b = line['$end_with?'](\"]\")) ? line['$start_with?'](\"[\")['$!']() : $b)) ? line['$include?'](\"::\") : $a))) {\n          if ($truthy(($truthy($a = line['$include?'](\"if\")) ? $$($nesting, 'ConditionalDirectiveRx')['$=~'](line) : $a))) {\n            if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$=='](\"\\\\\")) {\n              \n              self.unescape_next_line = true;\n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line.$slice(1, line.$length());\n            } else if ($truthy(self.$preprocess_conditional_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](5))))) {\n              \n              self.$shift();\n              return nil;\n            } else {\n              \n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line;\n            }\n          } else if ($truthy(self.skipping)) {\n            \n            self.$shift();\n            return nil;\n          } else if ($truthy(($truthy($a = line['$start_with?'](\"inc\", \"\\\\inc\")) ? $$($nesting, 'IncludeDirectiveRx')['$=~'](line) : $a))) {\n            if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$=='](\"\\\\\")) {\n              \n              self.unescape_next_line = true;\n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line.$slice(1, line.$length());\n            } else if ($truthy(self.$preprocess_include_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3))))) {\n              return nil\n            } else {\n              \n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line;\n            }\n          } else {\n            \n            self.look_ahead = $rb_plus(self.look_ahead, 1);\n            return line;\n          }\n        } else if ($truthy(self.skipping)) {\n          \n          self.$shift();\n          return nil;\n        } else {\n          \n          self.look_ahead = $rb_plus(self.look_ahead, 1);\n          return line;\n        };\n      }, $PreprocessorReader_process_line$60.$$arity = 1);\n      \n      Opal.def(self, '$preprocess_conditional_directive', $PreprocessorReader_preprocess_conditional_directive$61 = function $$preprocess_conditional_directive(keyword, target, delimiter, text) {\n        var $a, $$62, $$63, $$64, $$65, self = this, no_target = nil, pair = nil, skip = nil, $case = nil, lhs = nil, op = nil, rhs = nil;\n\n        \n        if ($truthy((no_target = target['$empty?']()))) {\n        } else {\n          target = target.$downcase()\n        };\n        if (keyword['$=='](\"endif\")) {\n          \n          if ($truthy(text)) {\n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - text not permitted: endif::\" + (target) + \"[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          } else if ($truthy(self.conditional_stack['$empty?']())) {\n            self.$logger().$error(self.$message_with_context(\"\" + \"unmatched preprocessor directive: endif::\" + (target) + \"[]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          } else if ($truthy(($truthy($a = no_target) ? $a : target['$==']((pair = self.conditional_stack['$[]'](-1))['$[]'](\"target\"))))) {\n            \n            self.conditional_stack.$pop();\n            self.skipping = (function() {if ($truthy(self.conditional_stack['$empty?']())) {\n              return false\n            } else {\n              return self.conditional_stack['$[]'](-1)['$[]'](\"skipping\")\n            }; return nil; })();\n          } else {\n            self.$logger().$error(self.$message_with_context(\"\" + \"mismatched preprocessor directive: endif::\" + (target) + \"[], expected endif::\" + (pair['$[]'](\"target\")) + \"[]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          };\n          return true;\n        } else if ($truthy(self.skipping)) {\n          skip = false\n        } else {\n          $case = keyword;\n          if (\"ifdef\"['$===']($case)) {\n          if ($truthy(no_target)) {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - missing target: ifdef::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return true;};\n          $case = delimiter;\n          if (\",\"['$===']($case)) {skip = $send(target.$split(\",\", -1), 'none?', [], ($$62 = function(name){var self = $$62.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name);}, $$62.$$s = self, $$62.$$arity = 1, $$62))}\n          else if (\"+\"['$===']($case)) {skip = $send(target.$split(\"+\", -1), 'any?', [], ($$63 = function(name){var self = $$63.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name)['$!']();}, $$63.$$s = self, $$63.$$arity = 1, $$63))}\n          else {skip = self.document.$attributes()['$key?'](target)['$!']()};}\n          else if (\"ifndef\"['$===']($case)) {\n          if ($truthy(no_target)) {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - missing target: ifndef::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return true;};\n          $case = delimiter;\n          if (\",\"['$===']($case)) {skip = $send(target.$split(\",\", -1), 'any?', [], ($$64 = function(name){var self = $$64.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name);}, $$64.$$s = self, $$64.$$arity = 1, $$64))}\n          else if (\"+\"['$===']($case)) {skip = $send(target.$split(\"+\", -1), 'all?', [], ($$65 = function(name){var self = $$65.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name);}, $$65.$$s = self, $$65.$$arity = 1, $$65))}\n          else {skip = self.document.$attributes()['$key?'](target)};}\n          else if (\"ifeval\"['$===']($case)) {if ($truthy(no_target)) {\n            if ($truthy(($truthy($a = text) ? $$($nesting, 'EvalExpressionRx')['$=~'](text.$strip()) : $a))) {\n              \n              lhs = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));\n              op = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n              rhs = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));\n              skip = (function() { try {\n                if ($truthy(self.$resolve_expr_val(lhs).$send(op, self.$resolve_expr_val(rhs)))) {\n                  return false\n                } else {\n                  return true\n                }\n              } catch ($err) {\n                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                  try {\n                    return true\n                  } finally { Opal.pop_exception() }\n                } else { throw $err; }\n              }})();\n            } else {\n              \n              self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - \" + ((function() {if ($truthy(text)) {\n                return \"invalid expression\"\n              } else {\n                return \"missing expression\"\n              }; return nil; })()) + \": ifeval::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n              return true;\n            }\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - target not permitted: ifeval::\" + (target) + \"[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return true;\n          }}\n        };\n        if ($truthy(($truthy($a = keyword['$=='](\"ifeval\")) ? $a : text['$!']()))) {\n          \n          if ($truthy(skip)) {\n            self.skipping = true};\n          self.conditional_stack['$<<']($hash2([\"target\", \"skip\", \"skipping\"], {\"target\": target, \"skip\": skip, \"skipping\": self.skipping}));\n        } else if ($truthy(($truthy($a = self.skipping) ? $a : skip))) {\n        } else {\n          \n          self.$replace_next_line(text.$rstrip());\n          self.$unshift(\"\");\n          if ($truthy(text['$start_with?'](\"include::\"))) {\n            self.look_ahead = $rb_minus(self.look_ahead, 1)};\n        };\n        return true;\n      }, $PreprocessorReader_preprocess_conditional_directive$61.$$arity = 4);\n      \n      Opal.def(self, '$preprocess_include_directive', $PreprocessorReader_preprocess_include_directive$66 = function $$preprocess_include_directive(target, attrlist) {\n        var $a, $b, $$67, $$68, $$69, $$70, $$71, $$72, $$74, $$77, $$78, $$79, self = this, doc = nil, expanded_target = nil, attr_missing = nil, ext = nil, parsed_attrs = nil, inc_path = nil, target_type = nil, relpath = nil, $case = nil, reader = nil, read_mode = nil, enc = nil, $writer = nil, read_mode_params = nil, inc_linenos = nil, inc_tags = nil, tag = nil, inc_lines = nil, inc_offset = nil, inc_lineno = nil, tag_stack = nil, tags_selected = nil, active_tag = nil, select = nil, base_select = nil, wildcard = nil, missing_tags = nil, inc_content = nil;\n\n        \n        doc = self.document;\n        if ($truthy(($truthy($a = (expanded_target = target)['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (expanded_target = doc.$sub_attributes(target, $hash2([\"attribute_missing\"], {\"attribute_missing\": (function() {if ((attr_missing = ($truthy($b = doc.$attributes()['$[]'](\"attribute-missing\")) ? $b : $$($nesting, 'Compliance').$attribute_missing()))['$=='](\"warn\")) {\n          return \"drop-line\"\n        } else {\n          return attr_missing\n        }; return nil; })()})))['$empty?']() : $a))) {\n          if ($truthy((($a = attr_missing['$=='](\"drop-line\")) ? doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : attr_missing['$=='](\"drop-line\")))) {\n            \n            $send(self.$logger(), 'info', [], ($$67 = function(){var self = $$67.$$s || this;\n\n            return self.$message_with_context(\"\" + \"include dropped due to missing attribute: include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, $$67.$$s = self, $$67.$$arity = 0, $$67));\n            self.$shift();\n            return true;\n          } else if ($truthy(doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true}))['$[]'](\"optional-option\"))) {\n            \n            $send(self.$logger(), 'info', [], ($$68 = function(){var self = $$68.$$s || this, $c;\n\n            return self.$message_with_context(\"\" + \"optional include dropped \" + ((function() {if ($truthy((($c = attr_missing['$=='](\"warn\")) ? doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : attr_missing['$=='](\"warn\")))) {\n                return \"due to missing attribute\"\n              } else {\n                return \"because resolved target is blank\"\n              }; return nil; })()) + \": include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, $$68.$$s = self, $$68.$$arity = 0, $$68));\n            self.$shift();\n            return true;\n          } else {\n            \n            self.$logger().$warn(self.$message_with_context(\"\" + \"include dropped \" + ((function() {if ($truthy((($a = attr_missing['$=='](\"warn\")) ? doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : attr_missing['$=='](\"warn\")))) {\n              return \"due to missing attribute\"\n            } else {\n              return \"because resolved target is blank\"\n            }; return nil; })()) + \": include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (target) + \"[\" + (attrlist) + \"]\");\n          }\n        } else if ($truthy(($truthy($a = self['$include_processors?']()) ? (ext = $send(self.include_processor_extensions, 'find', [], ($$69 = function(candidate){var self = $$69.$$s || this;\n\n        \n          \n          if (candidate == null) {\n            candidate = nil;\n          };\n          return candidate.$instance()['$handles?'](expanded_target);}, $$69.$$s = self, $$69.$$arity = 1, $$69))) : $a))) {\n          \n          self.$shift();\n          ext.$process_method()['$[]'](doc, self, expanded_target, doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true})));\n          return true;\n        } else if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')))) {\n          return self.$replace_next_line(\"\" + \"link:\" + (expanded_target) + \"[]\")\n        } else if ($truthy(self.maxdepth)) {\n          \n          if ($truthy($rb_ge(self.include_stack.$size(), self.maxdepth['$[]'](\"curr\")))) {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"maximum include depth of \" + (self.maxdepth['$[]'](\"rel\")) + \" exceeded\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return nil;};\n          parsed_attrs = doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true}));\n          $b = self.$resolve_include_path(expanded_target, attrlist, parsed_attrs), $a = Opal.to_ary($b), (inc_path = ($a[0] == null ? nil : $a[0])), (target_type = ($a[1] == null ? nil : $a[1])), (relpath = ($a[2] == null ? nil : $a[2])), $b;\n          $case = target_type;\n          if (\"file\"['$===']($case)) {\n          reader = $$$('::', 'File').$method(\"open\");\n          read_mode = $$($nesting, 'FILE_READ_MODE');}\n          else if (\"uri\"['$===']($case)) {\n          reader = $$$('::', 'OpenURI').$method(\"open_uri\");\n          read_mode = $$($nesting, 'URI_READ_MODE');}\n          else {return inc_path};\n          if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n          } else if ($truthy(($truthy($a = (enc = parsed_attrs['$[]'](\"encoding\"))) ? (function() { try {\n            return $$$('::', 'Encoding').$find(enc)\n          } catch ($err) {\n            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n              try {\n                return nil\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          }})() : $a))) {\n            \n            \n            $writer = [1, enc];\n            $send((read_mode_params = read_mode.$split(\":\")), '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            read_mode = read_mode_params.$join(\":\");};\n          inc_linenos = (inc_tags = nil);\n          if ($truthy(attrlist)) {\n            if ($truthy(parsed_attrs['$key?'](\"lines\"))) {\n              \n              inc_linenos = [];\n              $send(self.$split_delimited_value(parsed_attrs['$[]'](\"lines\")), 'each', [], ($$70 = function(linedef){var self = $$70.$$s || this, $c, $d, from = nil, _ = nil, to = nil;\n\n              \n                \n                if (linedef == null) {\n                  linedef = nil;\n                };\n                if ($truthy(linedef['$include?'](\"..\"))) {\n                  \n                  $d = linedef.$partition(\"..\"), $c = Opal.to_ary($d), (from = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (to = ($c[2] == null ? nil : $c[2])), $d;\n                  return (inc_linenos = $rb_plus(inc_linenos, (function() {if ($truthy(($truthy($c = to['$empty?']()) ? $c : $rb_lt((to = to.$to_i()), 0)))) {\n                    return [from.$to_i(), $$$($$$('::', 'Float'), 'INFINITY')]\n                  } else {\n                    return Opal.Range.$new(from.$to_i(), to, false).$to_a()\n                  }; return nil; })()));\n                } else {\n                  return inc_linenos['$<<'](linedef.$to_i())\n                };}, $$70.$$s = self, $$70.$$arity = 1, $$70));\n              inc_linenos = (function() {if ($truthy(inc_linenos['$empty?']())) {\n                return nil\n              } else {\n                return inc_linenos.$sort().$uniq()\n              }; return nil; })();\n            } else if ($truthy(parsed_attrs['$key?'](\"tag\"))) {\n              if ($truthy(($truthy($a = (tag = parsed_attrs['$[]'](\"tag\"))['$empty?']()) ? $a : tag['$=='](\"!\")))) {\n              } else {\n                inc_tags = (function() {if ($truthy(tag['$start_with?'](\"!\"))) {\n                  return $hash(tag.$slice(1, tag.$length()), false)\n                } else {\n                  return $hash(tag, true)\n                }; return nil; })()\n              }\n            } else if ($truthy(parsed_attrs['$key?'](\"tags\"))) {\n              \n              inc_tags = $hash2([], {});\n              $send(self.$split_delimited_value(parsed_attrs['$[]'](\"tags\")), 'each', [], ($$71 = function(tagdef){var self = $$71.$$s || this, $c;\n\n              \n                \n                if (tagdef == null) {\n                  tagdef = nil;\n                };\n                if ($truthy(($truthy($c = tagdef['$empty?']()) ? $c : tagdef['$=='](\"!\")))) {\n                  return nil\n                } else if ($truthy(tagdef['$start_with?'](\"!\"))) {\n                  \n                  $writer = [tagdef.$slice(1, tagdef.$length()), false];\n                  $send(inc_tags, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  \n                  $writer = [tagdef, true];\n                  $send(inc_tags, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                };}, $$71.$$s = self, $$71.$$arity = 1, $$71));\n              if ($truthy(inc_tags['$empty?']())) {\n                inc_tags = nil};}};\n          if ($truthy(inc_linenos)) {\n            \n            $a = [[], nil, 0], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), $a;\n            \n            try {\n              (function(){var $brk = Opal.new_brk(); try {return $send(reader, 'call', [inc_path, read_mode], ($$72 = function(f){var self = $$72.$$s || this, $$73, select_remaining = nil;\n\n              \n                \n                if (f == null) {\n                  f = nil;\n                };\n                select_remaining = nil;\n                return (function(){var $brk = Opal.new_brk(); try {return $send(f, 'each_line', [], ($$73 = function(l){var self = $$73.$$s || this, $c, $d, select = nil;\n\n                \n                  \n                  if (l == null) {\n                    l = nil;\n                  };\n                  inc_lineno = $rb_plus(inc_lineno, 1);\n                  if ($truthy(($truthy($c = select_remaining) ? $c : ($truthy($d = $$$('::', 'Float')['$===']((select = inc_linenos['$[]'](0)))) ? (select_remaining = select['$infinite?']()) : $d)))) {\n                    \n                    inc_offset = ($truthy($c = inc_offset) ? $c : inc_lineno);\n                    return inc_lines['$<<'](l);\n                  } else {\n                    \n                    if (select['$=='](inc_lineno)) {\n                      \n                      inc_offset = ($truthy($c = inc_offset) ? $c : inc_lineno);\n                      inc_lines['$<<'](l);\n                      inc_linenos.$shift();};\n                    if ($truthy(inc_linenos['$empty?']())) {\n                      \n                      Opal.brk(nil, $brk)\n                    } else {\n                      return nil\n                    };\n                  };}, $$73.$$s = self, $$73.$$brk = $brk, $$73.$$arity = 1, $$73))\n                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();}, $$72.$$s = self, $$72.$$brk = $brk, $$72.$$arity = 1, $$72))\n              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"\" + \"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };;\n            self.$shift();\n            if ($truthy(inc_offset)) {\n              \n              \n              $writer = [\"partial-option\", \"\"];\n              $send(parsed_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);};\n          } else if ($truthy(inc_tags)) {\n            \n            $a = [[], nil, 0, [], $$$('::', 'Set').$new(), nil], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), (tag_stack = $a[3]), (tags_selected = $a[4]), (active_tag = $a[5]), $a;\n            if ($truthy(inc_tags['$key?'](\"**\"))) {\n              \n              select = (base_select = inc_tags.$delete(\"**\"));\n              if ($truthy(inc_tags['$key?'](\"*\"))) {\n                wildcard = inc_tags.$delete(\"*\")\n              } else if ($truthy(($truthy($a = select['$!']()) ? inc_tags.$values().$first()['$=='](false) : $a))) {\n                wildcard = true};\n            } else if ($truthy(inc_tags['$key?'](\"*\"))) {\n              if (inc_tags.$keys().$first()['$=='](\"*\")) {\n                select = (base_select = (wildcard = inc_tags.$delete(\"*\"))['$!']())\n              } else {\n                \n                select = (base_select = false);\n                wildcard = inc_tags.$delete(\"*\");\n              }\n            } else {\n              select = (base_select = inc_tags['$value?'](true)['$!']())\n            };\n            \n            try {\n              $send(reader, 'call', [inc_path, read_mode], ($$74 = function(f){var self = $$74.$$s || this, $c, $$75, dbl_co = nil, dbl_sb = nil;\n\n              \n                \n                if (f == null) {\n                  f = nil;\n                };\n                $c = [\"::\", \"[]\"], (dbl_co = $c[0]), (dbl_sb = $c[1]), $c;\n                return $send(f, 'each_line', [], ($$75 = function(l){var self = $$75.$$s || this, $d, $e, $$76, this_tag = nil, include_cursor = nil, idx = nil;\n\n                \n                  \n                  if (l == null) {\n                    l = nil;\n                  };\n                  inc_lineno = $rb_plus(inc_lineno, 1);\n                  if ($truthy(($truthy($d = ($truthy($e = l['$include?'](dbl_co)) ? l['$include?'](dbl_sb) : $e)) ? $$($nesting, 'TagDirectiveRx')['$=~'](l) : $d))) {\n                    \n                    this_tag = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2));\n                    if ($truthy((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))) {\n                      if (this_tag['$=='](active_tag)) {\n                        \n                        tag_stack.$pop();\n                        return $e = (function() {if ($truthy(tag_stack['$empty?']())) {\n                          return [nil, base_select]\n                        } else {\n                          return tag_stack['$[]'](-1)\n                        }; return nil; })(), $d = Opal.to_ary($e), (active_tag = ($d[0] == null ? nil : $d[0])), (select = ($d[1] == null ? nil : $d[1])), $e;\n                      } else if ($truthy(inc_tags['$key?'](this_tag))) {\n                        \n                        include_cursor = self.$create_include_cursor(inc_path, expanded_target, inc_lineno);\n                        if ($truthy((idx = $send(tag_stack, 'rindex', [], ($$76 = function(key){var self = $$76.$$s || this;\n\n                        \n                          \n                          if (key == null) {\n                            key = nil;\n                          };\n                          return key['$=='](this_tag);}, $$76.$$s = self, $$76.$$arity = 1, $$76.$$has_trailing_comma_in_args = true, $$76))))) {\n                          \n                          if (idx['$=='](0)) {\n                            tag_stack.$shift()\n                          } else {\n                            \n                            tag_stack.$delete_at(idx);\n                          };\n                          return self.$logger().$warn(self.$message_with_context(\"\" + \"mismatched end tag (expected '\" + (active_tag) + \"' but found '\" + (this_tag) + \"') at line \" + (inc_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": include_cursor})));\n                        } else {\n                          return self.$logger().$warn(self.$message_with_context(\"\" + \"unexpected end tag '\" + (this_tag) + \"' at line \" + (inc_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": include_cursor})))\n                        };\n                      } else {\n                        return nil\n                      }\n                    } else if ($truthy(inc_tags['$key?'](this_tag))) {\n                      \n                      if ($truthy((select = inc_tags['$[]'](this_tag)))) {\n                        tags_selected['$<<'](this_tag)};\n                      return tag_stack['$<<']([(active_tag = this_tag), select, inc_lineno]);\n                    } else if ($truthy(wildcard['$nil?']()['$!']())) {\n                      \n                      select = (function() {if ($truthy(($truthy($d = active_tag) ? select['$!']() : $d))) {\n                        return false\n                      } else {\n                        return wildcard\n                      }; return nil; })();\n                      return tag_stack['$<<']([(active_tag = this_tag), select, inc_lineno]);\n                    } else {\n                      return nil\n                    };\n                  } else if ($truthy(select)) {\n                    \n                    inc_offset = ($truthy($d = inc_offset) ? $d : inc_lineno);\n                    return inc_lines['$<<'](l);\n                  } else {\n                    return nil\n                  };}, $$75.$$s = self, $$75.$$arity = 1, $$75));}, $$74.$$s = self, $$74.$$arity = 1, $$74))\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"\" + \"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };;\n            if ($truthy(tag_stack['$empty?']())) {\n            } else {\n              $send(tag_stack, 'each', [], ($$77 = function(tag_name, _, tag_lineno){var self = $$77.$$s || this;\n\n              \n                \n                if (tag_name == null) {\n                  tag_name = nil;\n                };\n                \n                if (_ == null) {\n                  _ = nil;\n                };\n                \n                if (tag_lineno == null) {\n                  tag_lineno = nil;\n                };\n                return self.$logger().$warn(self.$message_with_context(\"\" + \"detected unclosed tag '\" + (tag_name) + \"' starting at line \" + (tag_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": self.$create_include_cursor(inc_path, expanded_target, tag_lineno)})));}, $$77.$$s = self, $$77.$$arity = 3, $$77))\n            };\n            if ($truthy((missing_tags = $rb_minus($send(inc_tags, 'keep_if', [], ($$78 = function(_, v){var self = $$78.$$s || this;\n\n            \n              \n              if (_ == null) {\n                _ = nil;\n              };\n              \n              if (v == null) {\n                v = nil;\n              };\n              return v;}, $$78.$$s = self, $$78.$$arity = 2, $$78)).$keys(), tags_selected.$to_a()))['$empty?']())) {\n            } else {\n              self.$logger().$warn(self.$message_with_context(\"\" + \"tag\" + ((function() {if ($truthy($rb_gt(missing_tags.$size(), 1))) {\n                return \"s\"\n              } else {\n                return \"\"\n              }; return nil; })()) + \" '\" + (missing_tags.$join(\", \")) + \"' not found in include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n            };\n            self.$shift();\n            if ($truthy(inc_offset)) {\n              \n              if ($truthy(($truthy($a = ($truthy($b = base_select) ? wildcard['$!='](false) : $b)) ? inc_tags['$empty?']() : $a))) {\n              } else {\n                \n                $writer = [\"partial-option\", \"\"];\n                $send(parsed_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);};\n          } else {\n            \n            try {\n              \n              inc_content = $send(reader, 'call', [inc_path, read_mode], ($$79 = function(f){var self = $$79.$$s || this;\n\n              \n                \n                if (f == null) {\n                  f = nil;\n                };\n                return f.$read();}, $$79.$$s = self, $$79.$$arity = 1, $$79));\n              self.$shift();\n              self.$push_include(inc_content, inc_path, relpath, 1, parsed_attrs);\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"\" + \"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n          };\n          return true;\n        } else {\n          return nil\n        };\n      }, $PreprocessorReader_preprocess_include_directive$66.$$arity = 2);\n      \n      Opal.def(self, '$resolve_include_path', $PreprocessorReader_resolve_include_path$80 = function $$resolve_include_path(target, attrlist, attributes) {\n        var $a, $b, $$81, self = this, doc = nil, inc_path = nil, relpath = nil;\n\n        \n        doc = self.document;\n        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : (function() {if ($truthy($$$('::', 'String')['$==='](self.dir))) {\n          return nil\n        } else {\n          \n          return (target = \"\" + (self.dir) + \"/\" + (target));\n        }; return nil; })()))) {\n          \n          if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n          } else {\n            return self.$replace_next_line(\"\" + \"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n          };\n          if ($truthy(doc['$attr?'](\"cache-uri\"))) {\n            if ($truthy((($b = $$$('::', 'OpenURI', 'skip_raise')) && ($a = $$$($b, 'Cache', 'skip_raise')) ? 'constant' : nil))) {\n            } else {\n              $$($nesting, 'Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")\n            }\n          } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL')['$!']())) {\n            $$$('::', 'OpenURI')};\n          return [$$$('::', 'URI').$parse(target), \"uri\", target];\n        } else {\n          \n          inc_path = doc.$normalize_system_path(target, self.dir, nil, $hash2([\"target_name\"], {\"target_name\": \"include file\"}));\n          if ($truthy($$$('::', 'File')['$file?'](inc_path))) {\n          } else if ($truthy(attributes['$[]'](\"optional-option\"))) {\n            \n            $send(self.$logger(), 'info', [], ($$81 = function(){var self = $$81.$$s || this;\n\n            return self.$message_with_context(\"\" + \"optional include dropped because include file not found: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, $$81.$$s = self, $$81.$$arity = 0, $$81));\n            self.$shift();\n            return true;\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"include file not found: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (target) + \"[\" + (attrlist) + \"]\");\n          };\n          relpath = doc.$path_resolver().$relative_path(inc_path, doc.$base_dir());\n          return [inc_path, \"file\", relpath];\n        };\n      }, $PreprocessorReader_resolve_include_path$80.$$arity = 3);\n      \n      Opal.def(self, '$pop_include', $PreprocessorReader_pop_include$82 = function $$pop_include() {\n        var $a, $b, self = this;\n\n        if ($truthy(self.include_stack['$empty?']())) {\n          return nil\n        } else {\n          \n          $b = self.include_stack.$pop(), $a = Opal.to_ary($b), (self.lines = ($a[0] == null ? nil : $a[0])), (self.file = ($a[1] == null ? nil : $a[1])), (self.dir = ($a[2] == null ? nil : $a[2])), (self.path = ($a[3] == null ? nil : $a[3])), (self.lineno = ($a[4] == null ? nil : $a[4])), (self.maxdepth = ($a[5] == null ? nil : $a[5])), (self.process_lines = ($a[6] == null ? nil : $a[6])), $b;\n          self.look_ahead = 0;\n          return nil;\n        }\n      }, $PreprocessorReader_pop_include$82.$$arity = 0);\n      \n      Opal.def(self, '$split_delimited_value', $PreprocessorReader_split_delimited_value$83 = function $$split_delimited_value(val) {\n        var self = this;\n\n        if ($truthy(val['$include?'](\",\"))) {\n          \n          return val.$split(\",\");\n        } else {\n          \n          return val.$split(\";\");\n        }\n      }, $PreprocessorReader_split_delimited_value$83.$$arity = 1);\n      \n      Opal.def(self, '$skip_front_matter!', $PreprocessorReader_skip_front_matter$excl$84 = function(data, increment_linenos) {\n        var $a, $b, self = this, front_matter = nil, original_data = nil;\n\n        \n        \n        if (increment_linenos == null) {\n          increment_linenos = true;\n        };\n        front_matter = nil;\n        if (data['$[]'](0)['$=='](\"---\")) {\n          \n          original_data = data.$drop(0);\n          data.$shift();\n          front_matter = [];\n          if ($truthy(increment_linenos)) {\n            self.lineno = $rb_plus(self.lineno, 1)};\n          while ($truthy(($truthy($b = data['$empty?']()['$!']()) ? data['$[]'](0)['$!='](\"---\") : $b))) {\n            \n            front_matter['$<<'](data.$shift());\n            if ($truthy(increment_linenos)) {\n              self.lineno = $rb_plus(self.lineno, 1)};\n          };\n          if ($truthy(data['$empty?']())) {\n            \n            $send(data, 'unshift', Opal.to_a(original_data));\n            if ($truthy(increment_linenos)) {\n              self.lineno = 0};\n            front_matter = nil;\n          } else {\n            \n            data.$shift();\n            if ($truthy(increment_linenos)) {\n              self.lineno = $rb_plus(self.lineno, 1)};\n          };};\n        return front_matter;\n      }, $PreprocessorReader_skip_front_matter$excl$84.$$arity = -2);\n      return (Opal.def(self, '$resolve_expr_val', $PreprocessorReader_resolve_expr_val$85 = function $$resolve_expr_val(val) {\n        var $a, $b, self = this, quoted = nil;\n\n        \n        if ($truthy(($truthy($a = ($truthy($b = val['$start_with?'](\"\\\"\")) ? val['$end_with?'](\"\\\"\") : $b)) ? $a : ($truthy($b = val['$start_with?'](\"'\")) ? val['$end_with?'](\"'\") : $b)))) {\n          \n          quoted = true;\n          val = val.$slice(1, $rb_minus(val.$length(), 1));\n        } else {\n          quoted = false\n        };\n        if ($truthy(val['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n          val = self.document.$sub_attributes(val, $hash2([\"attribute_missing\"], {\"attribute_missing\": \"drop\"}))};\n        if ($truthy(quoted)) {\n          return val\n        } else if ($truthy(val['$empty?']())) {\n          return nil\n        } else if (val['$=='](\"true\")) {\n          return true\n        } else if (val['$=='](\"false\")) {\n          return false\n        } else if ($truthy(val.$rstrip()['$empty?']())) {\n          return \" \"\n        } else if ($truthy(val['$include?'](\".\"))) {\n          return val.$to_f()\n        } else {\n          return val.$to_i()\n        };\n      }, $PreprocessorReader_resolve_expr_val$85.$$arity = 1), nil) && 'resolve_expr_val';\n    })($nesting[0], $$($nesting, 'Reader'), $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/section\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$===', '$+', '$level', '$special', '$generate_id', '$title', '$>', '$==', '$sectnum', '$reftext', '$!', '$empty?', '$sub_placeholder', '$sub_quotes', '$compat_mode', '$[]', '$attributes', '$context', '$assign_numeral', '$class', '$object_id', '$inspect', '$size', '$length', '$chr', '$[]=', '$-', '$gsub', '$downcase', '$delete', '$tr_s', '$end_with?', '$chop', '$start_with?', '$slice', '$key?', '$catalog', '$unique_id_start_index']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Section');\n\n      var $nesting = [self].concat($parent_nesting), $Section_initialize$1, $Section_generate_id$2, $Section_sections$ques$3, $Section_sectnum$4, $Section_xreftext$5, $Section_$lt$lt$6, $Section_to_s$7, $Section_generate_id$8;\n\n      self.$$prototype.document = self.$$prototype.next_section_index = self.$$prototype.level = self.$$prototype.parent = self.$$prototype.numeral = self.$$prototype.numbered = self.$$prototype.sectname = self.$$prototype.title = self.$$prototype.blocks = nil;\n      \n      self.$attr_accessor(\"index\");\n      self.$attr_accessor(\"sectname\");\n      self.$attr_accessor(\"special\");\n      self.$attr_accessor(\"numbered\");\n      self.$attr_reader(\"caption\");\n      \n      Opal.def(self, '$initialize', $Section_initialize$1 = function $$initialize(parent, level, numbered, opts) {\n        var $a, $b, $iter = $Section_initialize$1.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $Section_initialize$1.$$p = null;\n        \n        \n        if (parent == null) {\n          parent = nil;\n        };\n        \n        if (level == null) {\n          level = nil;\n        };\n        \n        if (numbered == null) {\n          numbered = false;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Section_initialize$1, false), [parent, \"section\", opts], null);\n        if ($truthy($$($nesting, 'Section')['$==='](parent))) {\n          $a = [($truthy($b = level) ? $b : $rb_plus(parent.$level(), 1)), parent.$special()], (self.level = $a[0]), (self.special = $a[1]), $a\n        } else {\n          $a = [($truthy($b = level) ? $b : 1), false], (self.level = $a[0]), (self.special = $a[1]), $a\n        };\n        self.numbered = numbered;\n        return (self.index = 0);\n      }, $Section_initialize$1.$$arity = -1);\n      Opal.alias(self, \"name\", \"title\");\n      \n      Opal.def(self, '$generate_id', $Section_generate_id$2 = function $$generate_id() {\n        var self = this;\n\n        return $$($nesting, 'Section').$generate_id(self.$title(), self.document)\n      }, $Section_generate_id$2.$$arity = 0);\n      \n      Opal.def(self, '$sections?', $Section_sections$ques$3 = function() {\n        var self = this;\n\n        return $rb_gt(self.next_section_index, 0)\n      }, $Section_sections$ques$3.$$arity = 0);\n      \n      Opal.def(self, '$sectnum', $Section_sectnum$4 = function $$sectnum(delimiter, append) {\n        var $a, self = this;\n\n        \n        \n        if (delimiter == null) {\n          delimiter = \".\";\n        };\n        \n        if (append == null) {\n          append = nil;\n        };\n        append = ($truthy($a = append) ? $a : (function() {if (append['$=='](false)) {\n          return \"\"\n        } else {\n          return delimiter\n        }; return nil; })());\n        if ($truthy(($truthy($a = $rb_gt(self.level, 1)) ? $$($nesting, 'Section')['$==='](self.parent) : $a))) {\n          return \"\" + (self.parent.$sectnum(delimiter, delimiter)) + (self.numeral) + (append)\n        } else {\n          return \"\" + (self.numeral) + (append)\n        };\n      }, $Section_sectnum$4.$$arity = -1);\n      \n      Opal.def(self, '$xreftext', $Section_xreftext$5 = function $$xreftext(xrefstyle) {\n        var $a, self = this, val = nil, $case = nil, type = nil, quoted_title = nil, signifier = nil;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {\n          return val\n        } else if ($truthy(xrefstyle)) {\n          if ($truthy(self.numbered)) {\n            return (function() {$case = xrefstyle;\n            if (\"full\"['$===']($case)) {\n            if ($truthy(($truthy($a = (type = self.sectname)['$=='](\"chapter\")) ? $a : type['$=='](\"appendix\")))) {\n              quoted_title = self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title())\n            } else {\n              quoted_title = self.$sub_placeholder(self.$sub_quotes((function() {if ($truthy(self.document.$compat_mode())) {\n                return \"``%s''\"\n              } else {\n                return \"\\\"`%s`\\\"\"\n              }; return nil; })()), self.$title())\n            };\n            if ($truthy((signifier = self.document.$attributes()['$[]'](\"\" + (type) + \"-refsig\")))) {\n              return \"\" + (signifier) + \" \" + (self.$sectnum(\".\", \",\")) + \" \" + (quoted_title)\n            } else {\n              return \"\" + (self.$sectnum(\".\", \",\")) + \" \" + (quoted_title)\n            };}\n            else if (\"short\"['$===']($case)) {if ($truthy((signifier = self.document.$attributes()['$[]'](\"\" + (self.sectname) + \"-refsig\")))) {\n              return \"\" + (signifier) + \" \" + (self.$sectnum(\".\", \"\"))\n            } else {\n              return self.$sectnum(\".\", \"\")\n            }}\n            else {if ($truthy(($truthy($a = (type = self.sectname)['$=='](\"chapter\")) ? $a : type['$=='](\"appendix\")))) {\n              \n              return self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title());\n            } else {\n              return self.$title()\n            }}})()\n          } else if ($truthy(($truthy($a = (type = self.sectname)['$=='](\"chapter\")) ? $a : type['$=='](\"appendix\")))) {\n            \n            return self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title());\n          } else {\n            return self.$title()\n          }\n        } else {\n          return self.$title()\n        };\n      }, $Section_xreftext$5.$$arity = -1);\n      \n      Opal.def(self, '$<<', $Section_$lt$lt$6 = function(block) {\n        var $iter = $Section_$lt$lt$6.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Section_$lt$lt$6.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        if (block.$context()['$=='](\"section\")) {\n          self.$assign_numeral(block)};\n        return $send(self, Opal.find_super_dispatcher(self, '<<', $Section_$lt$lt$6, false), $zuper, $iter);\n      }, $Section_$lt$lt$6.$$arity = 1);\n      \n      Opal.def(self, '$to_s', $Section_to_s$7 = function $$to_s() {\n        var $iter = $Section_to_s$7.$$p, $yield = $iter || nil, self = this, formal_title = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Section_to_s$7.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        if ($truthy(self.title)) {\n          \n          formal_title = (function() {if ($truthy(self.numbered)) {\n            return \"\" + (self.$sectnum()) + \" \" + (self.title)\n          } else {\n            return self.title\n          }; return nil; })();\n          return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {level: \" + (self.level) + \", title: \" + (formal_title.$inspect()) + \", blocks: \" + (self.blocks.$size()) + \"}>\";\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'to_s', $Section_to_s$7, false), $zuper, $iter)\n        }\n      }, $Section_to_s$7.$$arity = 0);\n      return (Opal.defs(self, '$generate_id', $Section_generate_id$8 = function $$generate_id(title, document) {\n        var $a, $b, self = this, attrs = nil, pre = nil, sep = nil, no_sep = nil, $writer = nil, sep_sub = nil, gen_id = nil, ids = nil, cnt = nil, candidate_id = nil;\n\n        \n        attrs = document.$attributes();\n        pre = ($truthy($a = attrs['$[]'](\"idprefix\")) ? $a : \"_\");\n        if ($truthy((sep = attrs['$[]'](\"idseparator\")))) {\n          if ($truthy(($truthy($a = sep.$length()['$=='](1)) ? $a : ($truthy($b = (no_sep = sep['$empty?']())['$!']()) ? (sep = (($writer = [\"idseparator\", sep.$chr()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])) : $b)))) {\n            sep_sub = (function() {if ($truthy(($truthy($a = sep['$=='](\"-\")) ? $a : sep['$=='](\".\")))) {\n              return \" .-\"\n            } else {\n              return \"\" + \" \" + (sep) + \".-\"\n            }; return nil; })()}\n        } else {\n          $a = [\"_\", \" _.-\"], (sep = $a[0]), (sep_sub = $a[1]), $a\n        };\n        gen_id = \"\" + (pre) + (title.$downcase().$gsub($$($nesting, 'InvalidSectionIdCharsRx'), \"\"));\n        if ($truthy(no_sep)) {\n          gen_id = gen_id.$delete(\" \")\n        } else {\n          \n          gen_id = gen_id.$tr_s(sep_sub, sep);\n          if ($truthy(gen_id['$end_with?'](sep))) {\n            gen_id = gen_id.$chop()};\n          if ($truthy(($truthy($a = pre['$empty?']()) ? gen_id['$start_with?'](sep) : $a))) {\n            gen_id = gen_id.$slice(1, gen_id.$length())};\n        };\n        if ($truthy(document.$catalog()['$[]'](\"refs\")['$key?'](gen_id))) {\n          \n          ids = document.$catalog()['$[]'](\"refs\");\n          cnt = $$($nesting, 'Compliance').$unique_id_start_index();\n          while ($truthy(ids['$[]']((candidate_id = \"\" + (gen_id) + (sep) + (cnt))))) {\n            cnt = $rb_plus(cnt, 1)\n          };\n          return candidate_id;\n        } else {\n          return gen_id\n        };\n      }, $Section_generate_id$8.$$arity = 2), nil) && 'generate_id';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/stylesheets\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$join', '$new', '$rstrip', '$read', '$primary_stylesheet_data', '$write', '$primary_stylesheet_name', '$stylesheet_basename', '$for', '$read_stylesheet', '$coderay_stylesheet_data', '$coderay_stylesheet_name', '$pygments_stylesheet_data', '$pygments_stylesheet_name']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Stylesheets');\n\n      var $nesting = [self].concat($parent_nesting), $Stylesheets_instance$1, $Stylesheets_primary_stylesheet_name$2, $Stylesheets_primary_stylesheet_data$3, $Stylesheets_embed_primary_stylesheet$4, $Stylesheets_write_primary_stylesheet$5, $Stylesheets_coderay_stylesheet_name$6, $Stylesheets_coderay_stylesheet_data$7, $Stylesheets_embed_coderay_stylesheet$8, $Stylesheets_write_coderay_stylesheet$9, $Stylesheets_pygments_stylesheet_name$10, $Stylesheets_pygments_stylesheet_data$11, $Stylesheets_embed_pygments_stylesheet$12, $Stylesheets_write_pygments_stylesheet$13;\n\n      self.$$prototype.primary_stylesheet_data = nil;\n      \n      Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', \"asciidoctor.css\");\n      Opal.const_set($nesting[0], 'STYLESHEETS_DIR', $$$('::', 'File').$join($$($nesting, 'DATA_DIR'), \"stylesheets\"));\n      self.__instance__ = self.$new();\n      Opal.defs(self, '$instance', $Stylesheets_instance$1 = function $$instance() {\n        var self = this;\n        if (self.__instance__ == null) self.__instance__ = nil;\n\n        return self.__instance__\n      }, $Stylesheets_instance$1.$$arity = 0);\n      \n      Opal.def(self, '$primary_stylesheet_name', $Stylesheets_primary_stylesheet_name$2 = function $$primary_stylesheet_name() {\n        var self = this;\n\n        return $$($nesting, 'DEFAULT_STYLESHEET_NAME')\n      }, $Stylesheets_primary_stylesheet_name$2.$$arity = 0);\n      \n      Opal.def(self, '$primary_stylesheet_data', $Stylesheets_primary_stylesheet_data$3 = function $$primary_stylesheet_data() {\n        var $a, self = this;\n\n        return (self.primary_stylesheet_data = ($truthy($a = self.primary_stylesheet_data) ? $a : $$$('::', 'File').$read($$$('::', 'File').$join($$($nesting, 'STYLESHEETS_DIR'), \"asciidoctor-default.css\"), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_READ_MODE')})).$rstrip()))\n      }, $Stylesheets_primary_stylesheet_data$3.$$arity = 0);\n      \n      Opal.def(self, '$embed_primary_stylesheet', $Stylesheets_embed_primary_stylesheet$4 = function $$embed_primary_stylesheet() {\n        var self = this;\n\n        return \"\" + \"<style>\\n\" + (self.$primary_stylesheet_data()) + \"\\n\" + \"</style>\"\n      }, $Stylesheets_embed_primary_stylesheet$4.$$arity = 0);\n      \n      Opal.def(self, '$write_primary_stylesheet', $Stylesheets_write_primary_stylesheet$5 = function $$write_primary_stylesheet(target_dir) {\n        var self = this;\n\n        \n        \n        if (target_dir == null) {\n          target_dir = \".\";\n        };\n        return $$$('::', 'File').$write($$$('::', 'File').$join(target_dir, self.$primary_stylesheet_name()), self.$primary_stylesheet_data(), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));\n      }, $Stylesheets_write_primary_stylesheet$5.$$arity = -1);\n      \n      Opal.def(self, '$coderay_stylesheet_name', $Stylesheets_coderay_stylesheet_name$6 = function $$coderay_stylesheet_name() {\n        var self = this;\n\n        return $$($nesting, 'SyntaxHighlighter').$for(\"coderay\").$stylesheet_basename()\n      }, $Stylesheets_coderay_stylesheet_name$6.$$arity = 0);\n      \n      Opal.def(self, '$coderay_stylesheet_data', $Stylesheets_coderay_stylesheet_data$7 = function $$coderay_stylesheet_data() {\n        var self = this;\n\n        return $$($nesting, 'SyntaxHighlighter').$for(\"coderay\").$read_stylesheet()\n      }, $Stylesheets_coderay_stylesheet_data$7.$$arity = 0);\n      \n      Opal.def(self, '$embed_coderay_stylesheet', $Stylesheets_embed_coderay_stylesheet$8 = function $$embed_coderay_stylesheet() {\n        var self = this;\n\n        return \"\" + \"<style>\\n\" + (self.$coderay_stylesheet_data()) + \"\\n\" + \"</style>\"\n      }, $Stylesheets_embed_coderay_stylesheet$8.$$arity = 0);\n      \n      Opal.def(self, '$write_coderay_stylesheet', $Stylesheets_write_coderay_stylesheet$9 = function $$write_coderay_stylesheet(target_dir) {\n        var self = this;\n\n        \n        \n        if (target_dir == null) {\n          target_dir = \".\";\n        };\n        return $$$('::', 'File').$write($$$('::', 'File').$join(target_dir, self.$coderay_stylesheet_name()), self.$coderay_stylesheet_data(), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));\n      }, $Stylesheets_write_coderay_stylesheet$9.$$arity = -1);\n      \n      Opal.def(self, '$pygments_stylesheet_name', $Stylesheets_pygments_stylesheet_name$10 = function $$pygments_stylesheet_name(style) {\n        var self = this;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        return $$($nesting, 'SyntaxHighlighter').$for(\"pygments\").$stylesheet_basename(style);\n      }, $Stylesheets_pygments_stylesheet_name$10.$$arity = -1);\n      \n      Opal.def(self, '$pygments_stylesheet_data', $Stylesheets_pygments_stylesheet_data$11 = function $$pygments_stylesheet_data(style) {\n        var self = this;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        return $$($nesting, 'SyntaxHighlighter').$for(\"pygments\").$read_stylesheet(style);\n      }, $Stylesheets_pygments_stylesheet_data$11.$$arity = -1);\n      \n      Opal.def(self, '$embed_pygments_stylesheet', $Stylesheets_embed_pygments_stylesheet$12 = function $$embed_pygments_stylesheet(style) {\n        var self = this;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        return \"\" + \"<style>\\n\" + (self.$pygments_stylesheet_data(style)) + \"\\n\" + \"</style>\";\n      }, $Stylesheets_embed_pygments_stylesheet$12.$$arity = -1);\n      return (Opal.def(self, '$write_pygments_stylesheet', $Stylesheets_write_pygments_stylesheet$13 = function $$write_pygments_stylesheet(target_dir, style) {\n        var self = this;\n\n        \n        \n        if (target_dir == null) {\n          target_dir = \".\";\n        };\n        \n        if (style == null) {\n          style = nil;\n        };\n        return $$$('::', 'File').$write($$$('::', 'File').$join(target_dir, self.$pygments_stylesheet_name(style)), self.$pygments_stylesheet_data(style), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));\n      }, $Stylesheets_write_pygments_stylesheet$13.$$arity = -1), nil) && 'write_pygments_stylesheet';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/table\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$new', '$[]', '$>', '$to_i', '$<', '$==', '$[]=', '$-', '$attributes', '$truncate', '$*', '$/', '$to_f', '$empty?', '$body', '$each', '$<<', '$size', '$+', '$assign_column_widths', '$warn', '$logger', '$update_attributes', '$assign_width', '$round', '$map', '$shift', '$reinitialize', '$head=', '$nil?', '$unshift', '$pop', '$foot=', '$parent', '$sourcemap', '$dup', '$header_row?', '$table', '$style', '$merge', '$delete', '$===', '$start_with?', '$rstrip', '$slice', '$length', '$advance', '$lstrip', '$strip', '$split', '$include?', '$readlines', '$catalog_inline_anchor', '$=~', '$apply_subs', '$attr_writer', '$convert', '$text', '$!=', '$file', '$lineno', '$include', '$to_set', '$mark', '$key?', '$nested?', '$document', '$error', '$message_with_context', '$cursor_at_prev_line', '$nil_or_empty?', '$escape', '$columns', '$match', '$chop', '$end_with?', '$gsub', '$!', '$push_cellspec', '$cell_open?', '$close_cell', '$take_cellspec', '$squeeze', '$upto', '$times', '$cursor_before_mark', '$rowspan', '$activate_rowspan', '$colspan', '$end_of_row?', '$close_row', '$private', '$rows', '$effective_column_visits']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Table');\n\n      var $nesting = [self].concat($parent_nesting), $Table_initialize$4, $Table_header_row$ques$5, $Table_create_columns$6, $Table_assign_column_widths$8, $Table_partition_header_footer$12;\n\n      self.$$prototype.attributes = self.$$prototype.document = self.$$prototype.has_header_option = self.$$prototype.rows = self.$$prototype.columns = nil;\n      \n      Opal.const_set($nesting[0], 'DEFAULT_PRECISION', 4);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Rows');\n\n        var $nesting = [self].concat($parent_nesting), $Rows_initialize$1, $Rows_by_section$2, $Rows_to_h$3;\n\n        self.$$prototype.head = self.$$prototype.body = self.$$prototype.foot = nil;\n        \n        self.$attr_accessor(\"head\", \"foot\", \"body\");\n        \n        Opal.def(self, '$initialize', $Rows_initialize$1 = function $$initialize(head, foot, body) {\n          var self = this;\n\n          \n          \n          if (head == null) {\n            head = [];\n          };\n          \n          if (foot == null) {\n            foot = [];\n          };\n          \n          if (body == null) {\n            body = [];\n          };\n          self.head = head;\n          self.foot = foot;\n          return (self.body = body);\n        }, $Rows_initialize$1.$$arity = -1);\n        Opal.alias(self, \"[]\", \"send\");\n        \n        Opal.def(self, '$by_section', $Rows_by_section$2 = function $$by_section() {\n          var self = this;\n\n          return [[\"head\", self.head], [\"body\", self.body], [\"foot\", self.foot]]\n        }, $Rows_by_section$2.$$arity = 0);\n        return (Opal.def(self, '$to_h', $Rows_to_h$3 = function $$to_h() {\n          var self = this;\n\n          return $hash2([\"head\", \"body\", \"foot\"], {\"head\": self.head, \"body\": self.body, \"foot\": self.foot})\n        }, $Rows_to_h$3.$$arity = 0), nil) && 'to_h';\n      })($nesting[0], null, $nesting);\n      self.$attr_accessor(\"columns\");\n      self.$attr_accessor(\"rows\");\n      self.$attr_accessor(\"has_header_option\");\n      self.$attr_reader(\"caption\");\n      \n      Opal.def(self, '$initialize', $Table_initialize$4 = function $$initialize(parent, attributes) {\n        var $a, $b, $iter = $Table_initialize$4.$$p, $yield = $iter || nil, self = this, pcwidth = nil, pcwidth_intval = nil, $writer = nil, abswidth_val = nil;\n\n        if ($iter) $Table_initialize$4.$$p = null;\n        \n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Table_initialize$4, false), [parent, \"table\"], null);\n        self.rows = $$($nesting, 'Rows').$new();\n        self.columns = [];\n        self.has_header_option = false;\n        if ($truthy((pcwidth = attributes['$[]'](\"width\")))) {\n          if ($truthy(($truthy($a = $rb_gt((pcwidth_intval = pcwidth.$to_i()), 100)) ? $a : $rb_lt(pcwidth_intval, 1)))) {\n            if ($truthy((($a = pcwidth_intval['$=='](0)) ? ($truthy($b = pcwidth['$=='](\"0\")) ? $b : pcwidth['$=='](\"0%\")) : pcwidth_intval['$=='](0)))) {\n            } else {\n              pcwidth_intval = 100\n            }}\n        } else {\n          pcwidth_intval = 100\n        };\n        \n        $writer = [\"tablepcwidth\", pcwidth_intval];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        if ($truthy(self.document.$attributes()['$[]'](\"pagewidth\"))) {\n          \n          $writer = [\"tableabswidth\", (function() {if ((abswidth_val = $rb_times($rb_divide(pcwidth_intval, 100), self.document.$attributes()['$[]'](\"pagewidth\").$to_f()).$truncate($$($nesting, 'DEFAULT_PRECISION')))['$=='](abswidth_val.$to_i())) {\n            return abswidth_val.$to_i()\n          } else {\n            return abswidth_val\n          }; return nil; })()];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(attributes['$[]'](\"rotate-option\"))) {\n          \n          $writer = [\"orientation\", \"landscape\"];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        } else {\n          return nil\n        };\n      }, $Table_initialize$4.$$arity = 2);\n      \n      Opal.def(self, '$header_row?', $Table_header_row$ques$5 = function() {\n        var $a, self = this, val = nil;\n\n        if ($truthy(($truthy($a = (val = self.has_header_option)) ? self.rows.$body()['$empty?']() : $a))) {\n          return val\n        } else {\n          return nil\n        }\n      }, $Table_header_row$ques$5.$$arity = 0);\n      \n      Opal.def(self, '$create_columns', $Table_create_columns$6 = function $$create_columns(colspecs) {\n        var $$7, $a, self = this, cols = nil, autowidth_cols = nil, width_base = nil, num_cols = nil, $writer = nil;\n\n        \n        cols = [];\n        autowidth_cols = nil;\n        width_base = 0;\n        $send(colspecs, 'each', [], ($$7 = function(colspec){var self = $$7.$$s || this, $a, colwidth = nil;\n\n        \n          \n          if (colspec == null) {\n            colspec = nil;\n          };\n          colwidth = colspec['$[]'](\"width\");\n          cols['$<<']($$($nesting, 'Column').$new(self, cols.$size(), colspec));\n          if ($truthy($rb_lt(colwidth, 0))) {\n            return (autowidth_cols = ($truthy($a = autowidth_cols) ? $a : []))['$<<'](cols['$[]'](-1))\n          } else {\n            return (width_base = $rb_plus(width_base, colwidth))\n          };}, $$7.$$s = self, $$7.$$arity = 1, $$7));\n        if ($truthy($rb_gt((num_cols = (self.columns = cols).$size()), 0))) {\n          \n          \n          $writer = [\"colcount\", num_cols];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(($truthy($a = $rb_gt(width_base, 0)) ? $a : autowidth_cols))) {\n          } else {\n            width_base = nil\n          };\n          self.$assign_column_widths(width_base, autowidth_cols);};\n        return nil;\n      }, $Table_create_columns$6.$$arity = 1);\n      \n      Opal.def(self, '$assign_column_widths', $Table_assign_column_widths$8 = function $$assign_column_widths(width_base, autowidth_cols) {\n        var $$9, $$10, $$11, self = this, precision = nil, total_width = nil, col_pcwidth = nil, autowidth = nil, autowidth_attrs = nil;\n\n        \n        \n        if (width_base == null) {\n          width_base = nil;\n        };\n        \n        if (autowidth_cols == null) {\n          autowidth_cols = nil;\n        };\n        precision = $$($nesting, 'DEFAULT_PRECISION');\n        total_width = (col_pcwidth = 0);\n        if ($truthy(width_base)) {\n          \n          if ($truthy(autowidth_cols)) {\n            \n            if ($truthy($rb_gt(width_base, 100))) {\n              \n              autowidth = 0;\n              self.$logger().$warn(\"\" + \"total column width must not exceed 100% when using autowidth columns; got \" + (width_base) + \"%\");\n            } else {\n              \n              autowidth = $rb_divide($rb_minus(100, width_base), autowidth_cols.$size()).$truncate(precision);\n              if (autowidth.$to_i()['$=='](autowidth)) {\n                autowidth = autowidth.$to_i()};\n              width_base = 100;\n            };\n            autowidth_attrs = $hash2([\"width\", \"autowidth-option\"], {\"width\": autowidth, \"autowidth-option\": \"\"});\n            $send(autowidth_cols, 'each', [], ($$9 = function(col){var self = $$9.$$s || this;\n\n            \n              \n              if (col == null) {\n                col = nil;\n              };\n              return col.$update_attributes(autowidth_attrs);}, $$9.$$s = self, $$9.$$arity = 1, $$9));};\n          $send(self.columns, 'each', [], ($$10 = function(col){var self = $$10.$$s || this;\n\n          \n            \n            if (col == null) {\n              col = nil;\n            };\n            return (total_width = $rb_plus(total_width, (col_pcwidth = col.$assign_width(nil, width_base, precision))));}, $$10.$$s = self, $$10.$$arity = 1, $$10));\n        } else {\n          \n          col_pcwidth = $rb_divide(100, self.columns.$size()).$truncate(precision);\n          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {\n            col_pcwidth = col_pcwidth.$to_i()};\n          $send(self.columns, 'each', [], ($$11 = function(col){var self = $$11.$$s || this;\n\n          \n            \n            if (col == null) {\n              col = nil;\n            };\n            return (total_width = $rb_plus(total_width, col.$assign_width(col_pcwidth, nil, precision)));}, $$11.$$s = self, $$11.$$arity = 1, $$11));\n        };\n        if (total_width['$=='](100)) {\n        } else {\n          self.columns['$[]'](-1).$assign_width($rb_plus($rb_minus(100, total_width), col_pcwidth).$round(precision), nil, precision)\n        };\n        return nil;\n      }, $Table_assign_column_widths$8.$$arity = -1);\n      return (Opal.def(self, '$partition_header_footer', $Table_partition_header_footer$12 = function $$partition_header_footer(attrs) {\n        var $$13, $$14, $a, self = this, num_body_rows = nil, $writer = nil, body = nil;\n\n        \n        num_body_rows = (($writer = [\"rowcount\", (body = self.rows.$body()).$size()]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n        if ($truthy($rb_gt(num_body_rows, 0))) {\n          if ($truthy(self.has_header_option)) {\n            \n            \n            $writer = [[$send(body.$shift(), 'map', [], ($$13 = function(cell){var self = $$13.$$s || this;\n\n            \n              \n              if (cell == null) {\n                cell = nil;\n              };\n              return cell.$reinitialize(true);}, $$13.$$s = self, $$13.$$arity = 1, $$13))]];\n            $send(self.rows, 'head=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            num_body_rows = $rb_minus(num_body_rows, 1);\n          } else if ($truthy(self.has_header_option['$nil?']())) {\n            \n            self.has_header_option = false;\n            body.$unshift($send(body.$shift(), 'map', [], ($$14 = function(cell){var self = $$14.$$s || this;\n\n            \n              \n              if (cell == null) {\n                cell = nil;\n              };\n              return cell.$reinitialize(false);}, $$14.$$s = self, $$14.$$arity = 1, $$14)));}};\n        if ($truthy(($truthy($a = $rb_gt(num_body_rows, 0)) ? attrs['$[]'](\"footer-option\") : $a))) {\n          \n          $writer = [[body.$pop()]];\n          $send(self.rows, 'foot=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        return nil;\n      }, $Table_partition_header_footer$12.$$arity = 1), nil) && 'partition_header_footer';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Column');\n\n      var $nesting = [self].concat($parent_nesting), $Column_initialize$15, $Column_assign_width$16, $Column_block$ques$17, $Column_inline$ques$18;\n\n      self.$$prototype.attributes = nil;\n      \n      self.$attr_accessor(\"style\");\n      \n      Opal.def(self, '$initialize', $Column_initialize$15 = function $$initialize(table, index, attributes) {\n        var $a, $iter = $Column_initialize$15.$$p, $yield = $iter || nil, self = this, $writer = nil;\n\n        if ($iter) $Column_initialize$15.$$p = null;\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Column_initialize$15, false), [table, \"table_column\"], null);\n        self.style = attributes['$[]'](\"style\");\n        \n        $writer = [\"colnumber\", $rb_plus(index, 1)];\n        $send(attributes, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        ($truthy($a = attributes['$[]'](\"width\")) ? $a : (($writer = [\"width\", 1]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attributes['$[]'](\"halign\")) ? $a : (($writer = [\"halign\", \"left\"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attributes['$[]'](\"valign\")) ? $a : (($writer = [\"valign\", \"top\"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        return self.$update_attributes(attributes);\n      }, $Column_initialize$15.$$arity = -3);\n      Opal.alias(self, \"table\", \"parent\");\n      \n      Opal.def(self, '$assign_width', $Column_assign_width$16 = function $$assign_width(col_pcwidth, width_base, precision) {\n        var self = this, $writer = nil, col_abswidth = nil;\n\n        \n        if ($truthy(width_base)) {\n          \n          col_pcwidth = $rb_divide($rb_times(self.attributes['$[]'](\"width\").$to_f(), 100), width_base).$truncate(precision);\n          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {\n            col_pcwidth = col_pcwidth.$to_i()};};\n        if ($truthy(self.$parent().$attributes()['$[]'](\"tableabswidth\"))) {\n          \n          $writer = [\"colabswidth\", (function() {if ((col_abswidth = $rb_times($rb_divide(col_pcwidth, 100), self.$parent().$attributes()['$[]'](\"tableabswidth\")).$truncate(precision))['$=='](col_abswidth.$to_i())) {\n            return col_abswidth.$to_i()\n          } else {\n            return col_abswidth\n          }; return nil; })()];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        \n        $writer = [\"colpcwidth\", col_pcwidth];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $Column_assign_width$16.$$arity = 3);\n      \n      Opal.def(self, '$block?', $Column_block$ques$17 = function() {\n        var self = this;\n\n        return false\n      }, $Column_block$ques$17.$$arity = 0);\n      return (Opal.def(self, '$inline?', $Column_inline$ques$18 = function() {\n        var self = this;\n\n        return false\n      }, $Column_inline$ques$18.$$arity = 0), nil) && 'inline?';\n    })($$($nesting, 'Table'), $$($nesting, 'AbstractNode'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Cell');\n\n      var $nesting = [self].concat($parent_nesting), $Cell_initialize$19, $Cell_reinitialize$20, $Cell_catalog_inline_anchor$21, $Cell_text$22, $Cell_content$23, $Cell_lines$25, $Cell_source$26, $Cell_file$27, $Cell_lineno$28, $Cell_to_s$29;\n\n      self.$$prototype.document = self.$$prototype.reinitialize_args = self.$$prototype.attributes = self.$$prototype.cursor = self.$$prototype.text = self.$$prototype.subs = self.$$prototype.style = self.$$prototype.inner_document = self.$$prototype.source_location = self.$$prototype.colspan = self.$$prototype.rowspan = nil;\n      \n      Opal.const_set($nesting[0], 'DOUBLE_LF', $rb_times($$($nesting, 'LF'), 2));\n      self.$attr_accessor(\"colspan\");\n      self.$attr_accessor(\"rowspan\");\n      Opal.alias(self, \"column\", \"parent\");\n      self.$attr_reader(\"inner_document\");\n      \n      Opal.def(self, '$initialize', $Cell_initialize$19 = function $$initialize(column, cell_text, attributes, opts) {\n        var $a, $b, $c, $iter = $Cell_initialize$19.$$p, $yield = $iter || nil, self = this, in_header_row = nil, cell_style = nil, $case = nil, asciidoc = nil, inner_document_cursor = nil, lines_advanced = nil, literal = nil, normal_psv = nil, parent_doctitle = nil, inner_document_lines = nil, unprocessed_line1 = nil, preprocessed_lines = nil, $writer = nil;\n\n        if ($iter) $Cell_initialize$19.$$p = null;\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Cell_initialize$19, false), [column, \"table_cell\"], null);\n        self.cursor = (self.reinitialize_args = nil);\n        if ($truthy(self.document.$sourcemap())) {\n          self.source_location = opts['$[]'](\"cursor\").$dup()};\n        if ($truthy(column)) {\n          \n          if ($truthy((in_header_row = column.$table()['$header_row?']()))) {\n            if ($truthy((($a = in_header_row['$=='](\"implicit\")) ? (cell_style = ($truthy($b = column.$style()) ? $b : ($truthy($c = attributes) ? attributes['$[]'](\"style\") : $c))) : in_header_row['$=='](\"implicit\")))) {\n              \n              if ($truthy(($truthy($a = cell_style['$=='](\"asciidoc\")) ? $a : cell_style['$=='](\"literal\")))) {\n                self.reinitialize_args = [column, cell_text, ($truthy($a = attributes) ? attributes.$merge() : $a), opts]};\n              cell_style = nil;}\n          } else {\n            cell_style = column.$style()\n          };\n          self.$update_attributes(column.$attributes());};\n        if ($truthy(attributes)) {\n          \n          if ($truthy(attributes['$empty?']())) {\n            self.colspan = (self.rowspan = nil)\n          } else {\n            \n            $a = [attributes.$delete(\"colspan\"), attributes.$delete(\"rowspan\")], (self.colspan = $a[0]), (self.rowspan = $a[1]), $a;\n            if ($truthy(in_header_row)) {\n            } else {\n              cell_style = ($truthy($a = attributes['$[]'](\"style\")) ? $a : cell_style)\n            };\n            self.$update_attributes(attributes);\n          };\n          $case = cell_style;\n          if (\"asciidoc\"['$===']($case)) {\n          asciidoc = true;\n          inner_document_cursor = opts['$[]'](\"cursor\");\n          if ($truthy((cell_text = cell_text.$rstrip())['$start_with?']($$($nesting, 'LF')))) {\n            \n            lines_advanced = 1;\n            while ($truthy((cell_text = cell_text.$slice(1, cell_text.$length()))['$start_with?']($$($nesting, 'LF')))) {\n              lines_advanced = $rb_plus(lines_advanced, 1)\n            };\n            inner_document_cursor.$advance(lines_advanced);\n          } else {\n            cell_text = cell_text.$lstrip()\n          };}\n          else if (\"literal\"['$===']($case)) {\n          literal = true;\n          cell_text = cell_text.$rstrip();\n          while ($truthy(cell_text['$start_with?']($$($nesting, 'LF')))) {\n            cell_text = cell_text.$slice(1, cell_text.$length())\n          };}\n          else {\n          normal_psv = true;\n          cell_text = (function() {if ($truthy(cell_text)) {\n            return cell_text.$strip()\n          } else {\n            return \"\"\n          }; return nil; })();};\n        } else {\n          \n          self.colspan = (self.rowspan = nil);\n          if (cell_style['$=='](\"asciidoc\")) {\n            \n            asciidoc = true;\n            inner_document_cursor = opts['$[]'](\"cursor\");};\n        };\n        if ($truthy(asciidoc)) {\n          \n          parent_doctitle = self.document.$attributes().$delete(\"doctitle\");\n          inner_document_lines = cell_text.$split($$($nesting, 'LF'), -1);\n          if ($truthy(inner_document_lines['$empty?']())) {\n          } else if ($truthy((unprocessed_line1 = inner_document_lines['$[]'](0))['$include?'](\"::\"))) {\n            \n            preprocessed_lines = $$($nesting, 'PreprocessorReader').$new(self.document, [unprocessed_line1]).$readlines();\n            if ($truthy((($a = unprocessed_line1['$=='](preprocessed_lines['$[]'](0))) ? $rb_lt(preprocessed_lines.$size(), 2) : unprocessed_line1['$=='](preprocessed_lines['$[]'](0))))) {\n            } else {\n              \n              inner_document_lines.$shift();\n              if ($truthy(preprocessed_lines['$empty?']())) {\n              } else {\n                $send(inner_document_lines, 'unshift', Opal.to_a(preprocessed_lines))\n              };\n            };};\n          self.inner_document = $$($nesting, 'Document').$new(inner_document_lines, $hash2([\"standalone\", \"parent\", \"cursor\"], {\"standalone\": false, \"parent\": self.document, \"cursor\": inner_document_cursor}));\n          if ($truthy(parent_doctitle['$nil?']())) {\n          } else {\n            \n            $writer = [\"doctitle\", parent_doctitle];\n            $send(self.document.$attributes(), '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          self.subs = nil;\n        } else if ($truthy(literal)) {\n          \n          self.content_model = \"verbatim\";\n          self.subs = $$($nesting, 'BASIC_SUBS');\n        } else {\n          \n          if ($truthy(normal_psv)) {\n            if ($truthy(in_header_row)) {\n              self.cursor = opts['$[]'](\"cursor\")\n            } else {\n              self.$catalog_inline_anchor(cell_text, opts['$[]'](\"cursor\"))\n            }};\n          self.content_model = \"simple\";\n          self.subs = $$($nesting, 'NORMAL_SUBS');\n        };\n        self.text = cell_text;\n        return (self.style = cell_style);\n      }, $Cell_initialize$19.$$arity = -3);\n      \n      Opal.def(self, '$reinitialize', $Cell_reinitialize$20 = function $$reinitialize(has_header) {\n        var self = this;\n\n        \n        if ($truthy(has_header)) {\n          self.reinitialize_args = nil\n        } else if ($truthy(self.reinitialize_args)) {\n          return $send($$$($$($nesting, 'Table'), 'Cell'), 'new', Opal.to_a(self.reinitialize_args))\n        } else {\n          self.style = self.attributes['$[]'](\"style\")\n        };\n        if ($truthy(self.cursor)) {\n          self.$catalog_inline_anchor()};\n        return self;\n      }, $Cell_reinitialize$20.$$arity = 1);\n      \n      Opal.def(self, '$catalog_inline_anchor', $Cell_catalog_inline_anchor$21 = function $$catalog_inline_anchor(cell_text, cursor) {\n        var $a, self = this;\n\n        \n        \n        if (cell_text == null) {\n          cell_text = self.text;\n        };\n        \n        if (cursor == null) {\n          cursor = nil;\n        };\n        if ($truthy(cursor)) {\n        } else {\n          $a = [self.cursor, nil], (cursor = $a[0]), (self.cursor = $a[1]), $a\n        };\n        if ($truthy(($truthy($a = cell_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](cell_text) : $a))) {\n          return $$($nesting, 'Parser').$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), self, cursor, self.document)\n        } else {\n          return nil\n        };\n      }, $Cell_catalog_inline_anchor$21.$$arity = -1);\n      \n      Opal.def(self, '$text', $Cell_text$22 = function $$text() {\n        var self = this;\n\n        return self.$apply_subs(self.text, self.subs)\n      }, $Cell_text$22.$$arity = 0);\n      self.$attr_writer(\"text\");\n      \n      Opal.def(self, '$content', $Cell_content$23 = function $$content() {\n        var $$24, $a, self = this, cell_style = nil, subbed_text = nil;\n\n        if ((cell_style = self.style)['$=='](\"asciidoc\")) {\n          return self.inner_document.$convert()\n        } else if ($truthy(self.text['$include?']($$($nesting, 'DOUBLE_LF')))) {\n          return $send(self.$text().$split($$($nesting, 'BlankLineRx')), 'map', [], ($$24 = function(para){var self = $$24.$$s || this, $a;\n\n          \n            \n            if (para == null) {\n              para = nil;\n            };\n            if ($truthy(($truthy($a = cell_style) ? cell_style['$!='](\"header\") : $a))) {\n              return $$($nesting, 'Inline').$new(self.$parent(), \"quoted\", para, $hash2([\"type\"], {\"type\": cell_style})).$convert()\n            } else {\n              return para\n            };}, $$24.$$s = self, $$24.$$arity = 1, $$24))\n        } else if ($truthy((subbed_text = self.$text())['$empty?']())) {\n          return []\n        } else if ($truthy(($truthy($a = cell_style) ? cell_style['$!='](\"header\") : $a))) {\n          return [$$($nesting, 'Inline').$new(self.$parent(), \"quoted\", subbed_text, $hash2([\"type\"], {\"type\": cell_style})).$convert()]\n        } else {\n          return [subbed_text]\n        }\n      }, $Cell_content$23.$$arity = 0);\n      \n      Opal.def(self, '$lines', $Cell_lines$25 = function $$lines() {\n        var self = this;\n\n        return self.text.$split($$($nesting, 'LF'))\n      }, $Cell_lines$25.$$arity = 0);\n      \n      Opal.def(self, '$source', $Cell_source$26 = function $$source() {\n        var self = this;\n\n        return self.text\n      }, $Cell_source$26.$$arity = 0);\n      \n      Opal.def(self, '$file', $Cell_file$27 = function $$file() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$file() : $a)\n      }, $Cell_file$27.$$arity = 0);\n      \n      Opal.def(self, '$lineno', $Cell_lineno$28 = function $$lineno() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$lineno() : $a)\n      }, $Cell_lineno$28.$$arity = 0);\n      return (Opal.def(self, '$to_s', $Cell_to_s$29 = function $$to_s() {\n        var $a, $iter = $Cell_to_s$29.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Cell_to_s$29.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        return \"\" + ($send(self, Opal.find_super_dispatcher(self, 'to_s', $Cell_to_s$29, false), $zuper, $iter)) + \" - [text: \" + (self.text) + \", colspan: \" + (($truthy($a = self.colspan) ? $a : 1)) + \", rowspan: \" + (($truthy($a = self.rowspan) ? $a : 1)) + \", attributes: \" + (self.attributes) + \"]\"\n      }, $Cell_to_s$29.$$arity = 0), nil) && 'to_s';\n    })($$($nesting, 'Table'), $$($nesting, 'AbstractBlock'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'ParserContext');\n\n      var $nesting = [self].concat($parent_nesting), $ParserContext_initialize$30, $ParserContext_starts_with_delimiter$ques$31, $ParserContext_match_delimiter$32, $ParserContext_skip_past_delimiter$33, $ParserContext_skip_past_escaped_delimiter$34, $ParserContext_buffer_has_unclosed_quotes$ques$35, $ParserContext_take_cellspec$36, $ParserContext_push_cellspec$37, $ParserContext_keep_cell_open$38, $ParserContext_mark_cell_closed$39, $ParserContext_cell_open$ques$40, $ParserContext_cell_closed$ques$41, $ParserContext_close_open_cell$42, $ParserContext_close_cell$43, $ParserContext_close_row$46, $ParserContext_activate_rowspan$47, $ParserContext_end_of_row$ques$49, $ParserContext_effective_column_visits$50, $ParserContext_advance$51;\n\n      self.$$prototype.delimiter = self.$$prototype.delimiter_rx = self.$$prototype.buffer = self.$$prototype.cellspecs = self.$$prototype.cell_open = self.$$prototype.format = self.$$prototype.start_cursor_data = self.$$prototype.reader = self.$$prototype.table = self.$$prototype.current_row = self.$$prototype.colcount = self.$$prototype.column_visits = self.$$prototype.active_rowspans = self.$$prototype.linenum = nil;\n      \n      self.$include($$($nesting, 'Logging'));\n      Opal.const_set($nesting[0], 'FORMATS', [\"psv\", \"csv\", \"dsv\", \"tsv\"].$to_set());\n      Opal.const_set($nesting[0], 'DELIMITERS', $hash2([\"psv\", \"csv\", \"dsv\", \"tsv\", \"!sv\"], {\"psv\": [\"|\", /\\|/], \"csv\": [\",\", /,/], \"dsv\": [\":\", /:/], \"tsv\": [\"\\t\", /\\t/], \"!sv\": [\"!\", /!/]}));\n      self.$attr_accessor(\"table\");\n      self.$attr_accessor(\"format\");\n      self.$attr_reader(\"colcount\");\n      self.$attr_accessor(\"buffer\");\n      self.$attr_reader(\"delimiter\");\n      self.$attr_reader(\"delimiter_re\");\n      \n      Opal.def(self, '$initialize', $ParserContext_initialize$30 = function $$initialize(reader, table, attributes) {\n        var $a, $b, self = this, xsv = nil, sep = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        self.start_cursor_data = (self.reader = reader).$mark();\n        self.table = table;\n        if ($truthy(attributes['$key?'](\"format\"))) {\n          if ($truthy($$($nesting, 'FORMATS')['$include?']((xsv = attributes['$[]'](\"format\"))))) {\n            if (xsv['$=='](\"tsv\")) {\n              self.format = \"csv\"\n            } else if ($truthy((($a = (self.format = xsv)['$=='](\"psv\")) ? table.$document()['$nested?']() : (self.format = xsv)['$=='](\"psv\")))) {\n              xsv = \"!sv\"}\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"illegal table format: \" + (xsv), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})));\n            $a = [\"psv\", (function() {if ($truthy(table.$document()['$nested?']())) {\n              return \"!sv\"\n            } else {\n              return \"psv\"\n            }; return nil; })()], (self.format = $a[0]), (xsv = $a[1]), $a;\n          }\n        } else {\n          $a = [\"psv\", (function() {if ($truthy(table.$document()['$nested?']())) {\n            return \"!sv\"\n          } else {\n            return \"psv\"\n          }; return nil; })()], (self.format = $a[0]), (xsv = $a[1]), $a\n        };\n        if ($truthy(attributes['$key?'](\"separator\"))) {\n          if ($truthy((sep = attributes['$[]'](\"separator\"))['$nil_or_empty?']())) {\n            $b = $$($nesting, 'DELIMITERS')['$[]'](xsv), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n          } else if (sep['$=='](\"\\\\t\")) {\n            $b = $$($nesting, 'DELIMITERS')['$[]'](\"tsv\"), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n          } else {\n            $a = [sep, new RegExp($$$('::', 'Regexp').$escape(sep))], (self.delimiter = $a[0]), (self.delimiter_rx = $a[1]), $a\n          }\n        } else {\n          $b = $$($nesting, 'DELIMITERS')['$[]'](xsv), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n        };\n        self.colcount = (function() {if ($truthy(table.$columns()['$empty?']())) {\n          return -1\n        } else {\n          return table.$columns().$size()\n        }; return nil; })();\n        self.buffer = \"\";\n        self.cellspecs = [];\n        self.cell_open = false;\n        self.active_rowspans = [0];\n        self.column_visits = 0;\n        self.current_row = [];\n        return (self.linenum = -1);\n      }, $ParserContext_initialize$30.$$arity = -3);\n      \n      Opal.def(self, '$starts_with_delimiter?', $ParserContext_starts_with_delimiter$ques$31 = function(line) {\n        var self = this;\n\n        return line['$start_with?'](self.delimiter)\n      }, $ParserContext_starts_with_delimiter$ques$31.$$arity = 1);\n      \n      Opal.def(self, '$match_delimiter', $ParserContext_match_delimiter$32 = function $$match_delimiter(line) {\n        var self = this;\n\n        return self.delimiter_rx.$match(line)\n      }, $ParserContext_match_delimiter$32.$$arity = 1);\n      \n      Opal.def(self, '$skip_past_delimiter', $ParserContext_skip_past_delimiter$33 = function $$skip_past_delimiter(pre) {\n        var self = this;\n\n        \n        self.buffer = \"\" + (self.buffer) + (pre) + (self.delimiter);\n        return nil;\n      }, $ParserContext_skip_past_delimiter$33.$$arity = 1);\n      \n      Opal.def(self, '$skip_past_escaped_delimiter', $ParserContext_skip_past_escaped_delimiter$34 = function $$skip_past_escaped_delimiter(pre) {\n        var self = this;\n\n        \n        self.buffer = \"\" + (self.buffer) + (pre.$chop()) + (self.delimiter);\n        return nil;\n      }, $ParserContext_skip_past_escaped_delimiter$34.$$arity = 1);\n      \n      Opal.def(self, '$buffer_has_unclosed_quotes?', $ParserContext_buffer_has_unclosed_quotes$ques$35 = function(append, q) {\n        var $a, $b, self = this, record = nil, qq = nil, trailing_quote = nil;\n\n        \n        \n        if (append == null) {\n          append = nil;\n        };\n        \n        if (q == null) {\n          q = \"\\\"\";\n        };\n        if ((record = (function() {if ($truthy(append)) {\n          return $rb_plus(self.buffer, append).$strip()\n        } else {\n          return self.buffer.$strip()\n        }; return nil; })())['$=='](q)) {\n          return true\n        } else if ($truthy(record['$start_with?'](q))) {\n          \n          qq = $rb_plus(q, q);\n          if ($truthy(($truthy($a = ($truthy($b = (trailing_quote = record['$end_with?'](q))) ? record['$end_with?'](qq) : $b)) ? $a : record['$start_with?'](qq)))) {\n            return ($truthy($a = (record = record.$gsub(qq, \"\"))['$start_with?'](q)) ? record['$end_with?'](q)['$!']() : $a)\n          } else {\n            return trailing_quote['$!']()\n          };\n        } else {\n          return false\n        };\n      }, $ParserContext_buffer_has_unclosed_quotes$ques$35.$$arity = -1);\n      \n      Opal.def(self, '$take_cellspec', $ParserContext_take_cellspec$36 = function $$take_cellspec() {\n        var self = this;\n\n        return self.cellspecs.$shift()\n      }, $ParserContext_take_cellspec$36.$$arity = 0);\n      \n      Opal.def(self, '$push_cellspec', $ParserContext_push_cellspec$37 = function $$push_cellspec(cellspec) {\n        var $a, self = this;\n\n        \n        \n        if (cellspec == null) {\n          cellspec = $hash2([], {});\n        };\n        self.cellspecs['$<<'](($truthy($a = cellspec) ? $a : $hash2([], {})));\n        return nil;\n      }, $ParserContext_push_cellspec$37.$$arity = -1);\n      \n      Opal.def(self, '$keep_cell_open', $ParserContext_keep_cell_open$38 = function $$keep_cell_open() {\n        var self = this;\n\n        \n        self.cell_open = true;\n        return nil;\n      }, $ParserContext_keep_cell_open$38.$$arity = 0);\n      \n      Opal.def(self, '$mark_cell_closed', $ParserContext_mark_cell_closed$39 = function $$mark_cell_closed() {\n        var self = this;\n\n        \n        self.cell_open = false;\n        return nil;\n      }, $ParserContext_mark_cell_closed$39.$$arity = 0);\n      \n      Opal.def(self, '$cell_open?', $ParserContext_cell_open$ques$40 = function() {\n        var self = this;\n\n        return self.cell_open\n      }, $ParserContext_cell_open$ques$40.$$arity = 0);\n      \n      Opal.def(self, '$cell_closed?', $ParserContext_cell_closed$ques$41 = function() {\n        var self = this;\n\n        return self.cell_open['$!']()\n      }, $ParserContext_cell_closed$ques$41.$$arity = 0);\n      \n      Opal.def(self, '$close_open_cell', $ParserContext_close_open_cell$42 = function $$close_open_cell(next_cellspec) {\n        var self = this;\n\n        \n        \n        if (next_cellspec == null) {\n          next_cellspec = $hash2([], {});\n        };\n        self.$push_cellspec(next_cellspec);\n        if ($truthy(self['$cell_open?']())) {\n          self.$close_cell(true)};\n        self.$advance();\n        return nil;\n      }, $ParserContext_close_open_cell$42.$$arity = -1);\n      \n      Opal.def(self, '$close_cell', $ParserContext_close_cell$43 = function $$close_cell(eol) {try {\n\n        var $a, $b, $$44, self = this, cell_text = nil, cellspec = nil, repeat = nil, q = nil;\n\n        \n        \n        if (eol == null) {\n          eol = false;\n        };\n        if (self.format['$=='](\"psv\")) {\n          \n          cell_text = self.buffer;\n          self.buffer = \"\";\n          if ($truthy((cellspec = self.$take_cellspec()))) {\n            repeat = ($truthy($a = cellspec.$delete(\"repeatcol\")) ? $a : 1)\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"table missing leading separator; recovering automatically\", $hash2([\"source_location\"], {\"source_location\": $send($$$($$($nesting, 'Reader'), 'Cursor'), 'new', Opal.to_a(self.start_cursor_data))})));\n            cellspec = $hash2([], {});\n            repeat = 1;\n          };\n        } else {\n          \n          cell_text = self.buffer.$strip();\n          self.buffer = \"\";\n          cellspec = nil;\n          repeat = 1;\n          if ($truthy(($truthy($a = (($b = self.format['$=='](\"csv\")) ? cell_text['$empty?']()['$!']() : self.format['$=='](\"csv\"))) ? cell_text['$include?']((q = \"\\\"\")) : $a))) {\n            if ($truthy(($truthy($a = cell_text['$start_with?'](q)) ? cell_text['$end_with?'](q) : $a))) {\n              if ($truthy((cell_text = cell_text.$slice(1, $rb_minus(cell_text.$length(), 2))))) {\n                cell_text = cell_text.$strip().$squeeze(q)\n              } else {\n                \n                self.$logger().$error(self.$message_with_context(\"unclosed quote in CSV data; setting cell to empty\", $hash2([\"source_location\"], {\"source_location\": self.reader.$cursor_at_prev_line()})));\n                cell_text = \"\";\n              }\n            } else {\n              cell_text = cell_text.$squeeze(q)\n            }};\n        };\n        $send((1), 'upto', [repeat], ($$44 = function(i){var self = $$44.$$s || this, $c, $d, $$45, $e, column = nil, extra_cols = nil, offset = nil, cell = nil;\n          if (self.colcount == null) self.colcount = nil;\n          if (self.table == null) self.table = nil;\n          if (self.current_row == null) self.current_row = nil;\n          if (self.reader == null) self.reader = nil;\n          if (self.column_visits == null) self.column_visits = nil;\n          if (self.linenum == null) self.linenum = nil;\n\n        \n          \n          if (i == null) {\n            i = nil;\n          };\n          if (self.colcount['$=='](-1)) {\n            \n            self.table.$columns()['$<<']((column = $$$($$($nesting, 'Table'), 'Column').$new(self.table, $rb_minus($rb_plus(self.table.$columns().$size(), i), 1))));\n            if ($truthy(($truthy($c = ($truthy($d = cellspec) ? cellspec['$key?'](\"colspan\") : $d)) ? $rb_gt((extra_cols = $rb_minus(cellspec['$[]'](\"colspan\").$to_i(), 1)), 0) : $c))) {\n              \n              offset = self.table.$columns().$size();\n              $send(extra_cols, 'times', [], ($$45 = function(j){var self = $$45.$$s || this;\n                if (self.table == null) self.table = nil;\n\n              \n                \n                if (j == null) {\n                  j = nil;\n                };\n                return self.table.$columns()['$<<']($$$($$($nesting, 'Table'), 'Column').$new(self.table, $rb_plus(offset, j)));}, $$45.$$s = self, $$45.$$arity = 1, $$45));};\n          } else if ($truthy((column = self.table.$columns()['$[]'](self.current_row.$size())))) {\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"dropping cell because it exceeds specified number of columns\", $hash2([\"source_location\"], {\"source_location\": self.reader.$cursor_before_mark()})));\n            Opal.ret(nil);\n          };\n          cell = $$$($$($nesting, 'Table'), 'Cell').$new(column, cell_text, cellspec, $hash2([\"cursor\"], {\"cursor\": self.reader.$cursor_before_mark()}));\n          self.reader.$mark();\n          if ($truthy(($truthy($c = cell.$rowspan()['$!']()) ? $c : cell.$rowspan()['$=='](1)))) {\n          } else {\n            self.$activate_rowspan(cell.$rowspan(), ($truthy($c = cell.$colspan()) ? $c : 1))\n          };\n          self.column_visits = $rb_plus(self.column_visits, ($truthy($c = cell.$colspan()) ? $c : 1));\n          self.current_row['$<<'](cell);\n          if ($truthy(($truthy($c = self['$end_of_row?']()) ? ($truthy($d = ($truthy($e = self.colcount['$!='](-1)) ? $e : $rb_gt(self.linenum, 0))) ? $d : ($truthy($e = eol) ? i['$=='](repeat) : $e)) : $c))) {\n            return self.$close_row()\n          } else {\n            return nil\n          };}, $$44.$$s = self, $$44.$$arity = 1, $$44));\n        self.cell_open = false;\n        return nil;\n        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n      }, $ParserContext_close_cell$43.$$arity = -1);\n      self.$private();\n      \n      Opal.def(self, '$close_row', $ParserContext_close_row$46 = function $$close_row() {\n        var $a, self = this, $writer = nil;\n\n        \n        self.table.$rows().$body()['$<<'](self.current_row);\n        if (self.colcount['$=='](-1)) {\n          self.colcount = self.column_visits};\n        self.column_visits = 0;\n        self.current_row = [];\n        self.active_rowspans.$shift();\n        ($truthy($a = self.active_rowspans['$[]'](0)) ? $a : (($writer = [0, 0]), $send(self.active_rowspans, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        return nil;\n      }, $ParserContext_close_row$46.$$arity = 0);\n      \n      Opal.def(self, '$activate_rowspan', $ParserContext_activate_rowspan$47 = function $$activate_rowspan(rowspan, colspan) {\n        var $$48, self = this;\n\n        \n        $send((1), 'upto', [$rb_minus(rowspan, 1)], ($$48 = function(i){var self = $$48.$$s || this, $a, $writer = nil;\n          if (self.active_rowspans == null) self.active_rowspans = nil;\n\n        \n          \n          if (i == null) {\n            i = nil;\n          };\n          $writer = [i, $rb_plus(($truthy($a = self.active_rowspans['$[]'](i)) ? $a : 0), colspan)];\n          $send(self.active_rowspans, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$48.$$s = self, $$48.$$arity = 1, $$48));\n        return nil;\n      }, $ParserContext_activate_rowspan$47.$$arity = 2);\n      \n      Opal.def(self, '$end_of_row?', $ParserContext_end_of_row$ques$49 = function() {\n        var $a, self = this;\n\n        return ($truthy($a = self.colcount['$=='](-1)) ? $a : self.$effective_column_visits()['$=='](self.colcount))\n      }, $ParserContext_end_of_row$ques$49.$$arity = 0);\n      \n      Opal.def(self, '$effective_column_visits', $ParserContext_effective_column_visits$50 = function $$effective_column_visits() {\n        var self = this;\n\n        return $rb_plus(self.column_visits, self.active_rowspans['$[]'](0))\n      }, $ParserContext_effective_column_visits$50.$$arity = 0);\n      return (Opal.def(self, '$advance', $ParserContext_advance$51 = function $$advance() {\n        var self = this;\n\n        return (self.linenum = $rb_plus(self.linenum, 1))\n      }, $ParserContext_advance$51.$$arity = 0), nil) && 'advance';\n    })($$($nesting, 'Table'), null, $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/writer\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$respond_to?', '$write', '$+', '$chomp', '$include']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Writer');\n\n      var $nesting = [self].concat($parent_nesting), $Writer_write$1;\n\n      \n      Opal.def(self, '$write', $Writer_write$1 = function $$write(output, target) {\n        var self = this;\n\n        \n        if ($truthy(target['$respond_to?'](\"write\"))) {\n          target.$write($rb_plus(output.$chomp(), $$($nesting, 'LF')))\n        } else {\n          $$$('::', 'File').$write(target, output, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}))\n        };\n        return nil;\n      }, $Writer_write$1.$$arity = 2)\n    })($nesting[0], $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'VoidWriter');\n\n      var $nesting = [self].concat($parent_nesting), $VoidWriter_write$2;\n\n      \n      self.$include($$($nesting, 'Writer'));\n      \n      Opal.def(self, '$write', $VoidWriter_write$2 = function $$write(output, target) {\n        var self = this;\n\n        return nil\n      }, $VoidWriter_write$2.$$arity = 2);\n    })($nesting[0], $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/load\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$merge', '$[]', '$start', '$key?', '$!=', '$logger', '$new', '$logger=', '$-', '$!', '$===', '$dup', '$tap', '$each', '$partition', '$[]=', '$split', '$gsub', '$+', '$respond_to?', '$keys', '$raise', '$join', '$ancestors', '$class', '$==', '$at', '$to_i', '$mtime', '$absolute_path', '$path', '$dirname', '$basename', '$extname', '$read', '$rewind', '$drop', '$record', '$parse', '$exception', '$message', '$set_backtrace', '$backtrace', '$stack_trace', '$stack_trace=', '$open', '$load']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $load$1, $load_file$8;\n\n      \n      \n      Opal.def(self, '$load', $load$1 = function $$load(input, options) {\n        var $a, $b, $c, $d, $$2, $$4, $$6, self = this, timings = nil, logger = nil, $writer = nil, attrs = nil, input_path = nil, source = nil, doc = nil, e = nil, context = nil, wrapped_e = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        try {\n          \n          options = options.$merge();\n          if ($truthy((timings = options['$[]'](\"timings\")))) {\n            timings.$start(\"read\")};\n          if ($truthy(($truthy($a = options['$key?'](\"logger\")) ? (logger = options['$[]'](\"logger\"))['$!=']($$($nesting, 'LoggerManager').$logger()) : $a))) {\n            \n            $writer = [($truthy($a = logger) ? $a : $$($nesting, 'NullLogger').$new())];\n            $send($$($nesting, 'LoggerManager'), 'logger=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy((attrs = options['$[]'](\"attributes\"))['$!']())) {\n            attrs = $hash2([], {})\n          } else if ($truthy($$$('::', 'Hash')['$==='](attrs))) {\n            attrs = attrs.$merge()\n          } else if ($truthy(($truthy($a = (($d = $$$('::', 'Java', 'skip_raise')) && ($c = $$$($d, 'JavaUtil', 'skip_raise')) && ($b = $$$($c, 'Map', 'skip_raise')) ? 'constant' : nil)) ? $$$($$$($$$('::', 'Java'), 'JavaUtil'), 'Map')['$==='](attrs) : $a))) {\n            attrs = attrs.$dup()\n          } else if ($truthy($$$('::', 'Array')['$==='](attrs))) {\n            attrs = $send($hash2([], {}), 'tap', [], ($$2 = function(accum){var self = $$2.$$s || this, $$3;\n\n            \n              \n              if (accum == null) {\n                accum = nil;\n              };\n              return $send(attrs, 'each', [], ($$3 = function(entry){var self = $$3.$$s || this, $e, $f, k = nil, _ = nil, v = nil;\n\n              \n                \n                if (entry == null) {\n                  entry = nil;\n                };\n                $f = entry.$partition(\"=\"), $e = Opal.to_ary($f), (k = ($e[0] == null ? nil : $e[0])), (_ = ($e[1] == null ? nil : $e[1])), (v = ($e[2] == null ? nil : $e[2])), $f;\n                \n                $writer = [k, v];\n                $send(accum, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];;}, $$3.$$s = self, $$3.$$arity = 1, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2))\n          } else if ($truthy($$$('::', 'String')['$==='](attrs))) {\n            attrs = $send($hash2([], {}), 'tap', [], ($$4 = function(accum){var self = $$4.$$s || this, $$5;\n\n            \n              \n              if (accum == null) {\n                accum = nil;\n              };\n              return $send(attrs.$gsub($$($nesting, 'SpaceDelimiterRx'), $rb_plus(\"\\\\1\", $$($nesting, 'NULL'))).$gsub($$($nesting, 'EscapedSpaceRx'), \"\\\\1\").$split($$($nesting, 'NULL')), 'each', [], ($$5 = function(entry){var self = $$5.$$s || this, $e, $f, k = nil, _ = nil, v = nil;\n\n              \n                \n                if (entry == null) {\n                  entry = nil;\n                };\n                $f = entry.$partition(\"=\"), $e = Opal.to_ary($f), (k = ($e[0] == null ? nil : $e[0])), (_ = ($e[1] == null ? nil : $e[1])), (v = ($e[2] == null ? nil : $e[2])), $f;\n                \n                $writer = [k, v];\n                $send(accum, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];;}, $$5.$$s = self, $$5.$$arity = 1, $$5));}, $$4.$$s = self, $$4.$$arity = 1, $$4))\n          } else if ($truthy(($truthy($a = attrs['$respond_to?'](\"keys\")) ? attrs['$respond_to?'](\"[]\") : $a))) {\n            attrs = $send($hash2([], {}), 'tap', [], ($$6 = function(accum){var self = $$6.$$s || this, $$7;\n\n            \n              \n              if (accum == null) {\n                accum = nil;\n              };\n              return $send(attrs.$keys(), 'each', [], ($$7 = function(k){var self = $$7.$$s || this;\n\n              \n                \n                if (k == null) {\n                  k = nil;\n                };\n                $writer = [k, attrs['$[]'](k)];\n                $send(accum, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];}, $$7.$$s = self, $$7.$$arity = 1, $$7));}, $$6.$$s = self, $$6.$$arity = 1, $$6))\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"illegal type for attributes option: \" + (attrs.$class().$ancestors().$join(\" < \")))\n          };\n          if ($truthy($$$('::', 'File')['$==='](input))) {\n            \n            \n            $writer = [\"input_mtime\", (function() {if ($$($nesting, 'RUBY_ENGINE')['$=='](\"jruby\")) {\n              \n              return $$$('::', 'Time').$at(input.$mtime().$to_i());\n            } else {\n              return input.$mtime()\n            }; return nil; })()];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"docfile\", (input_path = $$$('::', 'File').$absolute_path(input.$path()))];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"docdir\", $$$('::', 'File').$dirname(input_path)];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"docname\", $$($nesting, 'Helpers').$basename(input_path, (($writer = [\"docfilesuffix\", $$($nesting, 'Helpers').$extname(input_path)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            source = input.$read();\n          } else if ($truthy(input['$respond_to?'](\"read\"))) {\n            \n            try {\n              input.$rewind()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  nil\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n            source = input.$read();\n          } else if ($truthy($$$('::', 'String')['$==='](input))) {\n            source = input\n          } else if ($truthy($$$('::', 'Array')['$==='](input))) {\n            source = input.$drop(0)\n          } else if ($truthy(input)) {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"unsupported input type: \" + (input.$class()))};\n          if ($truthy(timings)) {\n            \n            timings.$record(\"read\");\n            timings.$start(\"parse\");};\n          \n          $writer = [\"attributes\", attrs];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          doc = (function() {if (options['$[]'](\"parse\")['$=='](false)) {\n            \n            return $$($nesting, 'Document').$new(source, options);\n          } else {\n            return $$($nesting, 'Document').$new(source, options).$parse()\n          }; return nil; })();\n          if ($truthy(timings)) {\n            timings.$record(\"parse\")};\n          return doc;\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;\n            try {\n              \n              \n              try {\n                \n                context = \"\" + \"asciidoctor: FAILED: \" + (($truthy($a = attrs['$[]'](\"docfile\")) ? $a : \"<stdin>\")) + \": Failed to load AsciiDoc document\";\n                if ($truthy(e['$respond_to?'](\"exception\"))) {\n                  \n                  wrapped_e = e.$exception(\"\" + (context) + \" - \" + (e.$message()));\n                  wrapped_e.$set_backtrace(e.$backtrace());\n                } else {\n                  \n                  wrapped_e = e.$class().$new(context, e);\n                  \n                  $writer = [e.$stack_trace()];\n                  $send(wrapped_e, 'stack_trace=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                };\n              } catch ($err) {\n                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                  try {\n                    wrapped_e = e\n                  } finally { Opal.pop_exception() }\n                } else { throw $err; }\n              };;\n              return self.$raise(wrapped_e);\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $load$1.$$arity = -2);\n      return (Opal.def(self, '$load_file', $load_file$8 = function $$load_file(filename, options) {\n        var $$9, self = this;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        return $send($$$('::', 'File'), 'open', [filename, $$($nesting, 'FILE_READ_MODE')], ($$9 = function(file){var self = $$9.$$s || this;\n\n        \n          \n          if (file == null) {\n            file = nil;\n          };\n          return self.$load(file, options);}, $$9.$$s = self, $$9.$$arity = 1, $$9));\n      }, $load_file$8.$$arity = -2), nil) && 'load_file';\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/convert\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$delete', '$merge', '$===', '$absolute_path', '$path', '$load', '$respond_to?', '$[]=', '$-', '$key?', '$fetch', '$[]', '$dirname', '$expand_path', '$join', '$attributes', '$outfilesuffix', '$==', '$raise', '$pwd', '$>=', '$safe', '$normalize_system_path', '$mkdir_p', '$directory?', '$!', '$convert', '$write', '$<', '$attr?', '$basebackend?', '$attr', '$uriish?', '$include?', '$syntax_highlighter', '$write_stylesheet?', '$write_primary_stylesheet', '$instance', '$to_s', '$!=', '$read_asset', '$file?', '$write_stylesheet', '$open']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $convert$1, $convert_file$2;\n\n      \n      \n      Opal.def(self, '$convert', $convert$1 = function $$convert(input, options) {\n        var $a, $b, $c, $d, $e, self = this, to_dir = nil, mkdirs = nil, $case = nil, to_file = nil, write_to_target = nil, sibling_path = nil, stream_output = nil, $writer = nil, outdir = nil, doc = nil, outfile = nil, working_dir = nil, jail = nil, output = nil, stylesdir = nil, stylesheet = nil, copy_asciidoctor_stylesheet = nil, copy_user_stylesheet = nil, copy_syntax_hl_stylesheet = nil, syntax_hl = nil, stylesoutdir = nil, stylesheet_src = nil, stylesheet_dest = nil, stylesheet_data = nil, stylesheet_outdir = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        (options = options.$merge()).$delete(\"parse\");\n        to_dir = options.$delete(\"to_dir\");\n        mkdirs = options.$delete(\"mkdirs\");\n        $case = (to_file = options.$delete(\"to_file\"));\n        if (true['$===']($case) || nil['$===']($case)) {\n        if ($truthy((write_to_target = to_dir))) {\n        } else if ($truthy($$$('::', 'File')['$==='](input))) {\n          sibling_path = $$$('::', 'File').$absolute_path(input.$path())};\n        to_file = nil;}\n        else if (false['$===']($case)) {to_file = nil}\n        else if (\"/dev/null\"['$===']($case)) {return self.$load(input, options)}\n        else {if ($truthy((stream_output = to_file['$respond_to?'](\"write\")))) {\n        } else {\n          \n          $writer = [\"to_file\", (write_to_target = to_file)];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        }};\n        if ($truthy(options['$key?'](\"standalone\"))) {\n        } else if ($truthy(($truthy($a = sibling_path) ? $a : write_to_target))) {\n          \n          $writer = [\"standalone\", options.$fetch(\"header_footer\", true)];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy(options['$key?'](\"header_footer\"))) {\n          \n          $writer = [\"standalone\", options['$[]'](\"header_footer\")];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(sibling_path)) {\n          \n          $writer = [\"to_dir\", (outdir = $$$('::', 'File').$dirname(sibling_path))];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy(write_to_target)) {\n          if ($truthy(to_dir)) {\n            if ($truthy(to_file)) {\n              \n              $writer = [\"to_dir\", $$$('::', 'File').$dirname($$$('::', 'File').$expand_path(to_file, to_dir))];\n              $send(options, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              \n              $writer = [\"to_dir\", $$$('::', 'File').$expand_path(to_dir)];\n              $send(options, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }\n          } else if ($truthy(to_file)) {\n            \n            $writer = [\"to_dir\", $$$('::', 'File').$dirname($$$('::', 'File').$expand_path(to_file))];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}};\n        doc = self.$load(input, options);\n        if ($truthy(sibling_path)) {\n          \n          outfile = $$$('::', 'File').$join(outdir, \"\" + (doc.$attributes()['$[]'](\"docname\")) + (doc.$outfilesuffix()));\n          if (outfile['$=='](sibling_path)) {\n            self.$raise($$$('::', 'IOError'), \"\" + \"input file and output file cannot be the same: \" + (outfile))};\n        } else if ($truthy(write_to_target)) {\n          \n          working_dir = (function() {if ($truthy(options['$key?'](\"base_dir\"))) {\n            \n            return $$$('::', 'File').$expand_path(options['$[]'](\"base_dir\"));\n          } else {\n            return $$$('::', 'Dir').$pwd()\n          }; return nil; })();\n          jail = (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n            return working_dir\n          } else {\n            return nil\n          }; return nil; })();\n          if ($truthy(to_dir)) {\n            \n            outdir = doc.$normalize_system_path(to_dir, working_dir, jail, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n            if ($truthy(to_file)) {\n              \n              outfile = doc.$normalize_system_path(to_file, outdir, nil, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n              outdir = $$$('::', 'File').$dirname(outfile);\n            } else {\n              outfile = $$$('::', 'File').$join(outdir, \"\" + (doc.$attributes()['$[]'](\"docname\")) + (doc.$outfilesuffix()))\n            };\n          } else if ($truthy(to_file)) {\n            \n            outfile = doc.$normalize_system_path(to_file, working_dir, jail, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n            outdir = $$$('::', 'File').$dirname(outfile);};\n          if ($truthy(($truthy($a = $$$('::', 'File')['$==='](input)) ? outfile['$==']($$$('::', 'File').$absolute_path(input.$path())) : $a))) {\n            self.$raise($$$('::', 'IOError'), \"\" + \"input file and output file cannot be the same: \" + (outfile))};\n          if ($truthy(mkdirs)) {\n            $$($nesting, 'Helpers').$mkdir_p(outdir)\n          } else if ($truthy($$$('::', 'File')['$directory?'](outdir))) {\n          } else {\n            self.$raise($$$('::', 'IOError'), \"\" + \"target directory does not exist: \" + (to_dir) + \" (hint: set :mkdirs option)\")\n          };\n        } else {\n          \n          outfile = to_file;\n          outdir = nil;\n        };\n        if ($truthy(($truthy($a = outfile) ? stream_output['$!']() : $a))) {\n          output = doc.$convert($hash2([\"outfile\", \"outdir\"], {\"outfile\": outfile, \"outdir\": outdir}))\n        } else {\n          output = doc.$convert()\n        };\n        if ($truthy(outfile)) {\n          \n          doc.$write(output, outfile);\n          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = stream_output['$!']()) ? $rb_lt(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $e)) ? doc['$attr?'](\"linkcss\") : $d)) ? doc['$attr?'](\"copycss\") : $c)) ? doc['$basebackend?'](\"html\") : $b)) ? ($truthy($b = (stylesdir = doc.$attr(\"stylesdir\"))) ? $$($nesting, 'Helpers')['$uriish?'](stylesdir) : $b)['$!']() : $a))) {\n            \n            if ($truthy((stylesheet = doc.$attr(\"stylesheet\")))) {\n              if ($truthy($$($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](stylesheet))) {\n                copy_asciidoctor_stylesheet = true\n              } else if ($truthy($$($nesting, 'Helpers')['$uriish?'](stylesheet)['$!']())) {\n                copy_user_stylesheet = true}};\n            copy_syntax_hl_stylesheet = ($truthy($a = (syntax_hl = doc.$syntax_highlighter())) ? syntax_hl['$write_stylesheet?'](doc) : $a);\n            if ($truthy(($truthy($a = ($truthy($b = copy_asciidoctor_stylesheet) ? $b : copy_user_stylesheet)) ? $a : copy_syntax_hl_stylesheet))) {\n              \n              stylesoutdir = doc.$normalize_system_path(stylesdir, outdir, (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n                return outdir\n              } else {\n                return nil\n              }; return nil; })());\n              if ($truthy(mkdirs)) {\n                $$($nesting, 'Helpers').$mkdir_p(stylesoutdir)\n              } else if ($truthy($$$('::', 'File')['$directory?'](stylesoutdir))) {\n              } else {\n                self.$raise($$$('::', 'IOError'), \"\" + \"target stylesheet directory does not exist: \" + (stylesoutdir) + \" (hint: set :mkdirs option)\")\n              };\n              if ($truthy(copy_asciidoctor_stylesheet)) {\n                $$($nesting, 'Stylesheets').$instance().$write_primary_stylesheet(stylesoutdir)\n              } else if ($truthy(copy_user_stylesheet)) {\n                \n                if ($truthy(($truthy($a = (stylesheet_src = doc.$attr(\"copycss\"))['$=='](\"\")) ? $a : stylesheet_src['$=='](true)))) {\n                  stylesheet_src = doc.$normalize_system_path(stylesheet)\n                } else {\n                  stylesheet_src = doc.$normalize_system_path(stylesheet_src.$to_s())\n                };\n                stylesheet_dest = doc.$normalize_system_path(stylesheet, stylesoutdir, (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n                  return outdir\n                } else {\n                  return nil\n                }; return nil; })());\n                if ($truthy(($truthy($a = stylesheet_src['$!='](stylesheet_dest)) ? (stylesheet_data = doc.$read_asset(stylesheet_src, $hash2([\"warn_on_failure\", \"label\"], {\"warn_on_failure\": $$$('::', 'File')['$file?'](stylesheet_dest)['$!'](), \"label\": \"stylesheet\"}))) : $a))) {\n                  \n                  if ($truthy(($truthy($a = (stylesheet_outdir = $$$('::', 'File').$dirname(stylesheet_dest))['$!='](stylesoutdir)) ? $$$('::', 'File')['$directory?'](stylesheet_outdir)['$!']() : $a))) {\n                    if ($truthy(mkdirs)) {\n                      $$($nesting, 'Helpers').$mkdir_p(stylesheet_outdir)\n                    } else {\n                      self.$raise($$$('::', 'IOError'), \"\" + \"target stylesheet directory does not exist: \" + (stylesheet_outdir) + \" (hint: set :mkdirs option)\")\n                    }};\n                  $$$('::', 'File').$write(stylesheet_dest, stylesheet_data, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));};};\n              if ($truthy(copy_syntax_hl_stylesheet)) {\n                syntax_hl.$write_stylesheet(doc, stylesoutdir)};};};\n          return doc;\n        } else {\n          return output\n        };\n      }, $convert$1.$$arity = -2);\n      \n      Opal.def(self, '$convert_file', $convert_file$2 = function $$convert_file(filename, options) {\n        var $$3, self = this;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        return $send($$$('::', 'File'), 'open', [filename, $$($nesting, 'FILE_READ_MODE')], ($$3 = function(file){var self = $$3.$$s || this;\n\n        \n          \n          if (file == null) {\n            file = nil;\n          };\n          return self.$convert(file, options);}, $$3.$$s = self, $$3.$$arity = 1, $$3));\n      }, $convert_file$2.$$arity = -2);\n      Opal.alias(self, \"render\", \"convert\");\n      return Opal.alias(self, \"render_file\", \"convert_file\");\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/syntax_highlighter/highlightjs\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$register_for', '$merge', '$proc', '$[]=', '$-', '$attr', '$[]', '$==', '$attr?', '$join', '$map', '$split', '$lstrip']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'HighlightJsAdapter');\n\n      var $nesting = [self].concat($parent_nesting), $HighlightJsAdapter_initialize$1, $HighlightJsAdapter_format$2, $HighlightJsAdapter_docinfo$ques$4, $HighlightJsAdapter_docinfo$5;\n\n      \n      self.$register_for(\"highlightjs\", \"highlight.js\");\n      \n      Opal.def(self, '$initialize', $HighlightJsAdapter_initialize$1 = function $$initialize($a) {\n        var $post_args, args, $iter = $HighlightJsAdapter_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $HighlightJsAdapter_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $HighlightJsAdapter_initialize$1, false), $zuper, $iter);\n        return (self.name = (self.pre_class = \"highlightjs\"));\n      }, $HighlightJsAdapter_initialize$1.$$arity = -1);\n      \n      Opal.def(self, '$format', $HighlightJsAdapter_format$2 = function $$format(node, lang, opts) {\n        var $$3, $iter = $HighlightJsAdapter_format$2.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $HighlightJsAdapter_format$2.$$p = null;\n        return $send(self, Opal.find_super_dispatcher(self, 'format', $HighlightJsAdapter_format$2, false), [node, lang, opts.$merge($hash2([\"transform\"], {\"transform\": $send(self, 'proc', [], ($$3 = function(_, code){var self = $$3.$$s || this, $a, $writer = nil;\n\n        \n          \n          if (_ == null) {\n            _ = nil;\n          };\n          \n          if (code == null) {\n            code = nil;\n          };\n          $writer = [\"class\", \"\" + \"language-\" + (($truthy($a = lang) ? $a : \"none\")) + \" hljs\"];\n          $send(code, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))}))], null)\n      }, $HighlightJsAdapter_format$2.$$arity = 3);\n      \n      Opal.def(self, '$docinfo?', $HighlightJsAdapter_docinfo$ques$4 = function(location) {\n        var self = this;\n\n        return true\n      }, $HighlightJsAdapter_docinfo$ques$4.$$arity = 1);\n      return (Opal.def(self, '$docinfo', $HighlightJsAdapter_docinfo$5 = function $$docinfo(location, doc, opts) {\n        var $$6, self = this, base_url = nil;\n\n        \n        base_url = doc.$attr(\"highlightjsdir\", \"\" + (opts['$[]'](\"cdn_base_url\")) + \"/highlight.js/\" + ($$($nesting, 'HIGHLIGHT_JS_VERSION')));\n        if (location['$=='](\"head\")) {\n          return \"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (base_url) + \"/styles/\" + (doc.$attr(\"highlightjs-theme\", \"github\")) + \".min.css\\\"\" + (opts['$[]'](\"self_closing_tag_slash\")) + \">\"\n        } else {\n          return \"\" + \"<script src=\\\"\" + (base_url) + \"/highlight.min.js\\\"></script>\\n\" + ((function() {if ($truthy(doc['$attr?'](\"highlightjs-languages\"))) {\n            return $send(doc.$attr(\"highlightjs-languages\").$split(\",\"), 'map', [], ($$6 = function(lang){var self = $$6.$$s || this;\n\n            \n              \n              if (lang == null) {\n                lang = nil;\n              };\n              return \"\" + \"<script src=\\\"\" + (base_url) + \"/languages/\" + (lang.$lstrip()) + \".min.js\\\"></script>\\n\";}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$join()\n          } else {\n            return \"\"\n          }; return nil; })()) + \"<script>\\n\" + \"if (!hljs.initHighlighting.called) {\\n\" + \"  hljs.initHighlighting.called = true\\n\" + \"  ;[].slice.call(document.querySelectorAll('pre.highlight > code')).forEach(function (el) { hljs.highlightBlock(el) })\\n\" + \"}\\n\" + \"</script>\"\n        };\n      }, $HighlightJsAdapter_docinfo$5.$$arity = 3), nil) && 'docinfo';\n    })($$($nesting, 'SyntaxHighlighter'), $$$($$($nesting, 'SyntaxHighlighter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/syntax_highlighter\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $klass = Opal.klass;\n\n  Opal.add_stubs(['$attr_reader', '$raise', '$class', '$extend', '$private_class_method', '$register', '$map', '$to_s', '$each', '$[]=', '$registry', '$-', '$[]', '$for', '$===', '$new', '$name', '$private', '$include', '$==', '$delete', '$join', '$content']);\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'SyntaxHighlighter');\n\n      var $nesting = [self].concat($parent_nesting), $SyntaxHighlighter_initialize$1, $SyntaxHighlighter_docinfo$ques$2, $SyntaxHighlighter_docinfo$3, $SyntaxHighlighter_highlight$ques$4, $SyntaxHighlighter_highlight$5, $SyntaxHighlighter_format$6, $SyntaxHighlighter_write_stylesheet$ques$7, $SyntaxHighlighter_write_stylesheet$8, $SyntaxHighlighter_included$9;\n\n      \n      self.$attr_reader(\"name\");\n      \n      Opal.def(self, '$initialize', $SyntaxHighlighter_initialize$1 = function $$initialize(name, backend, opts) {\n        var self = this;\n\n        \n        \n        if (backend == null) {\n          backend = \"html5\";\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        return (self.name = (self.pre_class = name));\n      }, $SyntaxHighlighter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$docinfo?', $SyntaxHighlighter_docinfo$ques$2 = function(location) {\n        var self = this;\n\n        return nil\n      }, $SyntaxHighlighter_docinfo$ques$2.$$arity = 1);\n      \n      Opal.def(self, '$docinfo', $SyntaxHighlighter_docinfo$3 = function $$docinfo(location, doc, opts) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"docinfo\") + \" method since #docinfo? returns true\")\n      }, $SyntaxHighlighter_docinfo$3.$$arity = 3);\n      \n      Opal.def(self, '$highlight?', $SyntaxHighlighter_highlight$ques$4 = function() {\n        var self = this;\n\n        return nil\n      }, $SyntaxHighlighter_highlight$ques$4.$$arity = 0);\n      \n      Opal.def(self, '$highlight', $SyntaxHighlighter_highlight$5 = function $$highlight(node, source, lang, opts) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"highlight\") + \" method since #highlight? returns true\")\n      }, $SyntaxHighlighter_highlight$5.$$arity = 4);\n      \n      Opal.def(self, '$format', $SyntaxHighlighter_format$6 = function $$format(node, lang, opts) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"format\") + \" method\")\n      }, $SyntaxHighlighter_format$6.$$arity = 3);\n      \n      Opal.def(self, '$write_stylesheet?', $SyntaxHighlighter_write_stylesheet$ques$7 = function(doc) {\n        var self = this;\n\n        return nil\n      }, $SyntaxHighlighter_write_stylesheet$ques$7.$$arity = 1);\n      \n      Opal.def(self, '$write_stylesheet', $SyntaxHighlighter_write_stylesheet$8 = function $$write_stylesheet(doc, to_dir) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"write_stylesheet\") + \" method since #write_stylesheet? returns true\")\n      }, $SyntaxHighlighter_write_stylesheet$8.$$arity = 2);\n      Opal.defs(self, '$included', $SyntaxHighlighter_included$9 = function $$included(into) {\n        var self = this;\n\n        return into.$extend($$($nesting, 'Config'))\n      }, $SyntaxHighlighter_included$9.$$arity = 1);\n      self.$private_class_method(\"included\");\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Config');\n\n        var $nesting = [self].concat($parent_nesting), $Config_register_for$10;\n\n        \n        Opal.def(self, '$register_for', $Config_register_for$10 = function $$register_for($a) {\n          var $post_args, names, $$11, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          names = $post_args;;\n          return $send($$($nesting, 'SyntaxHighlighter'), 'register', [self].concat(Opal.to_a($send(names, 'map', [], ($$11 = function(name){var self = $$11.$$s || this;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return name.$to_s();}, $$11.$$s = self, $$11.$$arity = 1, $$11)))));\n        }, $Config_register_for$10.$$arity = -1)\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $Factory_register$12, $Factory_for$14, $Factory_create$15, $Factory_registry$16;\n\n        \n        \n        Opal.def(self, '$register', $Factory_register$12 = function $$register(syntax_highlighter, $a) {\n          var $post_args, names, $$13, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          names = $post_args;;\n          return $send(names, 'each', [], ($$13 = function(name){var self = $$13.$$s || this, $writer = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            $writer = [name, syntax_highlighter];\n            $send(self.$registry(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];}, $$13.$$s = self, $$13.$$arity = 1, $$13));\n        }, $Factory_register$12.$$arity = -2);\n        \n        Opal.def(self, '$for', $Factory_for$14 = function(name) {\n          var self = this;\n\n          return self.$registry()['$[]'](name)\n        }, $Factory_for$14.$$arity = 1);\n        \n        Opal.def(self, '$create', $Factory_create$15 = function $$create(name, backend, opts) {\n          var self = this, syntax_hl = nil;\n\n          \n          \n          if (backend == null) {\n            backend = \"html5\";\n          };\n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((syntax_hl = self.$for(name)))) {\n            \n            if ($truthy($$$('::', 'Class')['$==='](syntax_hl))) {\n              syntax_hl = syntax_hl.$new(name, backend, opts)};\n            if ($truthy(syntax_hl.$name())) {\n            } else {\n              self.$raise($$$('::', 'NameError'), \"\" + (syntax_hl.$class()) + \" must specify a value for `name'\")\n            };\n            return syntax_hl;\n          } else {\n            return nil\n          };\n        }, $Factory_create$15.$$arity = -2);\n        self.$private();\n        \n        Opal.def(self, '$registry', $Factory_registry$16 = function $$registry() {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Factory')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"registry\") + \" method\")\n        }, $Factory_registry$16.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'CustomFactory');\n\n        var $nesting = [self].concat($parent_nesting), $CustomFactory_initialize$17;\n\n        \n        self.$include($$($nesting, 'Factory'));\n        \n        Opal.def(self, '$initialize', $CustomFactory_initialize$17 = function $$initialize(seed_registry) {\n          var $a, self = this;\n\n          \n          \n          if (seed_registry == null) {\n            seed_registry = nil;\n          };\n          return (self.registry = ($truthy($a = seed_registry) ? $a : $hash2([], {})));\n        }, $CustomFactory_initialize$17.$$arity = -1);\n        self.$private();\n        return self.$attr_reader(\"registry\");\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DefaultFactory');\n\n        var $nesting = [self].concat($parent_nesting), $DefaultFactory_registry$18;\n\n        \n        self.$include($$($nesting, 'Factory'));\n        (Opal.class_variable_set($nesting[0], '@@registry', $hash2([], {})));\n        self.$private();\n        \n        Opal.def(self, '$registry', $DefaultFactory_registry$18 = function $$registry() {\n          var $a, self = this;\n\n          return (($a = $nesting[0].$$cvars['@@registry']) == null ? nil : $a)\n        }, $DefaultFactory_registry$18.$$arity = 0);\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        } else {\n          nil\n        };\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DefaultFactoryProxy');\n\n        var $nesting = [self].concat($parent_nesting);\n\n        \n        self.$include($$($nesting, 'DefaultFactory'));\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n          return nil\n        } else {\n          return nil\n        };\n      })($nesting[0], $$($nesting, 'CustomFactory'), $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Base');\n\n        var $nesting = [self].concat($parent_nesting), $Base_format$19;\n\n        self.$$prototype.pre_class = nil;\n        \n        self.$include($$($nesting, 'SyntaxHighlighter'));\n        return (Opal.def(self, '$format', $Base_format$19 = function $$format(node, lang, opts) {\n          var $$20, $$21, self = this, class_attr_val = nil, transform = nil, pre = nil, code = nil, $writer = nil;\n\n          \n          class_attr_val = (function() {if ($truthy(opts['$[]'](\"nowrap\"))) {\n            return \"\" + (self.pre_class) + \" highlight nowrap\"\n          } else {\n            return \"\" + (self.pre_class) + \" highlight\"\n          }; return nil; })();\n          if ($truthy((transform = opts['$[]'](\"transform\")))) {\n            \n            transform['$[]']((pre = $hash2([\"class\"], {\"class\": class_attr_val})), (code = (function() {if ($truthy(lang)) {\n              return $hash2([\"data-lang\"], {\"data-lang\": lang})\n            } else {\n              return $hash2([], {})\n            }; return nil; })()));\n            if ($truthy((lang = code.$delete(\"data-lang\")))) {\n              \n              $writer = [\"data-lang\", lang];\n              $send(code, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            return \"\" + \"<pre\" + ($send(pre, 'map', [], ($$20 = function(k, v){var self = $$20.$$s || this;\n\n            \n              \n              if (k == null) {\n                k = nil;\n              };\n              \n              if (v == null) {\n                v = nil;\n              };\n              return \"\" + \" \" + (k) + \"=\\\"\" + (v) + \"\\\"\";}, $$20.$$s = self, $$20.$$arity = 2, $$20)).$join()) + \"><code\" + ($send(code, 'map', [], ($$21 = function(k, v){var self = $$21.$$s || this;\n\n            \n              \n              if (k == null) {\n                k = nil;\n              };\n              \n              if (v == null) {\n                v = nil;\n              };\n              return \"\" + \" \" + (k) + \"=\\\"\" + (v) + \"\\\"\";}, $$21.$$s = self, $$21.$$arity = 2, $$21)).$join()) + \">\" + (node.$content()) + \"</code></pre>\";\n          } else {\n            return \"\" + \"<pre class=\\\"\" + (class_attr_val) + \"\\\"><code\" + ((function() {if ($truthy(lang)) {\n              return \"\" + \" data-lang=\\\"\" + (lang) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\" + (node.$content()) + \"</code></pre>\"\n          };\n        }, $Base_format$19.$$arity = 3), nil) && 'format';\n      })($nesting[0], null, $nesting);\n      self.$extend($$($nesting, 'DefaultFactory'));\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting);\n  self.$require(\"asciidoctor/syntax_highlighter.rb\"+ '/../' + \"syntax_highlighter/highlightjs\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    return nil\n  } else {\n    return nil\n  };\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/timings\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$now', '$[]=', '$-', '$delete', '$reduce', '$+', '$[]', '$>', '$time', '$puts', '$sprintf', '$to_f', '$read_parse', '$convert', '$read_parse_convert', '$private', '$const_defined?', '$==', '$clock_gettime']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Timings');\n\n      var $nesting = [self].concat($parent_nesting), $Timings_initialize$1, $Timings_start$2, $Timings_record$3, $Timings_time$4, $Timings_read$6, $Timings_parse$7, $Timings_read_parse$8, $Timings_convert$9, $Timings_read_parse_convert$10, $Timings_write$11, $Timings_total$12, $Timings_print_report$13, $a, $b, $c, $d, $e, $Timings_now$14, $Timings_now$15;\n\n      self.$$prototype.timers = self.$$prototype.log = nil;\n      \n      \n      Opal.def(self, '$initialize', $Timings_initialize$1 = function $$initialize() {\n        var self = this;\n\n        \n        self.log = $hash2([], {});\n        return (self.timers = $hash2([], {}));\n      }, $Timings_initialize$1.$$arity = 0);\n      \n      Opal.def(self, '$start', $Timings_start$2 = function $$start(key) {\n        var self = this, $writer = nil;\n\n        \n        $writer = [key, self.$now()];\n        $send(self.timers, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $Timings_start$2.$$arity = 1);\n      \n      Opal.def(self, '$record', $Timings_record$3 = function $$record(key) {\n        var self = this, $writer = nil;\n\n        \n        $writer = [key, $rb_minus(self.$now(), self.timers.$delete(key))];\n        $send(self.log, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $Timings_record$3.$$arity = 1);\n      \n      Opal.def(self, '$time', $Timings_time$4 = function $$time($a) {\n        var $post_args, keys, $$5, self = this, time = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        keys = $post_args;;\n        time = $send(keys, 'reduce', [0], ($$5 = function(sum, key){var self = $$5.$$s || this, $b;\n          if (self.log == null) self.log = nil;\n\n        \n          \n          if (sum == null) {\n            sum = nil;\n          };\n          \n          if (key == null) {\n            key = nil;\n          };\n          return $rb_plus(sum, ($truthy($b = self.log['$[]'](key)) ? $b : 0));}, $$5.$$s = self, $$5.$$arity = 2, $$5));\n        if ($truthy($rb_gt(time, 0))) {\n          return time\n        } else {\n          return nil\n        };\n      }, $Timings_time$4.$$arity = -1);\n      \n      Opal.def(self, '$read', $Timings_read$6 = function $$read() {\n        var self = this;\n\n        return self.$time(\"read\")\n      }, $Timings_read$6.$$arity = 0);\n      \n      Opal.def(self, '$parse', $Timings_parse$7 = function $$parse() {\n        var self = this;\n\n        return self.$time(\"parse\")\n      }, $Timings_parse$7.$$arity = 0);\n      \n      Opal.def(self, '$read_parse', $Timings_read_parse$8 = function $$read_parse() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\")\n      }, $Timings_read_parse$8.$$arity = 0);\n      \n      Opal.def(self, '$convert', $Timings_convert$9 = function $$convert() {\n        var self = this;\n\n        return self.$time(\"convert\")\n      }, $Timings_convert$9.$$arity = 0);\n      \n      Opal.def(self, '$read_parse_convert', $Timings_read_parse_convert$10 = function $$read_parse_convert() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\", \"convert\")\n      }, $Timings_read_parse_convert$10.$$arity = 0);\n      \n      Opal.def(self, '$write', $Timings_write$11 = function $$write() {\n        var self = this;\n\n        return self.$time(\"write\")\n      }, $Timings_write$11.$$arity = 0);\n      \n      Opal.def(self, '$total', $Timings_total$12 = function $$total() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\", \"convert\", \"write\")\n      }, $Timings_total$12.$$arity = 0);\n      \n      Opal.def(self, '$print_report', $Timings_print_report$13 = function $$print_report(to, subject) {\n        var self = this;\n        if ($gvars.stdout == null) $gvars.stdout = nil;\n\n        \n        \n        if (to == null) {\n          to = $gvars.stdout;\n        };\n        \n        if (subject == null) {\n          subject = nil;\n        };\n        if ($truthy(subject)) {\n          to.$puts(\"\" + \"Input file: \" + (subject))};\n        to.$puts(\"\" + \"  Time to read and parse source: \" + (self.$sprintf(\"%05.5f\", self.$read_parse().$to_f())));\n        to.$puts(\"\" + \"  Time to convert document: \" + (self.$sprintf(\"%05.5f\", self.$convert().$to_f())));\n        return to.$puts(\"\" + \"  Total time (read, parse and convert): \" + (self.$sprintf(\"%05.5f\", self.$read_parse_convert().$to_f())));\n      }, $Timings_print_report$13.$$arity = -1);\n      self.$private();\n      if ($truthy(($truthy($a = $$$('::', 'Process')['$const_defined?'](\"CLOCK_MONOTONIC\", false)) ? ((($b = $$$('::', 'Process', 'skip_raise')) && ($c = $b, $c) && ($d = $c) && ((($e = $d.$clock_gettime) && !$e.$$stub) || $d['$respond_to_missing?']('clock_gettime'))) ? 'method' : nil)['$=='](\"method\") : $a))) {\n        \n        Opal.const_set($nesting[0], 'CLOCK_ID', $$$($$$('::', 'Process'), 'CLOCK_MONOTONIC'));\n        return (Opal.def(self, '$now', $Timings_now$14 = function $$now() {\n          var self = this;\n\n          return $$$('::', 'Process').$clock_gettime($$($nesting, 'CLOCK_ID'))\n        }, $Timings_now$14.$$arity = 0), nil) && 'now';\n      } else {\n        return (Opal.def(self, '$now', $Timings_now$15 = function $$now() {\n          var self = this;\n\n          return $$$('::', 'Time').$now()\n        }, $Timings_now$15.$$arity = 0), nil) && 'now'\n      };\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/converter/composite\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_reader', '$each', '$respond_to?', '$composed', '$init_backend_traits', '$backend_traits', '$new', '$find_converter', '$[]=', '$-', '$convert', '$converter_for', '$node_name', '$[]', '$handles?', '$raise']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'CompositeConverter');\n\n      var $nesting = [self].concat($parent_nesting), $CompositeConverter_initialize$1, $CompositeConverter_convert$4, $CompositeConverter_converter_for$5, $CompositeConverter_find_converter$6;\n\n      self.$$prototype.converter_cache = self.$$prototype.converters = nil;\n      \n      self.$attr_reader(\"converters\");\n      \n      Opal.def(self, '$initialize', $CompositeConverter_initialize$1 = function $$initialize(backend, $a, $b) {\n        var $post_args, $kwargs, converters, backend_traits_source, $$2, $$3, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 1, arguments.length);\n        \n        $kwargs = Opal.extract_kwargs($post_args);\n        \n        if ($kwargs == null) {\n          $kwargs = $hash2([], {});\n        } else if (!$kwargs.$$is_hash) {\n          throw Opal.ArgumentError.$new('expected kwargs');\n        };\n        \n        converters = $post_args;;\n        \n        backend_traits_source = $kwargs.$$smap[\"backend_traits_source\"];\n        if (backend_traits_source == null) {\n          backend_traits_source = nil\n        };\n        self.backend = backend;\n        $send((self.converters = converters), 'each', [], ($$2 = function(converter){var self = $$2.$$s || this;\n\n        \n          \n          if (converter == null) {\n            converter = nil;\n          };\n          if ($truthy(converter['$respond_to?'](\"composed\"))) {\n            return converter.$composed(self)\n          } else {\n            return nil\n          };}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n        if ($truthy(backend_traits_source)) {\n          self.$init_backend_traits(backend_traits_source.$backend_traits())};\n        return (self.converter_cache = $send($$$('::', 'Hash'), 'new', [], ($$3 = function(hash, key){var self = $$3.$$s || this, $writer = nil;\n\n        \n          \n          if (hash == null) {\n            hash = nil;\n          };\n          \n          if (key == null) {\n            key = nil;\n          };\n          $writer = [key, self.$find_converter(key)];\n          $send(hash, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3)));\n      }, $CompositeConverter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$convert', $CompositeConverter_convert$4 = function $$convert(node, transform, opts) {\n        var $a, self = this;\n\n        \n        \n        if (transform == null) {\n          transform = nil;\n        };\n        \n        if (opts == null) {\n          opts = nil;\n        };\n        return self.$converter_for((transform = ($truthy($a = transform) ? $a : node.$node_name()))).$convert(node, transform, opts);\n      }, $CompositeConverter_convert$4.$$arity = -2);\n      \n      Opal.def(self, '$converter_for', $CompositeConverter_converter_for$5 = function $$converter_for(transform) {\n        var self = this;\n\n        return self.converter_cache['$[]'](transform)\n      }, $CompositeConverter_converter_for$5.$$arity = 1);\n      return (Opal.def(self, '$find_converter', $CompositeConverter_find_converter$6 = function $$find_converter(transform) {try {\n\n        var $$7, self = this;\n\n        \n        $send(self.converters, 'each', [], ($$7 = function(candidate){var self = $$7.$$s || this;\n\n        \n          \n          if (candidate == null) {\n            candidate = nil;\n          };\n          if ($truthy(candidate['$handles?'](transform))) {\n            Opal.ret(candidate)\n          } else {\n            return nil\n          };}, $$7.$$s = self, $$7.$$arity = 1, $$7));\n        return self.$raise(\"\" + \"Could not find a converter to handle transform: \" + (transform));\n        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n      }, $CompositeConverter_find_converter$6.$$arity = 1), nil) && 'find_converter';\n    })($$($nesting, 'Converter'), $$$($$($nesting, 'Converter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/converter/html5\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$register_for', '$default=', '$-', '$==', '$[]', '$init_backend_traits', '$node_name', '$===', '$convert_inline_quoted', '$convert_paragraph', '$convert_inline_anchor', '$convert_section', '$convert_listing', '$convert_literal', '$convert_ulist', '$convert_olist', '$convert_dlist', '$convert_admonition', '$convert_colist', '$convert_embedded', '$convert_example', '$convert_floating_title', '$convert_image', '$convert_inline_break', '$convert_inline_button', '$convert_inline_callout', '$convert_inline_footnote', '$convert_inline_image', '$convert_inline_indexterm', '$convert_inline_kbd', '$convert_inline_menu', '$convert_open', '$convert_page_break', '$convert_preamble', '$convert_quote', '$convert_sidebar', '$convert_stem', '$convert_table', '$convert_thematic_break', '$convert_verse', '$convert_video', '$convert_document', '$convert_toc', '$convert_pass', '$convert_audio', '$empty?', '$attr', '$attr?', '$<<', '$include?', '$sub_replacements', '$gsub', '$extname', '$slice', '$length', '$doctitle', '$normalize_web_path', '$primary_stylesheet_data', '$instance', '$read_contents', '$syntax_highlighter', '$size', '$docinfo', '$id', '$sections?', '$doctype', '$role?', '$role', '$join', '$noheader', '$convert', '$converter', '$generate_manname_section', '$header?', '$notitle', '$title', '$header', '$each', '$authors', '$>', '$name', '$email', '$sub_macros', '$+', '$downcase', '$concat', '$content', '$footnotes?', '$!', '$footnotes', '$index', '$text', '$nofooter', '$docinfo?', '$[]=', '$delete_at', '$inspect', '$!=', '$to_i', '$attributes', '$document', '$sections', '$level', '$caption', '$captioned_title', '$numbered', '$<=', '$<', '$sectname', '$sectnum', '$convert_outline', '$title?', '$icon_uri', '$compact', '$media_uri', '$option?', '$append_boolean_attribute', '$style', '$items', '$blocks?', '$text?', '$chomp', '$safe', '$read_svg_contents', '$alt', '$image_uri', '$encode_attribute_value', '$append_link_constraint_attrs', '$highlight?', '$to_sym', '$format', '$*', '$count', '$start_with?', '$end_with?', '$list_marker_keyword', '$parent', '$warn', '$logger', '$context', '$error', '$new', '$columns', '$to_h', '$rows', '$colspan', '$rowspan', '$unshift', '$shift', '$split', '$pop', '$nil_or_empty?', '$type', '$catalog', '$get_root_document', '$xreftext', '$target', '$reftext', '$chop', '$sub', '$match', '$private', '$upcase', '$nested?', '$parent_document', '$to_s', '$handles?', '$send']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Html5Converter');\n\n      var $nesting = [self].concat($parent_nesting), $Html5Converter_initialize$1, $Html5Converter_convert$2, $Html5Converter_convert_document$3, $Html5Converter_convert_embedded$6, $Html5Converter_convert_outline$8, $Html5Converter_convert_section$10, $Html5Converter_convert_admonition$11, $Html5Converter_convert_audio$12, $Html5Converter_convert_colist$13, $Html5Converter_convert_dlist$16, $Html5Converter_convert_example$23, $Html5Converter_convert_floating_title$24, $Html5Converter_convert_image$25, $Html5Converter_convert_listing$26, $Html5Converter_convert_literal$27, $Html5Converter_convert_stem$28, $Html5Converter_convert_olist$30, $Html5Converter_convert_open$32, $Html5Converter_convert_page_break$33, $Html5Converter_convert_paragraph$34, $Html5Converter_convert_preamble$35, $Html5Converter_convert_quote$36, $Html5Converter_convert_thematic_break$37, $Html5Converter_convert_sidebar$38, $Html5Converter_convert_table$39, $Html5Converter_convert_toc$44, $Html5Converter_convert_ulist$45, $Html5Converter_convert_verse$47, $Html5Converter_convert_video$48, $Html5Converter_convert_inline_anchor$49, $Html5Converter_convert_inline_break$50, $Html5Converter_convert_inline_button$51, $Html5Converter_convert_inline_callout$52, $Html5Converter_convert_inline_footnote$53, $Html5Converter_convert_inline_image$54, $Html5Converter_convert_inline_indexterm$55, $Html5Converter_convert_inline_kbd$56, $Html5Converter_convert_inline_menu$57, $Html5Converter_convert_inline_quoted$58, $Html5Converter_read_svg_contents$59, $Html5Converter_append_boolean_attribute$61, $Html5Converter_append_link_constraint_attrs$62, $Html5Converter_encode_attribute_value$63, $Html5Converter_generate_manname_section$64, $Html5Converter_get_root_document$65, $Html5Converter_method_missing$66, $Html5Converter_respond_to_missing$ques$67, $writer = nil;\n\n      self.$$prototype.void_element_slash = self.$$prototype.xml_mode = self.$$prototype.refs = self.$$prototype.resolving_xref = nil;\n      \n      self.$register_for(\"html5\");\n      \n      $writer = [[\"\", \"\"]];\n      $send(Opal.const_set($nesting[0], 'QUOTE_TAGS', $hash2([\"monospaced\", \"emphasis\", \"strong\", \"double\", \"single\", \"mark\", \"superscript\", \"subscript\", \"asciimath\", \"latexmath\"], {\"monospaced\": [\"<code>\", \"</code>\", true], \"emphasis\": [\"<em>\", \"</em>\", true], \"strong\": [\"<strong>\", \"</strong>\", true], \"double\": [\"&#8220;\", \"&#8221;\"], \"single\": [\"&#8216;\", \"&#8217;\"], \"mark\": [\"<mark>\", \"</mark>\", true], \"superscript\": [\"<sup>\", \"</sup>\", true], \"subscript\": [\"<sub>\", \"</sub>\", true], \"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\(\", \"\\\\)\"]})), 'default=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      Opal.const_set($nesting[0], 'DropAnchorRx', /<(?:a\\b[^>]*|\\/a)>/);\n      Opal.const_set($nesting[0], 'StemBreakRx', / *\\\\\\n(?:\\\\?\\n)*|\\n\\n+/);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        \n        Opal.const_set($nesting[0], 'SvgPreambleRx', new RegExp(\"\" + \"^\" + ($$($nesting, 'CC_ALL')) + \"*?(?=<svg[\\\\s>])\"));\n        Opal.const_set($nesting[0], 'SvgStartTagRx', /^<svg(?:\\s[^>]*)?>/);\n      } else {\n        nil\n      };\n      Opal.const_set($nesting[0], 'DimensionAttributeRx', new RegExp(\"\" + \"\\\\s(?:width|height|style)=([\\\"'])\" + ($$($nesting, 'CC_ANY')) + \"*?\\\\1\"));\n      \n      Opal.def(self, '$initialize', $Html5Converter_initialize$1 = function $$initialize(backend, opts) {\n        var self = this, syntax = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        self.backend = backend;\n        if (opts['$[]'](\"htmlsyntax\")['$=='](\"xml\")) {\n          \n          syntax = \"xml\";\n          self.xml_mode = true;\n          self.void_element_slash = \"/\";\n        } else {\n          \n          syntax = \"html\";\n          self.xml_mode = nil;\n          self.void_element_slash = \"\";\n        };\n        return self.$init_backend_traits($hash2([\"basebackend\", \"filetype\", \"htmlsyntax\", \"outfilesuffix\", \"supports_templates\"], {\"basebackend\": \"html\", \"filetype\": \"html\", \"htmlsyntax\": syntax, \"outfilesuffix\": \".html\", \"supports_templates\": true}));\n      }, $Html5Converter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$convert', $Html5Converter_convert$2 = function $$convert(node, transform, opts) {\n        var $iter = $Html5Converter_convert$2.$$p, $yield = $iter || nil, self = this, $case = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Html5Converter_convert$2.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (transform == null) {\n          transform = node.$node_name();\n        };\n        \n        if (opts == null) {\n          opts = nil;\n        };\n        return (function() {$case = transform;\n        if (\"inline_quoted\"['$===']($case)) {return self.$convert_inline_quoted(node)}\n        else if (\"paragraph\"['$===']($case)) {return self.$convert_paragraph(node)}\n        else if (\"inline_anchor\"['$===']($case)) {return self.$convert_inline_anchor(node)}\n        else if (\"section\"['$===']($case)) {return self.$convert_section(node)}\n        else if (\"listing\"['$===']($case)) {return self.$convert_listing(node)}\n        else if (\"literal\"['$===']($case)) {return self.$convert_literal(node)}\n        else if (\"ulist\"['$===']($case)) {return self.$convert_ulist(node)}\n        else if (\"olist\"['$===']($case)) {return self.$convert_olist(node)}\n        else if (\"dlist\"['$===']($case)) {return self.$convert_dlist(node)}\n        else if (\"admonition\"['$===']($case)) {return self.$convert_admonition(node)}\n        else if (\"colist\"['$===']($case)) {return self.$convert_colist(node)}\n        else if (\"embedded\"['$===']($case)) {return self.$convert_embedded(node)}\n        else if (\"example\"['$===']($case)) {return self.$convert_example(node)}\n        else if (\"floating_title\"['$===']($case)) {return self.$convert_floating_title(node)}\n        else if (\"image\"['$===']($case)) {return self.$convert_image(node)}\n        else if (\"inline_break\"['$===']($case)) {return self.$convert_inline_break(node)}\n        else if (\"inline_button\"['$===']($case)) {return self.$convert_inline_button(node)}\n        else if (\"inline_callout\"['$===']($case)) {return self.$convert_inline_callout(node)}\n        else if (\"inline_footnote\"['$===']($case)) {return self.$convert_inline_footnote(node)}\n        else if (\"inline_image\"['$===']($case)) {return self.$convert_inline_image(node)}\n        else if (\"inline_indexterm\"['$===']($case)) {return self.$convert_inline_indexterm(node)}\n        else if (\"inline_kbd\"['$===']($case)) {return self.$convert_inline_kbd(node)}\n        else if (\"inline_menu\"['$===']($case)) {return self.$convert_inline_menu(node)}\n        else if (\"open\"['$===']($case)) {return self.$convert_open(node)}\n        else if (\"page_break\"['$===']($case)) {return self.$convert_page_break(node)}\n        else if (\"preamble\"['$===']($case)) {return self.$convert_preamble(node)}\n        else if (\"quote\"['$===']($case)) {return self.$convert_quote(node)}\n        else if (\"sidebar\"['$===']($case)) {return self.$convert_sidebar(node)}\n        else if (\"stem\"['$===']($case)) {return self.$convert_stem(node)}\n        else if (\"table\"['$===']($case)) {return self.$convert_table(node)}\n        else if (\"thematic_break\"['$===']($case)) {return self.$convert_thematic_break(node)}\n        else if (\"verse\"['$===']($case)) {return self.$convert_verse(node)}\n        else if (\"video\"['$===']($case)) {return self.$convert_video(node)}\n        else if (\"document\"['$===']($case)) {return self.$convert_document(node)}\n        else if (\"toc\"['$===']($case)) {return self.$convert_toc(node)}\n        else if (\"pass\"['$===']($case)) {return self.$convert_pass(node)}\n        else if (\"audio\"['$===']($case)) {return self.$convert_audio(node)}\n        else {return $send(self, Opal.find_super_dispatcher(self, 'convert', $Html5Converter_convert$2, false), $zuper, $iter)}})();\n      }, $Html5Converter_convert$2.$$arity = -2);\n      \n      Opal.def(self, '$convert_document', $Html5Converter_convert_document$3 = function $$convert_document(node) {\n        var $a, $b, $c, $$4, $$5, self = this, br = nil, slash = nil, asset_uri_scheme = nil, cdn_base_url = nil, linkcss = nil, max_width_attr = nil, result = nil, lang_attribute = nil, authors = nil, icon_href = nil, icon_type = nil, icon_ext = nil, webfonts = nil, iconfont_stylesheet = nil, syntax_hl = nil, syntax_hl_docinfo_head_idx = nil, docinfo_content = nil, id_attr = nil, sectioned = nil, classes = nil, details = nil, idx = nil, $writer = nil, eqnums_val = nil, eqnums_opt = nil;\n\n        \n        br = \"\" + \"<br\" + ((slash = self.void_element_slash)) + \">\";\n        if ($truthy((asset_uri_scheme = node.$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n        } else {\n          asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n        };\n        cdn_base_url = \"\" + (asset_uri_scheme) + \"//cdnjs.cloudflare.com/ajax/libs\";\n        linkcss = node['$attr?'](\"linkcss\");\n        max_width_attr = (function() {if ($truthy(node['$attr?'](\"max-width\"))) {\n          return \"\" + \" style=\\\"max-width: \" + (node.$attr(\"max-width\")) + \";\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        result = [\"<!DOCTYPE html>\"];\n        lang_attribute = (function() {if ($truthy(node['$attr?'](\"nolang\"))) {\n          return \"\"\n        } else {\n          return \"\" + \" lang=\\\"\" + (node.$attr(\"lang\", \"en\")) + \"\\\"\"\n        }; return nil; })();\n        result['$<<'](\"\" + \"<html\" + ((function() {if ($truthy(self.xml_mode)) {\n          return \" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })()) + (lang_attribute) + \">\");\n        result['$<<'](\"\" + \"<head>\\n\" + \"<meta charset=\\\"\" + (node.$attr(\"encoding\", \"UTF-8\")) + \"\\\"\" + (slash) + \">\\n\" + \"<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"\" + (slash) + \">\\n\" + \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"\" + (slash) + \">\\n\" + \"<meta name=\\\"generator\\\" content=\\\"Asciidoctor \" + (node.$attr(\"asciidoctor-version\")) + \"\\\"\" + (slash) + \">\");\n        if ($truthy(node['$attr?'](\"app-name\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"application-name\\\" content=\\\"\" + (node.$attr(\"app-name\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"description\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"description\\\" content=\\\"\" + (node.$attr(\"description\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"keywords\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"keywords\\\" content=\\\"\" + (node.$attr(\"keywords\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"authors\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"author\\\" content=\\\"\" + ((function() {if ($truthy((authors = node.$sub_replacements(node.$attr(\"authors\")))['$include?'](\"<\"))) {\n            \n            return authors.$gsub($$($nesting, 'XmlSanitizeRx'), \"\");\n          } else {\n            return authors\n          }; return nil; })()) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"copyright\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"copyright\\\" content=\\\"\" + (node.$attr(\"copyright\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"favicon\"))) {\n          \n          if ($truthy((icon_href = node.$attr(\"favicon\"))['$empty?']())) {\n            \n            icon_href = \"favicon.ico\";\n            icon_type = \"image/x-icon\";\n          } else if ($truthy((icon_ext = $$($nesting, 'Helpers').$extname(icon_href, nil)))) {\n            icon_type = (function() {if (icon_ext['$=='](\".ico\")) {\n              return \"image/x-icon\"\n            } else {\n              return \"\" + \"image/\" + (icon_ext.$slice(1, icon_ext.$length()))\n            }; return nil; })()\n          } else {\n            icon_type = \"image/x-icon\"\n          };\n          result['$<<'](\"\" + \"<link rel=\\\"icon\\\" type=\\\"\" + (icon_type) + \"\\\" href=\\\"\" + (icon_href) + \"\\\"\" + (slash) + \">\");};\n        result['$<<'](\"\" + \"<title>\" + (node.$doctitle($hash2([\"sanitize\", \"use_fallback\"], {\"sanitize\": true, \"use_fallback\": true}))) + \"</title>\");\n        if ($truthy($$($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](node.$attr(\"stylesheet\")))) {\n          \n          if ($truthy((webfonts = node.$attr(\"webfonts\")))) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (asset_uri_scheme) + \"//fonts.googleapis.com/css?family=\" + ((function() {if ($truthy(webfonts['$empty?']())) {\n              return \"Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\"\n            } else {\n              return webfonts\n            }; return nil; })()) + \"\\\"\" + (slash) + \">\")};\n          if ($truthy(linkcss)) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path($$($nesting, 'DEFAULT_STYLESHEET_NAME'), node.$attr(\"stylesdir\", \"\"), false)) + \"\\\"\" + (slash) + \">\")\n          } else {\n            result['$<<'](\"\" + \"<style>\\n\" + ($$($nesting, 'Stylesheets').$instance().$primary_stylesheet_data()) + \"\\n\" + \"</style>\")\n          };\n        } else if ($truthy(node['$attr?'](\"stylesheet\"))) {\n          if ($truthy(linkcss)) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path(node.$attr(\"stylesheet\"), node.$attr(\"stylesdir\", \"\"))) + \"\\\"\" + (slash) + \">\")\n          } else {\n            result['$<<'](\"\" + \"<style>\\n\" + (node.$read_contents(node.$attr(\"stylesheet\"), $hash2([\"start\", \"warn_on_failure\", \"label\"], {\"start\": node.$attr(\"stylesdir\"), \"warn_on_failure\": true, \"label\": \"stylesheet\"}))) + \"\\n\" + \"</style>\")\n          }};\n        if ($truthy(node['$attr?'](\"icons\", \"font\"))) {\n          if ($truthy(node['$attr?'](\"iconfont-remote\"))) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$attr(\"iconfont-cdn\", \"\" + (cdn_base_url) + \"/font-awesome/\" + ($$($nesting, 'FONT_AWESOME_VERSION')) + \"/css/font-awesome.min.css\")) + \"\\\"\" + (slash) + \">\")\n          } else {\n            \n            iconfont_stylesheet = \"\" + (node.$attr(\"iconfont-name\", \"font-awesome\")) + \".css\";\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path(iconfont_stylesheet, node.$attr(\"stylesdir\", \"\"), false)) + \"\\\"\" + (slash) + \">\");\n          }};\n        if ($truthy((syntax_hl = node.$syntax_highlighter()))) {\n          result['$<<']((syntax_hl_docinfo_head_idx = result.$size()))};\n        if ($truthy((docinfo_content = node.$docinfo())['$empty?']())) {\n        } else {\n          result['$<<'](docinfo_content)\n        };\n        result['$<<'](\"</head>\");\n        id_attr = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (sectioned = node['$sections?']())) ? node['$attr?'](\"toc-class\") : $c)) ? node['$attr?'](\"toc\") : $b)) ? node['$attr?'](\"toc-placement\", \"auto\") : $a))) {\n          classes = [node.$doctype(), node.$attr(\"toc-class\"), \"\" + \"toc-\" + (node.$attr(\"toc-position\", \"header\"))]\n        } else {\n          classes = [node.$doctype()]\n        };\n        if ($truthy(node['$role?']())) {\n          classes['$<<'](node.$role())};\n        result['$<<'](\"\" + \"<body\" + (id_attr) + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\">\");\n        if ($truthy((docinfo_content = node.$docinfo(\"header\"))['$empty?']())) {\n        } else {\n          result['$<<'](docinfo_content)\n        };\n        if ($truthy(node.$noheader())) {\n        } else {\n          \n          result['$<<'](\"\" + \"<div id=\\\"header\\\"\" + (max_width_attr) + \">\");\n          if (node.$doctype()['$=='](\"manpage\")) {\n            \n            result['$<<'](\"\" + \"<h1>\" + (node.$doctitle()) + \" Manual Page</h1>\");\n            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?'](\"toc\") : $b)) ? node['$attr?'](\"toc-placement\", \"auto\") : $a))) {\n              result['$<<'](\"\" + \"<div id=\\\"toc\\\" class=\\\"\" + (node.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")};\n            if ($truthy(node['$attr?'](\"manpurpose\"))) {\n              result['$<<'](self.$generate_manname_section(node))};\n          } else {\n            \n            if ($truthy(node['$header?']())) {\n              \n              if ($truthy(node.$notitle())) {\n              } else {\n                result['$<<'](\"\" + \"<h1>\" + (node.$header().$title()) + \"</h1>\")\n              };\n              details = [];\n              idx = 1;\n              $send(node.$authors(), 'each', [], ($$4 = function(author){var self = $$4.$$s || this;\n\n              \n                \n                if (author == null) {\n                  author = nil;\n                };\n                details['$<<'](\"\" + \"<span id=\\\"author\" + ((function() {if ($truthy($rb_gt(idx, 1))) {\n                  return idx\n                } else {\n                  return \"\"\n                }; return nil; })()) + \"\\\" class=\\\"author\\\">\" + (node.$sub_replacements(author.$name())) + \"</span>\" + (br));\n                if ($truthy(author.$email())) {\n                  details['$<<'](\"\" + \"<span id=\\\"email\" + ((function() {if ($truthy($rb_gt(idx, 1))) {\n                    return idx\n                  } else {\n                    return \"\"\n                  }; return nil; })()) + \"\\\" class=\\\"email\\\">\" + (node.$sub_macros(author.$email())) + \"</span>\" + (br))};\n                return (idx = $rb_plus(idx, 1));}, $$4.$$s = self, $$4.$$arity = 1, $$4));\n              if ($truthy(node['$attr?'](\"revnumber\"))) {\n                details['$<<'](\"\" + \"<span id=\\\"revnumber\\\">\" + (($truthy($a = node.$attr(\"version-label\")) ? $a : \"\").$downcase()) + \" \" + (node.$attr(\"revnumber\")) + ((function() {if ($truthy(node['$attr?'](\"revdate\"))) {\n                  return \",\"\n                } else {\n                  return \"\"\n                }; return nil; })()) + \"</span>\")};\n              if ($truthy(node['$attr?'](\"revdate\"))) {\n                details['$<<'](\"\" + \"<span id=\\\"revdate\\\">\" + (node.$attr(\"revdate\")) + \"</span>\")};\n              if ($truthy(node['$attr?'](\"revremark\"))) {\n                details['$<<'](\"\" + (br) + \"<span id=\\\"revremark\\\">\" + (node.$attr(\"revremark\")) + \"</span>\")};\n              if ($truthy(details['$empty?']())) {\n              } else {\n                \n                result['$<<'](\"<div class=\\\"details\\\">\");\n                result.$concat(details);\n                result['$<<'](\"</div>\");\n              };};\n            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?'](\"toc\") : $b)) ? node['$attr?'](\"toc-placement\", \"auto\") : $a))) {\n              result['$<<'](\"\" + \"<div id=\\\"toc\\\" class=\\\"\" + (node.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")};\n          };\n          result['$<<'](\"</div>\");\n        };\n        result['$<<'](\"\" + \"<div id=\\\"content\\\"\" + (max_width_attr) + \">\\n\" + (node.$content()) + \"\\n\" + \"</div>\");\n        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?'](\"nofootnotes\")['$!']() : $a))) {\n          \n          result['$<<'](\"\" + \"<div id=\\\"footnotes\\\"\" + (max_width_attr) + \">\\n\" + \"<hr\" + (slash) + \">\");\n          $send(node.$footnotes(), 'each', [], ($$5 = function(footnote){var self = $$5.$$s || this;\n\n          \n            \n            if (footnote == null) {\n              footnote = nil;\n            };\n            return result['$<<'](\"\" + \"<div class=\\\"footnote\\\" id=\\\"_footnotedef_\" + (footnote.$index()) + \"\\\">\\n\" + \"<a href=\\\"#_footnoteref_\" + (footnote.$index()) + \"\\\">\" + (footnote.$index()) + \"</a>. \" + (footnote.$text()) + \"\\n\" + \"</div>\");}, $$5.$$s = self, $$5.$$arity = 1, $$5));\n          result['$<<'](\"</div>\");};\n        if ($truthy(node.$nofooter())) {\n        } else {\n          \n          result['$<<'](\"\" + \"<div id=\\\"footer\\\"\" + (max_width_attr) + \">\");\n          result['$<<'](\"<div id=\\\"footer-text\\\">\");\n          if ($truthy(node['$attr?'](\"revnumber\"))) {\n            result['$<<'](\"\" + (node.$attr(\"version-label\")) + \" \" + (node.$attr(\"revnumber\")) + (br))};\n          if ($truthy(($truthy($a = node['$attr?'](\"last-update-label\")) ? node['$attr?'](\"reproducible\")['$!']() : $a))) {\n            result['$<<'](\"\" + (node.$attr(\"last-update-label\")) + \" \" + (node.$attr(\"docdatetime\")))};\n          result['$<<'](\"</div>\");\n          result['$<<'](\"</div>\");\n        };\n        if ($truthy(syntax_hl)) {\n          \n          if ($truthy(syntax_hl['$docinfo?'](\"head\"))) {\n            \n            $writer = [syntax_hl_docinfo_head_idx, syntax_hl.$docinfo(\"head\", node, $hash2([\"cdn_base_url\", \"linkcss\", \"self_closing_tag_slash\"], {\"cdn_base_url\": cdn_base_url, \"linkcss\": linkcss, \"self_closing_tag_slash\": slash}))];\n            $send(result, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            result.$delete_at(syntax_hl_docinfo_head_idx)\n          };\n          if ($truthy(syntax_hl['$docinfo?'](\"footer\"))) {\n            result['$<<'](syntax_hl.$docinfo(\"footer\", node, $hash2([\"cdn_base_url\", \"linkcss\", \"self_closing_tag_slash\"], {\"cdn_base_url\": cdn_base_url, \"linkcss\": linkcss, \"self_closing_tag_slash\": slash})))};};\n        if ($truthy(node['$attr?'](\"stem\"))) {\n          \n          eqnums_val = node.$attr(\"eqnums\", \"none\");\n          if ($truthy(eqnums_val['$empty?']())) {\n            eqnums_val = \"AMS\"};\n          eqnums_opt = \"\" + \" equationNumbers: { autoNumber: \\\"\" + (eqnums_val) + \"\\\" } \";\n          result['$<<'](\"\" + \"<script type=\\\"text/x-mathjax-config\\\">\\n\" + \"MathJax.Hub.Config({\\n\" + \"  messageStyle: \\\"none\\\",\\n\" + \"  tex2jax: {\\n\" + \"    inlineMath: [\" + ($$($nesting, 'INLINE_MATH_DELIMITERS')['$[]'](\"latexmath\").$inspect()) + \"],\\n\" + \"    displayMath: [\" + ($$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]'](\"latexmath\").$inspect()) + \"],\\n\" + \"    ignoreClass: \\\"nostem|nolatexmath\\\"\\n\" + \"  },\\n\" + \"  asciimath2jax: {\\n\" + \"    delimiters: [\" + ($$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]'](\"asciimath\").$inspect()) + \"],\\n\" + \"    ignoreClass: \\\"nostem|noasciimath\\\"\\n\" + \"  },\\n\" + \"  TeX: {\" + (eqnums_opt) + \"}\\n\" + \"})\\n\" + \"MathJax.Hub.Register.StartupHook(\\\"AsciiMath Jax Ready\\\", function () {\\n\" + \"  MathJax.InputJax.AsciiMath.postfilterHooks.Add(function (data, node) {\\n\" + \"    if ((node = data.script.parentNode) && (node = node.parentNode) && node.classList.contains(\\\"stemblock\\\")) {\\n\" + \"      data.math.root.display = \\\"block\\\"\\n\" + \"    }\\n\" + \"    return data\\n\" + \"  })\\n\" + \"})\\n\" + \"</script>\\n\" + \"<script src=\\\"\" + (cdn_base_url) + \"/mathjax/\" + ($$($nesting, 'MATHJAX_VERSION')) + \"/MathJax.js?config=TeX-MML-AM_HTMLorMML\\\"></script>\");};\n        if ($truthy((docinfo_content = node.$docinfo(\"footer\"))['$empty?']())) {\n        } else {\n          result['$<<'](docinfo_content)\n        };\n        result['$<<'](\"</body>\");\n        result['$<<'](\"</html>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_document$3.$$arity = 1);\n      \n      Opal.def(self, '$convert_embedded', $Html5Converter_convert_embedded$6 = function $$convert_embedded(node) {\n        var $a, $b, $c, $$7, self = this, result = nil, id_attr = nil, toc_p = nil;\n\n        \n        result = [];\n        if (node.$doctype()['$=='](\"manpage\")) {\n          \n          if ($truthy(node.$notitle())) {\n          } else {\n            \n            id_attr = (function() {if ($truthy(node.$id())) {\n              return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            result['$<<'](\"\" + \"<h1\" + (id_attr) + \">\" + (node.$doctitle()) + \" Manual Page</h1>\");\n          };\n          if ($truthy(node['$attr?'](\"manpurpose\"))) {\n            result['$<<'](self.$generate_manname_section(node))};\n        } else if ($truthy(($truthy($a = node['$header?']()) ? node.$notitle()['$!']() : $a))) {\n          \n          id_attr = (function() {if ($truthy(node.$id())) {\n            return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          result['$<<'](\"\" + \"<h1\" + (id_attr) + \">\" + (node.$header().$title()) + \"</h1>\");};\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = node['$sections?']()) ? node['$attr?'](\"toc\") : $c)) ? (toc_p = node.$attr(\"toc-placement\"))['$!='](\"macro\") : $b)) ? toc_p['$!='](\"preamble\") : $a))) {\n          result['$<<'](\"\" + \"<div id=\\\"toc\\\" class=\\\"toc\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")};\n        result['$<<'](node.$content());\n        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?'](\"nofootnotes\")['$!']() : $a))) {\n          \n          result['$<<'](\"\" + \"<div id=\\\"footnotes\\\">\\n\" + \"<hr\" + (self.void_element_slash) + \">\");\n          $send(node.$footnotes(), 'each', [], ($$7 = function(footnote){var self = $$7.$$s || this;\n\n          \n            \n            if (footnote == null) {\n              footnote = nil;\n            };\n            return result['$<<'](\"\" + \"<div class=\\\"footnote\\\" id=\\\"_footnotedef_\" + (footnote.$index()) + \"\\\">\\n\" + \"<a href=\\\"#_footnoteref_\" + (footnote.$index()) + \"\\\">\" + (footnote.$index()) + \"</a>. \" + (footnote.$text()) + \"\\n\" + \"</div>\");}, $$7.$$s = self, $$7.$$arity = 1, $$7));\n          result['$<<'](\"</div>\");};\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_embedded$6.$$arity = 1);\n      \n      Opal.def(self, '$convert_outline', $Html5Converter_convert_outline$8 = function $$convert_outline(node, opts) {\n        var $a, $b, $$9, self = this, sectnumlevels = nil, toclevels = nil, sections = nil, result = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(node['$sections?']())) {\n        } else {\n          return nil\n        };\n        sectnumlevels = ($truthy($a = opts['$[]'](\"sectnumlevels\")) ? $a : ($truthy($b = node.$document().$attributes()['$[]'](\"sectnumlevels\")) ? $b : 3).$to_i());\n        toclevels = ($truthy($a = opts['$[]'](\"toclevels\")) ? $a : ($truthy($b = node.$document().$attributes()['$[]'](\"toclevels\")) ? $b : 2).$to_i());\n        sections = node.$sections();\n        result = [\"\" + \"<ul class=\\\"sectlevel\" + (sections['$[]'](0).$level()) + \"\\\">\"];\n        $send(sections, 'each', [], ($$9 = function(section){var self = $$9.$$s || this, $c, slevel = nil, stitle = nil, $case = nil, signifier = nil, child_toc_level = nil;\n\n        \n          \n          if (section == null) {\n            section = nil;\n          };\n          slevel = section.$level();\n          if ($truthy(section.$caption())) {\n            stitle = section.$captioned_title()\n          } else if ($truthy(($truthy($c = section.$numbered()) ? $rb_le(slevel, sectnumlevels) : $c))) {\n            if ($truthy(($truthy($c = $rb_lt(slevel, 2)) ? node.$document().$doctype()['$=='](\"book\") : $c))) {\n              $case = section.$sectname();\n              if (\"chapter\"['$===']($case)) {stitle = \"\" + ((function() {if ($truthy((signifier = node.$document().$attributes()['$[]'](\"chapter-signifier\")))) {\n                return \"\" + (signifier) + \" \"\n              } else {\n                return \"\"\n              }; return nil; })()) + (section.$sectnum()) + \" \" + (section.$title())}\n              else if (\"part\"['$===']($case)) {stitle = \"\" + ((function() {if ($truthy((signifier = node.$document().$attributes()['$[]'](\"part-signifier\")))) {\n                return \"\" + (signifier) + \" \"\n              } else {\n                return \"\"\n              }; return nil; })()) + (section.$sectnum(nil, \":\")) + \" \" + (section.$title())}\n              else {stitle = \"\" + (section.$sectnum()) + \" \" + (section.$title())}\n            } else {\n              stitle = \"\" + (section.$sectnum()) + \" \" + (section.$title())\n            }\n          } else {\n            stitle = section.$title()\n          };\n          if ($truthy(stitle['$include?'](\"<a\"))) {\n            stitle = stitle.$gsub($$($nesting, 'DropAnchorRx'), \"\")};\n          if ($truthy(($truthy($c = $rb_lt(slevel, toclevels)) ? (child_toc_level = self.$convert_outline(section, $hash2([\"toclevels\", \"sectnumlevels\"], {\"toclevels\": toclevels, \"sectnumlevels\": sectnumlevels}))) : $c))) {\n            \n            result['$<<'](\"\" + \"<li><a href=\\\"#\" + (section.$id()) + \"\\\">\" + (stitle) + \"</a>\");\n            result['$<<'](child_toc_level);\n            return result['$<<'](\"</li>\");\n          } else {\n            return result['$<<'](\"\" + \"<li><a href=\\\"#\" + (section.$id()) + \"\\\">\" + (stitle) + \"</a></li>\")\n          };}, $$9.$$s = self, $$9.$$arity = 1, $$9));\n        result['$<<'](\"</ul>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_outline$8.$$arity = -2);\n      \n      Opal.def(self, '$convert_section', $Html5Converter_convert_section$10 = function $$convert_section(node) {\n        var $a, $b, self = this, doc_attrs = nil, level = nil, title = nil, $case = nil, signifier = nil, id_attr = nil, id = nil, role = nil;\n\n        \n        doc_attrs = node.$document().$attributes();\n        level = node.$level();\n        if ($truthy(node.$caption())) {\n          title = node.$captioned_title()\n        } else if ($truthy(($truthy($a = node.$numbered()) ? $rb_le(level, ($truthy($b = doc_attrs['$[]'](\"sectnumlevels\")) ? $b : 3).$to_i()) : $a))) {\n          if ($truthy(($truthy($a = $rb_lt(level, 2)) ? node.$document().$doctype()['$=='](\"book\") : $a))) {\n            $case = node.$sectname();\n            if (\"chapter\"['$===']($case)) {title = \"\" + ((function() {if ($truthy((signifier = doc_attrs['$[]'](\"chapter-signifier\")))) {\n              return \"\" + (signifier) + \" \"\n            } else {\n              return \"\"\n            }; return nil; })()) + (node.$sectnum()) + \" \" + (node.$title())}\n            else if (\"part\"['$===']($case)) {title = \"\" + ((function() {if ($truthy((signifier = doc_attrs['$[]'](\"part-signifier\")))) {\n              return \"\" + (signifier) + \" \"\n            } else {\n              return \"\"\n            }; return nil; })()) + (node.$sectnum(nil, \":\")) + \" \" + (node.$title())}\n            else {title = \"\" + (node.$sectnum()) + \" \" + (node.$title())}\n          } else {\n            title = \"\" + (node.$sectnum()) + \" \" + (node.$title())\n          }\n        } else {\n          title = node.$title()\n        };\n        if ($truthy(node.$id())) {\n          \n          id_attr = \"\" + \" id=\\\"\" + ((id = node.$id())) + \"\\\"\";\n          if ($truthy(doc_attrs['$[]'](\"sectlinks\"))) {\n            title = \"\" + \"<a class=\\\"link\\\" href=\\\"#\" + (id) + \"\\\">\" + (title) + \"</a>\"};\n          if ($truthy(doc_attrs['$[]'](\"sectanchors\"))) {\n            if (doc_attrs['$[]'](\"sectanchors\")['$=='](\"after\")) {\n              title = \"\" + (title) + \"<a class=\\\"anchor\\\" href=\\\"#\" + (id) + \"\\\"></a>\"\n            } else {\n              title = \"\" + \"<a class=\\\"anchor\\\" href=\\\"#\" + (id) + \"\\\"></a>\" + (title)\n            }};\n        } else {\n          id_attr = \"\"\n        };\n        if (level['$=='](0)) {\n          return \"\" + \"<h1\" + (id_attr) + \" class=\\\"sect0\" + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\" + (title) + \"</h1>\\n\" + (node.$content())\n        } else {\n          return \"\" + \"<div class=\\\"sect\" + (level) + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\\n\" + \"<h\" + ($rb_plus(level, 1)) + (id_attr) + \">\" + (title) + \"</h\" + ($rb_plus(level, 1)) + \">\\n\" + ((function() {if (level['$=='](1)) {\n            return \"\" + \"<div class=\\\"sectionbody\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\"\n          } else {\n            return node.$content()\n          }; return nil; })()) + \"\\n\" + \"</div>\"\n        };\n      }, $Html5Converter_convert_section$10.$$arity = 1);\n      \n      Opal.def(self, '$convert_admonition', $Html5Converter_convert_admonition$11 = function $$convert_admonition(node) {\n        var $a, self = this, id_attr = nil, name = nil, title_element = nil, label = nil, role = nil;\n\n        \n        id_attr = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        name = node.$attr(\"name\");\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          if ($truthy(($truthy($a = node.$document()['$attr?'](\"icons\", \"font\")) ? node['$attr?'](\"icon\")['$!']() : $a))) {\n            label = \"\" + \"<i class=\\\"fa icon-\" + (name) + \"\\\" title=\\\"\" + (node.$attr(\"textlabel\")) + \"\\\"></i>\"\n          } else {\n            label = \"\" + \"<img src=\\\"\" + (node.$icon_uri(name)) + \"\\\" alt=\\\"\" + (node.$attr(\"textlabel\")) + \"\\\"\" + (self.void_element_slash) + \">\"\n          }\n        } else {\n          label = \"\" + \"<div class=\\\"title\\\">\" + (node.$attr(\"textlabel\")) + \"</div>\"\n        };\n        return \"\" + \"<div\" + (id_attr) + \" class=\\\"admonitionblock \" + (name) + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + \"<table>\\n\" + \"<tr>\\n\" + \"<td class=\\\"icon\\\">\\n\" + (label) + \"\\n\" + \"</td>\\n\" + \"<td class=\\\"content\\\">\\n\" + (title_element) + (node.$content()) + \"\\n\" + \"</td>\\n\" + \"</tr>\\n\" + \"</table>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_admonition$11.$$arity = 1);\n      \n      Opal.def(self, '$convert_audio', $Html5Converter_convert_audio$12 = function $$convert_audio(node) {\n        var $a, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, start_t = nil, end_t = nil, time_anchor = nil;\n\n        \n        xml = self.xml_mode;\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"audioblock\", node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        start_t = node.$attr(\"start\");\n        end_t = node.$attr(\"end\");\n        time_anchor = (function() {if ($truthy(($truthy($a = start_t) ? $a : end_t))) {\n          return \"\" + \"#t=\" + (($truthy($a = start_t) ? $a : \"\")) + ((function() {if ($truthy(end_t)) {\n            return \"\" + \",\" + (end_t)\n          } else {\n            return \"\"\n          }; return nil; })())\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + \"<audio src=\\\"\" + (node.$media_uri(node.$attr(\"target\"))) + (time_anchor) + \"\\\"\" + ((function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          \n          return self.$append_boolean_attribute(\"autoplay\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"nocontrols\"))) {\n          return \"\"\n        } else {\n          \n          return self.$append_boolean_attribute(\"controls\", xml);\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"loop\"))) {\n          \n          return self.$append_boolean_attribute(\"loop\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + \">\\n\" + \"Your browser does not support the audio tag.\\n\" + \"</audio>\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_audio$12.$$arity = 1);\n      \n      Opal.def(self, '$convert_colist', $Html5Converter_convert_colist$13 = function $$convert_colist(node) {\n        var $a, $$14, $$15, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, font_icons = nil, num = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"colist\", node.$style(), node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          \n          result['$<<'](\"<table>\");\n          $a = [node.$document()['$attr?'](\"icons\", \"font\"), 0], (font_icons = $a[0]), (num = $a[1]), $a;\n          $send(node.$items(), 'each', [], ($$14 = function(item){var self = $$14.$$s || this, num_label = nil;\n            if (self.void_element_slash == null) self.void_element_slash = nil;\n\n          \n            \n            if (item == null) {\n              item = nil;\n            };\n            num = $rb_plus(num, 1);\n            if ($truthy(font_icons)) {\n              num_label = \"\" + \"<i class=\\\"conum\\\" data-value=\\\"\" + (num) + \"\\\"></i><b>\" + (num) + \"</b>\"\n            } else {\n              num_label = \"\" + \"<img src=\\\"\" + (node.$icon_uri(\"\" + \"callouts/\" + (num))) + \"\\\" alt=\\\"\" + (num) + \"\\\"\" + (self.void_element_slash) + \">\"\n            };\n            return result['$<<'](\"\" + \"<tr>\\n\" + \"<td>\" + (num_label) + \"</td>\\n\" + \"<td>\" + (item.$text()) + ((function() {if ($truthy(item['$blocks?']())) {\n              return $rb_plus($$($nesting, 'LF'), item.$content())\n            } else {\n              return \"\"\n            }; return nil; })()) + \"</td>\\n\" + \"</tr>\");}, $$14.$$s = self, $$14.$$arity = 1, $$14));\n          result['$<<'](\"</table>\");\n        } else {\n          \n          result['$<<'](\"<ol>\");\n          $send(node.$items(), 'each', [], ($$15 = function(item){var self = $$15.$$s || this;\n\n          \n            \n            if (item == null) {\n              item = nil;\n            };\n            return result['$<<'](\"\" + \"<li>\\n\" + \"<p>\" + (item.$text()) + \"</p>\" + ((function() {if ($truthy(item['$blocks?']())) {\n              return $rb_plus($$($nesting, 'LF'), item.$content())\n            } else {\n              return \"\"\n            }; return nil; })()) + \"\\n\" + \"</li>\");}, $$15.$$s = self, $$15.$$arity = 1, $$15));\n          result['$<<'](\"</ol>\");\n        };\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_colist$13.$$arity = 1);\n      \n      Opal.def(self, '$convert_dlist', $Html5Converter_convert_dlist$16 = function $$convert_dlist(node) {\n        var $$17, $a, $$19, $$21, self = this, result = nil, id_attribute = nil, $case = nil, classes = nil, class_attribute = nil, slash = nil, col_style_attribute = nil, dt_style_attribute = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        $case = node.$style();\n        if (\"qanda\"['$===']($case)) {classes = [\"qlist\", \"qanda\", node.$role()]}\n        else if (\"horizontal\"['$===']($case)) {classes = [\"hdlist\", node.$role()]}\n        else {classes = [\"dlist\", node.$style(), node.$role()]};\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$compact().$join(\" \")) + \"\\\"\";\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        $case = node.$style();\n        if (\"qanda\"['$===']($case)) {\n        result['$<<'](\"<ol>\");\n        $send(node.$items(), 'each', [], ($$17 = function(terms, dd){var self = $$17.$$s || this, $$18;\n\n        \n          \n          if (terms == null) {\n            terms = nil;\n          };\n          \n          if (dd == null) {\n            dd = nil;\n          };\n          result['$<<'](\"<li>\");\n          $send(terms, 'each', [], ($$18 = function(dt){var self = $$18.$$s || this;\n\n          \n            \n            if (dt == null) {\n              dt = nil;\n            };\n            return result['$<<'](\"\" + \"<p><em>\" + (dt.$text()) + \"</em></p>\");}, $$18.$$s = self, $$18.$$arity = 1, $$18));\n          if ($truthy(dd)) {\n            \n            if ($truthy(dd['$text?']())) {\n              result['$<<'](\"\" + \"<p>\" + (dd.$text()) + \"</p>\")};\n            if ($truthy(dd['$blocks?']())) {\n              result['$<<'](dd.$content())};};\n          return result['$<<'](\"</li>\");}, $$17.$$s = self, $$17.$$arity = 2, $$17));\n        result['$<<'](\"</ol>\");}\n        else if (\"horizontal\"['$===']($case)) {\n        slash = self.void_element_slash;\n        result['$<<'](\"<table>\");\n        if ($truthy(($truthy($a = node['$attr?'](\"labelwidth\")) ? $a : node['$attr?'](\"itemwidth\")))) {\n          \n          result['$<<'](\"<colgroup>\");\n          col_style_attribute = (function() {if ($truthy(node['$attr?'](\"labelwidth\"))) {\n            return \"\" + \" style=\\\"width: \" + (node.$attr(\"labelwidth\").$chomp(\"%\")) + \"%;\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          result['$<<'](\"\" + \"<col\" + (col_style_attribute) + (slash) + \">\");\n          col_style_attribute = (function() {if ($truthy(node['$attr?'](\"itemwidth\"))) {\n            return \"\" + \" style=\\\"width: \" + (node.$attr(\"itemwidth\").$chomp(\"%\")) + \"%;\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          result['$<<'](\"\" + \"<col\" + (col_style_attribute) + (slash) + \">\");\n          result['$<<'](\"</colgroup>\");};\n        $send(node.$items(), 'each', [], ($$19 = function(terms, dd){var self = $$19.$$s || this, $$20, first_term = nil;\n\n        \n          \n          if (terms == null) {\n            terms = nil;\n          };\n          \n          if (dd == null) {\n            dd = nil;\n          };\n          result['$<<'](\"<tr>\");\n          result['$<<'](\"\" + \"<td class=\\\"hdlist1\" + ((function() {if ($truthy(node['$option?'](\"strong\"))) {\n            return \" strong\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\");\n          first_term = true;\n          $send(terms, 'each', [], ($$20 = function(dt){var self = $$20.$$s || this;\n\n          \n            \n            if (dt == null) {\n              dt = nil;\n            };\n            if ($truthy(first_term)) {\n            } else {\n              result['$<<'](\"\" + \"<br\" + (slash) + \">\")\n            };\n            result['$<<'](dt.$text());\n            return (first_term = nil);}, $$20.$$s = self, $$20.$$arity = 1, $$20));\n          result['$<<'](\"</td>\");\n          result['$<<'](\"<td class=\\\"hdlist2\\\">\");\n          if ($truthy(dd)) {\n            \n            if ($truthy(dd['$text?']())) {\n              result['$<<'](\"\" + \"<p>\" + (dd.$text()) + \"</p>\")};\n            if ($truthy(dd['$blocks?']())) {\n              result['$<<'](dd.$content())};};\n          result['$<<'](\"</td>\");\n          return result['$<<'](\"</tr>\");}, $$19.$$s = self, $$19.$$arity = 2, $$19));\n        result['$<<'](\"</table>\");}\n        else {\n        result['$<<'](\"<dl>\");\n        dt_style_attribute = (function() {if ($truthy(node.$style())) {\n          return \"\"\n        } else {\n          return \" class=\\\"hdlist1\\\"\"\n        }; return nil; })();\n        $send(node.$items(), 'each', [], ($$21 = function(terms, dd){var self = $$21.$$s || this, $$22;\n\n        \n          \n          if (terms == null) {\n            terms = nil;\n          };\n          \n          if (dd == null) {\n            dd = nil;\n          };\n          $send(terms, 'each', [], ($$22 = function(dt){var self = $$22.$$s || this;\n\n          \n            \n            if (dt == null) {\n              dt = nil;\n            };\n            return result['$<<'](\"\" + \"<dt\" + (dt_style_attribute) + \">\" + (dt.$text()) + \"</dt>\");}, $$22.$$s = self, $$22.$$arity = 1, $$22));\n          if ($truthy(dd)) {\n          } else {\n            return nil;\n          };\n          result['$<<'](\"<dd>\");\n          if ($truthy(dd['$text?']())) {\n            result['$<<'](\"\" + \"<p>\" + (dd.$text()) + \"</p>\")};\n          if ($truthy(dd['$blocks?']())) {\n            result['$<<'](dd.$content())};\n          return result['$<<'](\"</dd>\");}, $$21.$$s = self, $$21.$$arity = 2, $$21));\n        result['$<<'](\"</dl>\");};\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_dlist$16.$$arity = 1);\n      \n      Opal.def(self, '$convert_example', $Html5Converter_convert_example$23 = function $$convert_example(node) {\n        var self = this, id_attribute = nil, class_attribute = nil, summary_element = nil, title_element = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(node['$option?'](\"collapsible\"))) {\n          \n          class_attribute = (function() {if ($truthy(node.$role())) {\n            return \"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          summary_element = (function() {if ($truthy(node['$title?']())) {\n            return \"\" + \"<summary class=\\\"title\\\">\" + (node.$title()) + \"</summary>\"\n          } else {\n            return \"<summary class=\\\"title\\\">Details</summary>\"\n          }; return nil; })();\n          return \"\" + \"<details\" + (id_attribute) + (class_attribute) + ((function() {if ($truthy(node['$option?'](\"open\"))) {\n            return \" open\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \">\\n\" + (summary_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</details>\";\n        } else {\n          \n          title_element = (function() {if ($truthy(node['$title?']())) {\n            return \"\" + \"<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\\n\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          return \"\" + \"<div\" + (id_attribute) + \" class=\\\"exampleblock\" + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n        };\n      }, $Html5Converter_convert_example$23.$$arity = 1);\n      \n      Opal.def(self, '$convert_floating_title', $Html5Converter_convert_floating_title$24 = function $$convert_floating_title(node) {\n        var self = this, tag_name = nil, id_attribute = nil, classes = nil;\n\n        \n        tag_name = \"\" + \"h\" + ($rb_plus(node.$level(), 1));\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [node.$style(), node.$role()].$compact();\n        return \"\" + \"<\" + (tag_name) + (id_attribute) + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\">\" + (node.$title()) + \"</\" + (tag_name) + \">\";\n      }, $Html5Converter_convert_floating_title$24.$$arity = 1);\n      \n      Opal.def(self, '$convert_image', $Html5Converter_convert_image$25 = function $$convert_image(node) {\n        var $a, $b, self = this, target = nil, width_attr = nil, height_attr = nil, img = nil, fallback = nil, id_attr = nil, classes = nil, class_attr = nil, title_el = nil;\n\n        \n        target = node.$attr(\"target\");\n        width_attr = (function() {if ($truthy(node['$attr?'](\"width\"))) {\n          return \"\" + \" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        height_attr = (function() {if ($truthy(node['$attr?'](\"height\"))) {\n          return \"\" + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(($truthy($a = ($truthy($b = node['$attr?'](\"format\", \"svg\")) ? $b : target['$include?'](\".svg\"))) ? $rb_lt(node.$document().$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $a))) {\n          if ($truthy(node['$option?'](\"inline\"))) {\n            img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\")\n          } else if ($truthy(node['$option?'](\"interactive\"))) {\n            \n            fallback = (function() {if ($truthy(node['$attr?'](\"fallback\"))) {\n              return \"\" + \"<img src=\\\"\" + (node.$image_uri(node.$attr(\"fallback\"))) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\"\n            } else {\n              return \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"\n            }; return nil; })();\n            img = \"\" + \"<object type=\\\"image/svg+xml\\\" data=\\\"\" + (node.$image_uri(target)) + \"\\\"\" + (width_attr) + (height_attr) + \">\" + (fallback) + \"</object>\";\n          } else {\n            img = \"\" + \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\"\n          }\n        } else {\n          img = \"\" + \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\"\n        };\n        if ($truthy(node['$attr?'](\"link\"))) {\n          img = \"\" + \"<a class=\\\"image\\\" href=\\\"\" + (node.$attr(\"link\")) + \"\\\"\" + (self.$append_link_constraint_attrs(node).$join()) + \">\" + (img) + \"</a>\"};\n        id_attr = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"imageblock\"];\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))};\n        if ($truthy(node['$attr?'](\"align\"))) {\n          classes['$<<'](\"\" + \"text-\" + (node.$attr(\"align\")))};\n        if ($truthy(node.$role())) {\n          classes['$<<'](node.$role())};\n        class_attr = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_el = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attr) + (class_attr) + \">\\n\" + \"<div class=\\\"content\\\">\\n\" + (img) + \"\\n\" + \"</div>\" + (title_el) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_image$25.$$arity = 1);\n      \n      Opal.def(self, '$convert_listing', $Html5Converter_convert_listing$26 = function $$convert_listing(node) {\n        var $a, self = this, nowrap = nil, lang = nil, syntax_hl = nil, opts = nil, doc_attrs = nil, $writer = nil, pre_open = nil, pre_close = nil, id_attribute = nil, title_element = nil, role = nil;\n\n        \n        nowrap = ($truthy($a = node['$option?'](\"nowrap\")) ? $a : node.$document()['$attr?'](\"prewrap\")['$!']());\n        if (node.$style()['$=='](\"source\")) {\n          \n          lang = node.$attr(\"language\");\n          if ($truthy((syntax_hl = node.$document().$syntax_highlighter()))) {\n            \n            opts = (function() {if ($truthy(syntax_hl['$highlight?']())) {\n              return $hash2([\"css_mode\", \"style\"], {\"css_mode\": ($truthy($a = (doc_attrs = node.$document().$attributes())['$[]'](\"\" + (syntax_hl.$name()) + \"-css\")) ? $a : \"class\").$to_sym(), \"style\": doc_attrs['$[]'](\"\" + (syntax_hl.$name()) + \"-style\")})\n            } else {\n              return $hash2([], {})\n            }; return nil; })();\n            \n            $writer = [\"nowrap\", nowrap];\n            $send(opts, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            \n            pre_open = \"\" + \"<pre class=\\\"highlight\" + ((function() {if ($truthy(nowrap)) {\n              return \" nowrap\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \"\\\"><code\" + ((function() {if ($truthy(lang)) {\n              return \"\" + \" class=\\\"language-\" + (lang) + \"\\\" data-lang=\\\"\" + (lang) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\";\n            pre_close = \"</code></pre>\";\n          };\n        } else {\n          \n          pre_open = \"\" + \"<pre\" + ((function() {if ($truthy(nowrap)) {\n            return \" class=\\\"nowrap\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \">\";\n          pre_close = \"</pre>\";\n        };\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"listingblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + ((function() {if ($truthy(syntax_hl)) {\n          \n          return syntax_hl.$format(node, lang, opts);\n        } else {\n          return $rb_plus($rb_plus(pre_open, ($truthy($a = node.$content()) ? $a : \"\")), pre_close)\n        }; return nil; })()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_listing$26.$$arity = 1);\n      \n      Opal.def(self, '$convert_literal', $Html5Converter_convert_literal$27 = function $$convert_literal(node) {\n        var $a, self = this, id_attribute = nil, title_element = nil, nowrap = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        nowrap = ($truthy($a = node.$document()['$attr?'](\"prewrap\")['$!']()) ? $a : node['$option?'](\"nowrap\"));\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"literalblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + \"<pre\" + ((function() {if ($truthy(nowrap)) {\n          return \" class=\\\"nowrap\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })()) + \">\" + (node.$content()) + \"</pre>\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_literal$27.$$arity = 1);\n      \n      Opal.def(self, '$convert_stem', $Html5Converter_convert_stem$28 = function $$convert_stem(node) {\n        var $a, $b, $$29, self = this, id_attribute = nil, title_element = nil, style = nil, open = nil, close = nil, equation = nil, br = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        $b = $$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]']((style = node.$style().$to_sym())), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy((equation = node.$content()))) {\n          \n          if ($truthy((($a = style['$=='](\"asciimath\")) ? equation['$include?']($$($nesting, 'LF')) : style['$=='](\"asciimath\")))) {\n            \n            br = \"\" + ($$($nesting, 'LF')) + \"<br\" + (self.void_element_slash) + \">\";\n            equation = $send(equation, 'gsub', [$$($nesting, 'StemBreakRx')], ($$29 = function(){var self = $$29.$$s || this, $c;\n\n            return \"\" + (close) + ($rb_times(br, $rb_minus((($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$count($$($nesting, 'LF')), 1))) + ($$($nesting, 'LF')) + (open)}, $$29.$$s = self, $$29.$$arity = 0, $$29));};\n          if ($truthy(($truthy($a = equation['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {\n          } else {\n            equation = \"\" + (open) + (equation) + (close)\n          };\n        } else {\n          equation = \"\"\n        };\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"stemblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + (equation) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_stem$28.$$arity = 1);\n      \n      Opal.def(self, '$convert_olist', $Html5Converter_convert_olist$30 = function $$convert_olist(node) {\n        var $$31, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, type_attribute = nil, keyword = nil, start_attribute = nil, reversed_attribute = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"olist\", node.$style(), node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        type_attribute = (function() {if ($truthy((keyword = node.$list_marker_keyword()))) {\n          return \"\" + \" type=\\\"\" + (keyword) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        start_attribute = (function() {if ($truthy(node['$attr?'](\"start\"))) {\n          return \"\" + \" start=\\\"\" + (node.$attr(\"start\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        reversed_attribute = (function() {if ($truthy(node['$option?'](\"reversed\"))) {\n          \n          return self.$append_boolean_attribute(\"reversed\", self.xml_mode);\n        } else {\n          return \"\"\n        }; return nil; })();\n        result['$<<'](\"\" + \"<ol class=\\\"\" + (node.$style()) + \"\\\"\" + (type_attribute) + (start_attribute) + (reversed_attribute) + \">\");\n        $send(node.$items(), 'each', [], ($$31 = function(item){var self = $$31.$$s || this;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          if ($truthy(item.$id())) {\n            result['$<<'](\"\" + \"<li id=\\\"\" + (item.$id()) + \"\\\"\" + ((function() {if ($truthy(item.$role())) {\n              return \"\" + \" class=\\\"\" + (item.$role()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\")\n          } else if ($truthy(item.$role())) {\n            result['$<<'](\"\" + \"<li class=\\\"\" + (item.$role()) + \"\\\">\")\n          } else {\n            result['$<<'](\"<li>\")\n          };\n          result['$<<'](\"\" + \"<p>\" + (item.$text()) + \"</p>\");\n          if ($truthy(item['$blocks?']())) {\n            result['$<<'](item.$content())};\n          return result['$<<'](\"</li>\");}, $$31.$$s = self, $$31.$$arity = 1, $$31));\n        result['$<<'](\"</ol>\");\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_olist$30.$$arity = 1);\n      \n      Opal.def(self, '$convert_open', $Html5Converter_convert_open$32 = function $$convert_open(node) {\n        var $a, $b, $c, self = this, style = nil, id_attr = nil, title_el = nil, role = nil;\n\n        if ((style = node.$style())['$=='](\"abstract\")) {\n          if ($truthy((($a = node.$parent()['$=='](node.$document())) ? node.$document().$doctype()['$=='](\"book\") : node.$parent()['$=='](node.$document())))) {\n            \n            self.$logger().$warn(\"abstract block cannot be used in a document without a title when doctype is book. Excluding block content.\");\n            return \"\";\n          } else {\n            \n            id_attr = (function() {if ($truthy(node.$id())) {\n              return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            title_el = (function() {if ($truthy(node['$title?']())) {\n              return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            return \"\" + \"<div\" + (id_attr) + \" class=\\\"quoteblock abstract\" + ((function() {if ($truthy((role = node.$role()))) {\n              return \"\" + \" \" + (role)\n            } else {\n              return \"\"\n            }; return nil; })()) + \"\\\">\\n\" + (title_el) + \"<blockquote>\\n\" + (node.$content()) + \"\\n\" + \"</blockquote>\\n\" + \"</div>\";\n          }\n        } else if ($truthy((($a = style['$=='](\"partintro\")) ? ($truthy($b = ($truthy($c = $rb_gt(node.$level(), 0)) ? $c : node.$parent().$context()['$!='](\"section\"))) ? $b : node.$document().$doctype()['$!='](\"book\")) : style['$=='](\"partintro\")))) {\n          \n          self.$logger().$error(\"partintro block can only be used when doctype is book and must be a child of a book part. Excluding block content.\");\n          return \"\";\n        } else {\n          \n          id_attr = (function() {if ($truthy(node.$id())) {\n            return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          title_el = (function() {if ($truthy(node['$title?']())) {\n            return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          return \"\" + \"<div\" + (id_attr) + \" class=\\\"openblock\" + ((function() {if ($truthy(($truthy($a = style) ? style['$!='](\"open\") : $a))) {\n            return \"\" + \" \" + (style)\n          } else {\n            return \"\"\n          }; return nil; })()) + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\\n\" + (title_el) + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n        }\n      }, $Html5Converter_convert_open$32.$$arity = 1);\n      \n      Opal.def(self, '$convert_page_break', $Html5Converter_convert_page_break$33 = function $$convert_page_break(node) {\n        var self = this;\n\n        return \"<div style=\\\"page-break-after: always;\\\"></div>\"\n      }, $Html5Converter_convert_page_break$33.$$arity = 1);\n      \n      Opal.def(self, '$convert_paragraph', $Html5Converter_convert_paragraph$34 = function $$convert_paragraph(node) {\n        var self = this, attributes = nil;\n\n        \n        if ($truthy(node.$role())) {\n          attributes = \"\" + ((function() {if ($truthy(node.$id())) {\n            return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \" class=\\\"paragraph \" + (node.$role()) + \"\\\"\"\n        } else if ($truthy(node.$id())) {\n          attributes = \"\" + \" id=\\\"\" + (node.$id()) + \"\\\" class=\\\"paragraph\\\"\"\n        } else {\n          attributes = \" class=\\\"paragraph\\\"\"\n        };\n        if ($truthy(node['$title?']())) {\n          return \"\" + \"<div\" + (attributes) + \">\\n\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\" + \"<p>\" + (node.$content()) + \"</p>\\n\" + \"</div>\"\n        } else {\n          return \"\" + \"<div\" + (attributes) + \">\\n\" + \"<p>\" + (node.$content()) + \"</p>\\n\" + \"</div>\"\n        };\n      }, $Html5Converter_convert_paragraph$34.$$arity = 1);\n      Opal.alias(self, \"convert_pass\", \"content_only\");\n      \n      Opal.def(self, '$convert_preamble', $Html5Converter_convert_preamble$35 = function $$convert_preamble(node) {\n        var $a, $b, self = this, doc = nil, toc = nil;\n\n        \n        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?'](\"toc-placement\", \"preamble\")) ? doc['$sections?']() : $b)) ? doc['$attr?'](\"toc\") : $a))) {\n          toc = \"\" + \"\\n\" + \"<div id=\\\"toc\\\" class=\\\"\" + (doc.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (doc.$attr(\"toc-title\")) + \"</div>\\n\" + (doc.$converter().$convert(doc, \"outline\")) + \"\\n\" + \"</div>\"\n        } else {\n          toc = \"\"\n        };\n        return \"\" + \"<div id=\\\"preamble\\\">\\n\" + \"<div class=\\\"sectionbody\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\" + (toc) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_preamble$35.$$arity = 1);\n      \n      Opal.def(self, '$convert_quote', $Html5Converter_convert_quote$36 = function $$convert_quote(node) {\n        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"quoteblock\", node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        attribution = (function() {if ($truthy(node['$attr?'](\"attribution\"))) {\n          \n          return node.$attr(\"attribution\");\n        } else {\n          return nil\n        }; return nil; })();\n        citetitle = (function() {if ($truthy(node['$attr?'](\"citetitle\"))) {\n          \n          return node.$attr(\"citetitle\");\n        } else {\n          return nil\n        }; return nil; })();\n        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {\n          \n          cite_element = (function() {if ($truthy(citetitle)) {\n            return \"\" + \"<cite>\" + (citetitle) + \"</cite>\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_text = (function() {if ($truthy(attribution)) {\n            return \"\" + \"&#8212; \" + (attribution) + ((function() {if ($truthy(citetitle)) {\n              return \"\" + \"<br\" + (self.void_element_slash) + \">\\n\"\n            } else {\n              return \"\"\n            }; return nil; })())\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_element = \"\" + \"\\n<div class=\\\"attribution\\\">\\n\" + (attribution_text) + (cite_element) + \"\\n</div>\";\n        } else {\n          attribution_element = \"\"\n        };\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<blockquote>\\n\" + (node.$content()) + \"\\n\" + \"</blockquote>\" + (attribution_element) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_quote$36.$$arity = 1);\n      \n      Opal.def(self, '$convert_thematic_break', $Html5Converter_convert_thematic_break$37 = function $$convert_thematic_break(node) {\n        var self = this;\n\n        return \"\" + \"<hr\" + (self.void_element_slash) + \">\"\n      }, $Html5Converter_convert_thematic_break$37.$$arity = 1);\n      \n      Opal.def(self, '$convert_sidebar', $Html5Converter_convert_sidebar$38 = function $$convert_sidebar(node) {\n        var self = this, id_attribute = nil, title_element = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"sidebarblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + \"<div class=\\\"content\\\">\\n\" + (title_element) + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_sidebar$38.$$arity = 1);\n      \n      Opal.def(self, '$convert_table', $Html5Converter_convert_table$39 = function $$convert_table(node) {\n        var $a, $$40, $$41, self = this, result = nil, id_attribute = nil, frame = nil, classes = nil, stripes = nil, style_attribute = nil, autowidth = nil, tablewidth = nil, role = nil, class_attribute = nil, slash = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ((frame = node.$attr(\"frame\", \"all\", \"table-frame\"))['$=='](\"topbot\")) {\n          frame = \"ends\"};\n        classes = [\"tableblock\", \"\" + \"frame-\" + (frame), \"\" + \"grid-\" + (node.$attr(\"grid\", \"all\", \"table-grid\"))];\n        if ($truthy((stripes = node.$attr(\"stripes\", nil, \"table-stripes\")))) {\n          classes['$<<'](\"\" + \"stripes-\" + (stripes))};\n        style_attribute = \"\";\n        if ($truthy(($truthy($a = (autowidth = node['$option?'](\"autowidth\"))) ? node['$attr?'](\"width\")['$!']() : $a))) {\n          classes['$<<'](\"fit-content\")\n        } else if ((tablewidth = node.$attr(\"tablepcwidth\"))['$=='](100)) {\n          classes['$<<'](\"stretch\")\n        } else {\n          style_attribute = \"\" + \" style=\\\"width: \" + (tablewidth) + \"%;\\\"\"\n        };\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))};\n        if ($truthy((role = node.$role()))) {\n          classes['$<<'](role)};\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"\" + \"<table\" + (id_attribute) + (class_attribute) + (style_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<caption class=\\\"title\\\">\" + (node.$captioned_title()) + \"</caption>\")};\n        if ($truthy($rb_gt(node.$attr(\"rowcount\"), 0))) {\n          \n          slash = self.void_element_slash;\n          result['$<<'](\"<colgroup>\");\n          if ($truthy(autowidth)) {\n            result = $rb_plus(result, $$($nesting, 'Array').$new(node.$columns().$size(), \"\" + \"<col\" + (slash) + \">\"))\n          } else {\n            $send(node.$columns(), 'each', [], ($$40 = function(col){var self = $$40.$$s || this;\n\n            \n              \n              if (col == null) {\n                col = nil;\n              };\n              return result['$<<']((function() {if ($truthy(col['$option?'](\"autowidth\"))) {\n                return \"\" + \"<col\" + (slash) + \">\"\n              } else {\n                return \"\" + \"<col style=\\\"width: \" + (col.$attr(\"colpcwidth\")) + \"%;\\\"\" + (slash) + \">\"\n              }; return nil; })());}, $$40.$$s = self, $$40.$$arity = 1, $$40))\n          };\n          result['$<<'](\"</colgroup>\");\n          $send(node.$rows().$to_h(), 'each', [], ($$41 = function(tsec, rows){var self = $$41.$$s || this, $$42;\n\n          \n            \n            if (tsec == null) {\n              tsec = nil;\n            };\n            \n            if (rows == null) {\n              rows = nil;\n            };\n            if ($truthy(rows['$empty?']())) {\n              return nil;};\n            result['$<<'](\"\" + \"<t\" + (tsec) + \">\");\n            $send(rows, 'each', [], ($$42 = function(row){var self = $$42.$$s || this, $$43;\n\n            \n              \n              if (row == null) {\n                row = nil;\n              };\n              result['$<<'](\"<tr>\");\n              $send(row, 'each', [], ($$43 = function(cell){var self = $$43.$$s || this, $b, cell_content = nil, $case = nil, cell_tag_name = nil, cell_class_attribute = nil, cell_colspan_attribute = nil, cell_rowspan_attribute = nil, cell_style_attribute = nil;\n\n              \n                \n                if (cell == null) {\n                  cell = nil;\n                };\n                if (tsec['$=='](\"head\")) {\n                  cell_content = cell.$text()\n                } else {\n                  $case = cell.$style();\n                  if (\"asciidoc\"['$===']($case)) {cell_content = \"\" + \"<div class=\\\"content\\\">\" + (cell.$content()) + \"</div>\"}\n                  else if (\"literal\"['$===']($case)) {cell_content = \"\" + \"<div class=\\\"literal\\\"><pre>\" + (cell.$text()) + \"</pre></div>\"}\n                  else {cell_content = (function() {if ($truthy((cell_content = cell.$content())['$empty?']())) {\n                    return \"\"\n                  } else {\n                    return \"\" + \"<p class=\\\"tableblock\\\">\" + (cell_content.$join(\"\" + \"</p>\\n\" + \"<p class=\\\"tableblock\\\">\")) + \"</p>\"\n                  }; return nil; })()}\n                };\n                cell_tag_name = (function() {if ($truthy(($truthy($b = tsec['$=='](\"head\")) ? $b : cell.$style()['$=='](\"header\")))) {\n                  return \"th\"\n                } else {\n                  return \"td\"\n                }; return nil; })();\n                cell_class_attribute = \"\" + \" class=\\\"tableblock halign-\" + (cell.$attr(\"halign\")) + \" valign-\" + (cell.$attr(\"valign\")) + \"\\\"\";\n                cell_colspan_attribute = (function() {if ($truthy(cell.$colspan())) {\n                  return \"\" + \" colspan=\\\"\" + (cell.$colspan()) + \"\\\"\"\n                } else {\n                  return \"\"\n                }; return nil; })();\n                cell_rowspan_attribute = (function() {if ($truthy(cell.$rowspan())) {\n                  return \"\" + \" rowspan=\\\"\" + (cell.$rowspan()) + \"\\\"\"\n                } else {\n                  return \"\"\n                }; return nil; })();\n                cell_style_attribute = (function() {if ($truthy(node.$document()['$attr?'](\"cellbgcolor\"))) {\n                  return \"\" + \" style=\\\"background-color: \" + (node.$document().$attr(\"cellbgcolor\")) + \";\\\"\"\n                } else {\n                  return \"\"\n                }; return nil; })();\n                return result['$<<'](\"\" + \"<\" + (cell_tag_name) + (cell_class_attribute) + (cell_colspan_attribute) + (cell_rowspan_attribute) + (cell_style_attribute) + \">\" + (cell_content) + \"</\" + (cell_tag_name) + \">\");}, $$43.$$s = self, $$43.$$arity = 1, $$43));\n              return result['$<<'](\"</tr>\");}, $$42.$$s = self, $$42.$$arity = 1, $$42));\n            return result['$<<'](\"\" + \"</t\" + (tsec) + \">\");}, $$41.$$s = self, $$41.$$arity = 2, $$41));};\n        result['$<<'](\"</table>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_table$39.$$arity = 1);\n      \n      Opal.def(self, '$convert_toc', $Html5Converter_convert_toc$44 = function $$convert_toc(node) {\n        var $a, $b, self = this, doc = nil, id_attr = nil, title_id_attr = nil, title = nil, levels = nil, role = nil;\n\n        \n        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?'](\"toc-placement\", \"macro\")) ? doc['$sections?']() : $b)) ? doc['$attr?'](\"toc\") : $a))) {\n        } else {\n          return \"<!-- toc disabled -->\"\n        };\n        if ($truthy(node.$id())) {\n          \n          id_attr = \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\";\n          title_id_attr = \"\" + \" id=\\\"\" + (node.$id()) + \"title\\\"\";\n        } else {\n          \n          id_attr = \" id=\\\"toc\\\"\";\n          title_id_attr = \" id=\\\"toctitle\\\"\";\n        };\n        title = (function() {if ($truthy(node['$title?']())) {\n          return node.$title()\n        } else {\n          \n          return doc.$attr(\"toc-title\");\n        }; return nil; })();\n        levels = (function() {if ($truthy(node['$attr?'](\"levels\"))) {\n          return node.$attr(\"levels\").$to_i()\n        } else {\n          return nil\n        }; return nil; })();\n        role = (function() {if ($truthy(node['$role?']())) {\n          return node.$role()\n        } else {\n          \n          return doc.$attr(\"toc-class\", \"toc\");\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attr) + \" class=\\\"\" + (role) + \"\\\">\\n\" + \"<div\" + (title_id_attr) + \" class=\\\"title\\\">\" + (title) + \"</div>\\n\" + (doc.$converter().$convert(doc, \"outline\", $hash2([\"toclevels\"], {\"toclevels\": levels}))) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_toc$44.$$arity = 1);\n      \n      Opal.def(self, '$convert_ulist', $Html5Converter_convert_ulist$45 = function $$convert_ulist(node) {\n        var $$46, self = this, result = nil, id_attribute = nil, div_classes = nil, marker_checked = nil, marker_unchecked = nil, checklist = nil, ul_class_attribute = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        div_classes = [\"ulist\", node.$style(), node.$role()].$compact();\n        marker_checked = (marker_unchecked = \"\");\n        if ($truthy((checklist = node['$option?'](\"checklist\")))) {\n          \n          div_classes.$unshift(div_classes.$shift(), \"checklist\");\n          ul_class_attribute = \" class=\\\"checklist\\\"\";\n          if ($truthy(node['$option?'](\"interactive\"))) {\n            if ($truthy(self.xml_mode)) {\n              \n              marker_checked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"1\\\" checked=\\\"checked\\\"/> \";\n              marker_unchecked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"0\\\"/> \";\n            } else {\n              \n              marker_checked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"1\\\" checked> \";\n              marker_unchecked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"0\\\"> \";\n            }\n          } else if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n            \n            marker_checked = \"<i class=\\\"fa fa-check-square-o\\\"></i> \";\n            marker_unchecked = \"<i class=\\\"fa fa-square-o\\\"></i> \";\n          } else {\n            \n            marker_checked = \"&#10003; \";\n            marker_unchecked = \"&#10063; \";\n          };\n        } else {\n          ul_class_attribute = (function() {if ($truthy(node.$style())) {\n            return \"\" + \" class=\\\"\" + (node.$style()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })()\n        };\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + \" class=\\\"\" + (div_classes.$join(\" \")) + \"\\\">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        result['$<<'](\"\" + \"<ul\" + (ul_class_attribute) + \">\");\n        $send(node.$items(), 'each', [], ($$46 = function(item){var self = $$46.$$s || this, $a;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          if ($truthy(item.$id())) {\n            result['$<<'](\"\" + \"<li id=\\\"\" + (item.$id()) + \"\\\"\" + ((function() {if ($truthy(item.$role())) {\n              return \"\" + \" class=\\\"\" + (item.$role()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\")\n          } else if ($truthy(item.$role())) {\n            result['$<<'](\"\" + \"<li class=\\\"\" + (item.$role()) + \"\\\">\")\n          } else {\n            result['$<<'](\"<li>\")\n          };\n          if ($truthy(($truthy($a = checklist) ? item['$attr?'](\"checkbox\") : $a))) {\n            result['$<<'](\"\" + \"<p>\" + ((function() {if ($truthy(item['$attr?'](\"checked\"))) {\n              return marker_checked\n            } else {\n              return marker_unchecked\n            }; return nil; })()) + (item.$text()) + \"</p>\")\n          } else {\n            result['$<<'](\"\" + \"<p>\" + (item.$text()) + \"</p>\")\n          };\n          if ($truthy(item['$blocks?']())) {\n            result['$<<'](item.$content())};\n          return result['$<<'](\"</li>\");}, $$46.$$s = self, $$46.$$arity = 1, $$46));\n        result['$<<'](\"</ul>\");\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_ulist$45.$$arity = 1);\n      \n      Opal.def(self, '$convert_verse', $Html5Converter_convert_verse$47 = function $$convert_verse(node) {\n        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"verseblock\", node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        attribution = (function() {if ($truthy(node['$attr?'](\"attribution\"))) {\n          \n          return node.$attr(\"attribution\");\n        } else {\n          return nil\n        }; return nil; })();\n        citetitle = (function() {if ($truthy(node['$attr?'](\"citetitle\"))) {\n          \n          return node.$attr(\"citetitle\");\n        } else {\n          return nil\n        }; return nil; })();\n        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {\n          \n          cite_element = (function() {if ($truthy(citetitle)) {\n            return \"\" + \"<cite>\" + (citetitle) + \"</cite>\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_text = (function() {if ($truthy(attribution)) {\n            return \"\" + \"&#8212; \" + (attribution) + ((function() {if ($truthy(citetitle)) {\n              return \"\" + \"<br\" + (self.void_element_slash) + \">\\n\"\n            } else {\n              return \"\"\n            }; return nil; })())\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_element = \"\" + \"\\n<div class=\\\"attribution\\\">\\n\" + (attribution_text) + (cite_element) + \"\\n</div>\";\n        } else {\n          attribution_element = \"\"\n        };\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<pre class=\\\"content\\\">\" + (node.$content()) + \"</pre>\" + (attribution_element) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_verse$47.$$arity = 1);\n      \n      Opal.def(self, '$convert_video', $Html5Converter_convert_video$48 = function $$convert_video(node) {\n        var $a, $b, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, width_attribute = nil, height_attribute = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, target = nil, hash = nil, hash_param = nil, autoplay_param = nil, loop_param = nil, muted_param = nil, rel_param_val = nil, start_param = nil, end_param = nil, has_loop_param = nil, mute_param = nil, controls_param = nil, fs_param = nil, fs_attribute = nil, modest_param = nil, theme_param = nil, hl_param = nil, list = nil, list_param = nil, playlist = nil, poster_attribute = nil, val = nil, preload_attribute = nil, start_t = nil, end_t = nil, time_anchor = nil;\n\n        \n        xml = self.xml_mode;\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"videoblock\"];\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))};\n        if ($truthy(node['$attr?'](\"align\"))) {\n          classes['$<<'](\"\" + \"text-\" + (node.$attr(\"align\")))};\n        if ($truthy(node.$role())) {\n          classes['$<<'](node.$role())};\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        width_attribute = (function() {if ($truthy(node['$attr?'](\"width\"))) {\n          return \"\" + \" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        height_attribute = (function() {if ($truthy(node['$attr?'](\"height\"))) {\n          return \"\" + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return (function() {$case = node.$attr(\"poster\");\n        if (\"vimeo\"['$===']($case)) {\n        if ($truthy((asset_uri_scheme = node.$document().$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n        } else {\n          asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n        };\n        start_anchor = (function() {if ($truthy(node['$attr?'](\"start\"))) {\n          return \"\" + \"#at=\" + (node.$attr(\"start\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        delimiter = [\"?\"];\n        $b = node.$attr(\"target\").$split(\"/\", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (hash = ($a[1] == null ? nil : $a[1])), $b;\n        hash_param = (function() {if ($truthy((hash = ($truthy($a = hash) ? $a : node.$attr(\"hash\"))))) {\n          return \"\" + (($truthy($a = delimiter.$pop()) ? $a : \"&amp;\")) + \"h=\" + (hash)\n        } else {\n          return \"\"\n        }; return nil; })();\n        autoplay_param = (function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          return \"\" + (($truthy($a = delimiter.$pop()) ? $a : \"&amp;\")) + \"autoplay=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        loop_param = (function() {if ($truthy(node['$option?'](\"loop\"))) {\n          return \"\" + (($truthy($a = delimiter.$pop()) ? $a : \"&amp;\")) + \"loop=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        muted_param = (function() {if ($truthy(node['$option?'](\"muted\"))) {\n          return \"\" + (($truthy($a = delimiter.$pop()) ? $a : \"&amp;\")) + \"muted=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<iframe\" + (width_attribute) + (height_attribute) + \" src=\\\"\" + (asset_uri_scheme) + \"//player.vimeo.com/video/\" + (target) + (hash_param) + (autoplay_param) + (loop_param) + (muted_param) + (start_anchor) + \"\\\" frameborder=\\\"0\\\"\" + ((function() {if ($truthy(node['$option?'](\"nofullscreen\"))) {\n          return \"\"\n        } else {\n          \n          return self.$append_boolean_attribute(\"allowfullscreen\", xml);\n        }; return nil; })()) + \"></iframe>\\n\" + \"</div>\\n\" + \"</div>\";}\n        else if (\"youtube\"['$===']($case)) {\n        if ($truthy((asset_uri_scheme = node.$document().$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n        } else {\n          asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n        };\n        rel_param_val = (function() {if ($truthy(node['$option?'](\"related\"))) {\n          return 1\n        } else {\n          return 0\n        }; return nil; })();\n        start_param = (function() {if ($truthy(node['$attr?'](\"start\"))) {\n          return \"\" + \"&amp;start=\" + (node.$attr(\"start\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        end_param = (function() {if ($truthy(node['$attr?'](\"end\"))) {\n          return \"\" + \"&amp;end=\" + (node.$attr(\"end\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        autoplay_param = (function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          return \"&amp;autoplay=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        loop_param = (function() {if ($truthy((has_loop_param = node['$option?'](\"loop\")))) {\n          return \"&amp;loop=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        mute_param = (function() {if ($truthy(node['$option?'](\"muted\"))) {\n          return \"&amp;mute=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        controls_param = (function() {if ($truthy(node['$option?'](\"nocontrols\"))) {\n          return \"&amp;controls=0\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(node['$option?'](\"nofullscreen\"))) {\n          \n          fs_param = \"&amp;fs=0\";\n          fs_attribute = \"\";\n        } else {\n          \n          fs_param = \"\";\n          fs_attribute = self.$append_boolean_attribute(\"allowfullscreen\", xml);\n        };\n        modest_param = (function() {if ($truthy(node['$option?'](\"modest\"))) {\n          return \"&amp;modestbranding=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        theme_param = (function() {if ($truthy(node['$attr?'](\"theme\"))) {\n          return \"\" + \"&amp;theme=\" + (node.$attr(\"theme\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        hl_param = (function() {if ($truthy(node['$attr?'](\"lang\"))) {\n          return \"\" + \"&amp;hl=\" + (node.$attr(\"lang\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        $b = node.$attr(\"target\").$split(\"/\", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (list = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy((list = ($truthy($a = list) ? $a : node.$attr(\"list\"))))) {\n          list_param = \"\" + \"&amp;list=\" + (list)\n        } else {\n          \n          $b = target.$split(\",\", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (playlist = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy((playlist = ($truthy($a = playlist) ? $a : node.$attr(\"playlist\"))))) {\n            list_param = \"\" + \"&amp;playlist=\" + (target) + \",\" + (playlist)\n          } else {\n            list_param = (function() {if ($truthy(has_loop_param)) {\n              return \"\" + \"&amp;playlist=\" + (target)\n            } else {\n              return \"\"\n            }; return nil; })()\n          };\n        };\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<iframe\" + (width_attribute) + (height_attribute) + \" src=\\\"\" + (asset_uri_scheme) + \"//www.youtube.com/embed/\" + (target) + \"?rel=\" + (rel_param_val) + (start_param) + (end_param) + (autoplay_param) + (loop_param) + (mute_param) + (controls_param) + (list_param) + (fs_param) + (modest_param) + (theme_param) + (hl_param) + \"\\\" frameborder=\\\"0\\\"\" + (fs_attribute) + \"></iframe>\\n\" + \"</div>\\n\" + \"</div>\";}\n        else {\n        poster_attribute = (function() {if ($truthy((val = node.$attr(\"poster\"))['$nil_or_empty?']())) {\n          return \"\"\n        } else {\n          return \"\" + \" poster=\\\"\" + (node.$media_uri(val)) + \"\\\"\"\n        }; return nil; })();\n        preload_attribute = (function() {if ($truthy((val = node.$attr(\"preload\"))['$nil_or_empty?']())) {\n          return \"\"\n        } else {\n          return \"\" + \" preload=\\\"\" + (val) + \"\\\"\"\n        }; return nil; })();\n        start_t = node.$attr(\"start\");\n        end_t = node.$attr(\"end\");\n        time_anchor = (function() {if ($truthy(($truthy($a = start_t) ? $a : end_t))) {\n          return \"\" + \"#t=\" + (($truthy($a = start_t) ? $a : \"\")) + ((function() {if ($truthy(end_t)) {\n            return \"\" + \",\" + (end_t)\n          } else {\n            return \"\"\n          }; return nil; })())\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<video src=\\\"\" + (node.$media_uri(node.$attr(\"target\"))) + (time_anchor) + \"\\\"\" + (width_attribute) + (height_attribute) + (poster_attribute) + ((function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          \n          return self.$append_boolean_attribute(\"autoplay\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"muted\"))) {\n          \n          return self.$append_boolean_attribute(\"muted\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"nocontrols\"))) {\n          return \"\"\n        } else {\n          \n          return self.$append_boolean_attribute(\"controls\", xml);\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"loop\"))) {\n          \n          return self.$append_boolean_attribute(\"loop\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + (preload_attribute) + \">\\n\" + \"Your browser does not support the video tag.\\n\" + \"</video>\\n\" + \"</div>\\n\" + \"</div>\";}})();\n      }, $Html5Converter_convert_video$48.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_anchor', $Html5Converter_convert_inline_anchor$49 = function $$convert_inline_anchor(node) {\n        var $a, $b, self = this, $case = nil, path = nil, attrs = nil, text = nil, ref = nil, refid = nil, top = nil, outer = nil;\n\n        return (function() {$case = node.$type();\n        if (\"xref\"['$===']($case)) {\n        if ($truthy((path = node.$attributes()['$[]'](\"path\")))) {\n          \n          attrs = self.$append_link_constraint_attrs(node, (function() {if ($truthy(node.$role())) {\n            return [\"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"]\n          } else {\n            return []\n          }; return nil; })()).$join();\n          text = ($truthy($a = node.$text()) ? $a : path);\n        } else {\n          \n          attrs = (function() {if ($truthy(node.$role())) {\n            return \"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          if ($truthy((text = node.$text()))) {\n          } else if ($truthy($$($nesting, 'AbstractNode')['$===']((ref = ($truthy($a = (self.refs = ($truthy($b = self.refs) ? $b : node.$document().$catalog()['$[]'](\"refs\")))['$[]']((refid = node.$attributes()['$[]'](\"refid\")))) ? $a : (function() {if ($truthy(refid['$nil_or_empty?']())) {\n            \n            return (top = self.$get_root_document(node));\n          } else {\n            return nil\n          }; return nil; })()))))) {\n            if ($truthy(($truthy($a = (self.resolving_xref = ($truthy($b = self.resolving_xref) ? $b : (outer = true)))) ? outer : $a))) {\n              \n              if ($truthy((text = ref.$xreftext(node.$attr(\"xrefstyle\", nil, true))))) {\n                if ($truthy(text['$include?'](\"<a\"))) {\n                  text = text.$gsub($$($nesting, 'DropAnchorRx'), \"\")}\n              } else {\n                text = (function() {if ($truthy(top)) {\n                  return \"[^top]\"\n                } else {\n                  return \"\" + \"[\" + (refid) + \"]\"\n                }; return nil; })()\n              };\n              self.resolving_xref = nil;\n            } else {\n              text = (function() {if ($truthy(top)) {\n                return \"[^top]\"\n              } else {\n                return \"\" + \"[\" + (refid) + \"]\"\n              }; return nil; })()\n            }\n          } else {\n            text = \"\" + \"[\" + (refid) + \"]\"\n          };\n        };\n        return \"\" + \"<a href=\\\"\" + (node.$target()) + \"\\\"\" + (attrs) + \">\" + (text) + \"</a>\";}\n        else if (\"ref\"['$===']($case)) {return \"\" + \"<a id=\\\"\" + (node.$id()) + \"\\\"></a>\"}\n        else if (\"link\"['$===']($case)) {\n        attrs = (function() {if ($truthy(node.$id())) {\n          return [\"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"]\n        } else {\n          return []\n        }; return nil; })();\n        if ($truthy(node.$role())) {\n          attrs['$<<'](\"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\")};\n        if ($truthy(node['$attr?'](\"title\"))) {\n          attrs['$<<'](\"\" + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\")};\n        return \"\" + \"<a href=\\\"\" + (node.$target()) + \"\\\"\" + (self.$append_link_constraint_attrs(node, attrs).$join()) + \">\" + (node.$text()) + \"</a>\";}\n        else if (\"bibref\"['$===']($case)) {return \"\" + \"<a id=\\\"\" + (node.$id()) + \"\\\"></a>[\" + (($truthy($a = node.$reftext()) ? $a : node.$id())) + \"]\"}\n        else {\n        self.$logger().$warn(\"\" + \"unknown anchor type: \" + (node.$type().$inspect()));\n        return nil;}})()\n      }, $Html5Converter_convert_inline_anchor$49.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_break', $Html5Converter_convert_inline_break$50 = function $$convert_inline_break(node) {\n        var self = this;\n\n        return \"\" + (node.$text()) + \"<br\" + (self.void_element_slash) + \">\"\n      }, $Html5Converter_convert_inline_break$50.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_button', $Html5Converter_convert_inline_button$51 = function $$convert_inline_button(node) {\n        var self = this;\n\n        return \"\" + \"<b class=\\\"button\\\">\" + (node.$text()) + \"</b>\"\n      }, $Html5Converter_convert_inline_button$51.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_callout', $Html5Converter_convert_inline_callout$52 = function $$convert_inline_callout(node) {\n        var self = this, src = nil, guard = nil;\n\n        if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n          return \"\" + \"<i class=\\\"conum\\\" data-value=\\\"\" + (node.$text()) + \"\\\"></i><b>(\" + (node.$text()) + \")</b>\"\n        } else if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          \n          src = node.$icon_uri(\"\" + \"callouts/\" + (node.$text()));\n          return \"\" + \"<img src=\\\"\" + (src) + \"\\\" alt=\\\"\" + (node.$text()) + \"\\\"\" + (self.void_element_slash) + \">\";\n        } else if ($truthy($$$('::', 'Array')['$===']((guard = node.$attributes()['$[]'](\"guard\"))))) {\n          return \"\" + \"&lt;!--<b class=\\\"conum\\\">(\" + (node.$text()) + \")</b>--&gt;\"\n        } else {\n          return \"\" + (guard) + \"<b class=\\\"conum\\\">(\" + (node.$text()) + \")</b>\"\n        }\n      }, $Html5Converter_convert_inline_callout$52.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_footnote', $Html5Converter_convert_inline_footnote$53 = function $$convert_inline_footnote(node) {\n        var self = this, index = nil, id_attr = nil;\n\n        if ($truthy((index = node.$attr(\"index\")))) {\n          if (node.$type()['$=='](\"xref\")) {\n            return \"\" + \"<sup class=\\\"footnoteref\\\">[<a class=\\\"footnote\\\" href=\\\"#_footnotedef_\" + (index) + \"\\\" title=\\\"View footnote.\\\">\" + (index) + \"</a>]</sup>\"\n          } else {\n            \n            id_attr = (function() {if ($truthy(node.$id())) {\n              return \"\" + \" id=\\\"_footnote_\" + (node.$id()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            return \"\" + \"<sup class=\\\"footnote\\\"\" + (id_attr) + \">[<a id=\\\"_footnoteref_\" + (index) + \"\\\" class=\\\"footnote\\\" href=\\\"#_footnotedef_\" + (index) + \"\\\" title=\\\"View footnote.\\\">\" + (index) + \"</a>]</sup>\";\n          }\n        } else if (node.$type()['$=='](\"xref\")) {\n          return \"\" + \"<sup class=\\\"footnoteref red\\\" title=\\\"Unresolved footnote reference.\\\">[\" + (node.$text()) + \"]</sup>\"\n        } else {\n          return nil\n        }\n      }, $Html5Converter_convert_inline_footnote$53.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_image', $Html5Converter_convert_inline_image$54 = function $$convert_inline_image(node) {\n        var $a, $b, self = this, target = nil, type = nil, icons = nil, i_class_attr_val = nil, attrs = nil, img = nil, fallback = nil, class_attr_val = nil, role = nil;\n\n        \n        target = node.$target();\n        if ((type = ($truthy($a = node.$type()) ? $a : \"image\"))['$=='](\"icon\")) {\n          if ((icons = node.$document().$attr(\"icons\"))['$=='](\"font\")) {\n            \n            i_class_attr_val = \"\" + \"fa fa-\" + (target);\n            if ($truthy(node['$attr?'](\"size\"))) {\n              i_class_attr_val = \"\" + (i_class_attr_val) + \" fa-\" + (node.$attr(\"size\"))};\n            if ($truthy(node['$attr?'](\"flip\"))) {\n              i_class_attr_val = \"\" + (i_class_attr_val) + \" fa-flip-\" + (node.$attr(\"flip\"))\n            } else if ($truthy(node['$attr?'](\"rotate\"))) {\n              i_class_attr_val = \"\" + (i_class_attr_val) + \" fa-rotate-\" + (node.$attr(\"rotate\"))};\n            attrs = (function() {if ($truthy(node['$attr?'](\"title\"))) {\n              return \"\" + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            img = \"\" + \"<i class=\\\"\" + (i_class_attr_val) + \"\\\"\" + (attrs) + \"></i>\";\n          } else if ($truthy(icons)) {\n            \n            attrs = (function() {if ($truthy(node['$attr?'](\"width\"))) {\n              return \"\" + \" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            if ($truthy(node['$attr?'](\"height\"))) {\n              attrs = \"\" + (attrs) + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"};\n            if ($truthy(node['$attr?'](\"title\"))) {\n              attrs = \"\" + (attrs) + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\"};\n            img = \"\" + \"<img src=\\\"\" + (node.$icon_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\";\n          } else {\n            img = \"\" + \"[\" + (node.$alt()) + \"&#93;\"\n          }\n        } else {\n          \n          attrs = (function() {if ($truthy(node['$attr?'](\"width\"))) {\n            return \"\" + \" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          if ($truthy(node['$attr?'](\"height\"))) {\n            attrs = \"\" + (attrs) + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"};\n          if ($truthy(node['$attr?'](\"title\"))) {\n            attrs = \"\" + (attrs) + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\"};\n          if ($truthy(($truthy($a = ($truthy($b = node['$attr?'](\"format\", \"svg\")) ? $b : target['$include?'](\".svg\"))) ? $rb_lt(node.$document().$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $a))) {\n            if ($truthy(node['$option?'](\"inline\"))) {\n              img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\")\n            } else if ($truthy(node['$option?'](\"interactive\"))) {\n              \n              fallback = (function() {if ($truthy(node['$attr?'](\"fallback\"))) {\n                return \"\" + \"<img src=\\\"\" + (node.$image_uri(node.$attr(\"fallback\"))) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\"\n              } else {\n                return \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"\n              }; return nil; })();\n              img = \"\" + \"<object type=\\\"image/svg+xml\\\" data=\\\"\" + (node.$image_uri(target)) + \"\\\"\" + (attrs) + \">\" + (fallback) + \"</object>\";\n            } else {\n              img = \"\" + \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\"\n            }\n          } else {\n            img = \"\" + \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\"\n          };\n        };\n        if ($truthy(node['$attr?'](\"link\"))) {\n          img = \"\" + \"<a class=\\\"image\\\" href=\\\"\" + (node.$attr(\"link\")) + \"\\\"\" + (self.$append_link_constraint_attrs(node).$join()) + \">\" + (img) + \"</a>\"};\n        class_attr_val = type;\n        if ($truthy((role = node.$role()))) {\n          class_attr_val = (function() {if ($truthy(node['$attr?'](\"float\"))) {\n            return \"\" + (class_attr_val) + \" \" + (node.$attr(\"float\")) + \" \" + (role)\n          } else {\n            return \"\" + (class_attr_val) + \" \" + (role)\n          }; return nil; })()\n        } else if ($truthy(node['$attr?'](\"float\"))) {\n          class_attr_val = \"\" + (class_attr_val) + \" \" + (node.$attr(\"float\"))};\n        return \"\" + \"<span class=\\\"\" + (class_attr_val) + \"\\\">\" + (img) + \"</span>\";\n      }, $Html5Converter_convert_inline_image$54.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_indexterm', $Html5Converter_convert_inline_indexterm$55 = function $$convert_inline_indexterm(node) {\n        var self = this;\n\n        if (node.$type()['$=='](\"visible\")) {\n          return node.$text()\n        } else {\n          return \"\"\n        }\n      }, $Html5Converter_convert_inline_indexterm$55.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_kbd', $Html5Converter_convert_inline_kbd$56 = function $$convert_inline_kbd(node) {\n        var self = this, keys = nil;\n\n        if ((keys = node.$attr(\"keys\")).$size()['$=='](1)) {\n          return \"\" + \"<kbd>\" + (keys['$[]'](0)) + \"</kbd>\"\n        } else {\n          return \"\" + \"<span class=\\\"keyseq\\\"><kbd>\" + (keys.$join(\"</kbd>+<kbd>\")) + \"</kbd></span>\"\n        }\n      }, $Html5Converter_convert_inline_kbd$56.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_menu', $Html5Converter_convert_inline_menu$57 = function $$convert_inline_menu(node) {\n        var self = this, caret = nil, submenu_joiner = nil, menu = nil, submenus = nil, menuitem = nil;\n\n        \n        caret = (function() {if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n          return \"&#160;<i class=\\\"fa fa-angle-right caret\\\"></i> \"\n        } else {\n          return \"&#160;<b class=\\\"caret\\\">&#8250;</b> \"\n        }; return nil; })();\n        submenu_joiner = \"\" + \"</b>\" + (caret) + \"<b class=\\\"submenu\\\">\";\n        menu = node.$attr(\"menu\");\n        if ($truthy((submenus = node.$attr(\"submenus\"))['$empty?']())) {\n          if ($truthy((menuitem = node.$attr(\"menuitem\")))) {\n            return \"\" + \"<span class=\\\"menuseq\\\"><b class=\\\"menu\\\">\" + (menu) + \"</b>\" + (caret) + \"<b class=\\\"menuitem\\\">\" + (menuitem) + \"</b></span>\"\n          } else {\n            return \"\" + \"<b class=\\\"menuref\\\">\" + (menu) + \"</b>\"\n          }\n        } else {\n          return \"\" + \"<span class=\\\"menuseq\\\"><b class=\\\"menu\\\">\" + (menu) + \"</b>\" + (caret) + \"<b class=\\\"submenu\\\">\" + (submenus.$join(submenu_joiner)) + \"</b>\" + (caret) + \"<b class=\\\"menuitem\\\">\" + (node.$attr(\"menuitem\")) + \"</b></span>\"\n        };\n      }, $Html5Converter_convert_inline_menu$57.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_quoted', $Html5Converter_convert_inline_quoted$58 = function $$convert_inline_quoted(node) {\n        var $a, $b, self = this, open = nil, close = nil, tag = nil, class_attr = nil;\n\n        \n        $b = $$($nesting, 'QUOTE_TAGS')['$[]'](node.$type()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (tag = ($a[2] == null ? nil : $a[2])), $b;\n        if ($truthy(node.$id())) {\n          \n          class_attr = (function() {if ($truthy(node.$role())) {\n            return \"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          if ($truthy(tag)) {\n            return \"\" + (open.$chop()) + \" id=\\\"\" + (node.$id()) + \"\\\"\" + (class_attr) + \">\" + (node.$text()) + (close)\n          } else {\n            return \"\" + \"<span id=\\\"\" + (node.$id()) + \"\\\"\" + (class_attr) + \">\" + (open) + (node.$text()) + (close) + \"</span>\"\n          };\n        } else if ($truthy(node.$role())) {\n          if ($truthy(tag)) {\n            return \"\" + (open.$chop()) + \" class=\\\"\" + (node.$role()) + \"\\\">\" + (node.$text()) + (close)\n          } else {\n            return \"\" + \"<span class=\\\"\" + (node.$role()) + \"\\\">\" + (open) + (node.$text()) + (close) + \"</span>\"\n          }\n        } else {\n          return \"\" + (open) + (node.$text()) + (close)\n        };\n      }, $Html5Converter_convert_inline_quoted$58.$$arity = 1);\n      \n      Opal.def(self, '$read_svg_contents', $Html5Converter_read_svg_contents$59 = function $$read_svg_contents(node, target) {\n        var $$60, self = this, svg = nil, old_start_tag = nil, new_start_tag = nil, start_tag_match = nil;\n\n        \n        if ($truthy((svg = node.$read_contents(target, $hash2([\"start\", \"normalize\", \"label\", \"warn_if_empty\"], {\"start\": node.$document().$attr(\"imagesdir\"), \"normalize\": true, \"label\": \"SVG\", \"warn_if_empty\": true}))))) {\n          \n          if ($truthy(svg['$empty?']())) {\n            return nil};\n          if ($truthy(svg['$start_with?'](\"<svg\"))) {\n          } else {\n            svg = svg.$sub($$($nesting, 'SvgPreambleRx'), \"\")\n          };\n          old_start_tag = (new_start_tag = (start_tag_match = nil));\n          $send([\"width\", \"height\"], 'each', [], ($$60 = function(dim){var self = $$60.$$s || this, $a, $b;\n\n          \n            \n            if (dim == null) {\n              dim = nil;\n            };\n            if ($truthy(node['$attr?'](dim))) {\n            } else {\n              return nil;\n            };\n            if ($truthy(new_start_tag)) {\n            } else {\n              \n              if ((start_tag_match = ($truthy($a = start_tag_match) ? $a : ($truthy($b = svg.$match($$($nesting, 'SvgStartTagRx'))) ? $b : \"no_match\")))['$=='](\"no_match\")) {\n                return nil;};\n              new_start_tag = (old_start_tag = start_tag_match['$[]'](0)).$gsub($$($nesting, 'DimensionAttributeRx'), \"\");\n            };\n            return (new_start_tag = \"\" + (new_start_tag.$chop()) + \" \" + (dim) + \"=\\\"\" + (node.$attr(dim)) + \"\\\">\");}, $$60.$$s = self, $$60.$$arity = 1, $$60));\n          if ($truthy(new_start_tag)) {\n            svg = \"\" + (new_start_tag) + (svg['$[]'](Opal.Range.$new(old_start_tag.$length(), -1, false)))};};\n        return svg;\n      }, $Html5Converter_read_svg_contents$59.$$arity = 2);\n      self.$private();\n      \n      Opal.def(self, '$append_boolean_attribute', $Html5Converter_append_boolean_attribute$61 = function $$append_boolean_attribute(name, xml) {\n        var self = this;\n\n        if ($truthy(xml)) {\n          return \"\" + \" \" + (name) + \"=\\\"\" + (name) + \"\\\"\"\n        } else {\n          return \"\" + \" \" + (name)\n        }\n      }, $Html5Converter_append_boolean_attribute$61.$$arity = 2);\n      \n      Opal.def(self, '$append_link_constraint_attrs', $Html5Converter_append_link_constraint_attrs$62 = function $$append_link_constraint_attrs(node, attrs) {\n        var $a, self = this, rel = nil, window = nil;\n\n        \n        \n        if (attrs == null) {\n          attrs = [];\n        };\n        if ($truthy(node['$option?'](\"nofollow\"))) {\n          rel = \"nofollow\"};\n        if ($truthy((window = node.$attributes()['$[]'](\"window\")))) {\n          \n          attrs['$<<'](\"\" + \" target=\\\"\" + (window) + \"\\\"\");\n          if ($truthy(($truthy($a = window['$=='](\"_blank\")) ? $a : node['$option?'](\"noopener\")))) {\n            attrs['$<<']((function() {if ($truthy(rel)) {\n              return \"\" + \" rel=\\\"\" + (rel) + \" noopener\\\"\"\n            } else {\n              return \" rel=\\\"noopener\\\"\"\n            }; return nil; })())};\n        } else if ($truthy(rel)) {\n          attrs['$<<'](\"\" + \" rel=\\\"\" + (rel) + \"\\\"\")};\n        return attrs;\n      }, $Html5Converter_append_link_constraint_attrs$62.$$arity = -2);\n      \n      Opal.def(self, '$encode_attribute_value', $Html5Converter_encode_attribute_value$63 = function $$encode_attribute_value(val) {\n        var self = this;\n\n        if ($truthy(val['$include?'](\"\\\"\"))) {\n          \n          return val.$gsub(\"\\\"\", \"&quot;\");\n        } else {\n          return val\n        }\n      }, $Html5Converter_encode_attribute_value$63.$$arity = 1);\n      \n      Opal.def(self, '$generate_manname_section', $Html5Converter_generate_manname_section$64 = function $$generate_manname_section(node) {\n        var $a, self = this, manname_title = nil, next_section = nil, next_section_title = nil, manname_id_attr = nil, manname_id = nil;\n\n        \n        manname_title = node.$attr(\"manname-title\", \"Name\");\n        if ($truthy(($truthy($a = (next_section = node.$sections()['$[]'](0))) ? (next_section_title = next_section.$title())['$=='](next_section_title.$upcase()) : $a))) {\n          manname_title = manname_title.$upcase()};\n        manname_id_attr = (function() {if ($truthy((manname_id = node.$attr(\"manname-id\")))) {\n          return \"\" + \" id=\\\"\" + (manname_id) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<h2\" + (manname_id_attr) + \">\" + (manname_title) + \"</h2>\\n\" + \"<div class=\\\"sectionbody\\\">\\n\" + \"<p>\" + (node.$attr(\"mannames\").$join(\", \")) + \" - \" + (node.$attr(\"manpurpose\")) + \"</p>\\n\" + \"</div>\";\n      }, $Html5Converter_generate_manname_section$64.$$arity = 1);\n      \n      Opal.def(self, '$get_root_document', $Html5Converter_get_root_document$65 = function $$get_root_document(node) {\n        var $a, self = this;\n\n        \n        while ($truthy((node = node.$document())['$nested?']())) {\n          node = node.$parent_document()\n        };\n        return node;\n      }, $Html5Converter_get_root_document$65.$$arity = 1);\n      \n      Opal.def(self, '$method_missing', $Html5Converter_method_missing$66 = function $$method_missing(id, $a) {\n        var $post_args, args, $b, $iter = $Html5Converter_method_missing$66.$$p, $yield = $iter || nil, self = this, name = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Html5Converter_method_missing$66.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        $post_args = Opal.slice.call(arguments, 1, arguments.length);\n        \n        args = $post_args;;\n        if ($truthy(($truthy($b = (name = id.$to_s())['$start_with?'](\"convert_\")['$!']()) ? self['$handles?'](name) : $b))) {\n          \n          return $send(self, 'send', [\"\" + \"convert_\" + (name)].concat(Opal.to_a(args)));\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', $Html5Converter_method_missing$66, false), $zuper, $iter)\n        };\n      }, $Html5Converter_method_missing$66.$$arity = -2);\n      return (Opal.def(self, '$respond_to_missing?', $Html5Converter_respond_to_missing$ques$67 = function(id, $a) {\n        var $post_args, options, $b, self = this, name = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 1, arguments.length);\n        \n        options = $post_args;;\n        return ($truthy($b = (name = id.$to_s())['$start_with?'](\"convert_\")['$!']()) ? self['$handles?'](name) : $b);\n      }, $Html5Converter_respond_to_missing$ques$67.$$arity = -2), nil) && 'respond_to_missing?';\n    })($$($nesting, 'Converter'), $$$($$($nesting, 'Converter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/extensions\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;\n\n  Opal.add_stubs(['$==', '$[]=', '$config', '$-', '$const_defined?', '$singleton_class?', '$include', '$const_get', '$extend', '$attr_reader', '$merge', '$class', '$update', '$raise', '$document', '$doctype', '$[]', '$+', '$level', '$delete', '$>', '$casecmp', '$new', '$title=', '$sectname=', '$special=', '$fetch', '$numbered=', '$!', '$key?', '$attr?', '$special', '$numbered', '$generate_id', '$title', '$id=', '$update_attributes', '$tr', '$basename', '$create_block', '$assign_caption', '$===', '$parse_blocks', '$empty?', '$include?', '$sub_attributes', '$parse', '$each', '$define_method', '$unshift', '$shift', '$send', '$size', '$binding', '$receiver', '$define_singleton_method', '$instance_exec', '$to_proc', '$call', '$option', '$flatten', '$respond_to?', '$to_s', '$partition', '$to_i', '$<<', '$compact', '$inspect', '$attr_accessor', '$to_set', '$match?', '$resolve_regexp', '$method', '$register', '$values', '$groups', '$arity', '$activate', '$add_document_processor', '$any?', '$select', '$add_syntax_processor', '$to_sym', '$instance_variable_get', '$kind', '$private', '$join', '$map', '$split', '$capitalize', '$instance_variable_set', '$resolve_args', '$enable_dsl', '$singleton_class', '$process_block_given?', '$source_location', '$freeze', '$resolve_class', '$<', '$update_config', '$as_symbol', '$name', '$name=', '$pop', '$-@', '$next_auto_id', '$generate_name']);\n  \n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n  } else {\n    nil\n  };\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Extensions');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Processor');\n\n        var $nesting = [self].concat($parent_nesting), $Processor_initialize$4, $Processor_update_config$5, $Processor_process$6, $Processor_create_section$7, $Processor_create_block$8, $Processor_create_list$9, $Processor_create_list_item$10, $Processor_create_image_block$11, $Processor_create_inline$12, $Processor_parse_content$13, $Processor_parse_attributes$14, $Processor$15;\n\n        self.$$prototype.config = nil;\n        \n        (function(self, $parent_nesting) {\n          var $nesting = [self].concat($parent_nesting), $config$1, $option$2, $enable_dsl$3;\n\n          \n          \n          Opal.def(self, '$config', $config$1 = function $$config() {\n            var $a, self = this;\n            if (self.config == null) self.config = nil;\n\n            return (self.config = ($truthy($a = self.config) ? $a : $hash2([], {})))\n          }, $config$1.$$arity = 0);\n          \n          Opal.def(self, '$option', $option$2 = function $$option(key, default_value) {\n            var self = this, $writer = nil;\n\n            \n            $writer = [key, default_value];\n            $send(self.$config(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          }, $option$2.$$arity = 2);\n          \n          Opal.def(self, '$enable_dsl', $enable_dsl$3 = function $$enable_dsl() {\n            var self = this;\n\n            if ($truthy(self['$const_defined?'](\"DSL\"))) {\n              if ($truthy(self['$singleton_class?']())) {\n                return self.$include(self.$const_get(\"DSL\"))\n              } else {\n                return self.$extend(self.$const_get(\"DSL\"))\n              }\n            } else {\n              return nil\n            }\n          }, $enable_dsl$3.$$arity = 0);\n          return Opal.alias(self, \"use_dsl\", \"enable_dsl\");\n        })(Opal.get_singleton_class(self), $nesting);\n        self.$attr_reader(\"config\");\n        \n        Opal.def(self, '$initialize', $Processor_initialize$4 = function $$initialize(config) {\n          var self = this;\n\n          \n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          return (self.config = self.$class().$config().$merge(config));\n        }, $Processor_initialize$4.$$arity = -1);\n        \n        Opal.def(self, '$update_config', $Processor_update_config$5 = function $$update_config(config) {\n          var self = this;\n\n          return self.config.$update(config)\n        }, $Processor_update_config$5.$$arity = 1);\n        \n        Opal.def(self, '$process', $Processor_process$6 = function $$process($a) {\n          var $post_args, args, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Processor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\");\n        }, $Processor_process$6.$$arity = -1);\n        \n        Opal.def(self, '$create_section', $Processor_create_section$7 = function $$create_section(parent, title, attrs, opts) {\n          var $a, self = this, doc = nil, book = nil, doctype = nil, level = nil, style = nil, sectname = nil, special = nil, sect = nil, $writer = nil, id = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          doc = parent.$document();\n          book = (doctype = doc.$doctype())['$=='](\"book\");\n          level = ($truthy($a = opts['$[]'](\"level\")) ? $a : $rb_plus(parent.$level(), 1));\n          if ($truthy((style = attrs.$delete(\"style\")))) {\n            if ($truthy(($truthy($a = book) ? style['$=='](\"abstract\") : $a))) {\n              $a = [\"chapter\", 1], (sectname = $a[0]), (level = $a[1]), $a\n            } else {\n              \n              $a = [style, true], (sectname = $a[0]), (special = $a[1]), $a;\n              if (level['$=='](0)) {\n                level = 1};\n            }\n          } else if ($truthy(book)) {\n            sectname = (function() {if (level['$=='](0)) {\n              return \"part\"\n            } else {\n              \n              if ($truthy($rb_gt(level, 1))) {\n                return \"section\"\n              } else {\n                return \"chapter\"\n              };\n            }; return nil; })()\n          } else if ($truthy((($a = doctype['$=='](\"manpage\")) ? title.$casecmp(\"synopsis\")['$=='](0) : doctype['$=='](\"manpage\")))) {\n            $a = [\"synopsis\", true], (sectname = $a[0]), (special = $a[1]), $a\n          } else {\n            sectname = \"section\"\n          };\n          sect = $$($nesting, 'Section').$new(parent, level);\n          $a = [title, sectname], sect['$title=']($a[0]), sect['$sectname=']($a[1]), $a;\n          if ($truthy(special)) {\n            \n            \n            $writer = [true];\n            $send(sect, 'special=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(opts.$fetch(\"numbered\", style['$=='](\"appendix\")))) {\n              \n              $writer = [true];\n              $send(sect, 'numbered=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else if ($truthy(($truthy($a = opts['$key?'](\"numbered\")['$!']()) ? doc['$attr?'](\"sectnums\", \"all\") : $a))) {\n              \n              $writer = [(function() {if ($truthy(($truthy($a = book) ? level['$=='](1) : $a))) {\n                return \"chapter\"\n              } else {\n                return true\n              }; return nil; })()];\n              $send(sect, 'numbered=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n          } else if ($truthy($rb_gt(level, 0))) {\n            if ($truthy(opts.$fetch(\"numbered\", doc['$attr?'](\"sectnums\")))) {\n              \n              $writer = [(function() {if ($truthy(sect.$special())) {\n                return ($truthy($a = parent.$numbered()) ? true : $a)\n              } else {\n                return true\n              }; return nil; })()];\n              $send(sect, 'numbered=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];}\n          } else if ($truthy(opts.$fetch(\"numbered\", ($truthy($a = book) ? doc['$attr?'](\"partnums\") : $a)))) {\n            \n            $writer = [true];\n            $send(sect, 'numbered=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ((id = attrs['$[]'](\"id\"))['$=='](false)) {\n            attrs.$delete(\"id\")\n          } else {\n            \n            $writer = [(($writer = [\"id\", ($truthy($a = id) ? $a : (function() {if ($truthy(doc['$attr?'](\"sectids\"))) {\n              \n              return $$($nesting, 'Section').$generate_id(sect.$title(), doc);\n            } else {\n              return nil\n            }; return nil; })())]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])];\n            $send(sect, 'id=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          sect.$update_attributes(attrs);\n          return sect;\n        }, $Processor_create_section$7.$$arity = -4);\n        \n        Opal.def(self, '$create_block', $Processor_create_block$8 = function $$create_block(parent, context, source, attrs, opts) {\n          var self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          return $$($nesting, 'Block').$new(parent, context, $hash2([\"source\", \"attributes\"], {\"source\": source, \"attributes\": attrs}).$merge(opts));\n        }, $Processor_create_block$8.$$arity = -5);\n        \n        Opal.def(self, '$create_list', $Processor_create_list$9 = function $$create_list(parent, context, attrs) {\n          var self = this, list = nil;\n\n          \n          \n          if (attrs == null) {\n            attrs = nil;\n          };\n          list = $$($nesting, 'List').$new(parent, context);\n          if ($truthy(attrs)) {\n            list.$update_attributes(attrs)};\n          return list;\n        }, $Processor_create_list$9.$$arity = -3);\n        \n        Opal.def(self, '$create_list_item', $Processor_create_list_item$10 = function $$create_list_item(parent, text) {\n          var self = this;\n\n          \n          \n          if (text == null) {\n            text = nil;\n          };\n          return $$($nesting, 'ListItem').$new(parent, text);\n        }, $Processor_create_list_item$10.$$arity = -2);\n        \n        Opal.def(self, '$create_image_block', $Processor_create_image_block$11 = function $$create_image_block(parent, attrs, opts) {\n          var $a, self = this, target = nil, $writer = nil, title = nil, block = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((target = attrs['$[]'](\"target\")))) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"Unable to create an image block, target attribute is required\")\n          };\n          ($truthy($a = attrs['$[]'](\"alt\")) ? $a : (($writer = [\"alt\", (($writer = [\"default-alt\", $$($nesting, 'Helpers').$basename(target, true).$tr(\"_-\", \" \")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          title = (function() {if ($truthy(attrs['$key?'](\"title\"))) {\n            \n            return attrs.$delete(\"title\");\n          } else {\n            return nil\n          }; return nil; })();\n          block = self.$create_block(parent, \"image\", nil, attrs, opts);\n          if ($truthy(title)) {\n            \n            \n            $writer = [title];\n            $send(block, 'title=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            block.$assign_caption(attrs.$delete(\"caption\"), \"figure\");};\n          return block;\n        }, $Processor_create_image_block$11.$$arity = -3);\n        \n        Opal.def(self, '$create_inline', $Processor_create_inline$12 = function $$create_inline(parent, context, text, opts) {\n          var self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          return $$($nesting, 'Inline').$new(parent, context, text, (function() {if (context['$=='](\"quoted\")) {\n            \n            return $hash2([\"type\"], {\"type\": \"unquoted\"}).$merge(opts);\n          } else {\n            return opts\n          }; return nil; })());\n        }, $Processor_create_inline$12.$$arity = -4);\n        \n        Opal.def(self, '$parse_content', $Processor_parse_content$13 = function $$parse_content(parent, content, attributes) {\n          var self = this, reader = nil;\n\n          \n          \n          if (attributes == null) {\n            attributes = nil;\n          };\n          reader = (function() {if ($truthy($$($nesting, 'Reader')['$==='](content))) {\n            return content\n          } else {\n            \n            return $$($nesting, 'Reader').$new(content);\n          }; return nil; })();\n          $$($nesting, 'Parser').$parse_blocks(reader, parent, attributes);\n          return parent;\n        }, $Processor_parse_content$13.$$arity = -3);\n        \n        Opal.def(self, '$parse_attributes', $Processor_parse_attributes$14 = function $$parse_attributes(block, attrlist, opts) {\n          var $a, self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((function() {if ($truthy(attrlist)) {\n            return attrlist['$empty?']()\n          } else {\n            return true\n          }; return nil; })())) {\n            return $hash2([], {})};\n          if ($truthy(($truthy($a = opts['$[]'](\"sub_attributes\")) ? attrlist['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {\n            attrlist = block.$sub_attributes(attrlist)};\n          return $$($nesting, 'AttributeList').$new(attrlist).$parse(($truthy($a = opts['$[]'](\"positional_attributes\")) ? $a : []));\n        }, $Processor_parse_attributes$14.$$arity = -3);\n        return $send([[\"create_paragraph\", \"create_block\", \"paragraph\"], [\"create_open_block\", \"create_block\", \"open\"], [\"create_example_block\", \"create_block\", \"example\"], [\"create_pass_block\", \"create_block\", \"pass\"], [\"create_listing_block\", \"create_block\", \"listing\"], [\"create_literal_block\", \"create_block\", \"literal\"], [\"create_anchor\", \"create_inline\", \"anchor\"], [\"create_inline_pass\", \"create_inline\", \"quoted\"]], 'each', [], ($Processor$15 = function(method_name, delegate_method_name, context){var self = $Processor$15.$$s || this, $$16;\n\n        \n          \n          if (method_name == null) {\n            method_name = nil;\n          };\n          \n          if (delegate_method_name == null) {\n            delegate_method_name = nil;\n          };\n          \n          if (context == null) {\n            context = nil;\n          };\n          return $send(self, 'define_method', [method_name], ($$16 = function($a){var self = $$16.$$s || this, $post_args, args;\n\n          \n            \n            $post_args = Opal.slice.call(arguments, 0, arguments.length);\n            \n            args = $post_args;;\n            args.$unshift(args.$shift(), context);\n            return $send(self, 'send', [delegate_method_name].concat(Opal.to_a(args)));}, $$16.$$s = self, $$16.$$arity = -1, $$16));}, $Processor$15.$$s = self, $Processor$15.$$arity = 3, $Processor$15));\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'ProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $ProcessorDsl_option$17, $ProcessorDsl_process$18, $ProcessorDsl_process_block_given$ques$20;\n\n        \n        \n        Opal.def(self, '$option', $ProcessorDsl_option$17 = function $$option(key, value) {\n          var self = this, $writer = nil;\n\n          \n          $writer = [key, value];\n          $send(self.$config(), '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        }, $ProcessorDsl_option$17.$$arity = 2);\n        \n        Opal.def(self, '$process', $ProcessorDsl_process$18 = function $$process($a) {\n          var $iter = $ProcessorDsl_process$18.$$p, block = $iter || nil, $post_args, args, $b, $$19, self = this, context = nil;\n          if (self.process_block == null) self.process_block = nil;\n\n          if ($iter) $ProcessorDsl_process$18.$$p = null;\n          \n          \n          if ($iter) $ProcessorDsl_process$18.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ((block !== nil)) {\n            \n            if ($truthy(args['$empty?']())) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"wrong number of arguments (given \" + (args.$size()) + \", expected 0)\")\n            };\n            if ($truthy(($truthy($b = block.$binding()) ? self['$=='](block.$binding().$receiver()) : $b))) {\n            } else {\n              \n              context = self;\n              $send(block, 'define_singleton_method', [\"call\"], ($$19 = function($c){var self = $$19.$$s || this, $post_args, m_args;\n\n              \n                \n                $post_args = Opal.slice.call(arguments, 0, arguments.length);\n                \n                m_args = $post_args;;\n                return $send(context, 'instance_exec', Opal.to_a(m_args), block.$to_proc());}, $$19.$$s = self, $$19.$$arity = -1, $$19));\n            };\n            return (self.process_block = block);\n          } else if ($truthy((($b = self['process_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {\n            return $send(self.process_block, 'call', Opal.to_a(args))\n          } else {\n            return self.$raise($$$('::', 'NotImplementedError'), \"\" + (self.$class()) + \" #\" + (\"process\") + \" method called before being registered\")\n          };\n        }, $ProcessorDsl_process$18.$$arity = -1);\n        \n        Opal.def(self, '$process_block_given?', $ProcessorDsl_process_block_given$ques$20 = function() {\n          var $a, self = this;\n\n          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil)\n        }, $ProcessorDsl_process_block_given$ques$20.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DocumentProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $DocumentProcessorDsl_prefer$21;\n\n        \n        self.$include($$($nesting, 'ProcessorDsl'));\n        \n        Opal.def(self, '$prefer', $DocumentProcessorDsl_prefer$21 = function $$prefer() {\n          var self = this;\n\n          return self.$option(\"position\", \">>\")\n        }, $DocumentProcessorDsl_prefer$21.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'SyntaxProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $SyntaxProcessorDsl_named$22, $SyntaxProcessorDsl_content_model$23, $SyntaxProcessorDsl_positional_attributes$24, $SyntaxProcessorDsl_default_attributes$25, $SyntaxProcessorDsl_resolve_attributes$26;\n\n        \n        self.$include($$($nesting, 'ProcessorDsl'));\n        \n        Opal.def(self, '$named', $SyntaxProcessorDsl_named$22 = function $$named(value) {\n          var self = this;\n\n          if ($truthy($$($nesting, 'Processor')['$==='](self))) {\n            return (self.name = value)\n          } else {\n            return self.$option(\"name\", value)\n          }\n        }, $SyntaxProcessorDsl_named$22.$$arity = 1);\n        \n        Opal.def(self, '$content_model', $SyntaxProcessorDsl_content_model$23 = function $$content_model(value) {\n          var self = this;\n\n          return self.$option(\"content_model\", value)\n        }, $SyntaxProcessorDsl_content_model$23.$$arity = 1);\n        Opal.alias(self, \"parse_content_as\", \"content_model\");\n        \n        Opal.def(self, '$positional_attributes', $SyntaxProcessorDsl_positional_attributes$24 = function $$positional_attributes($a) {\n          var $post_args, value, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          return self.$option(\"positional_attrs\", value.$flatten());\n        }, $SyntaxProcessorDsl_positional_attributes$24.$$arity = -1);\n        Opal.alias(self, \"name_positional_attributes\", \"positional_attributes\");\n        Opal.alias(self, \"positional_attrs\", \"positional_attributes\");\n        \n        Opal.def(self, '$default_attributes', $SyntaxProcessorDsl_default_attributes$25 = function $$default_attributes(value) {\n          var self = this;\n\n          return self.$option(\"default_attrs\", value)\n        }, $SyntaxProcessorDsl_default_attributes$25.$$arity = 1);\n        Opal.alias(self, \"default_attrs\", \"default_attributes\");\n        \n        Opal.def(self, '$resolve_attributes', $SyntaxProcessorDsl_resolve_attributes$26 = function $$resolve_attributes($a) {\n          var $post_args, args, $b, $$27, $$28, self = this, $case = nil, names = nil, defaults = nil;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy($rb_gt(args.$size(), 1))) {\n          } else if ($truthy((args = args.$fetch(0, true))['$respond_to?'](\"to_sym\"))) {\n            args = [args]};\n          return (function() {$case = args;\n          if (true['$===']($case)) {\n          self.$option(\"positional_attrs\", []);\n          return self.$option(\"default_attrs\", $hash2([], {}));}\n          else if ($$$('::', 'Array')['$===']($case)) {\n          $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;\n          $send(args, 'each', [], ($$27 = function(arg){var self = $$27.$$s || this, $c, $d, name = nil, _ = nil, value = nil, idx = nil, $writer = nil;\n\n          \n            \n            if (arg == null) {\n              arg = nil;\n            };\n            if ($truthy((arg = arg.$to_s())['$include?'](\"=\"))) {\n              \n              $d = arg.$partition(\"=\"), $c = Opal.to_ary($d), (name = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (value = ($c[2] == null ? nil : $c[2])), $d;\n              if ($truthy(name['$include?'](\":\"))) {\n                \n                $d = name.$partition(\":\"), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n                idx = (function() {if (idx['$=='](\"@\")) {\n                  return names.$size()\n                } else {\n                  return idx.$to_i()\n                }; return nil; })();\n                \n                $writer = [idx, name];\n                $send(names, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;};\n              \n              $writer = [name, value];\n              $send(defaults, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else if ($truthy(arg['$include?'](\":\"))) {\n              \n              $d = arg.$partition(\":\"), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n              idx = (function() {if (idx['$=='](\"@\")) {\n                return names.$size()\n              } else {\n                return idx.$to_i()\n              }; return nil; })();\n              \n              $writer = [idx, name];\n              $send(names, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else {\n              return names['$<<'](arg)\n            };}, $$27.$$s = self, $$27.$$arity = 1, $$27));\n          self.$option(\"positional_attrs\", names.$compact());\n          return self.$option(\"default_attrs\", defaults);}\n          else if ($$$('::', 'Hash')['$===']($case)) {\n          $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;\n          $send(args, 'each', [], ($$28 = function(key, val){var self = $$28.$$s || this, $c, $d, name = nil, idx = nil, _ = nil, $writer = nil;\n\n          \n            \n            if (key == null) {\n              key = nil;\n            };\n            \n            if (val == null) {\n              val = nil;\n            };\n            if ($truthy((name = key.$to_s())['$include?'](\":\"))) {\n              \n              $d = name.$partition(\":\"), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n              idx = (function() {if (idx['$=='](\"@\")) {\n                return names.$size()\n              } else {\n                return idx.$to_i()\n              }; return nil; })();\n              \n              $writer = [idx, name];\n              $send(names, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n            if ($truthy(val)) {\n              \n              $writer = [name, val];\n              $send(defaults, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              return nil\n            };}, $$28.$$s = self, $$28.$$arity = 2, $$28));\n          self.$option(\"positional_attrs\", names.$compact());\n          return self.$option(\"default_attrs\", defaults);}\n          else {return self.$raise($$$('::', 'ArgumentError'), \"\" + \"unsupported attributes specification for macro: \" + (args.$inspect()))}})();\n        }, $SyntaxProcessorDsl_resolve_attributes$26.$$arity = -1);\n        Opal.alias(self, \"resolves_attributes\", \"resolve_attributes\");\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Preprocessor');\n\n        var $nesting = [self].concat($parent_nesting), $Preprocessor_process$29;\n\n        return (Opal.def(self, '$process', $Preprocessor_process$29 = function $$process(document, reader) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Preprocessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $Preprocessor_process$29.$$arity = 2), nil) && 'process'\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      Opal.const_set($$($nesting, 'Preprocessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'TreeProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $TreeProcessor_process$30;\n\n        return (Opal.def(self, '$process', $TreeProcessor_process$30 = function $$process(document) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'TreeProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $TreeProcessor_process$30.$$arity = 1), nil) && 'process'\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      Opal.const_set($$($nesting, 'TreeProcessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));\n      Opal.const_set($nesting[0], 'Treeprocessor', $$($nesting, 'TreeProcessor'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Postprocessor');\n\n        var $nesting = [self].concat($parent_nesting), $Postprocessor_process$31;\n\n        return (Opal.def(self, '$process', $Postprocessor_process$31 = function $$process(document, output) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Postprocessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $Postprocessor_process$31.$$arity = 2), nil) && 'process'\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      Opal.const_set($$($nesting, 'Postprocessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'IncludeProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $IncludeProcessor_process$32, $IncludeProcessor_handles$ques$33;\n\n        \n        \n        Opal.def(self, '$process', $IncludeProcessor_process$32 = function $$process(document, reader, target, attributes) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'IncludeProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $IncludeProcessor_process$32.$$arity = 4);\n        return (Opal.def(self, '$handles?', $IncludeProcessor_handles$ques$33 = function(target) {\n          var self = this;\n\n          return true\n        }, $IncludeProcessor_handles$ques$33.$$arity = 1), nil) && 'handles?';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'IncludeProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $IncludeProcessorDsl_handles$ques$34;\n\n        \n        self.$include($$($nesting, 'DocumentProcessorDsl'));\n        \n        Opal.def(self, '$handles?', $IncludeProcessorDsl_handles$ques$34 = function($a) {\n          var $iter = $IncludeProcessorDsl_handles$ques$34.$$p, block = $iter || nil, $post_args, args, $b, self = this;\n          if (self.handles_block == null) self.handles_block = nil;\n\n          if ($iter) $IncludeProcessorDsl_handles$ques$34.$$p = null;\n          \n          \n          if ($iter) $IncludeProcessorDsl_handles$ques$34.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ((block !== nil)) {\n            \n            if ($truthy(args['$empty?']())) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"wrong number of arguments (given \" + (args.$size()) + \", expected 0)\")\n            };\n            return (self.handles_block = block);\n          } else if ($truthy((($b = self['handles_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {\n            return self.handles_block.$call(args['$[]'](0))\n          } else {\n            return true\n          };\n        }, $IncludeProcessorDsl_handles$ques$34.$$arity = -1);\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'IncludeProcessor'), 'DSL', $$($nesting, 'IncludeProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DocinfoProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $DocinfoProcessor_initialize$35, $DocinfoProcessor_process$36;\n\n        self.$$prototype.config = nil;\n        \n        \n        Opal.def(self, '$initialize', $DocinfoProcessor_initialize$35 = function $$initialize(config) {\n          var $a, $iter = $DocinfoProcessor_initialize$35.$$p, $yield = $iter || nil, self = this, $writer = nil;\n\n          if ($iter) $DocinfoProcessor_initialize$35.$$p = null;\n          \n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $DocinfoProcessor_initialize$35, false), [config], null);\n          return ($truthy($a = self.config['$[]'](\"location\")) ? $a : (($writer = [\"location\", \"head\"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $DocinfoProcessor_initialize$35.$$arity = -1);\n        return (Opal.def(self, '$process', $DocinfoProcessor_process$36 = function $$process(document) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'DocinfoProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $DocinfoProcessor_process$36.$$arity = 1), nil) && 'process';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DocinfoProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $DocinfoProcessorDsl_at_location$37;\n\n        \n        self.$include($$($nesting, 'DocumentProcessorDsl'));\n        \n        Opal.def(self, '$at_location', $DocinfoProcessorDsl_at_location$37 = function $$at_location(value) {\n          var self = this;\n\n          return self.$option(\"location\", value)\n        }, $DocinfoProcessorDsl_at_location$37.$$arity = 1);\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'DocinfoProcessor'), 'DSL', $$($nesting, 'DocinfoProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BlockProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $BlockProcessor_initialize$38, $BlockProcessor_process$39;\n\n        self.$$prototype.config = nil;\n        \n        self.$attr_accessor(\"name\");\n        \n        Opal.def(self, '$initialize', $BlockProcessor_initialize$38 = function $$initialize(name, config) {\n          var $a, $iter = $BlockProcessor_initialize$38.$$p, $yield = $iter || nil, self = this, $case = nil, $writer = nil;\n\n          if ($iter) $BlockProcessor_initialize$38.$$p = null;\n          \n          \n          if (name == null) {\n            name = nil;\n          };\n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $BlockProcessor_initialize$38, false), [config], null);\n          self.name = ($truthy($a = name) ? $a : self.config['$[]'](\"name\"));\n          $case = self.config['$[]'](\"contexts\");\n          if ($$$('::', 'NilClass')['$===']($case)) {($truthy($a = self.config['$[]'](\"contexts\")) ? $a : (($writer = [\"contexts\", [\"open\", \"paragraph\"].$to_set()]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))}\n          else if ($$$('::', 'Symbol')['$===']($case)) {\n          $writer = [\"contexts\", [self.config['$[]'](\"contexts\")].$to_set()];\n          $send(self.config, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];}\n          else {\n          $writer = [\"contexts\", self.config['$[]'](\"contexts\").$to_set()];\n          $send(self.config, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n          return ($truthy($a = self.config['$[]'](\"content_model\")) ? $a : (($writer = [\"content_model\", \"compound\"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $BlockProcessor_initialize$38.$$arity = -1);\n        return (Opal.def(self, '$process', $BlockProcessor_process$39 = function $$process(parent, reader, attributes) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'BlockProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $BlockProcessor_process$39.$$arity = 3), nil) && 'process';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'BlockProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $BlockProcessorDsl_contexts$40;\n\n        \n        self.$include($$($nesting, 'SyntaxProcessorDsl'));\n        \n        Opal.def(self, '$contexts', $BlockProcessorDsl_contexts$40 = function $$contexts($a) {\n          var $post_args, value, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          return self.$option(\"contexts\", value.$flatten().$to_set());\n        }, $BlockProcessorDsl_contexts$40.$$arity = -1);\n        Opal.alias(self, \"on_contexts\", \"contexts\");\n        Opal.alias(self, \"on_context\", \"contexts\");\n        Opal.alias(self, \"bind_to\", \"contexts\");\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'BlockProcessor'), 'DSL', $$($nesting, 'BlockProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'MacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $MacroProcessor_initialize$41, $MacroProcessor_process$42;\n\n        self.$$prototype.config = nil;\n        \n        self.$attr_accessor(\"name\");\n        \n        Opal.def(self, '$initialize', $MacroProcessor_initialize$41 = function $$initialize(name, config) {\n          var $a, $iter = $MacroProcessor_initialize$41.$$p, $yield = $iter || nil, self = this, $writer = nil;\n\n          if ($iter) $MacroProcessor_initialize$41.$$p = null;\n          \n          \n          if (name == null) {\n            name = nil;\n          };\n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $MacroProcessor_initialize$41, false), [config], null);\n          self.name = ($truthy($a = name) ? $a : self.config['$[]'](\"name\"));\n          return ($truthy($a = self.config['$[]'](\"content_model\")) ? $a : (($writer = [\"content_model\", \"attributes\"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $MacroProcessor_initialize$41.$$arity = -1);\n        return (Opal.def(self, '$process', $MacroProcessor_process$42 = function $$process(parent, target, attributes) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'MacroProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $MacroProcessor_process$42.$$arity = 3), nil) && 'process';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'MacroProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $MacroProcessorDsl_resolve_attributes$43;\n\n        \n        self.$include($$($nesting, 'SyntaxProcessorDsl'));\n        \n        Opal.def(self, '$resolve_attributes', $MacroProcessorDsl_resolve_attributes$43 = function $$resolve_attributes($a) {\n          var $post_args, args, $b, $iter = $MacroProcessorDsl_resolve_attributes$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n          if ($iter) $MacroProcessorDsl_resolve_attributes$43.$$p = null;\n          // Prepare super implicit arguments\n          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n            $zuper[$zuper_i] = arguments[$zuper_i];\n          }\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy((($b = args.$size()['$=='](1)) ? args['$[]'](0)['$!']() : args.$size()['$=='](1)))) {\n            return self.$option(\"content_model\", \"text\")\n          } else {\n            \n            $send(self, Opal.find_super_dispatcher(self, 'resolve_attributes', $MacroProcessorDsl_resolve_attributes$43, false), $zuper, $iter);\n            return self.$option(\"content_model\", \"attributes\");\n          };\n        }, $MacroProcessorDsl_resolve_attributes$43.$$arity = -1);\n        Opal.alias(self, \"resolves_attributes\", \"resolve_attributes\");\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BlockMacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $BlockMacroProcessor_name$44;\n\n        self.$$prototype.name = nil;\n        return (Opal.def(self, '$name', $BlockMacroProcessor_name$44 = function $$name() {\n          var self = this;\n\n          \n          if ($truthy($$($nesting, 'MacroNameRx')['$match?'](self.name.$to_s()))) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"invalid name for block macro: \" + (self.name))\n          };\n          return self.name;\n        }, $BlockMacroProcessor_name$44.$$arity = 0), nil) && 'name'\n      })($nesting[0], $$($nesting, 'MacroProcessor'), $nesting);\n      Opal.const_set($$($nesting, 'BlockMacroProcessor'), 'DSL', $$($nesting, 'MacroProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'InlineMacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $InlineMacroProcessor_regexp$45, $InlineMacroProcessor_resolve_regexp$46;\n\n        self.$$prototype.config = self.$$prototype.name = nil;\n        \n        (Opal.class_variable_set($nesting[0], '@@rx_cache', $hash2([], {})));\n        \n        Opal.def(self, '$regexp', $InlineMacroProcessor_regexp$45 = function $$regexp() {\n          var $a, self = this, $writer = nil;\n\n          return ($truthy($a = self.config['$[]'](\"regexp\")) ? $a : (($writer = [\"regexp\", self.$resolve_regexp(self.name.$to_s(), self.config['$[]'](\"format\"))]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n        }, $InlineMacroProcessor_regexp$45.$$arity = 0);\n        return (Opal.def(self, '$resolve_regexp', $InlineMacroProcessor_resolve_regexp$46 = function $$resolve_regexp(name, format) {\n          var $a, $b, self = this, $writer = nil;\n\n          \n          if ($truthy($$($nesting, 'MacroNameRx')['$match?'](name))) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"invalid name for inline macro: \" + (name))\n          };\n          return ($truthy($a = (($b = $nesting[0].$$cvars['@@rx_cache']) == null ? nil : $b)['$[]']([name, format])) ? $a : (($writer = [[name, format], new RegExp(\"\" + \"\\\\\\\\?\" + (name) + \":\" + ((function() {if (format['$=='](\"short\")) {\n            return \"(){0}\"\n          } else {\n            return \"(\\\\S+?)\"\n          }; return nil; })()) + \"\\\\[(|\" + ($$($nesting, 'CC_ANY')) + \"*?[^\\\\\\\\])\\\\]\")]), $send((($b = $nesting[0].$$cvars['@@rx_cache']) == null ? nil : $b), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $InlineMacroProcessor_resolve_regexp$46.$$arity = 2), nil) && 'resolve_regexp';\n      })($nesting[0], $$($nesting, 'MacroProcessor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'InlineMacroProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $InlineMacroProcessorDsl_format$47, $InlineMacroProcessorDsl_match$48;\n\n        \n        self.$include($$($nesting, 'MacroProcessorDsl'));\n        \n        Opal.def(self, '$format', $InlineMacroProcessorDsl_format$47 = function $$format(value) {\n          var self = this;\n\n          return self.$option(\"format\", value)\n        }, $InlineMacroProcessorDsl_format$47.$$arity = 1);\n        Opal.alias(self, \"match_format\", \"format\");\n        Opal.alias(self, \"using_format\", \"format\");\n        \n        Opal.def(self, '$match', $InlineMacroProcessorDsl_match$48 = function $$match(value) {\n          var self = this;\n\n          return self.$option(\"regexp\", value)\n        }, $InlineMacroProcessorDsl_match$48.$$arity = 1);\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'InlineMacroProcessor'), 'DSL', $$($nesting, 'InlineMacroProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Extension');\n\n        var $nesting = [self].concat($parent_nesting), $Extension_initialize$49;\n\n        \n        self.$attr_reader(\"kind\");\n        self.$attr_reader(\"config\");\n        self.$attr_reader(\"instance\");\n        return (Opal.def(self, '$initialize', $Extension_initialize$49 = function $$initialize(kind, instance, config) {\n          var self = this;\n\n          \n          self.kind = kind;\n          self.instance = instance;\n          return (self.config = config);\n        }, $Extension_initialize$49.$$arity = 3), nil) && 'initialize';\n      })($nesting[0], null, $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'ProcessorExtension');\n\n        var $nesting = [self].concat($parent_nesting), $ProcessorExtension_initialize$50;\n\n        \n        self.$attr_reader(\"process_method\");\n        return (Opal.def(self, '$initialize', $ProcessorExtension_initialize$50 = function $$initialize(kind, instance, process_method) {\n          var $a, $iter = $ProcessorExtension_initialize$50.$$p, $yield = $iter || nil, self = this;\n\n          if ($iter) $ProcessorExtension_initialize$50.$$p = null;\n          \n          \n          if (process_method == null) {\n            process_method = nil;\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $ProcessorExtension_initialize$50, false), [kind, instance, instance.$config()], null);\n          return (self.process_method = ($truthy($a = process_method) ? $a : instance.$method(\"process\")));\n        }, $ProcessorExtension_initialize$50.$$arity = -3), nil) && 'initialize';\n      })($nesting[0], $$($nesting, 'Extension'), $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Group');\n\n        var $nesting = [self].concat($parent_nesting), $Group_activate$52;\n\n        \n        (function(self, $parent_nesting) {\n          var $nesting = [self].concat($parent_nesting), $register$51;\n\n          return (Opal.def(self, '$register', $register$51 = function $$register(name) {\n            var self = this;\n\n            \n            \n            if (name == null) {\n              name = nil;\n            };\n            return $$($nesting, 'Extensions').$register(name, self);\n          }, $register$51.$$arity = -1), nil) && 'register'\n        })(Opal.get_singleton_class(self), $nesting);\n        return (Opal.def(self, '$activate', $Group_activate$52 = function $$activate(registry) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'))\n        }, $Group_activate$52.$$arity = 1), nil) && 'activate';\n      })($nesting[0], null, $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Registry');\n\n        var $nesting = [self].concat($parent_nesting), $Registry_initialize$53, $Registry_activate$54, $Registry_preprocessor$56, $Registry_preprocessors$ques$57, $Registry_preprocessors$58, $Registry_tree_processor$59, $Registry_tree_processors$ques$60, $Registry_tree_processors$61, $Registry_postprocessor$62, $Registry_postprocessors$ques$63, $Registry_postprocessors$64, $Registry_include_processor$65, $Registry_include_processors$ques$66, $Registry_include_processors$67, $Registry_docinfo_processor$68, $Registry_docinfo_processors$ques$69, $Registry_docinfo_processors$71, $Registry_block$73, $Registry_blocks$ques$74, $Registry_registered_for_block$ques$75, $Registry_find_block_extension$76, $Registry_block_macro$77, $Registry_block_macros$ques$78, $Registry_registered_for_block_macro$ques$79, $Registry_find_block_macro_extension$80, $Registry_inline_macro$81, $Registry_inline_macros$ques$82, $Registry_registered_for_inline_macro$ques$83, $Registry_find_inline_macro_extension$84, $Registry_inline_macros$85, $Registry_prefer$86, $Registry_add_document_processor$87, $Registry_add_syntax_processor$89, $Registry_resolve_args$91, $Registry_as_symbol$92;\n\n        self.$$prototype.groups = self.$$prototype.preprocessor_extensions = self.$$prototype.tree_processor_extensions = self.$$prototype.postprocessor_extensions = self.$$prototype.include_processor_extensions = self.$$prototype.docinfo_processor_extensions = self.$$prototype.block_extensions = self.$$prototype.block_macro_extensions = self.$$prototype.inline_macro_extensions = nil;\n        \n        self.$attr_reader(\"document\");\n        self.$attr_reader(\"groups\");\n        \n        Opal.def(self, '$initialize', $Registry_initialize$53 = function $$initialize(groups) {\n          var self = this;\n\n          \n          \n          if (groups == null) {\n            groups = $hash2([], {});\n          };\n          self.groups = groups;\n          self.preprocessor_extensions = (self.tree_processor_extensions = (self.postprocessor_extensions = (self.include_processor_extensions = (self.docinfo_processor_extensions = (self.block_extensions = (self.block_macro_extensions = (self.inline_macro_extensions = nil)))))));\n          return (self.document = nil);\n        }, $Registry_initialize$53.$$arity = -1);\n        \n        Opal.def(self, '$activate', $Registry_activate$54 = function $$activate(document) {\n          var $$55, self = this, ext_groups = nil;\n\n          \n          self.document = document;\n          if ($truthy((ext_groups = $rb_plus($$($nesting, 'Extensions').$groups().$values(), self.groups.$values()))['$empty?']())) {\n          } else {\n            $send(ext_groups, 'each', [], ($$55 = function(group){var self = $$55.$$s || this, $case = nil;\n\n            \n              \n              if (group == null) {\n                group = nil;\n              };\n              return (function() {$case = group;\n              if ($$$('::', 'Proc')['$===']($case)) {return (function() {$case = group.$arity();\n              if ((0)['$===']($case) || (-1)['$===']($case)) {return $send(self, 'instance_exec', [], group.$to_proc())}\n              else if ((1)['$===']($case)) {return group.$call(self)}\n              else { return nil }})()}\n              else if ($$$('::', 'Class')['$===']($case)) {return group.$new().$activate(self)}\n              else {return group.$activate(self)}})();}, $$55.$$s = self, $$55.$$arity = 1, $$55))\n          };\n          return self;\n        }, $Registry_activate$54.$$arity = 1);\n        \n        Opal.def(self, '$preprocessor', $Registry_preprocessor$56 = function $$preprocessor($a) {\n          var $iter = $Registry_preprocessor$56.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_preprocessor$56.$$p = null;\n          \n          \n          if ($iter) $Registry_preprocessor$56.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"preprocessor\", args], block.$to_proc());\n        }, $Registry_preprocessor$56.$$arity = -1);\n        \n        Opal.def(self, '$preprocessors?', $Registry_preprocessors$ques$57 = function() {\n          var self = this;\n\n          return self.preprocessor_extensions['$!']()['$!']()\n        }, $Registry_preprocessors$ques$57.$$arity = 0);\n        \n        Opal.def(self, '$preprocessors', $Registry_preprocessors$58 = function $$preprocessors() {\n          var self = this;\n\n          return self.preprocessor_extensions\n        }, $Registry_preprocessors$58.$$arity = 0);\n        \n        Opal.def(self, '$tree_processor', $Registry_tree_processor$59 = function $$tree_processor($a) {\n          var $iter = $Registry_tree_processor$59.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_tree_processor$59.$$p = null;\n          \n          \n          if ($iter) $Registry_tree_processor$59.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"tree_processor\", args], block.$to_proc());\n        }, $Registry_tree_processor$59.$$arity = -1);\n        \n        Opal.def(self, '$tree_processors?', $Registry_tree_processors$ques$60 = function() {\n          var self = this;\n\n          return self.tree_processor_extensions['$!']()['$!']()\n        }, $Registry_tree_processors$ques$60.$$arity = 0);\n        \n        Opal.def(self, '$tree_processors', $Registry_tree_processors$61 = function $$tree_processors() {\n          var self = this;\n\n          return self.tree_processor_extensions\n        }, $Registry_tree_processors$61.$$arity = 0);\n        Opal.alias(self, \"treeprocessor\", \"tree_processor\");\n        Opal.alias(self, \"treeprocessors?\", \"tree_processors?\");\n        Opal.alias(self, \"treeprocessors\", \"tree_processors\");\n        \n        Opal.def(self, '$postprocessor', $Registry_postprocessor$62 = function $$postprocessor($a) {\n          var $iter = $Registry_postprocessor$62.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_postprocessor$62.$$p = null;\n          \n          \n          if ($iter) $Registry_postprocessor$62.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"postprocessor\", args], block.$to_proc());\n        }, $Registry_postprocessor$62.$$arity = -1);\n        \n        Opal.def(self, '$postprocessors?', $Registry_postprocessors$ques$63 = function() {\n          var self = this;\n\n          return self.postprocessor_extensions['$!']()['$!']()\n        }, $Registry_postprocessors$ques$63.$$arity = 0);\n        \n        Opal.def(self, '$postprocessors', $Registry_postprocessors$64 = function $$postprocessors() {\n          var self = this;\n\n          return self.postprocessor_extensions\n        }, $Registry_postprocessors$64.$$arity = 0);\n        \n        Opal.def(self, '$include_processor', $Registry_include_processor$65 = function $$include_processor($a) {\n          var $iter = $Registry_include_processor$65.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_include_processor$65.$$p = null;\n          \n          \n          if ($iter) $Registry_include_processor$65.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"include_processor\", args], block.$to_proc());\n        }, $Registry_include_processor$65.$$arity = -1);\n        \n        Opal.def(self, '$include_processors?', $Registry_include_processors$ques$66 = function() {\n          var self = this;\n\n          return self.include_processor_extensions['$!']()['$!']()\n        }, $Registry_include_processors$ques$66.$$arity = 0);\n        \n        Opal.def(self, '$include_processors', $Registry_include_processors$67 = function $$include_processors() {\n          var self = this;\n\n          return self.include_processor_extensions\n        }, $Registry_include_processors$67.$$arity = 0);\n        \n        Opal.def(self, '$docinfo_processor', $Registry_docinfo_processor$68 = function $$docinfo_processor($a) {\n          var $iter = $Registry_docinfo_processor$68.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_docinfo_processor$68.$$p = null;\n          \n          \n          if ($iter) $Registry_docinfo_processor$68.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"docinfo_processor\", args], block.$to_proc());\n        }, $Registry_docinfo_processor$68.$$arity = -1);\n        \n        Opal.def(self, '$docinfo_processors?', $Registry_docinfo_processors$ques$69 = function(location) {\n          var $$70, self = this;\n\n          \n          \n          if (location == null) {\n            location = nil;\n          };\n          if ($truthy(self.docinfo_processor_extensions)) {\n            if ($truthy(location)) {\n              return $send(self.docinfo_processor_extensions, 'any?', [], ($$70 = function(ext){var self = $$70.$$s || this;\n\n              \n                \n                if (ext == null) {\n                  ext = nil;\n                };\n                return ext.$config()['$[]'](\"location\")['$=='](location);}, $$70.$$s = self, $$70.$$arity = 1, $$70))\n            } else {\n              return true\n            }\n          } else {\n            return false\n          };\n        }, $Registry_docinfo_processors$ques$69.$$arity = -1);\n        \n        Opal.def(self, '$docinfo_processors', $Registry_docinfo_processors$71 = function $$docinfo_processors(location) {\n          var $$72, self = this;\n\n          \n          \n          if (location == null) {\n            location = nil;\n          };\n          if ($truthy(self.docinfo_processor_extensions)) {\n            if ($truthy(location)) {\n              return $send(self.docinfo_processor_extensions, 'select', [], ($$72 = function(ext){var self = $$72.$$s || this;\n\n              \n                \n                if (ext == null) {\n                  ext = nil;\n                };\n                return ext.$config()['$[]'](\"location\")['$=='](location);}, $$72.$$s = self, $$72.$$arity = 1, $$72))\n            } else {\n              return self.docinfo_processor_extensions\n            }\n          } else {\n            return nil\n          };\n        }, $Registry_docinfo_processors$71.$$arity = -1);\n        \n        Opal.def(self, '$block', $Registry_block$73 = function $$block($a) {\n          var $iter = $Registry_block$73.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_block$73.$$p = null;\n          \n          \n          if ($iter) $Registry_block$73.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_syntax_processor', [\"block\", args], block.$to_proc());\n        }, $Registry_block$73.$$arity = -1);\n        \n        Opal.def(self, '$blocks?', $Registry_blocks$ques$74 = function() {\n          var self = this;\n\n          return self.block_extensions['$!']()['$!']()\n        }, $Registry_blocks$ques$74.$$arity = 0);\n        \n        Opal.def(self, '$registered_for_block?', $Registry_registered_for_block$ques$75 = function(name, context) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.block_extensions['$[]'](name.$to_sym())))) {\n            if ($truthy(ext.$config()['$[]'](\"contexts\")['$include?'](context))) {\n              return ext\n            } else {\n              return false\n            }\n          } else {\n            return false\n          }\n        }, $Registry_registered_for_block$ques$75.$$arity = 2);\n        \n        Opal.def(self, '$find_block_extension', $Registry_find_block_extension$76 = function $$find_block_extension(name) {\n          var self = this;\n\n          return self.block_extensions['$[]'](name.$to_sym())\n        }, $Registry_find_block_extension$76.$$arity = 1);\n        \n        Opal.def(self, '$block_macro', $Registry_block_macro$77 = function $$block_macro($a) {\n          var $iter = $Registry_block_macro$77.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_block_macro$77.$$p = null;\n          \n          \n          if ($iter) $Registry_block_macro$77.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_syntax_processor', [\"block_macro\", args], block.$to_proc());\n        }, $Registry_block_macro$77.$$arity = -1);\n        \n        Opal.def(self, '$block_macros?', $Registry_block_macros$ques$78 = function() {\n          var self = this;\n\n          return self.block_macro_extensions['$!']()['$!']()\n        }, $Registry_block_macros$ques$78.$$arity = 0);\n        \n        Opal.def(self, '$registered_for_block_macro?', $Registry_registered_for_block_macro$ques$79 = function(name) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.block_macro_extensions['$[]'](name.$to_sym())))) {\n            return ext\n          } else {\n            return false\n          }\n        }, $Registry_registered_for_block_macro$ques$79.$$arity = 1);\n        \n        Opal.def(self, '$find_block_macro_extension', $Registry_find_block_macro_extension$80 = function $$find_block_macro_extension(name) {\n          var self = this;\n\n          return self.block_macro_extensions['$[]'](name.$to_sym())\n        }, $Registry_find_block_macro_extension$80.$$arity = 1);\n        \n        Opal.def(self, '$inline_macro', $Registry_inline_macro$81 = function $$inline_macro($a) {\n          var $iter = $Registry_inline_macro$81.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_inline_macro$81.$$p = null;\n          \n          \n          if ($iter) $Registry_inline_macro$81.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_syntax_processor', [\"inline_macro\", args], block.$to_proc());\n        }, $Registry_inline_macro$81.$$arity = -1);\n        \n        Opal.def(self, '$inline_macros?', $Registry_inline_macros$ques$82 = function() {\n          var self = this;\n\n          return self.inline_macro_extensions['$!']()['$!']()\n        }, $Registry_inline_macros$ques$82.$$arity = 0);\n        \n        Opal.def(self, '$registered_for_inline_macro?', $Registry_registered_for_inline_macro$ques$83 = function(name) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.inline_macro_extensions['$[]'](name.$to_sym())))) {\n            return ext\n          } else {\n            return false\n          }\n        }, $Registry_registered_for_inline_macro$ques$83.$$arity = 1);\n        \n        Opal.def(self, '$find_inline_macro_extension', $Registry_find_inline_macro_extension$84 = function $$find_inline_macro_extension(name) {\n          var self = this;\n\n          return self.inline_macro_extensions['$[]'](name.$to_sym())\n        }, $Registry_find_inline_macro_extension$84.$$arity = 1);\n        \n        Opal.def(self, '$inline_macros', $Registry_inline_macros$85 = function $$inline_macros() {\n          var self = this;\n\n          return self.inline_macro_extensions.$values()\n        }, $Registry_inline_macros$85.$$arity = 0);\n        \n        Opal.def(self, '$prefer', $Registry_prefer$86 = function $$prefer($a) {\n          var $iter = $Registry_prefer$86.$$p, block = $iter || nil, $post_args, args, self = this, extension = nil, arg0 = nil, extensions_store = nil;\n\n          if ($iter) $Registry_prefer$86.$$p = null;\n          \n          \n          if ($iter) $Registry_prefer$86.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          extension = (function() {if ($truthy($$($nesting, 'ProcessorExtension')['$===']((arg0 = args.$shift())))) {\n            return arg0\n          } else {\n            \n            return $send(self, 'send', [arg0].concat(Opal.to_a(args)), block.$to_proc());\n          }; return nil; })();\n          extensions_store = self.$instance_variable_get((((\"\" + \"@\") + (extension.$kind())) + \"_extensions\").$to_sym());\n          extensions_store.$unshift(extensions_store.$delete(extension));\n          return extension;\n        }, $Registry_prefer$86.$$arity = -1);\n        self.$private();\n        \n        Opal.def(self, '$add_document_processor', $Registry_add_document_processor$87 = function $$add_document_processor(kind, args) {\n          var $iter = $Registry_add_document_processor$87.$$p, block = $iter || nil, $$88, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, config = nil, processor = nil, extension = nil, processor_class = nil, processor_instance = nil;\n\n          if ($iter) $Registry_add_document_processor$87.$$p = null;\n          \n          \n          if ($iter) $Registry_add_document_processor$87.$$p = null;;\n          kind_name = kind.$to_s().$tr(\"_\", \" \");\n          kind_class_symbol = $send(kind_name.$split(), 'map', [], ($$88 = function(it){var self = $$88.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return it.$capitalize();}, $$88.$$s = self, $$88.$$arity = 1, $$88)).$join().$to_sym();\n          kind_class = $$($nesting, 'Extensions').$const_get(kind_class_symbol, false);\n          kind_java_class = (function() {if ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {\n            \n            return $$$($$$('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol, false);\n          } else {\n            return nil\n          }; return nil; })();\n          kind_store = ($truthy($b = self.$instance_variable_get((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym())) ? $b : self.$instance_variable_set((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym(), []));\n          if ((block !== nil)) {\n            \n            config = self.$resolve_args(args, 1);\n            (processor = kind_class.$new(config)).$singleton_class().$enable_dsl();\n            if (block.$arity()['$=='](0)) {\n              $send(processor, 'instance_exec', [], block.$to_proc())\n            } else {\n              Opal.yield1(block, processor)\n            };\n            if ($truthy(processor['$process_block_given?']())) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"No block specified to process \" + (kind_name) + \" extension at \" + (block.$source_location()))\n            };\n            processor.$freeze();\n            extension = $$($nesting, 'ProcessorExtension').$new(kind, processor);\n          } else {\n            \n            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;\n            if ($truthy((processor_class = $$($nesting, 'Helpers').$resolve_class(processor)))) {\n              \n              if ($truthy(($truthy($b = $rb_lt(processor_class, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor_class, kind_java_class) : $c)))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"Invalid type for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor_instance = processor_class.$new(config);\n              processor_instance.$freeze();\n              extension = $$($nesting, 'ProcessorExtension').$new(kind, processor_instance);\n            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {\n              \n              processor.$update_config(config);\n              processor.$freeze();\n              extension = $$($nesting, 'ProcessorExtension').$new(kind, processor);\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"Invalid arguments specified for registering \" + (kind_name) + \" extension: \" + (args))\n            };\n          };\n          if (extension.$config()['$[]'](\"position\")['$=='](\">>\")) {\n            \n            kind_store.$unshift(extension);\n          } else {\n            \n            kind_store['$<<'](extension);\n          };\n          return extension;\n        }, $Registry_add_document_processor$87.$$arity = 2);\n        \n        Opal.def(self, '$add_syntax_processor', $Registry_add_syntax_processor$89 = function $$add_syntax_processor(kind, args) {\n          var $iter = $Registry_add_syntax_processor$89.$$p, block = $iter || nil, $$90, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, $writer = nil, processor_class = nil, processor_instance = nil;\n\n          if ($iter) $Registry_add_syntax_processor$89.$$p = null;\n          \n          \n          if ($iter) $Registry_add_syntax_processor$89.$$p = null;;\n          kind_name = kind.$to_s().$tr(\"_\", \" \");\n          kind_class_symbol = $send(kind_name.$split(), 'map', [], ($$90 = function(it){var self = $$90.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return it.$capitalize();}, $$90.$$s = self, $$90.$$arity = 1, $$90))['$<<'](\"Processor\").$join().$to_sym();\n          kind_class = $$($nesting, 'Extensions').$const_get(kind_class_symbol, false);\n          kind_java_class = (function() {if ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {\n            \n            return $$$($$$('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol, false);\n          } else {\n            return nil\n          }; return nil; })();\n          kind_store = ($truthy($b = self.$instance_variable_get((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym())) ? $b : self.$instance_variable_set((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym(), $hash2([], {})));\n          if ((block !== nil)) {\n            \n            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;\n            (processor = kind_class.$new(self.$as_symbol(name), config)).$singleton_class().$enable_dsl();\n            if (block.$arity()['$=='](0)) {\n              $send(processor, 'instance_exec', [], block.$to_proc())\n            } else {\n              Opal.yield1(block, processor)\n            };\n            if ($truthy((name = self.$as_symbol(processor.$name())))) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"No name specified for \" + (kind_name) + \" extension at \" + (block.$source_location()))\n            };\n            if ($truthy(processor['$process_block_given?']())) {\n            } else {\n              self.$raise($$$('::', 'NoMethodError'), \"\" + \"No block specified to process \" + (kind_name) + \" extension at \" + (block.$source_location()))\n            };\n            processor.$freeze();\n            \n            $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor)];\n            $send(kind_store, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            \n            $c = self.$resolve_args(args, 3), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (name = ($b[1] == null ? nil : $b[1])), (config = ($b[2] == null ? nil : $b[2])), $c;\n            if ($truthy((processor_class = $$($nesting, 'Helpers').$resolve_class(processor)))) {\n              \n              if ($truthy(($truthy($b = $rb_lt(processor_class, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor_class, kind_java_class) : $c)))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"Class specified for \" + (kind_name) + \" extension does not inherit from \" + (kind_class) + \": \" + (processor))\n              };\n              processor_instance = processor_class.$new(self.$as_symbol(name), config);\n              if ($truthy((name = self.$as_symbol(processor_instance.$name())))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"No name specified for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor_instance.$freeze();\n              \n              $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor_instance)];\n              $send(kind_store, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {\n              \n              processor.$update_config(config);\n              if ($truthy((name = (function() {if ($truthy(name)) {\n                \n                \n                $writer = [self.$as_symbol(name)];\n                $send(processor, 'name=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];;\n              } else {\n                \n                return self.$as_symbol(processor.$name());\n              }; return nil; })()))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"No name specified for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor.$freeze();\n              \n              $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor)];\n              $send(kind_store, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else {\n              return self.$raise($$$('::', 'ArgumentError'), \"\" + \"Invalid arguments specified for registering \" + (kind_name) + \" extension: \" + (args))\n            };\n          };\n        }, $Registry_add_syntax_processor$89.$$arity = 2);\n        \n        Opal.def(self, '$resolve_args', $Registry_resolve_args$91 = function $$resolve_args(args, expect) {\n          var self = this, opts = nil, missing = nil;\n\n          \n          opts = (function() {if ($truthy($$$('::', 'Hash')['$==='](args['$[]'](-1)))) {\n            return args.$pop()\n          } else {\n            return $hash2([], {})\n          }; return nil; })();\n          if (expect['$=='](1)) {\n            return opts};\n          if ($truthy($rb_gt((missing = $rb_minus($rb_minus(expect, 1), args.$size())), 0))) {\n            args = $rb_plus(args, $$$('::', 'Array').$new(missing))\n          } else if ($truthy($rb_lt(missing, 0))) {\n            args.$pop(missing['$-@']())};\n          args['$<<'](opts);\n          return args;\n        }, $Registry_resolve_args$91.$$arity = 2);\n        return (Opal.def(self, '$as_symbol', $Registry_as_symbol$92 = function $$as_symbol(name) {\n          var self = this;\n\n          if ($truthy(name)) {\n            return name.$to_sym()\n          } else {\n            return nil\n          }\n        }, $Registry_as_symbol$92.$$arity = 1), nil) && 'as_symbol';\n      })($nesting[0], null, $nesting);\n      (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting), $generate_name$93, $next_auto_id$94, $groups$95, $create$96, $register$97, $unregister_all$98, $unregister$99;\n\n        \n        \n        Opal.def(self, '$generate_name', $generate_name$93 = function $$generate_name() {\n          var self = this;\n\n          return \"\" + \"extgrp\" + (self.$next_auto_id())\n        }, $generate_name$93.$$arity = 0);\n        \n        Opal.def(self, '$next_auto_id', $next_auto_id$94 = function $$next_auto_id() {\n          var $a, self = this;\n          if (self.auto_id == null) self.auto_id = nil;\n\n          \n          self.auto_id = ($truthy($a = self.auto_id) ? $a : -1);\n          return (self.auto_id = $rb_plus(self.auto_id, 1));\n        }, $next_auto_id$94.$$arity = 0);\n        \n        Opal.def(self, '$groups', $groups$95 = function $$groups() {\n          var $a, self = this;\n          if (self.groups == null) self.groups = nil;\n\n          return (self.groups = ($truthy($a = self.groups) ? $a : $hash2([], {})))\n        }, $groups$95.$$arity = 0);\n        \n        Opal.def(self, '$create', $create$96 = function $$create(name) {\n          var $iter = $create$96.$$p, block = $iter || nil, $a, self = this;\n\n          if ($iter) $create$96.$$p = null;\n          \n          \n          if ($iter) $create$96.$$p = null;;\n          \n          if (name == null) {\n            name = nil;\n          };\n          if ((block !== nil)) {\n            return $$($nesting, 'Registry').$new($hash(($truthy($a = name) ? $a : self.$generate_name()), block))\n          } else {\n            return $$($nesting, 'Registry').$new()\n          };\n        }, $create$96.$$arity = -1);\n        \n        Opal.def(self, '$register', $register$97 = function $$register($a) {\n          var $iter = $register$97.$$p, block = $iter || nil, $post_args, args, $b, self = this, argc = nil, resolved_group = nil, group = nil, name = nil, $writer = nil;\n\n          if ($iter) $register$97.$$p = null;\n          \n          \n          if ($iter) $register$97.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          argc = args.$size();\n          if ((block !== nil)) {\n            resolved_group = block\n          } else if ($truthy((group = args.$pop()))) {\n            resolved_group = ($truthy($b = $$($nesting, 'Helpers').$resolve_class(group)) ? $b : group)\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"Extension group to register not specified\")\n          };\n          name = ($truthy($b = args.$pop()) ? $b : self.$generate_name());\n          if ($truthy(args['$empty?']())) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"Wrong number of arguments (\" + (argc) + \" for 1..2)\")\n          };\n          \n          $writer = [name.$to_sym(), resolved_group];\n          $send(self.$groups(), '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];;\n        }, $register$97.$$arity = -1);\n        \n        Opal.def(self, '$unregister_all', $unregister_all$98 = function $$unregister_all() {\n          var self = this;\n\n          \n          self.groups = $hash2([], {});\n          return nil;\n        }, $unregister_all$98.$$arity = 0);\n        return (Opal.def(self, '$unregister', $unregister$99 = function $$unregister($a) {\n          var $post_args, names, $$100, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          names = $post_args;;\n          $send(names, 'each', [], ($$100 = function(group){var self = $$100.$$s || this;\n            if (self.groups == null) self.groups = nil;\n\n          \n            \n            if (group == null) {\n              group = nil;\n            };\n            return self.groups.$delete(group.$to_sym());}, $$100.$$s = self, $$100.$$arity = 1, $$100));\n          return nil;\n        }, $unregister$99.$$arity = -1), nil) && 'unregister';\n      })(Opal.get_singleton_class(self), $nesting);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/stylesheet\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$rstrip', '$read', '$join']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Stylesheets');\n\n      var $nesting = [self].concat($parent_nesting), $Stylesheets_primary_stylesheet_data$1;\n\n      self.$$prototype.primary_stylesheet_data = nil;\n      return (Opal.def(self, '$primary_stylesheet_data', $Stylesheets_primary_stylesheet_data$1 = function $$primary_stylesheet_data() {\n        var $a, self = this;\n\n        return (self.primary_stylesheet_data = ($truthy($a = self.primary_stylesheet_data) ? $a : $$$('::', 'IO').$read($$$('::', 'File').$join(\"css\", \"asciidoctor.css\")).$rstrip()))\n      }, $Stylesheets_primary_stylesheet_data$1.$$arity = 0), nil) && 'primary_stylesheet_data'\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/document\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Document');\n\n      var $nesting = [self].concat($parent_nesting), $Document_fill_datetime_attributes$1;\n\n      return (Opal.def(self, '$fill_datetime_attributes', $Document_fill_datetime_attributes$1 = function $$fill_datetime_attributes(attrs, input_mtime) {\n        var self = this;\n\n        \n      var $truthy = Opal.truthy\n      var $falsy = Opal.falsy\n      var nil = Opal.nil\n      var utc_offset\n      var source_date_epoch\n      var localdate\n      var localyear\n      var localtime\n      var localdatetime\n      var docdate\n      var doctime\n\n      var getYear = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCFullYear() : time.getFullYear()\n      }\n      var getMonth = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCMonth() : time.getMonth()\n      }\n      var getDay = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCDate() : time.getDate()\n      }\n      var getHours = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCHours() : time.getHours()\n      }\n\n      var now = new Date()\n      // See https://reproducible-builds.org/specs/source-date-epoch/\n      if (Opal.const_get_qualified('::', 'ENV')['$key?']('SOURCE_DATE_EPOCH')) {\n        now.setTime(parseInt(Opal.const_get_qualified('::', 'ENV')['$[]']('SOURCE_DATE_EPOCH')) * 1000)\n        source_date_epoch = now\n        utc_offset = 0  // utc\n      } else {\n        utc_offset = -now.getTimezoneOffset() / 60 // local date\n      }\n      // localdate and localyear\n      if ($truthy((localdate = attrs['$[]']('localdate')))) {\n        if ($falsy(localyear = attrs['$[]']('localyear'))) {\n          localyear = localdate.indexOf('-') === 4 ? localdate.substring(0, 4) : nil\n          attrs['$[]=']('localyear', localyear)\n        }\n      } else {\n        var now_year = getYear(now, utc_offset).toString()\n        var now_month = ('0' + (getMonth(now, utc_offset) + 1)).slice(-2)\n        var now_day = ('0' + getDay(now, utc_offset)).slice(-2)\n        localdate = now_year + '-' + now_month + '-' + now_day\n        attrs['$[]=']('localdate', localdate)\n        localyear = now_year\n        attrs['$[]=']('localyear', now_year)\n      }\n      // localtime\n      if ($falsy((localtime = attrs['$[]']('localtime')))) {\n        var hours = ('0' + (getHours(now, utc_offset))).slice(-2)\n        var minutes = ('0' + (now.getMinutes())).slice(-2)\n        var seconds = ('0' + (now.getSeconds())).slice(-2)\n        var utc_offset_format\n        if (utc_offset === 0) {\n          utc_offset_format = 'UTC'\n        } else if (utc_offset > 0) {\n          utc_offset_format = ('+0' + (utc_offset * 100)).slice(-5)\n        } else {\n          utc_offset_format = ('-0' + (-utc_offset * 100)).slice(-5)\n        }\n        localtime = hours + ':' + minutes + ':' + seconds + ' ' + utc_offset_format\n        attrs['$[]=']('localtime', localtime)\n      }\n      // localdatetime\n      if ($falsy((localdatetime = attrs['$[]']('localdatetime')))) {\n        localdatetime = localdate + ' ' + localtime\n        attrs['$[]=']('localdatetime', localdatetime)\n      }\n\n      // docdate, doctime and docdatetime should default to localdate, localtime and localdatetime if not otherwise set\n      if ($truthy(source_date_epoch)) {\n        input_mtime = source_date_epoch\n      } else if ($truthy(input_mtime)) {\n        utc_offset = -input_mtime.getTimezoneOffset() / 60\n      } else {\n        input_mtime = now\n      }\n\n      // docdate and docyear\n      if ($truthy(docdate = attrs['$[]']('docdate'))) {\n        attrs['$[]=']('docyear', docdate.indexOf('-') === 4 ? docdate.substring(0, 4) : nil)\n      } else {\n        var mtime_year = getYear(input_mtime, utc_offset).toString()\n        var mtime_month = ('0' + (getMonth(input_mtime, utc_offset) + 1)).slice(-2)\n        var mtime_day = ('0' + (getDay(input_mtime, utc_offset))).slice(-2)\n        docdate = mtime_year + '-' + mtime_month + '-' + mtime_day\n        attrs['$[]=']('docdate', docdate)\n        if ($falsy(attrs['$[]']('docyear'))) {\n          attrs['$[]=']('docyear', mtime_year)\n        }\n      }\n      // doctime\n      if ($falsy(doctime = attrs['$[]']('doctime'))) {\n        var mtime_hours = ('0' + (getHours(input_mtime, utc_offset))).slice(-2)\n        var mtime_minutes = ('0' + (input_mtime.getMinutes())).slice(-2)\n        var mtime_seconds = ('0' + (input_mtime.getSeconds())).slice(-2)\n        var utc_offset_format\n        if (utc_offset === 0) {\n          utc_offset_format = 'UTC'\n        } else if (utc_offset > 0) {\n          utc_offset_format = ('+0' + (utc_offset * 100)).slice(-5)\n        } else {\n          utc_offset_format = ('-0' + (-utc_offset * 100)).slice(-5)\n        }\n        doctime = mtime_hours + ':' + mtime_minutes + ':' + mtime_seconds + ' ' + utc_offset_format\n        attrs['$[]=']('doctime', doctime)\n      }\n      // docdatetime\n      if ($falsy(attrs['$[]']('docdatetime'))) {\n        attrs['$[]=']('docdatetime', docdate + ' ' + doctime)\n      }\n      return nil\n    \n      }, $Document_fill_datetime_attributes$1.$$arity = 2), nil) && 'fill_datetime_attributes'\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/substitutors\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Substitutors');\n\n      var $nesting = [self].concat($parent_nesting), $Substitutors_sub_placeholder$1;\n\n      \n      Opal.def(self, '$sub_placeholder', $Substitutors_sub_placeholder$1 = function $$sub_placeholder(format_string, replacement) {\n        var self = this;\n\n        return format_string.replace('%s', replacement);\n      }, $Substitutors_sub_placeholder$1.$$arity = 2)\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/parser\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Parser');\n\n      var $nesting = [self].concat($parent_nesting), $Parser_uniform$ques$1, $Parser_uniform$ques$2;\n\n      if ($truthy(String.prototype.repeat)) {\n        return (Opal.defs(self, '$uniform?', $Parser_uniform$ques$1 = function(str, chr, len) {\n          var self = this;\n\n          return chr.repeat(len) === str;\n        }, $Parser_uniform$ques$1.$$arity = 3), nil) && 'uniform?'\n      } else {\n        return (Opal.defs(self, '$uniform?', $Parser_uniform$ques$2 = function(str, chr, len) {\n          var self = this;\n\n          return Array.apply(null, { length: len }).map(function () { return chr }).join('') === str;\n        }, $Parser_uniform$ques$2.$$arity = 3), nil) && 'uniform?'\n      }\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/syntax_highlighter\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$key?', '$registry', '$[]', '$include?', '$include', '$empty?', '$debug', '$logger', '$join', '$keys']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'SyntaxHighlighter');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $Factory_for$1;\n\n        \n        Opal.def(self, '$for', $Factory_for$1 = function(name) {\n          var self = this;\n\n          if ($truthy(self.$registry()['$key?'](name))) {\n            return self.$registry()['$[]'](name)\n          } else {\n            \n            if ($truthy(self['$include?']($$($nesting, 'Logging')))) {\n            } else {\n              self.$include($$($nesting, 'Logging'))\n            };\n            if ($truthy(self.$registry()['$empty?']())) {\n              self.$logger().$debug(\"no syntax highlighter available, functionality disabled.\")\n            } else {\n              self.$logger().$debug(\"\" + \"syntax highlighter named '\" + (name) + \"' is not available, must be one of: '\" + (self.$registry().$keys().$join(\"', '\")) + \"'.\")\n            };\n            return nil;\n          }\n        }, $Factory_for$1.$$arity = 1)\n      })($nesting[0], $nesting)\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/js/asciidoctor_ext/stylesheet\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/document\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/substitutors\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/parser\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/syntax_highlighter\");\n  \n// Load specific runtime\nself.$require(\"asciidoctor/js/asciidoctor_ext/browser\");\n;\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/logger\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$chr', '$rjust', '$message_as_string', '$<', '$write', '$call', '$[]']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Logger');\n\n    var $nesting = [self].concat($parent_nesting), $Logger_add$2;\n\n    self.$$prototype.level = self.$$prototype.progname = self.$$prototype.pipe = self.$$prototype.formatter = nil;\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Formatter');\n\n      var $nesting = [self].concat($parent_nesting), $Formatter_call$1;\n\n      return (Opal.def(self, '$call', $Formatter_call$1 = function $$call(severity, time, progname, msg) {\n        var self = this, time_format = nil;\n\n        \n        time_format = time.getFullYear() + '-' + ('0'+(time.getMonth()+1)).slice(-2) + '-' + ('0'+time.getDate()).slice(-2) + 'T' + ('0'+time.getHours()).slice(-2) + ':' + ('0'+time.getMinutes()).slice(-2) + ':' + ('0'+time.getSeconds()).slice(-2) + '.' + ('00' + new Date().getMilliseconds() * 1000).slice(-6);\n        return \"\" + (severity.$chr()) + \", [\" + (time_format) + \"] \" + (severity.$rjust(5)) + \" -- \" + (progname) + \": \" + (self.$message_as_string(msg));\n      }, $Formatter_call$1.$$arity = 4), nil) && 'call'\n    })($nesting[0], null, $nesting);\n    return (Opal.def(self, '$add', $Logger_add$2 = function $$add(severity, message, progname) {\n      var $iter = $Logger_add$2.$$p, block = $iter || nil, $a, self = this;\n\n      if ($iter) $Logger_add$2.$$p = null;\n      \n      \n      if ($iter) $Logger_add$2.$$p = null;;\n      \n      if (message == null) {\n        message = nil;\n      };\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      if ($truthy($rb_lt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), self.level))) {\n        return true};\n      progname = ($truthy($a = progname) ? $a : self.progname);\n      if ($truthy(message)) {\n      } else if ((block !== nil)) {\n        message = Opal.yieldX(block, [])\n      } else {\n        \n        message = progname;\n        progname = self.progname;\n      };\n      self.pipe.$write(self.formatter.$call(($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : \"ANY\"), new Date(), progname, message));\n      return true;\n    }, $Logger_add$2.$$arity = -2), nil) && 'add';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/postscript\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/converter/composite\");\n  self.$require(\"asciidoctor/converter/html5\");\n  self.$require(\"asciidoctor/extensions\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext\");\n  return self.$require(\"asciidoctor/js/opal_ext/logger\");\n};\n\n/* Generated by Opal 0.11.99.dev */\n(function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$require', '$==', '$to_h', '$sort', '$map', '$constants', '$const_get', '$downcase', '$to_s', '$<=>', '$upcase', '$[]', '$values', '$new', '$attr_reader', '$instance_variable_set', '$send', '$singleton_class', '$<<', '$define', '$dirname', '$absolute_path', '$__dir__', '$join', '$home', '$pwd', '$to_set', '$tap', '$each', '$chr', '$each_key', '$slice', '$[]=', '$-', '$length', '$merge', '$default=', '$drop', '$insert']);\n  \n  self.$require(\"set\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    self.$require(\"asciidoctor/js\")\n  } else {\n    nil\n  };\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $a, $b, $Asciidoctor$7, $Asciidoctor$9, $Asciidoctor$11, $Asciidoctor$13, $writer = nil;\n\n    \n    Opal.const_set($nesting[0], 'RUBY_ENGINE_OPAL', Opal.const_set($nesting[0], 'RUBY_ENGINE', $$$('::', 'RUBY_ENGINE'))['$=='](\"opal\"));\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'SafeMode');\n\n      var $nesting = [self].concat($parent_nesting), $SafeMode$1, $SafeMode$2, $SafeMode_value_for_name$3, $SafeMode_name_for_value$4, $SafeMode_names$5;\n\n      \n      Opal.const_set($nesting[0], 'UNSAFE', 0);\n      Opal.const_set($nesting[0], 'SAFE', 1);\n      Opal.const_set($nesting[0], 'SERVER', 10);\n      Opal.const_set($nesting[0], 'SECURE', 20);\n      self.names_by_value = $send($send(self.$constants(false), 'map', [], ($SafeMode$1 = function(sym){var self = $SafeMode$1.$$s || this;\n\n      \n        \n        if (sym == null) {\n          sym = nil;\n        };\n        return [self.$const_get(sym), sym.$to_s().$downcase()];}, $SafeMode$1.$$s = self, $SafeMode$1.$$arity = 1, $SafeMode$1)), 'sort', [], ($SafeMode$2 = function($mlhs_tmp1, $mlhs_tmp2){var self = $SafeMode$2.$$s || this, $a, $b, a = nil, b = nil;\n\n      \n        \n        if ($mlhs_tmp1 == null) {\n          $mlhs_tmp1 = nil;\n        };\n        \n        if ($mlhs_tmp2 == null) {\n          $mlhs_tmp2 = nil;\n        };\n        $b = $mlhs_tmp1, $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), $b;\n        $b = $mlhs_tmp2, $a = Opal.to_ary($b), (b = ($a[0] == null ? nil : $a[0])), $b;\n        return a['$<=>'](b);}, $SafeMode$2.$$s = self, $SafeMode$2.$$arity = 2, $SafeMode$2.$$has_top_level_mlhs_arg = true, $SafeMode$2)).$to_h();\n      Opal.defs(self, '$value_for_name', $SafeMode_value_for_name$3 = function $$value_for_name(name) {\n        var self = this;\n\n        return self.$const_get(name.$upcase(), false)\n      }, $SafeMode_value_for_name$3.$$arity = 1);\n      Opal.defs(self, '$name_for_value', $SafeMode_name_for_value$4 = function $$name_for_value(value) {\n        var self = this;\n        if (self.names_by_value == null) self.names_by_value = nil;\n\n        return self.names_by_value['$[]'](value)\n      }, $SafeMode_name_for_value$4.$$arity = 1);\n      Opal.defs(self, '$names', $SafeMode_names$5 = function $$names() {\n        var self = this;\n        if (self.names_by_value == null) self.names_by_value = nil;\n\n        return self.names_by_value.$values()\n      }, $SafeMode_names$5.$$arity = 0);\n    })($nesting[0], $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Compliance');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      self.keys = $$$('::', 'Set').$new();\n      (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting), $define$6;\n\n        \n        self.$attr_reader(\"keys\");\n        return (Opal.def(self, '$define', $define$6 = function $$define(key, value) {\n          var self = this;\n          if (self.keys == null) self.keys = nil;\n\n          \n          self.$instance_variable_set(\"\" + \"@\" + (key), value);\n          self.$singleton_class().$send(\"attr_accessor\", key);\n          self.keys['$<<'](key);\n          return nil;\n        }, $define$6.$$arity = 2), nil) && 'define';\n      })(Opal.get_singleton_class(self), $nesting);\n      self.$define(\"block_terminates_paragraph\", true);\n      self.$define(\"strict_verbatim_paragraphs\", true);\n      self.$define(\"underline_style_section_titles\", true);\n      self.$define(\"unwrap_standalone_preamble\", true);\n      self.$define(\"attribute_missing\", \"skip\");\n      self.$define(\"attribute_undefined\", \"drop-line\");\n      self.$define(\"shorthand_property_syntax\", true);\n      self.$define(\"natural_xrefs\", true);\n      self.$define(\"unique_id_start_index\", 2);\n      self.$define(\"markdown_syntax\", true);\n    })($nesting[0], $nesting);\n    if ($truthy((($a = $$($nesting, 'ROOT_DIR', 'skip_raise')) ? 'constant' : nil))) {\n    } else {\n      Opal.const_set($nesting[0], 'ROOT_DIR', $$$('::', 'File').$dirname($$$('::', 'File').$absolute_path(self.$__dir__())))\n    };\n    Opal.const_set($nesting[0], 'LIB_DIR', $$$('::', 'File').$join($$($nesting, 'ROOT_DIR'), \"lib\"));\n    Opal.const_set($nesting[0], 'DATA_DIR', $$$('::', 'File').$join($$($nesting, 'ROOT_DIR'), \"data\"));\n    Opal.const_set($nesting[0], 'USER_HOME', (function() { try {\n      return $$$('::', 'Dir').$home()\n    } catch ($err) {\n      if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n        try {\n          \n          return ($truthy($b = $$$('::', 'ENV')['$[]'](\"HOME\")) ? $b : $$$('::', 'Dir').$pwd());\n        } finally { Opal.pop_exception() }\n      } else { throw $err; }\n    }})());\n    Opal.const_set($nesting[0], 'LF', \"\\n\");\n    Opal.const_set($nesting[0], 'NULL', \"\\u0000\");\n    Opal.const_set($nesting[0], 'TAB', \"\\t\");\n    Opal.const_set($nesting[0], 'MAX_INT', 9007199254740991);\n    Opal.const_set($nesting[0], 'UTF_8', $$$($$$('::', 'Encoding'), 'UTF_8'));\n    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_8', [239, 187, 191]);\n    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16LE', [255, 254]);\n    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16BE', [254, 255]);\n    Opal.const_set($nesting[0], 'FILE_READ_MODE', (function() {if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n      return \"r\"\n    } else {\n      return \"rb:utf-8:utf-8\"\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'URI_READ_MODE', $$($nesting, 'FILE_READ_MODE'));\n    Opal.const_set($nesting[0], 'FILE_WRITE_MODE', (function() {if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n      return \"w\"\n    } else {\n      return \"w:utf-8\"\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'DEFAULT_DOCTYPE', \"article\");\n    Opal.const_set($nesting[0], 'DEFAULT_BACKEND', \"html5\");\n    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_KEYS', [\"\", \"DEFAULT\"].$to_set());\n    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', \"asciidoctor.css\");\n    Opal.const_set($nesting[0], 'BACKEND_ALIASES', $hash2([\"html\", \"docbook\"], {\"html\": \"html5\", \"docbook\": \"docbook5\"}));\n    Opal.const_set($nesting[0], 'DEFAULT_PAGE_WIDTHS', $hash2([\"docbook\"], {\"docbook\": 425}));\n    Opal.const_set($nesting[0], 'DEFAULT_EXTENSIONS', $hash2([\"html\", \"docbook\", \"pdf\", \"epub\", \"manpage\", \"asciidoc\"], {\"html\": \".html\", \"docbook\": \".xml\", \"pdf\": \".pdf\", \"epub\": \".epub\", \"manpage\": \".man\", \"asciidoc\": \".adoc\"}));\n    Opal.const_set($nesting[0], 'ASCIIDOC_EXTENSIONS', $hash2([\".adoc\", \".asciidoc\", \".asc\", \".ad\", \".txt\"], {\".adoc\": true, \".asciidoc\": true, \".asc\": true, \".ad\": true, \".txt\": true}));\n    Opal.const_set($nesting[0], 'SETEXT_SECTION_LEVELS', $hash2([\"=\", \"-\", \"~\", \"^\", \"+\"], {\"=\": 0, \"-\": 1, \"~\": 2, \"^\": 3, \"+\": 4}));\n    Opal.const_set($nesting[0], 'ADMONITION_STYLES', [\"NOTE\", \"TIP\", \"IMPORTANT\", \"WARNING\", \"CAUTION\"].$to_set());\n    Opal.const_set($nesting[0], 'ADMONITION_STYLE_HEADS', $send($$$('::', 'Set').$new(), 'tap', [], ($Asciidoctor$7 = function(accum){var self = $Asciidoctor$7.$$s || this, $$8;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      return $send($$($nesting, 'ADMONITION_STYLES'), 'each', [], ($$8 = function(s){var self = $$8.$$s || this;\n\n      \n        \n        if (s == null) {\n          s = nil;\n        };\n        return accum['$<<'](s.$chr());}, $$8.$$s = self, $$8.$$arity = 1, $$8));}, $Asciidoctor$7.$$s = self, $Asciidoctor$7.$$arity = 1, $Asciidoctor$7)));\n    Opal.const_set($nesting[0], 'PARAGRAPH_STYLES', [\"comment\", \"example\", \"literal\", \"listing\", \"normal\", \"open\", \"pass\", \"quote\", \"sidebar\", \"source\", \"verse\", \"abstract\", \"partintro\"].$to_set());\n    Opal.const_set($nesting[0], 'VERBATIM_STYLES', [\"literal\", \"listing\", \"source\", \"verse\"].$to_set());\n    Opal.const_set($nesting[0], 'DELIMITED_BLOCKS', $hash2([\"--\", \"----\", \"....\", \"====\", \"****\", \"____\", \"++++\", \"|===\", \",===\", \":===\", \"!===\", \"////\", \"```\"], {\"--\": [\"open\", [\"comment\", \"example\", \"literal\", \"listing\", \"pass\", \"quote\", \"sidebar\", \"source\", \"verse\", \"admonition\", \"abstract\", \"partintro\"].$to_set()], \"----\": [\"listing\", [\"literal\", \"source\"].$to_set()], \"....\": [\"literal\", [\"listing\", \"source\"].$to_set()], \"====\": [\"example\", [\"admonition\"].$to_set()], \"****\": [\"sidebar\", $$$('::', 'Set').$new()], \"____\": [\"quote\", [\"verse\"].$to_set()], \"++++\": [\"pass\", [\"stem\", \"latexmath\", \"asciimath\"].$to_set()], \"|===\": [\"table\", $$$('::', 'Set').$new()], \",===\": [\"table\", $$$('::', 'Set').$new()], \":===\": [\"table\", $$$('::', 'Set').$new()], \"!===\": [\"table\", $$$('::', 'Set').$new()], \"////\": [\"comment\", $$$('::', 'Set').$new()], \"```\": [\"fenced_code\", $$$('::', 'Set').$new()]}));\n    Opal.const_set($nesting[0], 'DELIMITED_BLOCK_HEADS', $send($hash2([], {}), 'tap', [], ($Asciidoctor$9 = function(accum){var self = $Asciidoctor$9.$$s || this, $$10;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      return $send($$($nesting, 'DELIMITED_BLOCKS'), 'each_key', [], ($$10 = function(k){var self = $$10.$$s || this, $writer = nil;\n\n      \n        \n        if (k == null) {\n          k = nil;\n        };\n        $writer = [k.$slice(0, 2), true];\n        $send(accum, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];}, $$10.$$s = self, $$10.$$arity = 1, $$10));}, $Asciidoctor$9.$$s = self, $Asciidoctor$9.$$arity = 1, $Asciidoctor$9)));\n    Opal.const_set($nesting[0], 'DELIMITED_BLOCK_TAILS', $send($hash2([], {}), 'tap', [], ($Asciidoctor$11 = function(accum){var self = $Asciidoctor$11.$$s || this, $$12;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      return $send($$($nesting, 'DELIMITED_BLOCKS'), 'each_key', [], ($$12 = function(k){var self = $$12.$$s || this, $writer = nil;\n\n      \n        \n        if (k == null) {\n          k = nil;\n        };\n        if (k.$length()['$=='](4)) {\n          \n          $writer = [k, k['$[]']($rb_minus(k.$length(), 1))];\n          $send(accum, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        } else {\n          return nil\n        };}, $$12.$$s = self, $$12.$$arity = 1, $$12));}, $Asciidoctor$11.$$s = self, $Asciidoctor$11.$$arity = 1, $Asciidoctor$11)));\n    Opal.const_set($nesting[0], 'CAPTION_ATTRIBUTE_NAMES', $hash2([\"example\", \"figure\", \"listing\", \"table\"], {\"example\": \"example-caption\", \"figure\": \"figure-caption\", \"listing\": \"listing-caption\", \"table\": \"table-caption\"}));\n    Opal.const_set($nesting[0], 'LAYOUT_BREAK_CHARS', $hash2([\"'\", \"<\"], {\"'\": \"thematic_break\", \"<\": \"page_break\"}));\n    Opal.const_set($nesting[0], 'MARKDOWN_THEMATIC_BREAK_CHARS', $hash2([\"-\", \"*\", \"_\"], {\"-\": \"thematic_break\", \"*\": \"thematic_break\", \"_\": \"thematic_break\"}));\n    Opal.const_set($nesting[0], 'HYBRID_LAYOUT_BREAK_CHARS', $$($nesting, 'LAYOUT_BREAK_CHARS').$merge($$($nesting, 'MARKDOWN_THEMATIC_BREAK_CHARS')));\n    Opal.const_set($nesting[0], 'NESTABLE_LIST_CONTEXTS', [\"ulist\", \"olist\", \"dlist\"]);\n    Opal.const_set($nesting[0], 'ORDERED_LIST_STYLES', [\"arabic\", \"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"]);\n    Opal.const_set($nesting[0], 'ORDERED_LIST_KEYWORDS', $hash2([\"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"], {\"loweralpha\": \"a\", \"lowerroman\": \"i\", \"upperalpha\": \"A\", \"upperroman\": \"I\"}));\n    Opal.const_set($nesting[0], 'ATTR_REF_HEAD', \"{\");\n    Opal.const_set($nesting[0], 'LIST_CONTINUATION', \"+\");\n    Opal.const_set($nesting[0], 'HARD_LINE_BREAK', \" +\");\n    Opal.const_set($nesting[0], 'LINE_CONTINUATION', \" \\\\\");\n    Opal.const_set($nesting[0], 'LINE_CONTINUATION_LEGACY', \" +\");\n    Opal.const_set($nesting[0], 'BLOCK_MATH_DELIMITERS', $hash2([\"asciimath\", \"latexmath\"], {\"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\[\", \"\\\\]\"]}));\n    Opal.const_set($nesting[0], 'INLINE_MATH_DELIMITERS', $hash2([\"asciimath\", \"latexmath\"], {\"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\(\", \"\\\\)\"]}));\n    \n    $writer = [\"asciimath\"];\n    $send(Opal.const_set($nesting[0], 'STEM_TYPE_ALIASES', $hash2([\"latexmath\", \"latex\", \"tex\"], {\"latexmath\": \"latexmath\", \"latex\": \"latexmath\", \"tex\": \"latexmath\"})), 'default=', Opal.to_a($writer));\n    $writer[$rb_minus($writer[\"length\"], 1)];;\n    Opal.const_set($nesting[0], 'FONT_AWESOME_VERSION', \"4.7.0\");\n    Opal.const_set($nesting[0], 'HIGHLIGHT_JS_VERSION', \"9.18.3\");\n    Opal.const_set($nesting[0], 'MATHJAX_VERSION', \"2.7.9\");\n    Opal.const_set($nesting[0], 'DEFAULT_ATTRIBUTES', $hash2([\"appendix-caption\", \"appendix-refsig\", \"caution-caption\", \"chapter-refsig\", \"example-caption\", \"figure-caption\", \"important-caption\", \"last-update-label\", \"note-caption\", \"part-refsig\", \"prewrap\", \"sectids\", \"section-refsig\", \"table-caption\", \"tip-caption\", \"toc-placement\", \"toc-title\", \"untitled-label\", \"version-label\", \"warning-caption\"], {\"appendix-caption\": \"Appendix\", \"appendix-refsig\": \"Appendix\", \"caution-caption\": \"Caution\", \"chapter-refsig\": \"Chapter\", \"example-caption\": \"Example\", \"figure-caption\": \"Figure\", \"important-caption\": \"Important\", \"last-update-label\": \"Last updated\", \"note-caption\": \"Note\", \"part-refsig\": \"Part\", \"prewrap\": \"\", \"sectids\": \"\", \"section-refsig\": \"Section\", \"table-caption\": \"Table\", \"tip-caption\": \"Tip\", \"toc-placement\": \"auto\", \"toc-title\": \"Table of Contents\", \"untitled-label\": \"Untitled\", \"version-label\": \"Version\", \"warning-caption\": \"Warning\"}));\n    Opal.const_set($nesting[0], 'FLEXIBLE_ATTRIBUTES', [\"sectnums\"]);\n    Opal.const_set($nesting[0], 'INTRINSIC_ATTRIBUTES', $hash2([\"startsb\", \"endsb\", \"vbar\", \"caret\", \"asterisk\", \"tilde\", \"plus\", \"backslash\", \"backtick\", \"blank\", \"empty\", \"sp\", \"two-colons\", \"two-semicolons\", \"nbsp\", \"deg\", \"zwsp\", \"quot\", \"apos\", \"lsquo\", \"rsquo\", \"ldquo\", \"rdquo\", \"wj\", \"brvbar\", \"pp\", \"cpp\", \"amp\", \"lt\", \"gt\"], {\"startsb\": \"[\", \"endsb\": \"]\", \"vbar\": \"|\", \"caret\": \"^\", \"asterisk\": \"*\", \"tilde\": \"~\", \"plus\": \"&#43;\", \"backslash\": \"\\\\\", \"backtick\": \"`\", \"blank\": \"\", \"empty\": \"\", \"sp\": \" \", \"two-colons\": \"::\", \"two-semicolons\": \";;\", \"nbsp\": \"&#160;\", \"deg\": \"&#176;\", \"zwsp\": \"&#8203;\", \"quot\": \"&#34;\", \"apos\": \"&#39;\", \"lsquo\": \"&#8216;\", \"rsquo\": \"&#8217;\", \"ldquo\": \"&#8220;\", \"rdquo\": \"&#8221;\", \"wj\": \"&#8288;\", \"brvbar\": \"&#166;\", \"pp\": \"&#43;&#43;\", \"cpp\": \"C&#43;&#43;\", \"amp\": \"&\", \"lt\": \"<\", \"gt\": \">\"}));\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    } else {\n      nil\n    };\n    Opal.const_set($nesting[0], 'QUOTE_SUBS', $send($hash2([], {}), 'tap', [], ($Asciidoctor$13 = function(accum){var self = $Asciidoctor$13.$$s || this, normal = nil, compat = nil;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      \n      $writer = [false, (normal = [[\"strong\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?\\\\*\\\\*(\" + ($$($nesting, 'CC_ALL')) + \"+?)\\\\*\\\\*\", 'm')], [\"strong\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\\*(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\*(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"double\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\"`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)`\\\"(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"single\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:`}])(?:\\\\[([^\\\\]]+)\\\\])?'`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)`'(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"monospaced\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?``(\" + ($$($nesting, 'CC_ALL')) + \"+?)``\", 'm')], [\"monospaced\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:\\\"'`}])(?:\\\\[([^\\\\]]+)\\\\])?`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)`(?![\" + ($$($nesting, 'CC_WORD')) + \"\\\"'`])\", 'm')], [\"emphasis\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?__(\" + ($$($nesting, 'CC_ALL')) + \"+?)__\", 'm')], [\"emphasis\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?_(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)_(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"mark\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?##(\" + ($$($nesting, 'CC_ALL')) + \"+?)##\", 'm')], [\"mark\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \"&;:}])(?:\\\\[([^\\\\]]+)\\\\])?#(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)#(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"superscript\", \"unconstrained\", /\\\\?(?:\\[([^\\]]+)\\])?\\^(\\S+?)\\^/], [\"subscript\", \"unconstrained\", /\\\\?(?:\\[([^\\]]+)\\])?~(\\S+?)~/]])];\n      $send(accum, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [true, (compat = normal.$drop(0))];\n      $send(accum, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [2, [\"double\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?``(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)''(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [3, [\"single\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)'(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [4, [\"monospaced\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?\\\\+\\\\+(\" + ($$($nesting, 'CC_ALL')) + \"+?)\\\\+\\\\+\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [5, [\"monospaced\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\\+(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\+(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      return compat.$insert(3, [\"emphasis\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?'(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)'(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]);}, $Asciidoctor$13.$$s = self, $Asciidoctor$13.$$arity = 1, $Asciidoctor$13)));\n    Opal.const_set($nesting[0], 'REPLACEMENTS', [[/\\\\?\\(C\\)/, \"&#169;\", \"none\"], [/\\\\?\\(R\\)/, \"&#174;\", \"none\"], [/\\\\?\\(TM\\)/, \"&#8482;\", \"none\"], [/(?: |\\n|^|\\\\)--(?: |\\n|$)/, \"&#8201;&#8212;&#8201;\", \"none\"], [new RegExp(\"\" + \"(\" + ($$($nesting, 'CG_WORD')) + \")\\\\\\\\?--(?=\" + ($$($nesting, 'CG_WORD')) + \")\"), \"&#8212;&#8203;\", \"leading\"], [/\\\\?\\.\\.\\./, \"&#8230;&#8203;\", \"none\"], [/\\\\?`'/, \"&#8217;\", \"none\"], [new RegExp(\"\" + \"(\" + ($$($nesting, 'CG_ALNUM')) + \")\\\\\\\\?'(?=\" + ($$($nesting, 'CG_ALPHA')) + \")\"), \"&#8217;\", \"leading\"], [/\\\\?-&gt;/, \"&#8594;\", \"none\"], [/\\\\?=&gt;/, \"&#8658;\", \"none\"], [/\\\\?&lt;-/, \"&#8592;\", \"none\"], [/\\\\?&lt;=/, \"&#8656;\", \"none\"], [/\\\\?(&)amp;((?:[a-zA-Z][a-zA-Z]+\\d{0,2}|#\\d\\d\\d{0,4}|#x[\\da-fA-F][\\da-fA-F][\\da-fA-F]{0,3});)/, \"\", \"bounding\"]]);\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    } else {\n      nil\n    };\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    } else {\n      nil\n    };\n  })($nesting[0], $nesting);\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/core_ext\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/helpers\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/logging\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/rx\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/substitutors\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/version\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/abstract_node\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/abstract_block\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/attribute_list\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/block\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/callouts\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/converter\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/document\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/inline\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/list\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/parser\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/path_resolver\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/reader\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/section\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/stylesheets\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/table\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/writer\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/load\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/convert\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    \n    self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/syntax_highlighter\");\n    self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/timings\");\n    return self.$require(\"asciidoctor/js/postscript\");\n  } else {\n    return nil\n  };\n})(Opal);\n\n\n/* global Opal */\n\n/**\n * Convert a JSON to an (Opal) Hash.\n * @private\n */\nvar toHash = function (object) {\n  return object && !object.$$is_hash ? Opal.hash2(Object.keys(object), object) : object\n}\n\n/**\n * Convert an (Opal) Hash to JSON.\n * @private\n */\nvar fromHash = function (hash) {\n  var object = {}\n  if (hash) {\n    var stringMap = hash.$$smap\n    for (var stringMapKey in stringMap) {\n      var stringMapValue = stringMap[stringMapKey]\n      object[stringMapKey] = stringMapValue === Opal.nil ? undefined : stringMapValue\n    }\n    var numericMap = hash.$$map\n    if (numericMap) {\n      var positional = []\n      for (var numericMapKey in numericMap) {\n        var entry = numericMap[numericMapKey]\n        var numericMapValue = entry.value\n        var index = entry.key - 1\n        positional[index] = numericMapValue === Opal.nil ? undefined : numericMapValue\n      }\n      if (positional.length > 0) {\n        object.$positional = positional\n      }\n    }\n  }\n  return object\n}\n\nvar fromHashKeys = function (hash) {\n  var object = {}\n  if (hash) {\n    var data = hash.$$keys\n    for (var key in data) {\n      var value = data[key].value\n      object[key.toString()] = value === Opal.nil ? undefined : value\n    }\n  }\n  return object\n}\n\n/**\n * @private\n */\nvar prepareOptions = function (options) {\n  options = toHash(options)\n  if (options) {\n    var attrs = options['$[]']('attributes')\n    if (attrs && typeof attrs === 'object' && attrs.constructor.name === 'Object') {\n      options = options.$dup()\n      options['$[]=']('attributes', toHash(attrs))\n    }\n  }\n  return options\n}\n\nfunction initializeClass (superClass, className, functions, defaultFunctions, argProxyFunctions) {\n  var scope = Opal.klass(Opal.Object, superClass, className, function () { })\n  var postConstructFunction\n  var initializeFunction\n  var constructorFunction\n  var defaultFunctionsOverridden = {}\n  for (var functionName in functions) {\n    if (Object.prototype.hasOwnProperty.call(functions, functionName)) {\n      (function (functionName) {\n        var userFunction = functions[functionName]\n        if (functionName === 'postConstruct') {\n          postConstructFunction = userFunction\n        } else if (functionName === 'initialize') {\n          initializeFunction = userFunction\n        } else if (functionName === 'constructor') {\n          constructorFunction = userFunction\n        } else {\n          if (defaultFunctions && Object.prototype.hasOwnProperty.call(defaultFunctions, functionName)) {\n            defaultFunctionsOverridden[functionName] = true\n          }\n          Opal.def(scope, '$' + functionName, function () {\n            var args\n            if (argProxyFunctions && Object.prototype.hasOwnProperty.call(argProxyFunctions, functionName)) {\n              args = argProxyFunctions[functionName](arguments)\n            } else {\n              args = arguments\n            }\n            return userFunction.apply(this, args)\n          })\n        }\n      }(functionName))\n    }\n  }\n  var initialize\n  if (typeof constructorFunction === 'function') {\n    initialize = function () {\n      var args = Array.from(arguments)\n      for (var i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      args.unshift(null)\n      var result = new (Function.prototype.bind.apply(constructorFunction, args)) // eslint-disable-line\n      Object.assign(this, result)\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  } else if (typeof initializeFunction === 'function') {\n    initialize = function () {\n      var args = Array.from(arguments)\n      for (var i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      initializeFunction.apply(this, args)\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  } else {\n    initialize = function () {\n      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize))\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  }\n  Opal.def(scope, '$initialize', initialize)\n  Opal.def(scope, 'super', function (func) {\n    if (typeof func === 'function') {\n      Opal.send(this, Opal.find_super_dispatcher(this, func.name, func))\n    } else {\n      // Bind the initialize function to super();\n      var argumentsList = Array.from(arguments)\n      for (var i = 0; i < argumentsList.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof argumentsList[i] === 'object') {\n          argumentsList[i] = toHash(argumentsList[i])\n        }\n      }\n      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize), argumentsList)\n    }\n  })\n  if (defaultFunctions) {\n    for (var defaultFunctionName in defaultFunctions) {\n      if (Object.prototype.hasOwnProperty.call(defaultFunctions, defaultFunctionName) && !Object.prototype.hasOwnProperty.call(defaultFunctionsOverridden, defaultFunctionName)) {\n        (function (defaultFunctionName) {\n          var defaultFunction = defaultFunctions[defaultFunctionName]\n          Opal.def(scope, '$' + defaultFunctionName, function () {\n            return defaultFunction.apply(this, arguments)\n          })\n        }(defaultFunctionName))\n      }\n    }\n  }\n  return scope\n}\n\n// Asciidoctor API\n\n/**\n * @namespace\n * @description\n * The main application interface (API) for Asciidoctor.\n * This API provides methods to parse AsciiDoc content and convert it to various output formats using built-in or third-party converters.\n *\n * An AsciiDoc document can be as simple as a single line of content,\n * though it more commonly starts with a document header that declares the document title and document attribute definitions.\n * The document header is then followed by zero or more section titles, optionally nested, to organize the paragraphs, blocks, lists, etc. of the document.\n *\n * By default, the processor converts the AsciiDoc document to HTML 5 using a built-in converter.\n * However, this behavior can be changed by specifying a different backend (e.g., +docbook+).\n * A backend is a keyword for an output format (e.g., DocBook).\n * That keyword, in turn, is used to select a converter, which carries out the request to convert the document to that format.\n *\n * @example\n * asciidoctor.convertFile('document.adoc', { 'safe': 'safe' }) // Convert an AsciiDoc file\n *\n * asciidoctor.convert(\"I'm using *Asciidoctor* version {asciidoctor-version}.\", { 'safe': 'safe' }) // Convert an AsciiDoc string\n *\n * const doc = asciidoctor.loadFile('document.adoc', { 'safe': 'safe' }) // Parse an AsciiDoc file into a document object\n *\n * const doc = asciidoctor.load(\"= Document Title\\n\\nfirst paragraph\\n\\nsecond paragraph\", { 'safe': 'safe' }) // Parse an AsciiDoc string into a document object\n */\nvar Asciidoctor = Opal.Asciidoctor.$$class\n\n/**\n * Get Asciidoctor core version number.\n *\n * @returns {string} - the version number of Asciidoctor core.\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.getCoreVersion = function () {\n  return this.$$const.VERSION\n}\n\n/**\n * Get Asciidoctor.js runtime environment information.\n *\n * @returns {Object} - the runtime environment including the ioModule, the platform, the engine and the framework.\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.getRuntime = function () {\n  return {\n    ioModule: Opal.const_get_qualified('::', 'JAVASCRIPT_IO_MODULE'),\n    platform: Opal.const_get_qualified('::', 'JAVASCRIPT_PLATFORM'),\n    engine: Opal.const_get_qualified('::', 'JAVASCRIPT_ENGINE'),\n    framework: Opal.const_get_qualified('::', 'JAVASCRIPT_FRAMEWORK')\n  }\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.\n *\n * Accepts input as a Buffer or String.\n *\n * @param {string|Buffer} input - AsciiDoc input as String or Buffer\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {string|Document} - the {@link Document} object if the converted String is written to a file,\n * otherwise the converted String\n * @example\n * var input = '= Hello, AsciiDoc!\\n' +\n *   'Guillaume Grossetie <ggrossetie@example.com>\\n\\n' +\n *   'An introduction to http://asciidoc.org[AsciiDoc].\\n\\n' +\n *   '== First Section\\n\\n' +\n *   '* item 1\\n' +\n *   '* item 2\\n';\n *\n * var html = asciidoctor.convert(input);\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.convert = function (input, options) {\n  if (typeof input === 'object' && input.constructor.name === 'Buffer') {\n    input = input.toString('utf8')\n  }\n  var result = this.$convert(input, prepareOptions(options))\n  return result === Opal.nil ? '' : result\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.\n *\n * @param {string} filename - source filename\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {string|Document} - the {@link Document} object if the converted String is written to a file,\n * otherwise the converted String\n * @example\n * var html = asciidoctor.convertFile('./document.adoc');\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.convertFile = function (filename, options) {\n  return this.$convert_file(filename, prepareOptions(options))\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document}\n *\n * Accepts input as a Buffer or String.\n *\n * @param {string|Buffer} input - AsciiDoc input as String or Buffer\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {Document} - the {@link Document} object\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.load = function (input, options) {\n  if (typeof input === 'object' && input.constructor.name === 'Buffer') {\n    input = input.toString('utf8')\n  }\n  return this.$load(input, prepareOptions(options))\n}\n\n/**\n * Parse the contents of the AsciiDoc source file into an {@link Document}\n *\n * @param {string} filename - source filename\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {Document} - the {@link Document} object\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.loadFile = function (filename, options) {\n  return this.$load_file(filename, prepareOptions(options))\n}\n\n// AbstractBlock API\n\n/**\n * @namespace\n * @extends AbstractNode\n */\nvar AbstractBlock = Opal.Asciidoctor.AbstractBlock\n\n/**\n * Append a block to this block's list of child blocks.\n * @param {AbstractBlock} block - the block to append\n * @returns {AbstractBlock} - the parent block to which this block was appended.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.append = function (block) {\n  this.$append(block)\n  return this\n}\n\n/**\n * Get the String title of this Block with title substitions applied\n *\n * The following substitutions are applied to block and section titles:\n *\n * <code>specialcharacters</code>, <code>quotes</code>, <code>replacements</code>, <code>macros</code>, <code>attributes</code> and <code>post_replacements</code>\n *\n * @returns {string} - the converted String title for this Block, or undefined if the title is not set.\n * @example\n * block.title // \"Foo 3^ # {two-colons} Bar(1)\"\n * block.getTitle(); // \"Foo 3^ # :: Bar(1)\"\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getTitle = function () {\n  var title = this.$title()\n  return title === Opal.nil ? undefined : title\n}\n\n/**\n * Set the String block title.\n *\n * @param {string} title - The block title\n * @returns {string} - the new String title assigned to this Block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setTitle = function (title) {\n  title = typeof title === 'undefined' ? Opal.nil : title\n  return this['$title='](title)\n}\n\n/**\n * Generate and assign caption to block if not already assigned.\n *\n * If the block has a title and a caption prefix is available for this block,\n * then build a caption from this information, assign it a number and store it\n * to the caption attribute on the block.\n *\n * If a caption has already been assigned to this block, do nothing.\n *\n * The parts of a complete caption are: `<prefix> <number>. <title>`\n * This partial caption represents the part the precedes the title.\n *\n * @param {string} value - the String caption to assign to this block or nil to use document attribute.\n * @param {string} captionContext - the String context to use when resolving caption-related attributes.\n * If not provided, the name of the context for this block is used. Only certain contexts allow the caption to be looked up.\n *\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.assignCaption = function (value, captionContext) {\n  value = typeof value === 'undefined' ? Opal.nil : value\n  captionContext = typeof captionContext === 'undefined' ? null : captionContext\n  this.$assign_caption(value, captionContext)\n}\n\n/**\n * Convenience method that returns the interpreted title of the Block\n * with the caption prepended.\n * Concatenates the value of this Block's caption instance variable and the\n * return value of this Block's title method. No space is added between the\n * two values. If the Block does not have a caption, the interpreted title is\n * returned.\n *\n * @returns {string} - the converted String title prefixed with the caption, or just the converted String title if no caption is set\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getCaptionedTitle = function () {\n  return this.$captioned_title()\n}\n\n/**\n * Get the style (block type qualifier) for this block.\n *\n * @returns {string} - the style for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getStyle = function () {\n  var style = this.style\n  return style === Opal.nil ? undefined : style\n}\n\n/**\n * Set the style for this block.\n *\n * @param {string} style - Style\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setStyle = function (style) {\n  this.style = style\n}\n\n/**\n * Get the location in the AsciiDoc source where this block begins.\n *\n * @returns {string} - the style for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getSourceLocation = function () {\n  var sourceLocation = this.source_location\n  if (sourceLocation === Opal.nil) {\n    return undefined\n  }\n  sourceLocation.getFile = function () {\n    var file = this.file\n    return file === Opal.nil ? undefined : file\n  }\n  sourceLocation.getDirectory = function () {\n    var dir = this.dir\n    return dir === Opal.nil ? undefined : dir\n  }\n  sourceLocation.getPath = function () {\n    var path = this.path\n    return path === Opal.nil ? undefined : path\n  }\n  sourceLocation.getLineNumber = function () {\n    var lineno = this.lineno\n    return lineno === Opal.nil ? undefined : lineno\n  }\n  return sourceLocation\n}\n\n/**\n * Get the caption for this block.\n *\n * @returns {string} - the caption for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getCaption = function () {\n  var caption = this.$caption()\n  return caption === Opal.nil ? undefined : caption\n}\n\n/**\n * Set the caption for this block.\n *\n * @param {string} caption - Caption\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setCaption = function (caption) {\n  this.caption = typeof caption === 'undefined' ? Opal.nil : caption\n}\n\n/**\n * Get the level of this section or the section level in which this block resides.\n *\n * @returns {number} - the level (Integer) of this section\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getLevel = function () {\n  var level = this.level\n  return level === Opal.nil ? undefined : level\n}\n\n/**\n * Get the substitution keywords to be applied to the contents of this block.\n *\n * @returns {Array<string>} - the list of {string} substitution keywords associated with this block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getSubstitutions = function () {\n  return this.subs\n}\n\n/**\n * Check whether a given substitution keyword is present in the substitutions for this block.\n *\n * @returns {boolean} - whether the substitution is present on this block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasSubstitution = function (substitution) {\n  return this['$sub?'](substitution)\n}\n\n/**\n * Remove the specified substitution keyword from the list of substitutions for this block.\n *\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.removeSubstitution = function (substitution) {\n  this.$remove_sub(substitution)\n}\n\n/**\n * Checks if the {@link AbstractBlock} contains any child blocks.\n *\n * @returns {boolean} - whether the {@link AbstractBlock} has child blocks.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasBlocks = function () {\n  return this.blocks.length > 0\n}\n\n/**\n * Get the list of {@link AbstractBlock} sub-blocks for this block.\n *\n * @returns {Array<AbstractBlock>} - a list of {@link AbstractBlock} sub-blocks\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getBlocks = function () {\n  return this.blocks\n}\n\n/**\n * Get the converted result of the child blocks by converting the children appropriate to content model that this block supports.\n *\n * @returns {string} - the converted result of the child blocks\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getContent = function () {\n  return this.$content()\n}\n\n/**\n * Get the converted content for this block.\n * If the block has child blocks, the content method should cause them to be converted\n * and returned as content that can be included in the parent block's template.\n *\n * @returns {string} - the converted String content for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.convert = function () {\n  return this.$convert()\n}\n\n/**\n * Query for all descendant block-level nodes in the document tree\n * that match the specified selector (context, style, id, and/or role).\n * If a function block is given, it's used as an additional filter.\n * If no selector or function block is supplied, all block-level nodes in the tree are returned.\n * @param {Object} [selector]\n * @param {function} [block]\n * @example\n * doc.findBy({'context': 'section'});\n * // => { level: 0, title: \"Hello, AsciiDoc!\", blocks: 0 }\n * // => { level: 1, title: \"First Section\", blocks: 1 }\n *\n * doc.findBy({'context': 'section'}, function (section) { return section.getLevel() === 1; });\n * // => { level: 1, title: \"First Section\", blocks: 1 }\n *\n * doc.findBy({'context': 'listing', 'style': 'source'});\n * // => { context: :listing, content_model: :verbatim, style: \"source\", lines: 1 }\n *\n * @returns {Array<AbstractBlock>} - a list of block-level nodes that match the filter or an empty list if no matches are found\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.findBy = function (selector, block) {\n  if (typeof block === 'undefined' && typeof selector === 'function') {\n    return Opal.send(this, 'find_by', null, selector)\n  } else if (typeof block === 'function') {\n    return Opal.send(this, 'find_by', [toHash(selector)], block)\n  } else {\n    return this.$find_by(toHash(selector))\n  }\n}\n\n/**\n * Get the source line number where this block started.\n * @returns {number} - the source line number where this block started\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getLineNumber = function () {\n  var lineno = this.$lineno()\n  return lineno === Opal.nil ? undefined : lineno\n}\n\n/**\n * Check whether this block has any child Section objects.\n * Only applies to Document and Section instances.\n * @returns {boolean} - true if this block has child Section objects, otherwise false\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasSections = function () {\n  // REMIND: call directly the underlying method \"$sections?\"\n  // once https://github.com/asciidoctor/asciidoctor/pull/3591 is merged and a new version is released.\n  // return this['$sections?']()\n  return this.next_section_index !== Opal.nil && this.next_section_index > 0\n}\n\n/**\n * Get the Array of child Section objects.\n * Only applies to Document and Section instances.\n * @memberof AbstractBlock\n * @returns {Array<Section>} - an {Array} of {@link Section} objects\n */\nAbstractBlock.prototype.getSections = function () {\n  return this.$sections()\n}\n\n/**\n * Get the numeral of this block (if section, relative to parent, otherwise absolute).\n * Only assigned to section if automatic section numbering is enabled.\n * Only assigned to formal block (block with title) if corresponding caption attribute is present.\n * If the section is an appendix, the numeral is a letter (starting with A).\n * @returns {string} - the numeral\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getNumeral = function () {\n  return this.$numeral()\n}\n\n/**\n * Set the numeral of this block.\n * @param {string} value - The numeral value\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setNumeral = function (value) {\n  this['$numeral='](value)\n}\n\n/**\n * A convenience method that checks whether the title of this block is defined.\n *\n * @returns {boolean} - a {boolean} indicating whether this block has a title.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasTitle = function () {\n  return this['$title?']()\n}\n\n/**\n * Returns the converted alt text for this block image.\n * @returns {string} - the {string} value of the alt attribute with XML special character and replacement substitutions applied.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getAlt = function () {\n  return this.$alt()\n}\n\n// Section API\n\n/**\n * @description\n * Methods for managing sections of AsciiDoc content in a document.\n *\n * @example\n * <pre>\n *   section = asciidoctor.Section.create()\n *   section.setTitle('Section 1')\n *   section.setId('sect1')\n *   section.getBlocks().length // 0\n *   section.getId() // \"sect1\"\n *   section.append(newBlock)\n *   section.getBlocks().length // 1\n * </pre>\n * @namespace\n * @extends AbstractBlock\n */\nvar Section = Opal.Asciidoctor.Section\n\n/**\n * Create a {Section} object.\n * @param {AbstractBlock} [parent] - The parent AbstractBlock. If set, must be a Document or Section object (default: undefined)\n * @param {number} [level] - The Integer level of this section (default: 1 more than parent level or 1 if parent not defined)\n * @param {boolean} [numbered] - A Boolean indicating whether numbering is enabled for this Section (default: false)\n * @param {Object} [opts] - An optional JSON of options (default: {})\n * @returns {Section} - a new {Section} object\n * @memberof Section\n */\nSection.create = function (parent, level, numbered, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$new(parent, level, numbered, toHash(opts))\n}\n\n/**\n * Set the level of this section or the section level in which this block resides.\n * @param {number} level - Level (Integer)\n * @memberof AbstractBlock\n */\nSection.prototype.setLevel = function (level) {\n  this.level = level\n}\n\n/**\n * Get the 0-based index order of this section within the parent block.\n * @returns {number}\n * @memberof Section\n */\nSection.prototype.getIndex = function () {\n  return this.index\n}\n\n/**\n * Set the 0-based index order of this section within the parent block.\n * @param {string} index - The index order of this section\n * @memberof Section\n */\nSection.prototype.setIndex = function (index) {\n  this.index = index\n}\n\n/**\n * Get the section name of this section.\n * @returns {string|undefined}\n * @memberof Section\n */\nSection.prototype.getSectionName = function () {\n  var sectname = this.sectname\n  return sectname === Opal.nil ? undefined : sectname\n}\n\n/**\n * Set the section name of this section.\n * @param {string} value - The section name\n * @memberof Section\n */\nSection.prototype.setSectionName = function (value) {\n  this.sectname = value\n}\n\n/**\n * Get the flag to indicate whether this is a special section or a child of one.\n * @returns {boolean}\n * @memberof Section\n */\nSection.prototype.isSpecial = function () {\n  return this.special\n}\n\n/**\n * Set the flag to indicate whether this is a special section or a child of one.\n * @param {boolean} value - A flag to indicated if this is a special section\n * @memberof Section\n */\nSection.prototype.setSpecial = function (value) {\n  this.special = value\n}\n\n/**\n * Get the state of the numbered attribute at this section (need to preserve for creating TOC).\n * @returns {boolean}\n * @memberof Section\n */\nSection.prototype.isNumbered = function () {\n  return this.numbered\n}\n\n/**\n * Get the caption for this section (only relevant for appendices).\n * @returns {string}\n * @memberof Section\n */\nSection.prototype.getCaption = function () {\n  var value = this.caption\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Get the name of the Section (title)\n * @returns {string}\n * @see {@link AbstractBlock#getTitle}\n * @memberof Section\n */\nSection.prototype.getName = function () {\n  return this.getTitle()\n}\n\n/**\n * @description\n * Methods for managing AsciiDoc content blocks.\n *\n * @example\n * block = asciidoctor.Block.create(parent, 'paragraph', {source: '_This_ is a <test>'})\n * block.getContent()\n * // \"<em>This</em> is a &lt;test&gt;\"\n *\n * @namespace\n * @extends AbstractBlock\n */\nvar Block = Opal.Asciidoctor.Block\n\n/**\n * Create a {Block} object.\n * @param {AbstractBlock} parent - The parent {AbstractBlock} with a compound content model to which this {Block} will be appended.\n * @param {string} context - The context name for the type of content (e.g., \"paragraph\").\n * @param {Object} [opts] - a JSON of options to customize block initialization: (default: {})\n * @param {string} opts.content_model - indicates whether blocks can be nested in this {Block} (\"compound\"),\n * otherwise how the lines should be processed (\"simple\", \"verbatim\", \"raw\", \"empty\"). (default: \"simple\")\n * @param {Object} opts.attributes - a JSON of attributes (key/value pairs) to assign to this {Block}. (default: {})\n * @param {string|Array<string>} opts.source - a String or {Array} of raw source for this {Block}. (default: undefined)\n *\n * IMPORTANT: If you don't specify the `subs` option, you must explicitly call the `commit_subs` method to resolve and assign the substitutions\n * to this block (which are resolved from the `subs` attribute, if specified, or the default substitutions based on this block's context).\n * If you want to use the default subs for a block, pass the option `subs: \"default\"`.\n * You can override the default subs using the `default_subs` option.\n *\n * @returns {Block} - a new {Block} object\n * @memberof Block\n */\nBlock.create = function (parent, context, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$new(parent, context, toHash(opts))\n}\n\n/**\n * Get the source of this block.\n * @returns {string} - the String source of this block.\n * @memberof Block\n */\nBlock.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * Get the source lines of this block.\n * @returns {Array<string>} - the String {Array} of source lines for this block.\n * @memberof Block\n */\nBlock.prototype.getSourceLines = function () {\n  return this.lines\n}\n\n// AbstractNode API\n\n/**\n * @namespace\n * @description\n * An abstract base class that provides state and methods for managing a node of AsciiDoc content.\n * The state and methods on this class are common to all content segments in an AsciiDoc document.\n */\nvar AbstractNode = Opal.Asciidoctor.AbstractNode\n\n/**\n * Apply the specified substitutions to the text.\n * If no substitutions are specified, the following substitutions are applied:\n * <code>specialcharacters</code>, <code>quotes</code>, <code>attributes</code>, <code>replacements</code>, <code>macros</code>, and <code>post_replacements</code>.\n *\n * @param {string|Array<string>} text - The String or String Array of text to process; must not be undefined.\n * @param {Array<string>} [subs] - The substitutions to perform; must be an Array or undefined.\n * @returns {string|Array<string>} - a String or String Array to match the type of the text argument with substitutions applied.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.applySubstitutions = function (text, subs) {\n  return this.$apply_subs(text, subs)\n}\n\n/**\n * Resolve the list of comma-delimited subs against the possible options.\n *\n * @param {string} subs - The comma-delimited String of substitution names or aliases.\n * @param {string} [type] - A String representing the context for which the subs are being resolved (default: 'block').\n * @param {Array<string>} [defaults] - An Array of substitutions to start with when computing incremental substitutions (default: undefined).\n * @param {string} [subject] - The String to use in log messages to communicate the subject for which subs are being resolved (default: undefined)\n *\n * @returns {Array<string>} - An Array of Strings representing the substitution operation or nothing if no subs are found.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.resolveSubstitutions = function (subs, type, defaults, subject) {\n  if (typeof type === 'undefined') {\n    type = 'block'\n  }\n  if (typeof defaults === 'undefined') {\n    defaults = Opal.nil\n  }\n  if (typeof subject === 'undefined') {\n    subject = Opal.nil\n  }\n  const value = this.$resolve_subs(subs, type, defaults, subject)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Call {@link AbstractNode#resolveSubstitutions} for the 'block' type.\n *\n * @see {@link AbstractNode#resolveSubstitutions}\n */\nAbstractNode.prototype.resolveBlockSubstitutions = function (subs, defaults, subject) {\n  return this.resolveSubstitutions(subs, 'block', defaults, subject)\n}\n\n/**\n * Call {@link AbstractNode#resolveSubstitutions} for the 'inline' type with the subject set as passthrough macro.\n *\n * @see {@link AbstractNode#resolveSubstitutions}\n */\nAbstractNode.prototype.resolvePassSubstitutions = function (subs) {\n  return this.resolveSubstitutions(subs, 'inline', undefined, 'passthrough macro')\n}\n\n/**\n * @returns {string} - the String name of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getNodeName = function () {\n  return this.node_name\n}\n\n/**\n * @returns {Object} - the JSON of attributes for this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getAttributes = function () {\n  return fromHash(this.attributes)\n}\n\n/**\n * Get the value of the specified attribute.\n * If the attribute is not found on this node, fallback_name is set, and this node is not the Document node, get the value of the specified attribute from the Document node.\n *\n * Look for the specified attribute in the attributes on this node and return the value of the attribute, if found.\n * Otherwise, if fallback_name is set (default: same as name) and this node is not the Document node, look for that attribute on the Document node and return its value, if found.\n * Otherwise, return the default value (default: undefined).\n *\n * @param {string} name - The String of the attribute to resolve.\n * @param {*} [defaultValue] - The {Object} value to return if the attribute is not found (default: undefined).\n * @param {string} [fallbackName] - The String of the attribute to resolve on the Document if the attribute is not found on this node (default: same as name).\n *\n * @returns {*} - the {Object} value (typically a String) of the attribute or defaultValue if the attribute is not found.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getAttribute = function (name, defaultValue, fallbackName) {\n  var value = this.$attr(name, defaultValue, fallbackName)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Check whether the specified attribute is present on this node.\n *\n * @param {string} name - The String of the attribute to resolve.\n * @returns {boolean} - true if the attribute is present, otherwise false\n * @memberof AbstractNode\n */\nAbstractNode.prototype.hasAttribute = function (name) {\n  return name in this.attributes.$$smap\n}\n\n/**\n * Check if the specified attribute is defined using the same logic as {AbstractNode#getAttribute}, optionally performing acomparison with the expected value if specified.\n *\n * Look for the specified attribute in the attributes on this node.\n * If not found, fallback_name is specified (default: same as name), and this node is not the Document node, look for that attribute on the Document node.\n * In either case, if the attribute is found, and the comparison value is truthy, return whether the two values match.\n * Otherwise, return whether the attribute was found.\n *\n * @param {string} name - The String name of the attribute to resolve.\n * @param {*} [expectedValue] - The expected Object value of the attribute (default: undefined).\n * @param {string} fallbackName - The String of the attribute to resolve on the Document if the attribute is not found on this node (default: same as name).\n *\n * @returns {boolean} - a Boolean indicating whether the attribute exists and, if a truthy comparison value is specified, whether the value of the attribute matches the comparison value.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isAttribute = function (name, expectedValue, fallbackName) {\n  var result = this['$attr?'](name, expectedValue, fallbackName)\n  return result === Opal.nil ? false : result\n}\n\n/**\n * Assign the value to the attribute name for the current node.\n *\n * @param {string} name - The String attribute name to assign\n * @param {*} value - The Object value to assign to the attribute (default: '')\n * @param {boolean} overwrite - A Boolean indicating whether to assign the attribute if currently present in the attributes JSON (default: true)\n *\n * @returns {boolean} - a Boolean indicating whether the assignment was performed\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setAttribute = function (name, value, overwrite) {\n  if (typeof overwrite === 'undefined') overwrite = true\n  return this.$set_attr(name, value, overwrite)\n}\n\n/**\n * Remove the attribute from the current node.\n * @param {string} name - The String attribute name to remove\n * @returns {string} - the previous {string} value, or undefined if the attribute was not present.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.removeAttribute = function (name) {\n  var value = this.$remove_attr(name)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Get the {@link Document} to which this node belongs.\n *\n * @returns {Document} - the {@link Document} object to which this node belongs.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getDocument = function () {\n  return this.document\n}\n\n/**\n * Get the {@link AbstractNode} to which this node is attached.\n *\n * @memberof AbstractNode\n * @returns {AbstractNode} - the {@link AbstractNode} object to which this node is attached,\n * or undefined if this node has no parent.\n */\nAbstractNode.prototype.getParent = function () {\n  var parent = this.parent\n  return parent === Opal.nil ? undefined : parent\n}\n\n/**\n * @returns {boolean} - true if this {AbstractNode} is an instance of {Inline}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isInline = function () {\n  return this['$inline?']()\n}\n\n/**\n * @returns {boolean} - true if this {AbstractNode} is an instance of {Block}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isBlock = function () {\n  return this['$block?']()\n}\n\n/**\n * Checks if the role attribute is set on this node and, if an expected value is given, whether the space-separated role matches that value.\n *\n * @param {string} expectedValue - The expected String value of the role (optional, default: undefined)\n *\n * @returns {boolean} - a Boolean indicating whether the role attribute is set on this node and, if an expected value is given, whether the space-separated role matches that value.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isRole = function (expectedValue) {\n  return this['$role?'](expectedValue)\n}\n\n/**\n * Retrieves the space-separated String role for this node.\n *\n * @returns {string} - the role as a space-separated String.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getRole = function () {\n  return this.$role()\n}\n\n/**\n * Checks if the specified role is present in the list of roles for this node.\n *\n * @param {string} name - The String name of the role to find.\n *\n * @returns {boolean} - a Boolean indicating whether this node has the specified role.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.hasRole = function (name) {\n  return this['$has_role?'](name)\n}\n\n/**\n * Retrieves the String role names for this node as an Array.\n *\n * @returns {Array<string>} - the role names as a String {Array}, which is empty if the role attribute is absent on this node.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getRoles = function () {\n  return this.$roles()\n}\n\n/**\n * Adds the given role directly to this node.\n *\n * @param {string} name - The name of the role to add\n *\n * @returns {boolean} - a Boolean indicating whether the role was added.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.addRole = function (name) {\n  return this.$add_role(name)\n}\n\n/**\n * Public: Removes the given role directly from this node.\n *\n * @param {string} name - The name of the role to remove\n *\n * @returns {boolean} - a Boolean indicating whether the role was removed.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.removeRole = function (name) {\n  return this.$remove_role(name)\n}\n\n/**\n * A convenience method that checks if the reftext attribute is defined.\n * @returns {boolean} - A Boolean indicating whether the reftext attribute is defined\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isReftext = function () {\n  return this['$reftext?']()\n}\n\n/**\n * A convenience method that returns the value of the reftext attribute with substitutions applied.\n * @returns {string|undefined} - the value of the reftext attribute with substitutions applied.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getReftext = function () {\n  var reftext = this.$reftext()\n  return reftext === Opal.nil ? undefined : reftext\n}\n\n/**\n * @returns {string} - Get the context name for this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getContext = function () {\n  var context = this.context\n  // Automatically convert Opal pseudo-symbol to String\n  return typeof context === 'string' ? context : context.toString()\n}\n\n/**\n * @returns {string} - the String id of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getId = function () {\n  var id = this.id\n  return id === Opal.nil ? undefined : id\n}\n\n/**\n * @param {string} id - the String id of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setId = function (id) {\n  this.id = id\n}\n\n/**\n * A convenience method to check if the specified option attribute is enabled on the current node.\n * Check if the option is enabled. This method simply checks to see if the <name>-option attribute is defined on the current node.\n *\n * @param {string} name - the String name of the option\n *\n * @return {boolean} - a Boolean indicating whether the option has been specified\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isOption = function (name) {\n  return this['$option?'](name)\n}\n\n/**\n * Set the specified option on this node.\n * This method sets the specified option on this node by setting the <name>-option attribute.\n *\n * @param {string} name - the String name of the option\n *\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setOption = function (name) {\n  return this.$set_option(name)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getIconUri = function (name) {\n  return this.$icon_uri(name)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getMediaUri = function (target, assetDirKey) {\n  return this.$media_uri(target, assetDirKey)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getImageUri = function (targetImage, assetDirKey) {\n  return this.$image_uri(targetImage, assetDirKey)\n}\n\n/**\n * Get the {Converter} instance being used to convert the current {Document}.\n * @returns {Object}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getConverter = function () {\n  return this.$converter()\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.readContents = function (target, options) {\n  return this.$read_contents(target, toHash(options))\n}\n\n/**\n * Read the contents of the file at the specified path.\n * This method assumes that the path is safe to read.\n * It checks that the file is readable before attempting to read it.\n *\n * @param path - the {string} path from which to read the contents\n * @param {Object} options - a JSON {Object} of options to control processing (default: {})\n * @param {boolean} options.warn_on_failure - a {boolean} that controls whether a warning is issued if the file cannot be read (default: false)\n * @param {boolean} options.normalize - a {boolean} that controls whether the lines are normalized and coerced to UTF-8 (default: false)\n *\n * @returns {string} - the String content of the file at the specified path, or undefined if the file does not exist.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.readAsset = function (path, options) {\n  var result = this.$read_asset(path, toHash(options))\n  return result === Opal.nil ? undefined : result\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeWebPath = function (target, start, preserveTargetUri) {\n  return this.$normalize_web_path(target, start, preserveTargetUri)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeSystemPath = function (target, start, jail, options) {\n  return this.$normalize_system_path(target, start, jail, toHash(options))\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeAssetPath = function (assetRef, assetName, autoCorrect) {\n  return this.$normalize_asset_path(assetRef, assetName, autoCorrect)\n}\n\n// Document API\n\n/**\n * The {@link Document} class represents a parsed AsciiDoc document.\n *\n * Document is the root node of a parsed AsciiDoc document.<br/>\n * It provides an abstract syntax tree (AST) that represents the structure of the AsciiDoc document\n * from which the Document object was parsed.\n *\n * Although the constructor can be used to create an empty document object,\n * more commonly, you'll load the document object from AsciiDoc source\n * using the primary API methods on {@link Asciidoctor}.\n * When using one of these APIs, you almost always want to set the safe mode to 'safe' (or 'unsafe')\n * to enable all of Asciidoctor's features.\n *\n * <pre>\n *   var doc = Asciidoctor.load('= Hello, AsciiDoc!', { 'safe': 'safe' })\n *   // => Asciidoctor::Document { doctype: \"article\", doctitle: \"Hello, AsciiDoc!\", blocks: 0 }\n * </pre>\n *\n * Instances of this class can be used to extract information from the document or alter its structure.\n * As such, the Document object is most often used in extensions and by integrations.\n *\n * The most basic usage of the Document object is to retrieve the document's title.\n *\n * <pre>\n *  var source = '= Document Title'\n *  var doc = asciidoctor.load(source, { 'safe': 'safe' })\n *  console.log(doc.getTitle()) // 'Document Title'\n * </pre>\n *\n * You can also use the Document object to access document attributes defined in the header, such as the author and doctype.\n * @namespace\n * @extends AbstractBlock\n */\nvar Document = Opal.Asciidoctor.Document\n\n/**\n * Returns a JSON {Object} of references captured by the processor.\n *\n * @returns {Object} - a JSON {Object} of {AbstractNode} in the document.\n * @memberof Document\n */\nDocument.prototype.getRefs = function () {\n  return fromHash(this.catalog.$$smap.refs)\n}\n\n/**\n * Returns an {Array} of {Document/ImageReference} captured by the processor.\n *\n * @returns {Array<ImageReference>} - an {Array} of {Document/ImageReference} in the document.\n * Will return an empty array if the option \"catalog_assets: true\" was not defined on the processor.\n * @memberof Document\n */\nDocument.prototype.getImages = function () {\n  return this.catalog.$$smap.images\n}\n\n/**\n * Returns an {Array} of links captured by the processor.\n *\n * @returns {Array<string>} - an {Array} of links in the document.\n * Will return an empty array if:\n * - the function was called before the document was converted\n * - the option \"catalog_assets: true\" was not defined on the processor\n * @memberof Document\n */\nDocument.prototype.getLinks = function () {\n  return this.catalog.$$smap.links\n}\n\n/**\n * @returns {boolean} - true if the document has footnotes otherwise false\n * @memberof Document\n */\nDocument.prototype.hasFootnotes = function () {\n  return this['$footnotes?']()\n}\n\n/**\n * Returns an {Array} of {Document/Footnote} captured by the processor.\n *\n * @returns {Array<Footnote>} - an {Array} of {Document/Footnote} in the document.\n * Will return an empty array if the function was called before the document was converted.\n * @memberof Document\n */\nDocument.prototype.getFootnotes = function () {\n  return this.$footnotes()\n}\n\n/**\n * Returns the level-0 {Section} (i.e. the document title).\n * Only stores the title, not the header attributes.\n *\n * @returns {string} - the level-0 {Section}.\n * @memberof Document\n */\nDocument.prototype.getHeader = function () {\n  return this.header\n}\n\n/**\n * @memberof Document\n */\nDocument.prototype.setAttribute = function (name, value) {\n  return this.$set_attribute(name, value)\n}\n\n/**\n\n * @memberof Document\n */\nDocument.prototype.removeAttribute = function (name) {\n  this.attributes.$delete(name)\n  this.attribute_overrides.$delete(name)\n}\n\n/**\n * Convert the AsciiDoc document using the templates loaded by the Converter.\n * If a \"template_dir\" is not specified, or a template is missing, the converter will fall back to using the appropriate built-in template.\n *\n * @param {Object} [options] - a JSON of options to control processing (default: {})\n *\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.convert = function (options) {\n  var result = this.$convert(toHash(options))\n  return result === Opal.nil ? '' : result\n}\n\n/**\n * Write the output to the specified file.\n *\n * If the converter responds to \"write\", delegate the work of writing the file to that method.\n * Otherwise, write the output the specified file.\n *\n * @param {string} output\n * @param {string} target\n *\n * @memberof Document\n */\nDocument.prototype.write = function (output, target) {\n  return this.$write(output, target)\n}\n\n/**\n * @returns {string} - the full name of the author as a String\n * @memberof Document\n */\nDocument.prototype.getAuthor = function () {\n  return this.$author()\n}\n\n/**\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * @returns {Array<string>}\n * @memberof Document\n */\nDocument.prototype.getSourceLines = function () {\n  return this.$source_lines()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isNested = function () {\n  return this['$nested?']()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isEmbedded = function () {\n  return this['$embedded?']()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasExtensions = function () {\n  return this['$extensions?']()\n}\n\n/**\n * Get the value of the doctype attribute for this document.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getDoctype = function () {\n  return this.doctype\n}\n\n/**\n * Get the value of the backend attribute for this document.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getBackend = function () {\n  return this.backend\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isBasebackend = function (base) {\n  return this['$basebackend?'](base)\n}\n\n/**\n * Get the title explicitly defined in the document attributes.\n * @returns {string}\n * @see {@link AbstractNode#getAttributes}\n * @memberof Document\n */\nDocument.prototype.getTitle = function () {\n  var title = this.$title()\n  return title === Opal.nil ? undefined : title\n}\n\n/**\n * Set the title on the document header\n *\n * Set the title of the document header to the specified value.\n * If the header does not exist, it is first created.\n *\n * @param {string} title - the String title to assign as the title of the document header\n *\n * @returns {string} - the new String title assigned to the document header\n * @memberof Document\n */\nDocument.prototype.setTitle = function (title) {\n  return this['$title='](title)\n}\n\n/**\n * @returns {Document/Title} - a {@link Document/Title}\n * @memberof Document\n */\nDocument.prototype.getDocumentTitle = function (options) {\n  var doctitle = this.$doctitle(toHash(options))\n  return doctitle === Opal.nil ? undefined : doctitle\n}\n\n/**\n * @see {@link Document#getDocumentTitle}\n * @memberof Document\n */\nDocument.prototype.getDoctitle = Document.prototype.getDocumentTitle\n\n/**\n * Get the document catalog JSON object.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCatalog = function () {\n  return fromHash(this.catalog)\n}\n\n/**\n *\n * @returns {Object}\n * @see Document#getCatalog\n * @memberof Document\n */\nDocument.prototype.getReferences = Document.prototype.getCatalog\n\n/**\n * Get the document revision date from document header (document attribute <code>revdate</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionDate = function () {\n  return this.getAttribute('revdate')\n}\n\n/**\n * @see Document#getRevisionDate\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevdate = function () {\n  return this.getRevisionDate()\n}\n\n/**\n * Get the document revision number from document header (document attribute <code>revnumber</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionNumber = function () {\n  return this.getAttribute('revnumber')\n}\n\n/**\n * Get the document revision remark from document header (document attribute <code>revremark</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionRemark = function () {\n  return this.getAttribute('revremark')\n}\n\n/**\n *  Assign a value to the specified attribute in the document header.\n *\n *  The assignment will be visible when the header attributes are restored,\n *  typically between processor phases (e.g., between parse and convert).\n *\n * @param {string} name - The {string} attribute name to assign\n * @param {Object} value - The {Object} value to assign to the attribute (default: '')\n * @param {boolean} overwrite - A {boolean} indicating whether to assign the attribute\n * if already present in the attributes Hash (default: true)\n *\n * @returns {boolean} - true if the assignment was performed otherwise false\n * @memberof Document\n */\nDocument.prototype.setHeaderAttribute = function (name, value, overwrite) {\n  if (typeof overwrite === 'undefined') overwrite = true\n  if (typeof value === 'undefined') value = ''\n  return this.$set_header_attribute(name, value, overwrite)\n}\n\n/**\n * Convenience method to retrieve the authors of this document as an {Array} of {Document/Author} objects.\n *\n * This method is backed by the author-related attributes on the document.\n *\n * @returns {Array<Author>} - an {Array} of {Document/Author} objects.\n * @memberof Document\n */\nDocument.prototype.getAuthors = function () {\n  return this.$authors()\n}\n\n// Document.Footnote API\n\n/**\n * @namespace\n * @module Document/Footnote\n */\nvar Footnote = Document.Footnote\n\n/**\n * @returns {number} - the footnote's index\n * @memberof Document/Footnote\n */\nFootnote.prototype.getIndex = function () {\n  var index = this.$$data.index\n  return index === Opal.nil ? undefined : index\n}\n\n/**\n * @returns {number} - the footnote's id\n * @memberof Document/Footnote\n */\nFootnote.prototype.getId = function () {\n  var id = this.$$data.id\n  return id === Opal.nil ? undefined : id\n}\n\n/**\n * @returns {string} - the footnote's text\n * @memberof Document/Footnote\n */\nFootnote.prototype.getText = function () {\n  var text = this.$$data.text\n  return text === Opal.nil ? undefined : text\n}\n\n// Document.ImageReference API\n\n/**\n * @class\n * @module Document/ImageReference\n */\nvar ImageReference = Document.ImageReference\n\n/**\n * @returns {string} - the image's target\n * @memberof Document/ImageReference\n */\nImageReference.prototype.getTarget = function () {\n  return this.$$data.target\n}\n\n/**\n * @returns {string} - the image's directory (imagesdir attribute)\n * @memberof Document/ImageReference\n */\nImageReference.prototype.getImagesDirectory = function () {\n  var value = this.$$data.imagesdir\n  return value === Opal.nil ? undefined : value\n}\n\n// Document.Author API\n\n/**\n * The Author class represents information about an author extracted from document attributes.\n * @namespace\n * @module Document/Author\n */\nvar Author = Document.Author\n\n/**\n * @returns {string} - the author's full name\n * @memberof Document/Author\n */\nAuthor.prototype.getName = function () {\n  var name = this.$$data.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @returns {string} - the author's first name\n * @memberof Document/Author\n */\nAuthor.prototype.getFirstName = function () {\n  var firstName = this.$$data.firstname\n  return firstName === Opal.nil ? undefined : firstName\n}\n\n/**\n * @returns {string} - the author's middle name (or undefined if the author has no middle name)\n * @memberof Document/Author\n */\nAuthor.prototype.getMiddleName = function () {\n  var middleName = this.$$data.middlename\n  return middleName === Opal.nil ? undefined : middleName\n}\n\n/**\n * @returns {string} - the author's last name\n * @memberof Document/Author\n */\nAuthor.prototype.getLastName = function () {\n  var lastName = this.$$data.lastname\n  return lastName === Opal.nil ? undefined : lastName\n}\n\n/**\n * @returns {string} - the author's initials (by default based on the author's name)\n * @memberof Document/Author\n */\nAuthor.prototype.getInitials = function () {\n  var initials = this.$$data.initials\n  return initials === Opal.nil ? undefined : initials\n}\n\n/**\n * @returns {string} - the author's email\n * @memberof Document/Author\n */\nAuthor.prototype.getEmail = function () {\n  var email = this.$$data.email\n  return email === Opal.nil ? undefined : email\n}\n\n// private constructor\nDocument.RevisionInfo = function (date, number, remark) {\n  this.date = date\n  this.number = number\n  this.remark = remark\n}\n\n/**\n * @class\n * @namespace\n * @module Document/RevisionInfo\n */\nvar RevisionInfo = Document.RevisionInfo\n\n/**\n * Get the document revision date from document header (document attribute <code>revdate</code>).\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getDate = function () {\n  return this.date\n}\n\n/**\n * Get the document revision number from document header (document attribute <code>revnumber</code>).\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getNumber = function () {\n  return this.number\n}\n\n/**\n * Get the document revision remark from document header (document attribute <code>revremark</code>).\n * A short summary of changes in this document revision.\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getRemark = function () {\n  return this.remark\n}\n\n/**\n * @returns {boolean} - true if the revision info is empty (ie. not defined), otherwise false\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.isEmpty = function () {\n  return this.date === undefined && this.number === undefined && this.remark === undefined\n}\n\n// SafeMode API\n\n/**\n * @namespace\n */\nvar SafeMode = Opal.Asciidoctor.SafeMode\n\n/**\n * @param {string} name - the name of the security level\n * @returns {number} - the integer value of the corresponding security level\n */\nSafeMode.getValueForName = function (name) {\n  return this.$value_for_name(name)\n}\n\n/**\n * @param {number} value - the integer value of the security level\n * @returns {string} - the name of the corresponding security level\n */\nSafeMode.getNameForValue = function (value) {\n  var name = this.$name_for_value(value)\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @returns {Array<string>} - the String {Array} of security levels\n */\nSafeMode.getNames = function () {\n  return this.$names()\n}\n\n// Callouts API\n\n/**\n * Maintains a catalog of callouts and their associations.\n * @namespace\n */\nvar Callouts = Opal.Asciidoctor.Callouts\n\n/**\n * Create a new Callouts.\n * @returns {Callouts} - a new Callouts\n * @memberof Callouts\n */\nCallouts.create = function () {\n  return this.$new()\n}\n\n/**\n * Register a new callout for the given list item ordinal.\n * Generates a unique id for this callout based on the index of the next callout list in the document and the index of this callout since the end of the last callout list.\n *\n * @param {number} ordinal - the Integer ordinal (1-based) of the list item to which this callout is to be associated\n * @returns {string} - The unique String id of this callout\n * @example\n *  callouts = asciidoctor.Callouts.create()\n *  callouts.register(1)\n *  // => \"CO1-1\"\n *  callouts.nextList()\n *  callouts.register(2)\n *  // => \"CO2-1\"\n * @memberof Callouts\n */\n\nCallouts.prototype.register = function (ordinal) {\n  return this.$register(ordinal)\n}\n/**\n * Get the next callout index in the document.\n *\n * Reads the next callout index in the document and advances the pointer.\n * This method is used during conversion to retrieve the unique id of the callout that was generated during parsing.\n *\n * @returns {string} - The unique String id of the next callout in the document\n * @memberof Callouts\n */\nCallouts.prototype.readNextId = function () {\n  return this.$read_next_id()\n}\n\n/**\n * et a space-separated list of callout ids for the specified list item.\n * @param {number} ordinal - the Integer ordinal (1-based) of the list item for which to retrieve the callouts\n * @returns {string} - a space-separated String of callout ids associated with the specified list item\n * @memberof Callouts\n */\nCallouts.prototype.getCalloutIds = function (ordinal) {\n  return this.$callout_ids(ordinal)\n}\n\n/**\n * @memberof Callouts\n */\nCallouts.prototype.getLists = function () {\n  var lists = this.lists\n  if (lists && lists.length > 0) {\n    for (var i = 0; i < lists.length; i++) {\n      var list = lists[i]\n      if (list && list.length > 0) {\n        for (var j = 0; j < list.length; j++) {\n          if (typeof list[j] === 'object' && '$$smap' in list[j]) {\n            list[j] = fromHash(list[j])\n          }\n        }\n      }\n    }\n  }\n  return lists\n}\n\n/**\n * @memberof Callouts\n */\nCallouts.prototype.getListIndex = function () {\n  return this.list_index\n}\n\n/**\n * The current list for which callouts are being collected.\n * @returns {Array} - The Array of callouts at the position of the list index pointer\n * @memberof Callouts\n */\nCallouts.prototype.getCurrentList = function () {\n  var currentList = this.$current_list()\n  if (currentList && currentList.length > 0) {\n    for (var i = 0; i < currentList.length; i++) {\n      if (typeof currentList[i] === 'object' && '$$smap' in currentList[i]) {\n        currentList[i] = fromHash(currentList[i])\n      }\n    }\n  }\n  return currentList\n}\n\n/**\n * Advance to the next callout list in the document.\n * @memberof Callouts\n */\nCallouts.prototype.nextList = function () {\n  return this.$nextList()\n}\n\n/**\n * Rewind the list index pointer, intended to be used when switching from the parsing to conversion phase.\n * @memberof Callouts\n */\nCallouts.prototype.rewind = function () {\n  return this.$rewind()\n}\n\n/**\n * @returns {Document/RevisionInfo} - a {@link Document/RevisionInfo}\n * @memberof Document\n */\nDocument.prototype.getRevisionInfo = function () {\n  return new Document.RevisionInfo(this.getRevisionDate(), this.getRevisionNumber(), this.getRevisionRemark())\n}\n\n/**\n * @returns {boolean} - true if the document contains revision info, otherwise false\n * @memberof Document\n */\nDocument.prototype.hasRevisionInfo = function () {\n  var revisionInfo = this.getRevisionInfo()\n  return !revisionInfo.isEmpty()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNotitle = function () {\n  return this.$notitle()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNoheader = function () {\n  return this.$noheader()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNofooter = function () {\n  return this.$nofooter()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasHeader = function () {\n  return this['$header?']()\n}\n\n/**\n * Replay attribute assignments at the block level.\n *\n * <i>This method belongs to an internal API that deals with how attributes are managed by the processor.</i>\n * If you understand why this group of methods are necessary, and what they do, feel free to use them.\n * <strong>However, keep in mind they are subject to change at any time.</strong>\n *\n * @param {Object} blockAttributes - A JSON of attributes\n * @memberof Document\n */\nDocument.prototype.playbackAttributes = function (blockAttributes) {\n  blockAttributes = toHash(blockAttributes)\n  if (blockAttributes) {\n    var attrEntries = blockAttributes['$[]']('attribute_entries')\n    if (attrEntries && Array.isArray(attrEntries)) {\n      var result = []\n      for (var i = 0; i < attrEntries.length; i++) {\n        var attrEntryObject = attrEntries[i]\n        if (attrEntryObject && typeof attrEntryObject === 'object' && attrEntryObject.constructor.name === 'Object') {\n          attrEntryObject.$name = function () {\n            return this.name\n          }\n          attrEntryObject.$value = function () {\n            return this.value\n          }\n          attrEntryObject.$negate = function () {\n            return this.negate\n          }\n        }\n        result.push(attrEntryObject)\n      }\n      blockAttributes['$[]=']('attribute_entries', result)\n    }\n  }\n  this.$playback_attributes(blockAttributes)\n}\n\n/**\n * Delete the specified attribute from the document if the name is not locked.\n * If the attribute is locked, false is returned.\n * Otherwise, the attribute is deleted.\n *\n * @param {string} name - the String attribute name\n *\n * @returns {boolean} - true if the attribute was deleted, false if it was not because it's locked\n * @memberof Document\n */\nDocument.prototype.deleteAttribute = function (name) {\n  return this.$delete_attribute(name)\n}\n\n/**\n * Determine if the attribute has been locked by being assigned in document options.\n *\n * @param {string} key - The attribute key to check\n *\n * @returns {boolean} - true if the attribute is locked, false otherwise\n * @memberof Document\n */\nDocument.prototype.isAttributeLocked = function (key) {\n  return this['$attribute_locked?'](key)\n}\n\n/**\n * Restore the attributes to the previously saved state (attributes in header).\n *\n * @memberof Document\n */\nDocument.prototype.restoreAttributes = function () {\n  return this.$restore_attributes()\n}\n\n/**\n * Parse the AsciiDoc source stored in the {Reader} into an abstract syntax tree.\n *\n * If the data parameter is not nil, create a new {PreprocessorReader} and assigned it to the reader property of this object.\n * Otherwise, continue with the reader that was created when the {Document} was instantiated.\n * Pass the reader to {Parser.parse} to parse the source data into an abstract syntax tree.\n *\n * If parsing has already been performed, this method returns without performing any processing.\n *\n * @param {string|Array<string>} [data] - The optional replacement AsciiDoc source data as a String or String Array. (default: undefined)\n *\n * @returns {Document} - this {Document}\n * @memberof Document\n */\nDocument.prototype.parse = function (data) {\n  return this.$parse(data)\n}\n\n/**\n * @memberof Document\n */\nDocument.prototype.getDocinfo = function (docinfoLocation, suffix) {\n  return this.$docinfo(docinfoLocation, suffix)\n}\n\n/**\n * @param {string} [docinfoLocation] - A {string} for checking docinfo extensions at a given location (head or footer) (default: head)\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasDocinfoProcessors = function (docinfoLocation) {\n  return this['$docinfo_processors?'](docinfoLocation)\n}\n\n/**\n * Increment the specified counter and store it in the block's attributes.\n *\n * @param {string} counterName - the String name of the counter attribute\n * @param {Block} block - the {Block} on which to save the counter\n *\n * @returns {number} - the next number in the sequence for the specified counter\n * @memberof Document\n */\nDocument.prototype.incrementAndStoreCounter = function (counterName, block) {\n  return this.$increment_and_store_counter(counterName, block)\n}\n\n/**\n * @deprecated Please use {Document#incrementAndStoreCounter} method.\n * @memberof Document\n */\nDocument.prototype.counterIncrement = Document.prototype.incrementAndStoreCounter\n\n/**\n * Get the named counter and take the next number in the sequence.\n *\n * @param {string} name - the String name of the counter\n * @param {string|number} seed - the initial value as a String or Integer\n *\n * @returns {number} the next number in the sequence for the specified counter\n * @memberof Document\n */\nDocument.prototype.counter = function (name, seed) {\n  return this.$counter(name, seed)\n}\n\n/**\n * A read-only integer value indicating the level of security that should be enforced while processing this document.\n * The value must be set in the Document constructor using the \"safe\" option.\n *\n * A value of 0 (UNSAFE) disables any of the security features enforced by Asciidoctor.\n *\n * A value of 1 (SAFE) closely parallels safe mode in AsciiDoc.\n * In particular, it prevents access to files which reside outside of the parent directory of the source file and disables any macro other than the include directive.\n *\n * A value of 10 (SERVER) disallows the document from setting attributes that would affect the conversion of the document,\n * in addition to all the security features of SafeMode.SAFE.\n * For instance, this level forbids changing the backend or source-highlighter using an attribute defined in the source document header.\n * This is the most fundamental level of security for server deployments (hence the name).\n *\n * A value of 20 (SECURE) disallows the document from attempting to read files from the file system and including the contents of them into the document,\n * in addition to all the security features of SafeMode.SECURE.\n * In particular, it disallows use of the include::[] directive and the embedding of binary content (data uri), stylesheets and JavaScripts referenced by the document.\n * (Asciidoctor and trusted extensions may still be allowed to embed trusted content into the document).\n *\n * Since Asciidoctor is aiming for wide adoption, 20 (SECURE) is the default value and is recommended for server deployments.\n *\n * A value of 100 (PARANOID) is planned to disallow the use of passthrough macros and prevents the document from setting any known attributes,\n * in addition to all the security features of SafeMode.SECURE.\n * Please note that this level is not currently implemented (and therefore not enforced)!\n *\n * @returns {number} - An integer value indicating the level of security\n * @memberof Document\n */\nDocument.prototype.getSafe = function () {\n  return this.safe\n}\n\n/**\n * Get the Boolean AsciiDoc compatibility mode.\n * Enabling this attribute activates the following syntax changes:\n *\n *   * single quotes as constrained emphasis formatting marks\n *   * single backticks parsed as inline literal, formatted as monospace\n *   * single plus parsed as constrained, monospaced inline formatting\n *   * double plus parsed as constrained, monospaced inline formatting\n *\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getCompatMode = function () {\n  return this.compat_mode\n}\n\n/**\n * Get the Boolean flag that indicates whether source map information should be tracked by the parser.\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getSourcemap = function () {\n  var sourcemap = this.sourcemap\n  return sourcemap === Opal.nil ? false : sourcemap\n}\n\n/**\n * Set the Boolean flag that indicates whether source map information should be tracked by the parser.\n * @param {boolean} value\n * @memberof Document\n */\nDocument.prototype.setSourcemap = function (value) {\n  this.sourcemap = value\n}\n\n/**\n * Get the JSON of document counters.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCounters = function () {\n  return fromHash(this.counters)\n}\n\n/**\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCallouts = function () {\n  return this.$callouts()\n}\n\n/**\n * Get the String base directory for converting this document.\n *\n * Defaults to directory of the source file.\n * If the source is a string, defaults to the current directory.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getBaseDir = function () {\n  return this.base_dir\n}\n\n/**\n * Get the JSON of resolved options used to initialize this {Document}.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getOptions = function () {\n  return fromHash(this.options)\n}\n\n/**\n * Get the outfilesuffix defined at the end of the header.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getOutfilesuffix = function () {\n  return this.outfilesuffix\n}\n\n/**\n * Get a reference to the parent Document of this nested document.\n * @returns {Document|undefined}\n * @memberof Document\n */\nDocument.prototype.getParentDocument = function () {\n  var parentDocument = this.parent_document\n  return parentDocument === Opal.nil ? undefined : parentDocument\n}\n\n/**\n * Get the {Reader} associated with this document.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getReader = function () {\n  return this.reader\n}\n\n/**\n * Get the {Converter} instance being used to convert the current {Document}.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getConverter = function () {\n  return this.converter\n}\n\n/**\n * Get the activated {Extensions.Registry} associated with this document.\n * @returns {Extensions/Registry}\n * @memberof Document\n */\nDocument.prototype.getExtensions = function () {\n  var extensions = this.extensions\n  return extensions === Opal.nil ? undefined : extensions\n}\n\n// Document.Title API\n\n/**\n * A partitioned title (i.e., title & subtitle).\n * @namespace\n * @module Document/Title\n */\nvar Title = Document.Title\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getMain = function () {\n  return this.main\n}\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getCombined = function () {\n  return this.combined\n}\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getSubtitle = function () {\n  var subtitle = this.subtitle\n  return subtitle === Opal.nil ? undefined : subtitle\n}\n\n/**\n * @returns {boolean}\n * @memberof Document/Title\n */\nTitle.prototype.isSanitized = function () {\n  var sanitized = this['$sanitized?']()\n  return sanitized === Opal.nil ? false : sanitized\n}\n\n/**\n * @returns {boolean}\n * @memberof Document/Title\n */\nTitle.prototype.hasSubtitle = function () {\n  return this['$subtitle?']()\n}\n\n// Inline API\n\n/**\n * Methods for managing inline elements in AsciiDoc block.\n * @namespace\n * @extends AbstractNode\n */\nvar Inline = Opal.Asciidoctor.Inline\n\n/**\n * Create a new Inline element.\n * @param {AbstractBlock} parent\n * @param {string} context\n * @param {string|undefined} text\n * @param {Object|undefined} opts\n * @returns {Inline} - a new Inline element\n * @memberof Inline\n */\nInline.create = function (parent, context, text, opts) {\n  return this.$new(parent, context, text, prepareOptions(opts))\n}\n\n/**\n * Get the converted content for this inline node.\n *\n * @returns {string} - the converted String content for this inline node\n * @memberof Inline\n */\nInline.prototype.convert = function () {\n  return this.$convert()\n}\n\n/**\n * Get the converted String text of this Inline node, if applicable.\n *\n * @returns {string|undefined} - the converted String text for this Inline node, or undefined if not applicable for this node.\n * @memberof Inline\n */\nInline.prototype.getText = function () {\n  var text = this.$text()\n  return text === Opal.nil ? undefined : text\n}\n\n/**\n * Get the String sub-type (aka qualifier) of this Inline node.\n *\n * This value is used to distinguish different variations of the same node\n * category, such as different types of anchors.\n *\n * @returns {string} - the string sub-type of this Inline node.\n * @memberof Inline\n */\nInline.prototype.getType = function () {\n  return this.$type()\n}\n\n/**\n * Get the primary String target of this Inline node.\n *\n * @returns {string|undefined} - the string target of this Inline node.\n * @memberof Inline\n */\nInline.prototype.getTarget = function () {\n  var target = this.$target()\n  return target === Opal.nil ? undefined : target\n}\n\n/**\n * Returns the converted alt text for this inline image.\n *\n * @returns {string} - the String value of the alt attribute.\n * @memberof Inline\n */\nInline.prototype.getAlt = function () {\n  return this.$alt()\n}\n\n// List API\n\n/**\n * Methods for managing AsciiDoc lists (ordered, unordered and description lists).\n * @namespace\n * @extends AbstractBlock\n */\nvar List = Opal.Asciidoctor.List\n\n/**\n * Checks if the {@link List} contains any child {@link ListItem}.\n *\n * @memberof List\n * @returns {boolean} - whether the {@link List} has child {@link ListItem}.\n */\nList.prototype.hasItems = function () {\n  return this['$items?']()\n}\n\n/**\n * Get the Array of {@link ListItem} nodes for this {@link List}.\n *\n * @returns {Array<ListItem>} - an Array of {@link ListItem} nodes.\n * @memberof List\n */\nList.prototype.getItems = function () {\n  return this.blocks\n}\n\n// ListItem API\n\n/**\n * Methods for managing items for AsciiDoc olists, ulist, and dlists.\n *\n * In a description list (dlist), each item is a tuple that consists of a 2-item Array of ListItem terms and a ListItem description (i.e., [[term, term, ...], desc].\n * If a description is not set, then the second entry in the tuple is nil.\n * @namespace\n * @extends AbstractBlock\n */\nvar ListItem = Opal.Asciidoctor.ListItem\n\n/**\n * Get the converted String text of this {@link ListItem} node.\n *\n * @returns {string} - the converted String text for this {@link ListItem} node.\n * @memberof ListItem\n */\nListItem.prototype.getText = function () {\n  return this.$text()\n}\n\n/**\n * Set the String source text of this {@link ListItem} node.\n *\n * @returns {string} - the new String text assigned to this {@link ListItem}\n * @memberof ListItem\n */\nListItem.prototype.setText = function (text) {\n  return this['$text='](text)\n}\n\n/**\n * A convenience method that checks whether the text of this {@link ListItem} is not blank (i.e. not undefined or empty string).\n *\n * @returns {boolean} - whether the text is not blank\n * @memberof ListItem\n */\nListItem.prototype.hasText = function () {\n  return this['$text?']()\n}\n\n/**\n * Get the {string} used to mark this {@link ListItem}.\n *\n * @returns {string}\n * @memberof ListItem\n */\nListItem.prototype.getMarker = function () {\n  return this.marker\n}\n\n/**\n * Set the {string} used to mark this {@link ListItem}.\n *\n * @param {string} marker - the {string} used to mark this {@link ListItem}\n * @memberof ListItem\n */\nListItem.prototype.setMarker = function (marker) {\n  this.marker = marker\n}\n\n/**\n * Get the {@link List} to which this {@link ListItem} is attached.\n *\n * @returns {List} - the {@link List} object to which this {@link ListItem} is attached,\n * or undefined if this node has no parent.\n * @memberof ListItem\n */\nListItem.prototype.getList = function () {\n  return this.$list()\n}\n\n/**\n * @see {@link ListItem#getList}\n * @memberof ListItem\n */\nListItem.prototype.getParent = ListItem.prototype.getList\n\n// Reader API\n\n/** @namespace */\nvar Reader = Opal.Asciidoctor.Reader\n\n/**\n * Push source onto the front of the reader and switch the context based on the file, document-relative path and line information given.\n *\n * This method is typically used in an IncludeProcessor to add source read from the target specified.\n *\n * @param {string} data\n * @param {string|undefined} file\n * @param {string|undefined} path\n * @param {number} lineno - The line number\n * @param {Object} attributes - a JSON of attributes\n * @returns {Reader} - this {Reader} object.\n * @memberof Reader\n */\nReader.prototype.pushInclude = function (data, file, path, lineno, attributes) {\n  return this.$push_include(data, file, path, lineno, toHash(attributes))\n}\n\n/**\n * Get the current location of the reader's cursor, which encapsulates the file, dir, path, and lineno of the file being read.\n *\n * @returns {Cursor}\n * @memberof Reader\n */\nReader.prototype.getCursor = function () {\n  return this.$cursor()\n}\n\n/**\n * Get the remaining unprocessed lines, without consuming them, as an {Array} of {string}.\n *\n * Lines will not be consumed from the Reader (ie. you will be able to read these lines again).\n *\n * @returns {Array<string>} - the remaining unprocessed lines as an {Array} of {string}.\n * @memberof Reader\n */\nReader.prototype.getLines = function () {\n  return this.$lines()\n}\n\n/**\n * Get the remaining unprocessed lines, without consuming them, as a {string}.\n *\n * Lines will not be consumed from the Reader (ie. you will be able to read these lines again).\n *\n * @returns {string} - the remaining unprocessed lines as a {string} (joined by linefeed characters).\n * @memberof Reader\n */\nReader.prototype.getString = function () {\n  return this.$string()\n}\n\n/**\n * Check whether there are any lines left to read.\n * If a previous call to this method resulted in a value of false, immediately returned the cached value.\n * Otherwise, delegate to peekLine to determine if there is a next line available.\n *\n * @returns {boolean} - true if there are more lines, false if there are not.\n * @memberof Reader\n */\nReader.prototype.hasMoreLines = function () {\n  return this['$has_more_lines?']()\n}\n\n/**\n * Check whether this reader is empty (contains no lines).\n *\n * @returns {boolean} - true if there are no more lines to peek, otherwise false.\n * @memberof Reader\n */\nReader.prototype.isEmpty = function () {\n  return this['$empty?']()\n}\n\n/**\n * Peek at the next line.\n * Processes the line if not already marked as processed, but does not consume it (ie. you will be able to read this line again).\n *\n * This method will probe the reader for more lines.\n * If there is a next line that has not previously been visited, the line is passed to the Reader#processLine method to be initialized.\n * This call gives sub-classes the opportunity to do preprocessing.\n * If the return value of the Reader#processLine is undefined, the data is assumed to be changed and Reader#peekLine is invoked again to perform further processing.\n *\n * If hasMoreLines is called immediately before peekLine, the direct flag is implicitly true (since the line is flagged as visited).\n *\n * @param {boolean} direct - A {boolean} flag to bypasses the check for more lines and immediately returns the first element of the internal lines {Array}. (default: false)\n * @returns {string} - the next line as a {string} if there are lines remaining.\n * @memberof Reader\n */\nReader.prototype.peekLine = function (direct) {\n  direct = direct || false\n  var line = this.$peek_line(direct)\n  return line === Opal.nil ? undefined : line\n}\n\n/**\n * Consume, preprocess, and return the next line.\n *\n * Line will be consumed from the Reader (ie. you won't be able to read this line again).\n *\n * @returns {string} - the next line as a {string} if data is present.\n * @memberof Reader\n */\nReader.prototype.readLine = function () {\n  var line = this.$read_line()\n  return line === Opal.nil ? undefined : line\n}\n\n/**\n * Consume, preprocess, and return the remaining lines.\n *\n * This method calls Reader#readLine repeatedly until all lines are consumed and returns the lines as an {Array} of {string}.\n * This method differs from Reader#getLines in that it processes each line in turn, hence triggering any preprocessors implemented in sub-classes.\n *\n * Lines will be consumed from the Reader (ie. you won't be able to read these lines again).\n *\n * @returns {Array<string>} - the lines read as an {Array} of {string}.\n * @memberof Reader\n */\nReader.prototype.readLines = function () {\n  return this.$read_lines()\n}\n\n/**\n * Consume, preprocess, and return the remaining lines joined as a {string}.\n *\n * Delegates to Reader#readLines, then joins the result.\n *\n * Lines will be consumed from the Reader (ie. you won't be able to read these lines again).\n *\n * @returns {string} - the lines read joined as a {string}\n * @memberof Reader\n */\nReader.prototype.read = function () {\n  return this.$read()\n}\n\n/**\n * Advance to the next line by discarding the line at the front of the stack.\n *\n * @returns {boolean} - a Boolean indicating whether there was a line to discard.\n * @memberof Reader\n */\nReader.prototype.advance = function () {\n  return this.$advance()\n}\n\n// Cursor API\n\n/** @namespace */\nvar Cursor = Opal.Asciidoctor.Reader.Cursor\n\n/**\n * Get the file associated to the cursor.\n * @returns {string|undefined}\n * @memberof Cursor\n */\nCursor.prototype.getFile = function () {\n  var file = this.file\n  return file === Opal.nil ? undefined : file\n}\n\n/**\n * Get the directory associated to the cursor.\n * @returns {string|undefined} - the directory associated to the cursor\n * @memberof Cursor\n */\nCursor.prototype.getDirectory = function () {\n  var dir = this.dir\n  return dir === Opal.nil ? undefined : dir\n}\n\n/**\n * Get the path associated to the cursor.\n * @returns {string|undefined} - the path associated to the cursor (or '<stdin>')\n * @memberof Cursor\n */\nCursor.prototype.getPath = function () {\n  var path = this.path\n  return path === Opal.nil ? undefined : path\n}\n\n/**\n * Get the line number of the cursor.\n * @returns {number|undefined} - the line number of the cursor\n * @memberof Cursor\n */\nCursor.prototype.getLineNumber = function () {\n  return this.lineno\n}\n\n// Logger API (available in Asciidoctor 1.5.7+)\n\nfunction initializeLoggerFormatterClass (className, functions) {\n  var superclass = Opal.const_get_qualified(Opal.Logger, 'Formatter')\n  return initializeClass(superclass, className, functions, {}, {\n    call: function (args) {\n      for (var i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      return args\n    }\n  })\n}\n\nfunction initializeLoggerClass (className, functions) {\n  var superClass = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger')\n  return initializeClass(superClass, className, functions, {}, {\n    add: function (args) {\n      if (args.length >= 2 && typeof args[2] === 'object' && '$$smap' in args[2]) {\n        var message = args[2]\n        var messageObject = fromHash(message)\n        messageObject.getText = function () {\n          return this.text\n        }\n        messageObject.getSourceLocation = function () {\n          return this.source_location\n        }\n        messageObject.$inspect = function () {\n          var sourceLocation = this.getSourceLocation()\n          if (sourceLocation) {\n            return sourceLocation.getPath() + ': line ' + sourceLocation.getLineNumber() + ': ' + this.getText()\n          } else {\n            return this.getText()\n          }\n        }\n        args[2] = messageObject\n      }\n      if (args.length >= 1) {\n        args[1] = args[1] === Opal.nil ? undefined : args[1]\n      }\n      return args\n    }\n  })\n}\n\n/**\n * @namespace\n */\nvar LoggerManager = Opal.const_get_qualified(Opal.Asciidoctor, 'LoggerManager', true)\n\n// Alias\nOpal.Asciidoctor.LoggerManager = LoggerManager\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.getLogger = function () {\n  return this.$logger()\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.setLogger = function (logger) {\n  this['$logger='](logger)\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.newLogger = function (name, functions) {\n  return initializeLoggerClass(name, functions).$new()\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.newFormatter = function (name, functions) {\n  return initializeLoggerFormatterClass(name, functions).$new()\n}\n\n/**\n * @namespace\n */\nvar LoggerSeverity = Opal.const_get_qualified(Opal.Logger, 'Severity', true)\n\n// Alias\nOpal.Asciidoctor.LoggerSeverity = LoggerSeverity\n\n/**\n * @memberof LoggerSeverity\n */\nLoggerSeverity.get = function (severity) {\n  return LoggerSeverity.$constants()[severity]\n}\n\n/**\n * @namespace\n */\nvar LoggerFormatter = Opal.const_get_qualified(Opal.Logger, 'Formatter', true)\n\n// Alias\nOpal.Asciidoctor.LoggerFormatter = LoggerFormatter\n\n/**\n * @memberof LoggerFormatter\n */\nLoggerFormatter.prototype.call = function (severity, time, programName, message) {\n  return this.$call(LoggerSeverity.get(severity), time, programName, message)\n}\n\n/**\n * @namespace\n */\nvar MemoryLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'MemoryLogger', true)\n\n// Alias\nOpal.Asciidoctor.MemoryLogger = MemoryLogger\n\n/**\n * Create a new MemoryLogger.\n * @returns {MemoryLogger} - a MemoryLogger\n * @memberof MemoryLogger\n */\nMemoryLogger.create = function () {\n  return this.$new()\n}\n\n/**\n * @returns {Array<Object>} - a list of messages\n * @memberof MemoryLogger\n */\nMemoryLogger.prototype.getMessages = function () {\n  var messages = this.messages\n  var result = []\n  for (var i = 0; i < messages.length; i++) {\n    var message = messages[i]\n    var messageObject = fromHash(message)\n    if (typeof messageObject.message === 'string') {\n      messageObject.getText = function () {\n        return this.message\n      }\n    } else {\n      // also convert the message attribute\n      messageObject.message = fromHash(messageObject.message)\n      messageObject.getText = function () {\n        return this.message.text\n      }\n    }\n    messageObject.getSeverity = function () {\n      return this.severity.toString()\n    }\n    messageObject.getSourceLocation = function () {\n      return this.message.source_location\n    }\n    result.push(messageObject)\n  }\n  return result\n}\n\nvar Logging = Opal.const_get_qualified(Opal.Asciidoctor, 'Logging', true)\n\nOpal.Asciidoctor.Logging = Logging\n\nLogging.getLogger = function () {\n  return LoggerManager.$logger()\n}\n\nLogging.createLogMessage = function (text, context) {\n  return Logging.prototype.$message_with_context(text, toHash(context))\n}\n\n// alias\n\n/**\n * @memberof Reader\n */\nReader.prototype.getLogger = Logging.getLogger\n/**\n * @memberof Reader\n */\nReader.prototype.createLogMessage = Logging.createLogMessage\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getLogger = Logging.getLogger\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.createLogMessage = Logging.createLogMessage\n\n/**\n * @namespace\n */\nvar Logger = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger', true)\n\n// Alias\nOpal.Asciidoctor.Logger = Logger\n\n/**\n * @returns {number|undefined} - the maximum severity\n * @memberof Logger\n */\nLogger.prototype.getMaxSeverity = function () {\n  var result = this.max_severity\n  return result === Opal.nil ? undefined : result\n}\n/**\n * @returns {LoggerFormatter} - the formatter\n * @memberof Logger\n */\nLogger.prototype.getFormatter = function () {\n  return this.formatter\n}\n/**\n * @param {LoggerFormatter} formatter - the formatter\n * @memberof Logger\n */\nLogger.prototype.setFormatter = function (formatter) {\n  this.formatter = formatter\n}\n/**\n * @returns {number} - the logging severity threshold\n * @memberof Logger\n */\nLogger.prototype.getLevel = function () {\n  return this.level\n}\n/**\n * @param {number} level - the logging severity threshold\n * @memberof Logger\n */\nLogger.prototype.setLevel = function (level) {\n  this.level = level\n}\n/**\n * @returns {string} - the program name\n * @memberof Logger\n */\nLogger.prototype.getProgramName = function () {\n  return this.progname\n}\n/**\n * @param {string} programName - the program name\n * @memberof Logger\n */\nLogger.prototype.setProgramName = function (programName) {\n  this.progname = programName\n}\n\nvar RubyLogger = Opal.const_get_qualified('::', 'Logger')\n\nvar log = function (logger, level, message) {\n  logger['$' + level](message)\n}\nRubyLogger.prototype.add = function (severity, message, programName) {\n  var severityValue = typeof severity === 'string' ? LoggerSeverity[severity.toUpperCase()] : severity\n  this.$add(severityValue, message, programName)\n}\nRubyLogger.prototype.log = RubyLogger.prototype.add\nRubyLogger.prototype.debug = function (message) {\n  log(this, 'debug', message)\n}\nRubyLogger.prototype.info = function (message) {\n  log(this, 'info', message)\n}\nRubyLogger.prototype.warn = function (message) {\n  log(this, 'warn', message)\n}\nRubyLogger.prototype.error = function (message) {\n  log(this, 'error', message)\n}\nRubyLogger.prototype.fatal = function (message) {\n  log(this, 'fatal', message)\n}\nRubyLogger.prototype.isDebugEnabled = function () {\n  return this['$debug?']()\n}\nRubyLogger.prototype.isInfoEnabled = function () {\n  return this['$info?']()\n}\nRubyLogger.prototype.isWarnEnabled = function () {\n  return this['$warn?']()\n}\nRubyLogger.prototype.isErrorEnabled = function () {\n  return this['$error?']()\n}\nRubyLogger.prototype.isFatalEnabled = function () {\n  return this['$fatal?']()\n}\n\n/**\n * @namespace\n */\nvar NullLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'NullLogger', true)\n\n// Alias\nOpal.Asciidoctor.NullLogger = NullLogger\n\n/**\n * Create a new NullLogger.\n * @returns {NullLogger} - a NullLogger\n * @memberof NullLogger\n */\nNullLogger.create = function () {\n  return this.$new()\n}\n\n/**\n * @returns {number|undefined} - the maximum severity\n * @memberof NullLogger\n */\nNullLogger.prototype.getMaxSeverity = function () {\n  return this.max_severity\n}\n\n// Alias\nOpal.Asciidoctor.StopIteration = Opal.StopIteration\n\n/**\n * @namespace\n */\nvar Timings = Opal.const_get_qualified(Opal.Asciidoctor, 'Timings', true)\n\n// Alias\nOpal.Asciidoctor.Timings = Timings\n\n/**\n * Create a new Timings.\n * @returns {Timings} - a Timings\n * @memberof Timings\n */\nTimings.create = function () {\n  return this.$new()\n}\n\n/**\n * Print a report to the specified output.\n * The report will include:\n * - the time to read and parse source\n * - the time to convert document\n * - the total time (read, parse and convert)\n * @param {RubyLogger|console|Object} [to] - an optional output (by default stdout)\n * @param {string} [subject] - an optional subject (usually the file name)\n * @memberof Timings\n */\nTimings.prototype.printReport = function (to, subject) {\n  var outputFunction\n  if (to) {\n    if (typeof to.$add === 'function') {\n      outputFunction = function (message) {\n        to.$add(1, message)\n      }\n    } else if (typeof to.log === 'function') {\n      outputFunction = to.log\n    } else if (typeof to.write === 'function') {\n      outputFunction = function (message) {\n        to.write(message, 'utf-8')\n      }\n    } else {\n      throw new Error('The output should be a Stream (with a write function), an object with a log function or a Ruby Logger (with a add function)')\n    }\n  } else {\n    outputFunction = function (message) {\n      Opal.gvars.stdout.$write(message)\n    }\n  }\n  if (subject) {\n    outputFunction('Input file: ' + subject)\n  }\n  outputFunction(' Time to read and parse source: ' + this.$read_parse().toFixed(2))\n  outputFunction(' Time to convert document: ' + this.$convert().toFixed(2))\n  outputFunction(' Total time (read, parse and convert): ' + this.$read_parse_convert().toFixed(2))\n}\n\n/**\n * @namespace\n * @description\n * This API is experimental and subject to change.\n *\n * A pluggable adapter for integrating a syntax (aka code) highlighter into AsciiDoc processing.\n *\n * There are two types of syntax highlighter adapters. The first performs syntax highlighting during the convert phase.\n * This adapter type must define a \"handlesHighlighting\" method that returns true.\n * The companion \"highlight\" method will then be called to handle the \"specialcharacters\" substitution for source blocks.\n *\n * The second assumes syntax highlighting is performed on the client (e.g., when the HTML document is loaded).\n * This adapter type must define a \"hasDocinfo\" method that returns true.\n * The companion \"docinfo\" method will then be called to insert markup into the output document.\n * The docinfo functionality is available to both adapter types.\n *\n * Asciidoctor.js provides several a built-in adapter for highlight.js.\n * Additional adapters can be registered using SyntaxHighlighter.register.\n */\nvar SyntaxHighlighter = Opal.const_get_qualified(Opal.Asciidoctor, 'SyntaxHighlighter', true)\n\n// Alias\nOpal.Asciidoctor.SyntaxHighlighter = SyntaxHighlighter\n\n/**\n * Associates the syntax highlighter class or object with the specified names.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string|Array} names - A {string} name or an {Array} of {string} names\n * @param functions - A list of functions representing a {SyntaxHighlighter} or a {SyntaxHighlighter} class to instantiate\n * @memberof SyntaxHighlighter\n */\nSyntaxHighlighter.register = function (names, functions) {\n  var name = typeof names === 'string' ? names : names[0]\n  if (typeof functions === 'function') {\n    var classObject = functions\n    var prototype = classObject.prototype\n    var properties = Object.getOwnPropertyNames(prototype)\n    functions = {}\n    for (var propertyIdx in properties) {\n      var propertyName = properties[propertyIdx]\n      functions[propertyName] = prototype[propertyName]\n    }\n  }\n  var scope = initializeClass(SyntaxHighlighterBase, name, functions, {}, {\n    format: function (args) {\n      if (args.length >= 2 && typeof args[2] === 'object' && '$$smap' in args[2]) {\n        args[2] = fromHash(args[2])\n      }\n      if (args.length >= 1) {\n        args[1] = args[1] === Opal.nil ? undefined : args[1]\n      }\n      return args\n    },\n    highlight: function (args) {\n      if (args.length >= 3 && typeof args[3] === 'object' && '$$smap' in args[3]) {\n        var opts = args[3]\n        opts = fromHash(opts)\n        for (var key in opts) {\n          var value = opts[key]\n          if (key === 'callouts') {\n            var callouts = fromHashKeys(value)\n            for (var idx in callouts) {\n              var callout = callouts[idx]\n              for (var i = 0; i < callout.length; i++) {\n                var items = callout[i]\n                for (var j = 0; j < items.length; j++) {\n                  items[j] = items[j] === Opal.nil ? undefined : items[j]\n                }\n              }\n            }\n            opts[key] = callouts\n          } else {\n            opts[key] = value === Opal.nil ? undefined : value\n          }\n        }\n        args[3] = opts\n      }\n      if (args.length >= 2) {\n        args[2] = args[2] === Opal.nil ? undefined : args[2]\n      }\n      return args\n    }\n  })\n  for (var functionName in functions) {\n    if (Object.prototype.hasOwnProperty.call(functions, functionName)) {\n      (function (functionName) {\n        var userFunction = functions[functionName]\n        if (functionName === 'handlesHighlighting') {\n          Opal.def(scope, '$highlight?', function () {\n            return userFunction.call()\n          })\n        } else if (functionName === 'hasDocinfo') {\n          Opal.def(scope, '$docinfo?', function (location) {\n            return userFunction.apply(this, [location])\n          })\n        }\n      }(functionName))\n    }\n  }\n  Opal.def(scope, '$name', function () {\n    return name\n  })\n  SyntaxHighlighter.$register(scope, names)\n  return scope\n}\n\n/**\n * Retrieves the syntax highlighter class or object registered for the specified name.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string} name - The {string} name of the syntax highlighter to retrieve.\n * @returns {SyntaxHighlighter} - the {SyntaxHighlighter} registered for this name.\n * @memberof SyntaxHighlighter\n */\nSyntaxHighlighter.get = function (name) {\n  var result = SyntaxHighlighter.$for(name)\n  return result === Opal.nil ? undefined : result\n}\n\n/**\n * @deprecated Please use {SyntaxHighlighter#get} method as \"for\" is a reserved keyword.\n */\nSyntaxHighlighter.for = SyntaxHighlighter.get\n\n/**\n * @namespace\n */\nvar SyntaxHighlighterBase = Opal.const_get_qualified(SyntaxHighlighter, 'Base', true)\n\n// Alias\nOpal.Asciidoctor.SyntaxHighlighterBase = SyntaxHighlighterBase\n\n/**\n * Statically register the current class in the registry for the specified names.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string|Array<string>} names - A {string} name or an {Array} of {string} names\n * @memberof SyntaxHighlighterBase\n */\nSyntaxHighlighterBase.prototype.registerFor = function (names) {\n  SyntaxHighlighter.$register(this, names)\n}\n\n// Table API\n\n/**\n * Methods for managing AsciiDoc tables.\n * @namespace\n * @extends AbstractBlock\n */\nvar Table = Opal.Asciidoctor.Table\n\n/**\n * Create a new Table element.\n * @param {AbstractBlock} parent\n * @param {Object|undefined} attributes\n * @returns {Table} - a new {Table} object\n */\nTable.create = function (parent, attributes) {\n  return this.$new(parent, toHash(attributes))\n}\n\n/**\n * Get the caption of the table.\n * @returns {string}\n * @memberof Table\n */\nTable.prototype.getCaption = function () {\n  return this.caption\n}\n\n/**\n * Get the rows of this table.\n * @returns {Table.Rows} - an {Table.Rows} object with the members \"head\", \"body\" and \"foot\"\n * @memberof Table\n */\nTable.prototype.getRows = function () {\n  return this.rows\n}\n\n/**\n * Get the columns of this table.\n * @returns {Array<Column>}\n * @memberof Table\n */\nTable.prototype.getColumns = function () {\n  return this.columns\n}\n\n/**\n * Get the head rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getHeadRows = function () {\n  return this.rows.head\n}\n\n/**\n * Check if the table has a head rows.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasHeadRows = function () {\n  return this.rows !== Opal.nil && this.rows.head.length > 0\n}\n\n/**\n * Get the body rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getBodyRows = function () {\n  return this.rows.body\n}\n\n/**\n * Check if the table has a body rows.\n * @returns {boolean}\n */\nTable.prototype.hasBodyRows = function () {\n  return this.rows !== Opal.nil && this.rows.body.length > 0\n}\n\n/**\n * Get the foot rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getFootRows = function () {\n  return this.rows.foot\n}\n\n/**\n * Check if the table has a foot rows.\n * @returns {boolean}\n */\nTable.prototype.hasFootRows = function () {\n  return this.rows !== Opal.nil && this.rows.foot.length > 0\n}\n\n/**\n * Check if the table has a header option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasHeaderOption = function () {\n  return this.has_header_option\n}\n\n/**\n * Check if the table has the footer option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasFooterOption = function () {\n  var footerOption = this.getAttributes()['footer-option']\n  return footerOption === ''\n}\n\n/**\n * Check if the table has the autowidth option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasAutowidthOption = function () {\n  var autowidthOption = this.getAttributes()['autowidth-option']\n  return autowidthOption === ''\n}\n\n/**\n * Get the number of rows in the table.\n * Please note that the header and footer rows are also counted.\n * @returns {number|undefined}\n * @memberof Table\n */\nTable.prototype.getRowCount = function () {\n  return this.getAttribute('rowcount')\n}\n\n/**\n * Set the number of rows in the table.\n * Please note that the header and footer rows are also counted.\n * @param {number} value - the value\n * @memberof Table\n */\nTable.prototype.setRowCount = function (value) {\n  this.setAttribute('rowcount', value)\n}\n\n/**\n * Get the number of columns in the table.\n * @returns {number|undefined}\n * @memberof Table\n */\nTable.prototype.getColumnCount = function () {\n  return this.getAttribute('colcount')\n}\n\n/**\n * Set the number of columns in the table.\n * @param {number} value - the value\n * @memberof Table\n */\nTable.prototype.setColumnCount = function (value) {\n  this.setAttribute('colcount', value)\n}\n\n// Rows\n\n/**\n * @namespace\n */\nvar Rows = Opal.Asciidoctor.Table.Rows\n\n/**\n * Create a new Rows element.\n * @param {array<array<Cell>>} head\n * @param {array<array<Cell>>} foot\n * @param {array<array<Cell>>} body\n * @returns Rows\n */\nRows.create = function (head, foot, body) {\n  return this.$new(head, foot, body)\n}\n\n/**\n * Get head rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getHead = function () {\n  return this.head\n}\n\n/**\n * Get foot rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getFoot = function () {\n  return this.foot\n}\n\n/**\n * Get body rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getBody = function () {\n  return this.body\n}\n\n/**\n * Retrieve the rows grouped by section as a nested Array.\n *\n * Creates a 2-dimensional array of two element entries.\n * The first element is the section name as a string.\n * The second element is the Array of rows in that section.\n * The entries are in document order (head, foot, body).\n * @returns {[[string, array<array<Cell>>], [string, array<array<Cell>>], [string, array<array<Cell>>]]}\n */\nRows.prototype.bySection = function () {\n  return [['head', this.head], ['body', this.body], ['foot', this.foot]]\n}\n\n// Table Column\n\n/**\n * Methods to manage the columns of an AsciiDoc table.\n * In particular, it keeps track of the column specs.\n * @namespace\n * @extends AbstractNode\n */\nvar Column = Opal.Asciidoctor.Table.Column\n\n/**\n * Create a new Column element.\n * @param {Table} table\n * @param {number} index\n * @param {Object|undefined} attributes\n * @returns Column\n */\nColumn.create = function (table, index, attributes) {\n  return this.$new(table, index, toHash(attributes))\n}\n\n/**\n * Get the column number of this cell.\n * @returns {number|undefined}\n * @memberof Column\n */\nColumn.prototype.getColumnNumber = function () {\n  return this.getAttribute('colnumber')\n}\n\n/**\n * Get the width of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getWidth = function () {\n  return this.getAttribute('width')\n}\n\n/**\n * Get the horizontal align of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getHorizontalAlign = function () {\n  return this.getAttribute('halign')\n}\n\n/**\n * Get the vertical align of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getVerticalAlign = function () {\n  return this.getAttribute('valign')\n}\n\n/**\n * Get the style of this cell.\n * @returns {string}\n * @memberof Column\n */\nColumn.prototype.getStyle = function () {\n  var style = this.style\n  return style === Opal.nil ? undefined : style\n}\n\n// Table Cell\n\n/**\n * Methods for managing the cells in an AsciiDoc table.\n * @namespace\n * @extends AbstractBlock\n */\nvar Cell = Opal.Asciidoctor.Table.Cell\n\n/**\n * Create a new Cell element\n * @param {Column} column\n * @param {string} cellText\n * @param {Object|undefined} attributes\n * @param {Object|undefined} opts\n * @returns {Cell}\n */\nCell.create = function (column, cellText, attributes, opts) {\n  return this.$new(column, cellText, toHash(attributes), toHash(opts))\n}\n\n/**\n * Get the column span of this {@link Cell} node.\n * @returns {number} - An Integer of the number of columns this cell will span (default: undefined)\n * @memberof Cell\n */\nCell.prototype.getColumnSpan = function () {\n  var colspan = this.colspan\n  return colspan === Opal.nil ? undefined : colspan\n}\n\n/**\n * Set the column span of this {@link Cell} node.\n * @param {number} value\n * @returns {number} - The new colspan value\n * @memberof Cell\n */\nCell.prototype.setColumnSpan = function (value) {\n  return this['$colspan='](value)\n}\n\n/**\n * Get the row span of this {@link Cell} node\n * @returns {number|undefined} - An Integer of the number of rows this cell will span (default: undefined)\n * @memberof Cell\n */\nCell.prototype.getRowSpan = function () {\n  var rowspan = this.rowspan\n  return rowspan === Opal.nil ? undefined : rowspan\n}\n\n/**\n * Set the row span of this {@link Cell} node\n * @param {number} value\n * @returns {number} - The new rowspan value\n * @memberof Cell\n */\nCell.prototype.setRowSpan = function (value) {\n  return this['$rowspan='](value)\n}\n\n/**\n * Get the content of the cell.\n * This method should not be used for cells in the head row or that have the literal style.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getContent = function () {\n  return this.$content()\n}\n\n/**\n * Get the text of the cell.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getText = function () {\n  return this.$text()\n}\n\n/**\n * Get the source of the cell.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * Get the lines of the cell.\n * @returns {Array<string>}\n * @memberof Cell\n */\nCell.prototype.getLines = function () {\n  return this.$lines()\n}\n\n/**\n * Get the line number of the cell.\n * @returns {number|undefined}\n * @memberof Cell\n */\nCell.prototype.getLineNumber = function () {\n  var lineno = this.$lineno()\n  return lineno === Opal.nil ? undefined : lineno\n}\n\n/**\n * Get the source file of the cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getFile = function () {\n  var file = this.$file()\n  return file === Opal.nil ? undefined : file\n}\n\n/**\n * Get the style of the cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getStyle = function () {\n  var style = this.$style()\n  return style === Opal.nil ? undefined : style\n}\n\n/**\n * Get the column of this cell.\n * @returns {Column|undefined}\n * @memberof Cell\n */\nCell.prototype.getColumn = function () {\n  var column = this.$column()\n  return column === Opal.nil ? undefined : column\n}\n\n/**\n * Get the width of this cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getWidth = function () {\n  return this.getAttribute('width')\n}\n\n/**\n * Get the column width in percentage of this cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getColumnPercentageWidth = function () {\n  return this.getAttribute('colpcwidth')\n}\n\n/**\n * Get the nested {Document} of this cell when style is 'asciidoc'.\n * @returns {Document|undefined} - the nested {Document}\n * @memberof Cell\n */\nCell.prototype.getInnerDocument = function () {\n  var innerDocument = this.inner_document\n  return innerDocument === Opal.nil ? undefined : innerDocument\n}\n\n// Templates\n\n/**\n * @description\n * This API is experimental and subject to change.\n *\n * Please note that this API is currently only available in a Node environment.\n * We recommend to use a custom converter if you are running in the browser.\n *\n * @namespace\n * @module Converter/TemplateConverter\n */\nvar TemplateConverter = Opal.Asciidoctor.Converter.TemplateConverter\n\nif (TemplateConverter) {\n  // Alias\n  Opal.Asciidoctor.TemplateConverter = TemplateConverter\n\n  /**\n   * Create a new TemplateConverter.\n   * @param {string} backend - the backend name\n   * @param templateDirectories - a list of template directories\n   * @param {Object} opts - a JSON of options\n   * @param {string} opts.template_engine - the name of the template engine\n   * @param {Object} [opts.template_cache] - an optional template cache\n   * @param {Object} [opts.template_cache.scans] - a JSON of template objects keyed by template name keyed by path patterns\n   * @param {Object} [opts.template_cache.templates] - a JSON of template objects keyed by file paths\n   * @returns {TemplateConverter}\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.create = function (backend, templateDirectories, opts) {\n    if (opts && opts.template_cache) {\n      opts.template_cache = toHash(opts.template_cache)\n    }\n    this.$new(backend, templateDirectories, toHash(opts))\n  }\n\n  /**\n   * @returns {Object} - The global cache\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.getCache = function () {\n    var caches = fromHash(this.caches)\n    if (caches) {\n      if (caches.scans) {\n        caches.scans = fromHash(caches.scans)\n        for (var key in caches.scans) {\n          caches.scans[key] = fromHash(caches.scans[key])\n        }\n      }\n      if (caches.templates) {\n        caches.templates = fromHash(caches.templates)\n      }\n    }\n    return caches\n  }\n\n  /**\n   * Clear the global cache.\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.clearCache = function () {\n    this.$clear_caches()\n  }\n\n  /**\n   * Convert an {AbstractNode} to the backend format using the named template.\n   *\n   * Looks for a template that matches the value of the template name or,\n   * if the template name is not specified, the value of the {@see AbstractNode.getNodeName} function.\n   *\n   * @param {AbstractNode} node - the AbstractNode to convert\n   * @param {string} templateName - the {string} name of the template to use, or the node name of the node if a template name is not specified. (optional, default: undefined)\n   * @param {Object} opts - an optional JSON that is passed as local variables to the template. (optional, default: undefined)\n   * @returns {string} - The {string} result from rendering the template\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.convert = function (node, templateName, opts) {\n    return this.$convert(node, templateName, toHash(opts))\n  }\n\n  /**\n   * Checks whether there is a template registered with the specified name.\n   *\n   * @param {string} name - the {string} template name\n   * @returns {boolean} - a {boolean} that indicates whether a template is registered for the specified template name.\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.handles = function (name) {\n    return this['$handles?'](name)\n  }\n\n  /**\n   * Retrieves the templates that this converter manages.\n   *\n   * @returns {Object} - a JSON of template objects keyed by template name\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.getTemplates = function () {\n    return fromHash(this.$templates())\n  }\n\n  /**\n   * Registers a template with this converter.\n   *\n   * @param {string} name - the {string} template name\n   * @param {Object} template - the template object to register\n   * @returns {Object} - the template object\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.register = function (name, template) {\n    return this.$register(name, template)\n  }\n\n  /**\n   * @namespace\n   * @description\n   * This API is experimental and subject to change.\n   *\n   * Please note that this API is currently only available in a Node environment.\n   * We recommend to use a custom converter if you are running in the browser.\n   *\n   * A pluggable adapter for integrating a template engine into the built-in template converter.\n   */\n  var TemplateEngine = {}\n  TemplateEngine.registry = {}\n\n  // Alias\n  Opal.Asciidoctor.TemplateEngine = TemplateEngine\n\n  /**\n   * Register a template engine adapter for the given names.\n   * @param {string|Array} names - a {string} name or an {Array} of {string} names\n   * @param {Object} templateEngineAdapter - a template engine adapter instance\n   * @example\n   *  const fs = require('fs')\n   *  class DotTemplateEngineAdapter {\n   *    constructor () {\n   *      this.doT = require('dot')\n   *    }\n   *    compile (file, _) {\n   *      const templateFn = this.doT.template(fs.readFileSync(file, 'utf8'))\n   *      return {\n   *        render: templateFn\n   *      }\n   *    }\n   *  }\n   *  asciidoctor.TemplateEngine.register('dot, new DotTemplateEngineAdapter())\n   * @memberof TemplateEngine\n   */\n  TemplateEngine.register = function (names, templateEngineAdapter) {\n    if (typeof names === 'string') {\n      this.registry[names] = templateEngineAdapter\n    } else {\n      // array\n      for (var i = 0; i < names.length; i++) {\n        var name = names[i]\n        this.registry[name] = templateEngineAdapter\n      }\n    }\n  }\n}\n\n/* global Opal, fromHash, toHash, initializeClass */\n// Extensions API\n\n/**\n * @private\n */\nvar toBlock = function (block) {\n  // arity is a mandatory field\n  block.$$arity = block.length\n  return block\n}\n\nvar registerExtension = function (registry, type, processor, name) {\n  if (typeof processor === 'object' || processor.$$is_class) {\n    // processor is an instance or a class\n    return registry['$' + type](processor, name)\n  } else {\n    // processor is a function/lambda\n    return Opal.send(registry, type, name && [name], toBlock(processor))\n  }\n}\n\n/**\n * @namespace\n * @description\n * Extensions provide a way to participate in the parsing and converting\n * phases of the AsciiDoc processor or extend the AsciiDoc syntax.\n *\n * The various extensions participate in AsciiDoc processing as follows:\n *\n * 1. After the source lines are normalized, {{@link Extensions/Preprocessor}}s modify or replace\n *    the source lines before parsing begins. {{@link Extensions/IncludeProcessor}}s are used to\n *    process include directives for targets which they claim to handle.\n * 2. The Parser parses the block-level content into an abstract syntax tree.\n *    Custom blocks and block macros are processed by associated {{@link Extensions/BlockProcessor}}s\n *    and {{@link Extensions/BlockMacroProcessor}}s, respectively.\n * 3. {{@link Extensions/TreeProcessor}}s are run on the abstract syntax tree.\n * 4. Conversion of the document begins, at which point inline markup is processed\n *    and converted. Custom inline macros are processed by associated {InlineMacroProcessor}s.\n * 5. {{@link Extensions/Postprocessor}}s modify or replace the converted document.\n * 6. The output is written to the output stream.\n *\n * Extensions may be registered globally using the {Extensions.register} method\n * or added to a custom {Registry} instance and passed as an option to a single\n * Asciidoctor processor.\n *\n * @example\n * asciidoctor.Extensions.register(function () {\n *   this.block(function () {\n *     var self = this;\n *     self.named('shout');\n *     self.onContext('paragraph');\n *     self.process(function (parent, reader) {\n *       var lines = reader.getLines().map(function (l) { return l.toUpperCase(); });\n *       return self.createBlock(parent, 'paragraph', lines);\n *     });\n *   });\n * });\n */\nvar Extensions = Opal.const_get_qualified(Opal.Asciidoctor, 'Extensions')\n\n// Alias\nOpal.Asciidoctor.Extensions = Extensions\n\n/**\n * Create a new {@link Extensions/Registry}.\n * @param {string} name\n * @param {function} block\n * @memberof Extensions\n * @returns {Extensions/Registry} - returns a {@link Extensions/Registry}\n */\nExtensions.create = function (name, block) {\n  if (typeof name === 'function' && typeof block === 'undefined') {\n    return Opal.send(this, 'create', null, toBlock(name))\n  } else if (typeof block === 'function') {\n    return Opal.send(this, 'create', [name], toBlock(block))\n  } else {\n    return this.$create()\n  }\n}\n\n/**\n * @memberof Extensions\n */\nExtensions.register = function (name, block) {\n  if (typeof name === 'function' && typeof block === 'undefined') {\n    return Opal.send(this, 'register', null, toBlock(name))\n  } else {\n    return Opal.send(this, 'register', [name], toBlock(block))\n  }\n}\n\n/**\n * Get statically-registered extension groups.\n * @memberof Extensions\n */\nExtensions.getGroups = function () {\n  return fromHash(this.$groups())\n}\n\n/**\n * Unregister all statically-registered extension groups.\n * @memberof Extensions\n */\nExtensions.unregisterAll = function () {\n  this.$unregister_all()\n}\n\n/**\n * Unregister the specified statically-registered extension groups.\n *\n * NOTE Opal cannot delete an entry from a Hash that is indexed by symbol, so\n * we have to resort to using low-level operations in this method.\n *\n * @memberof Extensions\n */\nExtensions.unregister = function () {\n  var names = Array.prototype.concat.apply([], arguments)\n  var groups = this.$groups()\n  var groupNameIdx = {}\n  for (var i = 0, groupSymbolNames = groups.$$keys; i < groupSymbolNames.length; i++) {\n    var groupSymbolName = groupSymbolNames[i]\n    groupNameIdx[groupSymbolName.toString()] = groupSymbolName\n  }\n  for (var j = 0; j < names.length; j++) {\n    var groupStringName = names[j]\n    if (groupStringName in groupNameIdx) Opal.hash_delete(groups, groupNameIdx[groupStringName])\n  }\n}\n\n/**\n * @namespace\n * @module Extensions/Registry\n */\nvar Registry = Extensions.Registry\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.getGroups = Extensions.getGroups\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.unregisterAll = function () {\n  this.groups = Opal.hash()\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.unregister = Extensions.unregister\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.prefer = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  if (typeof processor === 'object' || processor.$$is_class) {\n    // processor is an instance or a class\n    return this.$prefer(name, processor)\n  } else {\n    // processor is a function/lambda\n    return Opal.send(this, 'prefer', name && [name], toBlock(processor))\n  }\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.block = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'block', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.inlineMacro = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'inline_macro', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.includeProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'include_processor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.blockMacro = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'block_macro', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.treeProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'tree_processor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.postprocessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'postprocessor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.preprocessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'preprocessor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.docinfoProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'docinfo_processor', processor, name)\n}\n\n/**\n * Checks whether any {{@link Extensions/Preprocessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/Preprocessor}} extensions are registered.\n */\nRegistry.prototype.hasPreprocessors = function () {\n  return this['$preprocessors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/TreeProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/TreeProcessor}} extensions are registered.\n */\nRegistry.prototype.hasTreeProcessors = function () {\n  return this['$tree_processors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/IncludeProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/IncludeProcessor}} extensions are registered.\n */\nRegistry.prototype.hasIncludeProcessors = function () {\n  return this['$include_processors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/Postprocessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/Postprocessor}} extensions are registered.\n */\nRegistry.prototype.hasPostprocessors = function () {\n  return this['$postprocessors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/DocinfoProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @param location - A {string} for selecting docinfo extensions at a given location (head or footer) (default: undefined)\n * @returns a {boolean} indicating whether any {{@link Extensions/DocinfoProcessor}} extensions are registered.\n */\nRegistry.prototype.hasDocinfoProcessors = function (location) {\n  return this['$docinfo_processors?'](location)\n}\n\n/**\n * Checks whether any {{@link Extensions/BlockProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/BlockProcessor}} extensions are registered.\n */\nRegistry.prototype.hasBlocks = function () {\n  return this['$blocks?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/BlockMacroProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/BlockMacroProcessor}} extensions are registered.\n */\nRegistry.prototype.hasBlockMacros = function () {\n  return this['$block_macros?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/InlineMacroProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/InlineMacroProcessor}} extensions are registered.\n */\nRegistry.prototype.hasInlineMacros = function () {\n  return this['$inline_macros?']()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/Preprocessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getPreprocessors = function () {\n  return this.$preprocessors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/TreeProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getTreeProcessors = function () {\n  return this.$tree_processors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/IncludeProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getIncludeProcessors = function () {\n  return this.$include_processors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/Postprocessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getPostprocessors = function () {\n  return this.$postprocessors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/DocinfoProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @param location - A {string} for selecting docinfo extensions at a given location (head or footer) (default: undefined)\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getDocinfoProcessors = function (location) {\n  return this.$docinfo_processors(location)\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/BlockProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getBlocks = function () {\n  return this.block_extensions.$values()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/BlockMacroProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getBlockMacros = function () {\n  return this.block_macro_extensions.$values()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/InlineMacroProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getInlineMacros = function () {\n  return this.$inline_macros()\n}\n\n/**\n * Get any {{@link Extensions/InlineMacroProcessor}} extensions are registered to handle the specified inline macro name.\n *\n * @param name - the {string} inline macro name\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/InlineMacroProcessor}} that matches the inline macro name or undefined if no match is found.\n */\nRegistry.prototype.getInlineMacroFor = function (name) {\n  var result = this['$registered_for_inline_macro?'](name)\n  return result === false ? undefined : result\n}\n\n/**\n * Get any {{@link Extensions/BlockProcessor}} extensions are registered to handle the specified block name appearing on the specified context.\n * @param name - the {string} block name\n * @param context - the context of the block: paragraph, open... (optional)\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/BlockProcessor}} that matches the block name and context or undefined if no match is found.\n */\nRegistry.prototype.getBlockFor = function (name, context) {\n  if (typeof context === 'undefined') {\n    var ext = this.$find_block_extension(name)\n    return ext === Opal.nil ? undefined : ext\n  }\n  var result = this['$registered_for_block?'](name, context)\n  return result === false ? undefined : result\n}\n\n/**\n * Get any {{@link Extensions/BlockMacroProcessor}} extensions are registered to handle the specified macro name.\n *\n * @param name - the {string} macro name\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/BlockMacroProcessor}} that matches the macro name or undefined if no match is found.\n */\nRegistry.prototype.getBlockMacroFor = function (name) {\n  var result = this['$registered_for_block_macro?'](name)\n  return result === false ? undefined : result\n}\n\n/**\n * @namespace\n * @module Extensions/Processor\n */\nvar Processor = Extensions.Processor\n\n/**\n * The extension will be added to the beginning of the list for that extension type. (default is append).\n * @memberof Extensions/Processor\n * @deprecated Please use the <code>prefer</pre> function on the {@link Extensions/Registry},\n * the {@link Extensions/IncludeProcessor},\n * the {@link Extensions/TreeProcessor},\n * the {@link Extensions/Postprocessor},\n * the {@link Extensions/Preprocessor}\n * or the {@link Extensions/DocinfoProcessor}\n */\nProcessor.prototype.prepend = function () {\n  this.$option('position', '>>')\n}\n\n/**\n * @memberof Extensions/Processor\n */\nProcessor.prototype.process = function (block) {\n  var handler = {\n    apply: function (target, thisArg, argumentsList) {\n      for (var i = 0; i < argumentsList.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof argumentsList[i] === 'object' && '$$smap' in argumentsList[i]) {\n          argumentsList[i] = fromHash(argumentsList[i])\n        }\n      }\n      return target.apply(thisArg, argumentsList)\n    }\n  }\n  var blockProxy = new Proxy(block, handler)\n  return Opal.send(this, 'process', null, toBlock(blockProxy))\n}\n\n/**\n * @param {string} name\n * @memberof Extensions/Processor\n */\nProcessor.prototype.named = function (name) {\n  return this.$named(name)\n}\n\n/**\n * Creates a block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} context\n * @param {string|Array<string>} source\n * @param {Object|undefined} attrs - A JSON of attributes\n * @param {Object|undefined} opts - A JSON of options\n * @return {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createBlock = function (parent, context, source, attrs, opts) {\n  return this.$create_block(parent, context, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a list block node and links it to the specified parent.\n *\n * @param parent - The parent Block (Block, Section, or Document) of this new list block.\n * @param {string} context - The list context (e.g., ulist, olist, colist, dlist)\n * @param {Object} attrs - An object of attributes to set on this list block\n * @returns {List}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createList = function (parent, context, attrs) {\n  return this.$create_list(parent, context, toHash(attrs))\n}\n\n/**\n * Creates a list item node and links it to the specified parent.\n *\n * @param {List} parent - The parent {List} of this new list item block.\n * @param {string} text - The text of the list item.\n * @returns {ListItem}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createListItem = function (parent, text) {\n  return this.$create_list_item(parent, text)\n}\n\n/**\n * Creates an image block node and links it to the specified parent.\n * @param {Block|Section|Document} parent - The parent Block of this new image block.\n * @param {Object} attrs - A JSON of attributes\n * @param {string} attrs.target - the target attribute to set the source of the image.\n * @param {string} attrs.alt - the alt attribute to specify an alternative text for the image.\n * @param {Object} opts - A JSON of options\n * @returns {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createImageBlock = function (parent, attrs, opts) {\n  return this.$create_image_block(parent, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a paragraph block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a paragraph {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createParagraph = function (parent, source, attrs, opts) {\n  return this.$create_paragraph(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an open block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - an open {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createOpenBlock = function (parent, source, attrs, opts) {\n  return this.$create_open_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an example block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - an example {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createExampleBlock = function (parent, source, attrs, opts) {\n  return this.$create_example_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a literal block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a literal {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createPassBlock = function (parent, source, attrs, opts) {\n  return this.$create_pass_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a listing block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a listing {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createListingBlock = function (parent, source, attrs, opts) {\n  return this.$create_listing_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a literal block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a literal {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createLiteralBlock = function (parent, source, attrs, opts) {\n  return this.$create_literal_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an inline anchor and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} text - The text\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Inline} - an {Inline} anchor\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createAnchor = function (parent, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_anchor(parent, text, toHash(opts))\n}\n\n/**\n * Creates an inline pass and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} text - The text\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Inline} - an {Inline} pass\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createInlinePass = function (parent, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_inline_pass(parent, text, toHash(opts))\n}\n\n/**\n * Creates an inline node and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block of this new inline node.\n * @param {string} context - The context name\n * @param {string} text - The text\n * @param {Object|undefined} opts - A JSON of options\n * @returns {Inline} - an {Inline} node\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createInline = function (parent, context, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_inline(parent, context, text, toHash(opts))\n}\n\n/**\n * Parses blocks in the content and attaches the block to the parent.\n * @param {AbstractBlock} parent - the parent block\n * @param {string|Array<string>} content - the content\n * @param {Object|undefined} attrs - an object of attributes\n * @returns {AbstractNode} - The parent node into which the blocks are parsed.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.parseContent = function (parent, content, attrs) {\n  return this.$parse_content(parent, content, attrs)\n}\n\n/**\n *  Parses the attrlist String into a JSON of attributes\n * @param {AbstractBlock} block - the current AbstractBlock or the parent AbstractBlock if there is no current block (used for applying subs)\n * @param {string} attrlist - the list of attributes as a String\n * @param {Object|undefined} opts - an optional JSON of options to control processing:\n * - positional_attributes: an Array of attribute names to map positional arguments to (optional, default: [])\n * - sub_attributes: enables attribute substitution on the attrlist argument (optional, default: false)\n *\n * @returns - a JSON of parsed attributes\n * @memberof Extensions/Processor\n */\nProcessor.prototype.parseAttributes = function (block, attrlist, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return fromHash(this.$parse_attributes(block, attrlist, toHash(opts)))\n}\n\n/**\n * @param {string|Array<string>} value - Name of a positional attribute or an Array of positional attribute names\n * @memberof Extensions/Processor\n */\nProcessor.prototype.positionalAttributes = function (value) {\n  return this.$positional_attrs(value)\n}\n\n/**\n * Specify how to resolve attributes.\n *\n * @param {string|Array<string>|Object|boolean} [value] - A specification to resolve attributes.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.resolveAttributes = function (value) {\n  if (typeof value === 'object' && !Array.isArray(value)) {\n    return this.$resolves_attributes(toHash(value))\n  }\n  if (arguments.length > 1) {\n    return this.$resolves_attributes(Array.prototype.slice.call(arguments))\n  }\n  if (typeof value === 'undefined') {\n    // Convert to nil otherwise an exception is thrown at:\n    // https://github.com/asciidoctor/asciidoctor/blob/0bcb4addc17b307f62975aad203fb556a1bcd8a5/lib/asciidoctor/extensions.rb#L583\n    //\n    // if args.size == 1 && !args[0]\n    //\n    // In the above Ruby code, args[0] is undefined and Opal will try to call the function \"!\" on an undefined object.\n    return this.$resolves_attributes(Opal.nil)\n  }\n  return this.$resolves_attributes(value)\n}\n\n/**\n * @deprecated Please use the <code>resolveAttributes</pre> function on the {@link Extensions/Processor}.\n * @memberof Extensions/Processor\n * @see {Processor#resolveAttributes}\n */\nProcessor.prototype.resolvesAttributes = Processor.prototype.resolveAttributes\n\n/**\n * Get the configuration JSON for this processor instance.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.getConfig = function () {\n  return fromHash(this.config)\n}\n\n/**\n * @memberof Extensions/Processor\n */\nProcessor.prototype.option = function (key, value) {\n  this.$option(key, value)\n}\n\n/**\n * @namespace\n * @module Extensions/BlockProcessor\n */\nvar BlockProcessor = Extensions.BlockProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @param {string} context - A context name\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.onContext = function (context) {\n  return this.$on_context(context)\n}\n\n/**\n * @param {...string} contexts - A list of context names\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.onContexts = function (contexts) {\n  return this.$on_contexts(Array.prototype.slice.call(arguments))\n}\n\n/**\n * @returns {string}\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.getName = function () {\n  var name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @namespace\n * @module Extensions/BlockMacroProcessor\n */\nvar BlockMacroProcessor = Extensions.BlockMacroProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @returns {string} - the block macro name\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.getName = function () {\n  var name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @namespace\n * @module Extensions/InlineMacroProcessor\n */\nvar InlineMacroProcessor = Extensions.InlineMacroProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @returns {string} - the inline macro name\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.getName = function () {\n  var name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.matchFormat = function (value) {\n  this.$match_format(value)\n}\n\n/**\n * @param {RegExp} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.match = function (value) {\n  this.$match(value)\n}\n\n/**\n * @namespace\n * @module Extensions/IncludeProcessor\n */\nvar IncludeProcessor = Extensions.IncludeProcessor\n\n/**\n * @memberof Extensions/IncludeProcessor\n */\nIncludeProcessor.prototype.handles = function (block) {\n  return Opal.send(this, 'handles?', null, toBlock(block))\n}\n\n/**\n * @memberof Extensions/IncludeProcessor\n */\nIncludeProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/TreeProcessor\n */\nvar TreeProcessor = Extensions.TreeProcessor\n\n/**\n * @memberof Extensions/TreeProcessor\n */\nTreeProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/Postprocessor\n */\nvar Postprocessor = Extensions.Postprocessor\n\n/**\n * @memberof Extensions/Postprocessor\n */\nPostprocessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/Preprocessor\n */\nvar Preprocessor = Extensions.Preprocessor\n\n/**\n * @memberof Extensions/Preprocessor\n */\nPreprocessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/DocinfoProcessor\n */\nvar DocinfoProcessor = Extensions.DocinfoProcessor\n\n/**\n * @memberof Extensions/DocinfoProcessor\n */\nDocinfoProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @param {string} value - The docinfo location (\"head\", \"header\" or \"footer\")\n * @memberof Extensions/DocinfoProcessor\n */\nDocinfoProcessor.prototype.atLocation = function (value) {\n  this.$at_location(value)\n}\n\nfunction initializeProcessorClass (superclassName, className, functions) {\n  var superClass = Opal.const_get_qualified(Extensions, superclassName)\n  return initializeClass(superClass, className, functions, {\n    'handles?': function () {\n      return true\n    }\n  })\n}\n\n// Postprocessor\n\n/**\n * Create a postprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createPostprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('Postprocessor', name, functions)\n}\n\n/**\n * Create and instantiate a postprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newPostprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createPostprocessor(name, functions).$new()\n}\n\n// Preprocessor\n\n/**\n * Create a preprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createPreprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('Preprocessor', name, functions)\n}\n\n/**\n * Create and instantiate a preprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newPreprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createPreprocessor(name, functions).$new()\n}\n\n// Tree Processor\n\n/**\n * Create a tree processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createTreeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('TreeProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a tree processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newTreeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createTreeProcessor(name, functions).$new()\n}\n\n// Include Processor\n\n/**\n * Create an include processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createIncludeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('IncludeProcessor', name, functions)\n}\n\n/**\n * Create and instantiate an include processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newIncludeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createIncludeProcessor(name, functions).$new()\n}\n\n// Docinfo Processor\n\n/**\n * Create a Docinfo processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createDocinfoProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('DocinfoProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a Docinfo processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newDocinfoProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createDocinfoProcessor(name, functions).$new()\n}\n\n// Block Processor\n\n/**\n * Create a block processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createBlockProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('BlockProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a block processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newBlockProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createBlockProcessor(name, functions).$new()\n}\n\n// Inline Macro Processor\n\n/**\n * Create an inline macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createInlineMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('InlineMacroProcessor', name, functions)\n}\n\n/**\n * Create and instantiate an inline macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newInlineMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createInlineMacroProcessor(name, functions).$new()\n}\n\n// Block Macro Processor\n\n/**\n * Create a block macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createBlockMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('BlockMacroProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a block macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newBlockMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createBlockMacroProcessor(name, functions).$new()\n}\n\n// Converter API\n\n/**\n * @namespace\n * @module Converter\n */\nvar Converter = Opal.const_get_qualified(Opal.Asciidoctor, 'Converter')\n\n// Alias\nOpal.Asciidoctor.Converter = Converter\n\n/**\n * Convert the specified node.\n *\n * @param {AbstractNode} node - the AbstractNode to convert\n * @param {string} transform - an optional String transform that hints at\n * which transformation should be applied to this node.\n * @param {Object} opts - a JSON of options that provide additional hints about how to convert the node (default: {})\n * @returns the {Object} result of the conversion, typically a {string}.\n * @memberof Converter\n */\nConverter.prototype.convert = function (node, transform, opts) {\n  return this.$convert(node, transform, toHash(opts))\n}\n\n/**\n * Create an instance of the converter bound to the specified backend.\n *\n * @param {string} backend - look for a converter bound to this keyword.\n * @param {Object} opts - a JSON of options to pass to the converter (default: {})\n * @returns {Converter} - a converter instance for converting nodes in an Asciidoctor AST.\n * @memberof Converter\n */\nConverter.create = function (backend, opts) {\n  return this.$create(backend, toHash(opts))\n}\n\n// Converter Factory API\n\n/**\n * @namespace\n * @module Converter/Factory\n */\nvar ConverterFactory = Opal.Asciidoctor.Converter.Factory\n\nvar ConverterBase = Opal.Asciidoctor.Converter.Base\n\n// Alias\nOpal.Asciidoctor.ConverterFactory = ConverterFactory\n\nvar ConverterBackendTraits = Opal.Asciidoctor.Converter.BackendTraits\n\n// Alias\nOpal.Asciidoctor.ConverterBackendTraits = ConverterBackendTraits\n\n/**\n * Register a custom converter in the global converter factory to handle conversion to the specified backends.\n * If the backend value is an asterisk, the converter is used to handle any backend that does not have an explicit converter.\n *\n * @param converter - The Converter instance to register\n * @param backends {Array} - A {string} {Array} of backend names that this converter should be registered to handle (optional, default: ['*'])\n * @return {*} - Returns nothing\n * @memberof Converter/Factory\n */\nConverterFactory.register = function (converter, backends) {\n  var object\n  var buildBackendTraitsFromObject = function (obj) {\n    return Object.assign({},\n      obj.basebackend ? { basebackend: obj.basebackend } : {},\n      obj.outfilesuffix ? { outfilesuffix: obj.outfilesuffix } : {},\n      obj.filetype ? { filetype: obj.filetype } : {},\n      obj.htmlsyntax ? { htmlsyntax: obj.htmlsyntax } : {},\n      obj.supports_templates ? { supports_templates: obj.supports_templates } : {}\n    )\n  }\n  var assignBackendTraitsToInstance = function (obj, instance) {\n    if (obj.backend_traits) {\n      instance.backend_traits = toHash(obj.backend_traits)\n    } else if (obj.backendTraits) {\n      instance.backend_traits = toHash(obj.backendTraits)\n    } else if (obj.basebackend || obj.outfilesuffix || obj.filetype || obj.htmlsyntax || obj.supports_templates) {\n      instance.backend_traits = toHash(buildBackendTraitsFromObject(obj))\n    }\n  }\n  var bridgeHandlesMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$handles?', 'handles', function () {\n      return true\n    })\n  }\n  var bridgeComposedMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$composed', 'composed')\n  }\n  var bridgeEqEqMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$==', '==', function (other) {\n      return instance === other\n    })\n  }\n  var bridgeSendMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$send', 'send', function (symbol) {\n      var args = Array.prototype.slice.call(arguments, 1)\n      var func = instance['$' + symbol]\n      if (func) {\n        return func.apply(instance, args)\n      }\n      throw new Error(`undefined method \\`${symbol}\\` for \\`${instance.toString()}\\``)\n    })\n  }\n  var bridgeMethodToInstance = function (obj, instance, methodName, functionName, defaultImplementation) {\n    if (typeof obj[methodName] === 'undefined') {\n      if (typeof obj[functionName] === 'function') {\n        instance[methodName] = obj[functionName]\n      } else if (defaultImplementation) {\n        instance[methodName] = defaultImplementation\n      }\n    }\n  }\n  var addRespondToMethod = function (instance) {\n    if (typeof instance['$respond_to?'] !== 'function') {\n      instance['$respond_to?'] = function (name) {\n        return typeof this[name] === 'function'\n      }\n    }\n  }\n  if (typeof converter === 'function') {\n    // Class\n    object = initializeClass(ConverterBase, converter.constructor.name, {\n      initialize: function (backend, opts) {\n        var self = this\n        var result = new converter(backend, opts) // eslint-disable-line\n        Object.assign(this, result)\n        assignBackendTraitsToInstance(result, self)\n        var propertyNames = Object.getOwnPropertyNames(converter.prototype)\n        for (var i = 0; i < propertyNames.length; i++) {\n          var propertyName = propertyNames[i]\n          if (propertyName !== 'constructor') {\n            self[propertyName] = result[propertyName]\n          }\n        }\n        if (typeof result.$convert === 'undefined' && typeof result.convert === 'function') {\n          self.$convert = result.convert\n        }\n        bridgeHandlesMethodToInstance(result, self)\n        bridgeComposedMethodToInstance(result, self)\n        addRespondToMethod(self)\n        self.super(backend, opts)\n      }\n    })\n    object.$extend(ConverterBackendTraits)\n  } else if (typeof converter === 'object') {\n    // Instance\n    if (typeof converter.$convert === 'undefined' && typeof converter.convert === 'function') {\n      converter.$convert = converter.convert\n    }\n    assignBackendTraitsToInstance(converter, converter)\n    if (converter.backend_traits) {\n      // \"extends\" ConverterBackendTraits\n      var converterBackendTraitsFunctionNames = [\n        'basebackend',\n        'filetype',\n        'htmlsyntax',\n        'outfilesuffix',\n        'supports_templates',\n        'supports_templates?',\n        'init_backend_traits',\n        'backend_traits'\n      ]\n      for (var functionName of converterBackendTraitsFunctionNames) {\n        converter['$' + functionName] = ConverterBackendTraits.prototype['$' + functionName]\n      }\n      converter.$$meta = ConverterBackendTraits\n    }\n    bridgeHandlesMethodToInstance(converter, converter)\n    bridgeComposedMethodToInstance(converter, converter)\n    bridgeEqEqMethodToInstance(converter, converter)\n    bridgeSendMethodToInstance(converter, converter)\n    addRespondToMethod(converter)\n    object = converter\n  }\n  var args = [object].concat(backends)\n  return Converter.$register.apply(Converter, args)\n}\n\n/**\n * Retrieves the singleton instance of the converter factory.\n *\n * @param {boolean} initialize - instantiate the singleton if it has not yet\n * been instantiated. If this value is false and the singleton has not yet been\n * instantiated, this method returns a fresh instance.\n * @returns {Converter/Factory} an instance of the converter factory.\n * @memberof Converter/Factory\n */\nConverterFactory.getDefault = function (initialize) {\n  return this.$default(initialize)\n}\n\n/**\n * Create an instance of the converter bound to the specified backend.\n *\n * @param {string} backend - look for a converter bound to this keyword.\n * @param {Object} opts - a JSON of options to pass to the converter (default: {})\n * @returns {Converter} - a converter instance for converting nodes in an Asciidoctor AST.\n * @memberof Converter/Factory\n */\nConverterFactory.prototype.create = function (backend, opts) {\n  return this.$create(backend, toHash(opts))\n}\n\n/**\n * Get the converter registry.\n * @returns the registry of converter instances or classes keyed by backend name\n * @memberof Converter/Factory\n */\nConverterFactory.getRegistry = function () {\n  return fromHash(Converter.$registry())\n}\n\n/**\n * Lookup the custom converter registered with this factory to handle the specified backend.\n *\n * @param {string} backend - The {string} backend name.\n * @returns the {Converter} class or instance registered to convert the specified backend or undefined if no match is found.\n * @memberof Converter/Factory\n */\nConverterFactory.for = function (backend) {\n  const converter = Converter.$for(backend)\n  return converter === Opal.nil ? undefined : converter\n}\n\n/*\n * Unregister any custom converter classes that are registered with this factory.\n * Intended for testing only!\n */\nConverterFactory.unregisterAll = function () {\n  var internalRegistry = Converter.DefaultFactory.$$cvars['@@registry']\n  Converter.DefaultFactory.$$cvars['@@registry'] = toHash({ html5: internalRegistry['$[]']('html5') })\n}\n\n// Built-in converter\n\n/**\n * @namespace\n * @module Converter/Html5Converter\n */\nvar Html5Converter = Opal.Asciidoctor.Converter.Html5Converter\n\n// Alias\nOpal.Asciidoctor.Html5Converter = Html5Converter\n\n/**\n * Create a new Html5Converter.\n * @returns {Html5Converter} - a Html5Converter\n * @memberof Converter/Html5Converter\n */\nHtml5Converter.create = function () {\n  return this.$new()\n}\n\n/**\n * Converts an {AbstractNode} using the given transform.\n * This method must be implemented by a concrete converter class.\n *\n * @param {AbstractNode} node - The concrete instance of AbstractNode to convert.\n * @param {string} [transform] - An optional String transform that hints at which transformation should be applied to this node.\n * If a transform is not given, the transform is often derived from the value of the {AbstractNode#getNodeName} property. (optional, default: undefined)\n * @param {Object} [opts]- An optional JSON of options hints about how to convert the node. (optional, default: undefined)\n *\n * @returns {string} - the String result.\n * @memberof Converter/Html5Converter\n */\nHtml5Converter.prototype.convert = function (node, transform, opts) {\n  return this.$convert(node, transform, opts)\n}\n\n\nvar ASCIIDOCTOR_JS_VERSION = '2.2.6';\n\n  /**\n   * Get Asciidoctor.js version number.\n   *\n   * @memberof Asciidoctor\n   * @returns {string} - returns the version number of Asciidoctor.js.\n   */\n  Opal.Asciidoctor.prototype.getVersion = function () {\n    return ASCIIDOCTOR_JS_VERSION\n  }\n  return Opal.Asciidoctor\n}))\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js?");

/***/ }),

/***/ "./node_modules/asciidoctor/index.js":
/*!*******************************************!*\
  !*** ./node_modules/asciidoctor/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! @asciidoctor/core */ \"./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js\")\n\n\n//# sourceURL=webpack:///./node_modules/asciidoctor/index.js?");

/***/ }),

/***/ "./node_modules/boolbase/index.js":
/*!****************************************!*\
  !*** ./node_modules/boolbase/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n\ttrueFunc: function trueFunc(){\n\t\treturn true;\n\t},\n\tfalseFunc: function falseFunc(){\n\t\treturn false;\n\t}\n};\n\n//# sourceURL=webpack:///./node_modules/boolbase/index.js?");

/***/ }),

/***/ "./node_modules/cheerio-select-tmp/lib/helpers.js":
/*!********************************************************!*\
  !*** ./node_modules/cheerio-select-tmp/lib/helpers.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.groupSelectors = exports.getDocumentRoot = void 0;\nvar positionals_1 = __webpack_require__(/*! ./positionals */ \"./node_modules/cheerio-select-tmp/lib/positionals.js\");\nfunction getDocumentRoot(node) {\n    while (node.parent)\n        node = node.parent;\n    return node;\n}\nexports.getDocumentRoot = getDocumentRoot;\nfunction groupSelectors(selectors) {\n    var filteredSelectors = [];\n    var plainSelectors = [];\n    for (var _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++) {\n        var selector = selectors_1[_i];\n        if (selector.some(positionals_1.isFilter)) {\n            filteredSelectors.push(selector);\n        }\n        else {\n            plainSelectors.push(selector);\n        }\n    }\n    return [plainSelectors, filteredSelectors];\n}\nexports.groupSelectors = groupSelectors;\n\n\n//# sourceURL=webpack:///./node_modules/cheerio-select-tmp/lib/helpers.js?");

/***/ }),

/***/ "./node_modules/cheerio-select-tmp/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/cheerio-select-tmp/lib/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.select = exports.filter = void 0;\nvar css_what_1 = __webpack_require__(/*! css-what */ \"./node_modules/css-what/lib/index.js\");\nvar css_select_1 = __webpack_require__(/*! css-select */ \"./node_modules/css-select/lib/index.js\");\nvar DomUtils = __importStar(__webpack_require__(/*! domutils */ \"./node_modules/domutils/lib/index.js\"));\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/cheerio-select-tmp/lib/helpers.js\");\nvar positionals_1 = __webpack_require__(/*! ./positionals */ \"./node_modules/cheerio-select-tmp/lib/positionals.js\");\n/** Used to indicate a scope should be filtered. Might be ignored when filtering. */\nvar SCOPE_PSEUDO = {\n    type: \"pseudo\",\n    name: \"scope\",\n    data: null,\n};\n/** Used for actually filtering for scope. */\nvar CUSTOM_SCOPE_PSEUDO = __assign({}, SCOPE_PSEUDO);\nvar UNIVERSAL_SELECTOR = { type: \"universal\", namespace: null };\nfunction filterByPosition(filter, elems, data, options) {\n    var num = typeof data === \"string\" ? parseInt(data, 10) : NaN;\n    switch (filter) {\n        case \"first\":\n        case \"lt\":\n            // Already done in `getLimit`\n            return elems;\n        case \"last\":\n            return elems.length > 0 ? [elems[elems.length - 1]] : elems;\n        case \"nth\":\n        case \"eq\":\n            return isFinite(num) && Math.abs(num) < elems.length\n                ? [num < 0 ? elems[elems.length + num] : elems[num]]\n                : [];\n        case \"gt\":\n            return isFinite(num) ? elems.slice(num + 1) : [];\n        case \"even\":\n            return elems.filter(function (_, i) { return i % 2 === 0; });\n        case \"odd\":\n            return elems.filter(function (_, i) { return i % 2 === 1; });\n        case \"not\": {\n            var filtered_1 = new Set(filterParsed(data, elems, options));\n            return elems.filter(function (e) { return !filtered_1.has(e); });\n        }\n    }\n}\nfunction filter(selector, elements, options) {\n    if (options === void 0) { options = {}; }\n    return DomUtils.uniqueSort(filterParsed(css_what_1.parse(selector, options), elements, options));\n}\nexports.filter = filter;\n/**\n * Filter a set of elements by a selector.\n *\n * If there are multiple selectors, this can\n * return elements multiple times; use `uniqueSort`\n * to eliminate duplicates afterwards.\n *\n * @param selector Selector to filter by.\n * @param elements Elements to filter.\n * @param options Options for selector.\n */\nfunction filterParsed(selector, elements, options) {\n    if (elements.length === 0)\n        return [];\n    var _a = helpers_1.groupSelectors(selector), plainSelectors = _a[0], filteredSelectors = _a[1];\n    var results = [];\n    if (plainSelectors.length) {\n        results.push(filterElements(elements, plainSelectors, options));\n    }\n    for (var _i = 0, filteredSelectors_1 = filteredSelectors; _i < filteredSelectors_1.length; _i++) {\n        var filteredSelector = filteredSelectors_1[_i];\n        if (filteredSelector.some(css_what_1.isTraversal)) {\n            /*\n             * Get one root node, run selector with the scope\n             * set to all of our nodes.\n             */\n            var root = helpers_1.getDocumentRoot(elements[0]);\n            var sel = __spreadArrays(filteredSelector, [CUSTOM_SCOPE_PSEUDO]);\n            results.push(findFilterElements(root, sel, options, true, elements));\n        }\n        else {\n            // Performance optimization: If we don't have to traverse, just filter set.\n            results.push(findFilterElements(elements, filteredSelector, options, false));\n        }\n    }\n    if (results.length === 1) {\n        return results[0];\n    }\n    return results.reduce(function (arr, rest) { return __spreadArrays(arr, rest); }, []);\n}\nfunction select(selector, root, options) {\n    if (options === void 0) { options = {}; }\n    var _a = helpers_1.groupSelectors(css_what_1.parse(selector, options)), plain = _a[0], filtered = _a[1];\n    var results = filtered.map(function (sel) {\n        return findFilterElements(root, sel, options, true);\n    });\n    // Plain selectors can be queried in a single go\n    if (plain.length) {\n        results.push(findElements(root, plain, options, Infinity));\n    }\n    // If there was only a single selector, just return the result\n    if (results.length === 1) {\n        return results[0];\n    }\n    // Sort results, filtering for duplicates\n    return DomUtils.uniqueSort(results.reduce(function (a, b) { return __spreadArrays(a, b); }));\n}\nexports.select = select;\n// Traversals that are treated differently in css-select.\nvar specialTraversal = new Set([\"descendant\", \"adjacent\"]);\nfunction includesScopePseudo(t) {\n    return (t !== SCOPE_PSEUDO &&\n        t.type === \"pseudo\" &&\n        (t.name === \"scope\" ||\n            (Array.isArray(t.data) &&\n                t.data.some(function (data) { return data.some(includesScopePseudo); }))));\n}\nfunction addContextIfScope(selector, options, scopeContext) {\n    return scopeContext && selector.some(includesScopePseudo)\n        ? __assign(__assign({}, options), { context: scopeContext }) : options;\n}\n/**\n *\n * @param root Element(s) to search from.\n * @param selector Selector to look for.\n * @param options Options for querying.\n * @param queryForSelector Query multiple levels deep for the initial selector, even if it doesn't contain a traversal.\n * @param scopeContext Optional context for a :scope.\n */\nfunction findFilterElements(root, selector, options, queryForSelector, scopeContext) {\n    var filterIndex = selector.findIndex(positionals_1.isFilter);\n    var sub = selector.slice(0, filterIndex);\n    var filter = selector[filterIndex];\n    /*\n     * Set the number of elements to retrieve.\n     * Eg. for :first, we only have to get a single element.\n     */\n    var limit = positionals_1.getLimit(filter.name, filter.data);\n    if (limit === 0)\n        return [];\n    var subOpts = addContextIfScope(sub, options, scopeContext);\n    /*\n     * Skip `findElements` call if our selector starts with a positional\n     * pseudo.\n     */\n    var elemsNoLimit = sub.length === 0 && !Array.isArray(root)\n        ? DomUtils.getChildren(root).filter(DomUtils.isTag)\n        : sub.length === 0 || (sub.length === 1 && sub[0] === SCOPE_PSEUDO)\n            ? Array.isArray(root)\n                ? root\n                : [root]\n            : queryForSelector || sub.some(css_what_1.isTraversal)\n                ? findElements(root, [sub], subOpts, limit)\n                : // We know that this cannot be reached with root not being an array.\n                    filterElements(root, [sub], subOpts);\n    var elems = elemsNoLimit.slice(0, limit);\n    var result = filterByPosition(filter.name, elems, filter.data, options);\n    if (result.length === 0 || selector.length === filterIndex + 1) {\n        return result;\n    }\n    var remainingSelector = selector.slice(filterIndex + 1);\n    var remainingHasTraversal = remainingSelector.some(css_what_1.isTraversal);\n    var remainingOpts = addContextIfScope(remainingSelector, options, scopeContext);\n    if (remainingHasTraversal) {\n        /*\n         * Some types of traversals have special logic when they start a selector\n         * in css-select. If this is the case, add a universal selector in front of\n         * the selector to avoid this behavior.\n         */\n        if (specialTraversal.has(remainingSelector[0].type)) {\n            remainingSelector.unshift(UNIVERSAL_SELECTOR);\n        }\n        /*\n         * Add a scope token in front of the remaining selector,\n         * to make sure traversals don't match elements that aren't a\n         * part of the considered tree.\n         */\n        remainingSelector.unshift(SCOPE_PSEUDO);\n    }\n    /*\n     * If we have another filter, recursively call `findFilterElements`,\n     * with the `recursive` flag disabled. We only have to look for more\n     * elements when we see a traversal.\n     *\n     * Otherwise,\n     */\n    return remainingSelector.some(positionals_1.isFilter)\n        ? findFilterElements(result, remainingSelector, options, false, scopeContext)\n        : remainingHasTraversal\n            ? // Query existing elements to resolve traversal.\n                findElements(result, [remainingSelector], remainingOpts, Infinity)\n            : // If we don't have any more traversals, simply filter elements.\n                filterElements(result, [remainingSelector], remainingOpts);\n}\nfunction findElements(root, sel, options, limit) {\n    if (limit === 0)\n        return [];\n    // @ts-expect-error TS seems to mess up the type here ¯\\_(ツ)_/¯\n    var query = css_select_1._compileToken(sel, options, root);\n    var elems = css_select_1.prepareContext(root, DomUtils, query.shouldTestNextSiblings);\n    return DomUtils.find(function (node) { return DomUtils.isTag(node) && query(node); }, elems, true, limit);\n}\nfunction filterElements(elements, sel, options) {\n    // @ts-expect-error TS seems to mess up the type here ¯\\_(ツ)_/¯\n    var query = css_select_1._compileToken(sel, options);\n    return elements.filter(query);\n}\n\n\n//# sourceURL=webpack:///./node_modules/cheerio-select-tmp/lib/index.js?");

/***/ }),

/***/ "./node_modules/cheerio-select-tmp/lib/positionals.js":
/*!************************************************************!*\
  !*** ./node_modules/cheerio-select-tmp/lib/positionals.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLimit = exports.isFilter = exports.filterNames = void 0;\nexports.filterNames = new Set([\n    \"first\",\n    \"last\",\n    \"eq\",\n    \"gt\",\n    \"nth\",\n    \"lt\",\n    \"even\",\n    \"odd\",\n]);\nfunction isFilter(s) {\n    if (s.type !== \"pseudo\")\n        return false;\n    if (exports.filterNames.has(s.name))\n        return true;\n    if (s.name === \"not\" && Array.isArray(s.data)) {\n        // Only consider `:not` with embedded filters\n        return s.data.some(function (s) { return s.some(isFilter); });\n    }\n    return false;\n}\nexports.isFilter = isFilter;\nfunction getLimit(filter, data) {\n    var num = data != null ? parseInt(data, 10) : NaN;\n    switch (filter) {\n        case \"first\":\n            return 1;\n        case \"nth\":\n        case \"eq\":\n            return isFinite(num) ? (num >= 0 ? num + 1 : Infinity) : 0;\n        case \"lt\":\n            return isFinite(num) ? (num >= 0 ? num : Infinity) : 0;\n        case \"gt\":\n            return isFinite(num) ? Infinity : 0;\n        default:\n            return Infinity;\n    }\n}\nexports.getLimit = getLimit;\n\n\n//# sourceURL=webpack:///./node_modules/cheerio-select-tmp/lib/positionals.js?");

/***/ }),

/***/ "./node_modules/cheerio/index.js":
/*!***************************************!*\
  !*** ./node_modules/cheerio/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * @module cheerio\n * @borrows static.load as load\n * @borrows static.html as html\n * @borrows static.text as text\n * @borrows static.xml as xml\n */\nvar staticMethods = __webpack_require__(/*! ./lib/static */ \"./node_modules/cheerio/lib/static.js\");\n\nexports = module.exports = __webpack_require__(/*! ./lib/cheerio */ \"./node_modules/cheerio/lib/cheerio.js\");\n\n/**\n * An identifier describing the version of Cheerio which has been executed.\n *\n * @type {string}\n */\nexports.version = __webpack_require__(/*! ./package.json */ \"./node_modules/cheerio/package.json\").version;\n\nexports.load = staticMethods.load;\nexports.html = staticMethods.html;\nexports.text = staticMethods.text;\nexports.xml = staticMethods.xml;\n\n/**\n * In order to promote consistency with the jQuery library, users are\n * encouraged to instead use the static method of the same name.\n *\n * @example\n *     var $ = cheerio.load('<div><p></p></div>');\n *     $.contains($('div').get(0), $('p').get(0)); // true\n *     $.contains($('p').get(0), $('div').get(0)); // false\n *\n * @function\n * @returns {boolean}\n * @deprecated\n */\nexports.contains = staticMethods.contains;\n\n/**\n * In order to promote consistency with the jQuery library, users are\n * encouraged to instead use the static method of the same name.\n *\n * @example\n *     var $ = cheerio.load('');\n *     $.merge([1, 2], [3, 4]) // [1, 2, 3, 4]\n *\n * @function\n * @deprecated\n */\nexports.merge = staticMethods.merge;\n\n/**\n * In order to promote consistency with the jQuery library, users are\n * encouraged to instead use the static method of the same name as it is\n * defined on the \"loaded\" Cheerio factory function.\n *\n * @example\n *     var $ = cheerio.load('');\n *     $.parseHTML('<b>markup</b>');\n *\n * @function\n * @deprecated See {@link static/parseHTML}.\n */\nexports.parseHTML = staticMethods.parseHTML;\n\n/**\n * Users seeking to access the top-level element of a parsed document should\n * instead use the `root` static method of a \"loaded\" Cheerio function.\n *\n * @example\n *     var $ = cheerio.load('');\n *     $.root();\n *\n * @function\n * @deprecated\n */\nexports.root = staticMethods.root;\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/index.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/api/attributes.js":
/*!****************************************************!*\
  !*** ./node_modules/cheerio/lib/api/attributes.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\n\nvar text = __webpack_require__(/*! ../static */ \"./node_modules/cheerio/lib/static.js\").text;\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/cheerio/lib/utils.js\");\nvar isTag = utils.isTag;\nvar domEach = utils.domEach;\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar camelCase = utils.camelCase;\nvar cssCase = utils.cssCase;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-';\n// Lookup table for coercing string data-* attributes to their corresponding\n// JavaScript primitives\nvar primitives = {\n  null: null,\n  true: true,\n  false: false,\n};\n// Attributes that are booleans\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n// Matches strings that look like JSON objects or arrays\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\n\nvar getAttr = function (elem, name) {\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.attribs) {\n    elem.attribs = {};\n  }\n\n  // Return the entire attribs object if no attribute specified\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn.call(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return rboolean.test(name) ? name : elem.attribs[name];\n  }\n\n  // Mimic the DOM and return text content as value for `option's`\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  }\n\n  // Mimic DOM with default value for radios/checkboxes\n  if (\n    elem.name === 'input' &&\n    (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') &&\n    name === 'value'\n  ) {\n    return 'on';\n  }\n};\n\nvar setAttr = function (el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = value + '';\n  }\n};\n\n/**\n * Method for getting and setting attributes. Gets the attribute value for only\n * the first element in the matched set. If you set an attribute's value to\n * `null`, you remove that attribute. You may also pass a `map` and `function`\n * like jQuery.\n *\n * @example\n *\n * $('ul').attr('id')\n * //=> fruits\n *\n * $('.apple').attr('id', 'favorite').html()\n * //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @param {string} [value] - If specified sets the value of the attribute.\n *\n * @see {@link http://api.jquery.com/attr/}\n */\nexports.attr = function (name, value) {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (i, el) {\n        setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n    return domEach(this, function (i, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (objName) {\n          var objValue = name[objName];\n          setAttr(el, objName, objValue);\n        });\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n\n  return getAttr(this[0], name);\n};\n\nvar getProp = function (el, name) {\n  if (!el || !isTag(el)) return;\n\n  return name in el\n    ? el[name]\n    : rboolean.test(name)\n    ? getAttr(el, name) !== undefined\n    : getAttr(el, name);\n};\n\nvar setProp = function (el, name, value) {\n  el[name] = rboolean.test(name) ? !!value : value;\n};\n\n/**\n * Method for getting and setting properties. Gets the property value for only\n * the first element in the matched set.\n *\n * @example\n *\n * $('input[type=\"checkbox\"]').prop('checked')\n * //=> false\n *\n * $('input[type=\"checkbox\"]').prop('checked', true).val()\n * //=> ok\n *\n * @param {string} name - Name of the property.\n * @param {any} [value] - If specified set the property to this.\n *\n * @see {@link http://api.jquery.com/prop/}\n */\nexports.prop = function (name, value) {\n  var i = 0;\n  var property;\n\n  if (typeof name === 'string' && value === undefined) {\n    switch (name) {\n      case 'style':\n        property = this.css();\n\n        Object.keys(property).forEach(function (p) {\n          property[i++] = p;\n        });\n\n        property.length = i;\n\n        break;\n      case 'tagName':\n      case 'nodeName':\n        property = this[0].name.toUpperCase();\n        break;\n      case 'outerHTML':\n        property = this.clone().wrap('<container />').parent().html();\n        break;\n      default:\n        property = getProp(this[0], name);\n    }\n\n    return property;\n  }\n\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (j, el) {\n        setProp(el, name, value.call(el, j, getProp(el, name)));\n      });\n    }\n\n    return domEach(this, function (__, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          var val = name[key];\n          setProp(el, key, val);\n        });\n      } else {\n        setProp(el, name, value);\n      }\n    });\n  }\n};\n\nvar setData = function (el, name, value) {\n  if (!el.data) {\n    el.data = {};\n  }\n\n  if (typeof name === 'object') return Object.assign(el.data, name);\n  if (typeof name === 'string' && value !== undefined) {\n    el.data[name] = value;\n  }\n};\n\n// Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n// and (if present) cache the value in the node's internal data store. If no\n// attribute name is specified, read *all* HTML5 `data-*` attributes in this\n// manner.\nvar readData = function (el, name) {\n  var readAll = arguments.length === 1;\n  var domNames;\n  var domName;\n  var jsNames;\n  var jsName;\n  var value;\n  var idx;\n  var length;\n\n  if (readAll) {\n    domNames = Object.keys(el.attribs).filter(function (attrName) {\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\n    });\n    jsNames = domNames.map(function (_domName) {\n      return camelCase(_domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (idx = 0, length = domNames.length; idx < length; ++idx) {\n    domName = domNames[idx];\n    jsName = jsNames[idx];\n    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return readAll ? el.data : value;\n};\n\n/**\n * Method for getting and setting data attributes. Gets or sets the data\n * attribute value for only the first element in the matched set.\n *\n * @example\n *\n * $('<div data-apple-color=\"red\"></div>').data()\n * //=> { appleColor: 'red' }\n *\n * $('<div data-apple-color=\"red\"></div>').data('apple-color')\n * //=> 'red'\n *\n * const apple = $('.apple').data('kind', 'mac')\n * apple.data('kind')\n * //=> 'mac'\n *\n * @param {string} name - Name of the attribute.\n * @param {any} [value] - If specified new value.\n *\n * @see {@link http://api.jquery.com/data/}\n */\nexports.data = function (name, value) {\n  var elem = this[0];\n\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.data) {\n    elem.data = {};\n  }\n\n  // Return the entire data object if no data specified\n  if (!name) {\n    return readData(elem);\n  }\n\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    domEach(this, function (i, el) {\n      setData(el, name, value);\n    });\n    return this;\n  } else if (hasOwn.call(elem.data, name)) {\n    return elem.data[name];\n  }\n\n  return readData(elem, name);\n};\n\n/**\n * Method for getting and setting the value of input, select, and textarea.\n * Note: Support for `map`, and `function` has not been added yet.\n *\n * @example\n *\n * $('input[type=\"text\"]').val()\n * //=> input_text\n *\n * $('input[type=\"text\"]').val('test').html()\n * //=> <input type=\"text\" value=\"test\"/>\n *\n * @param {string} [value] - If specified new value.\n *\n * @see {@link http://api.jquery.com/val/}\n */\nexports.val = function (value) {\n  var querying = arguments.length === 0;\n  var element = this[0];\n\n  if (!element) return;\n\n  switch (element.name) {\n    case 'textarea':\n      return this.text(value);\n    case 'input':\n      if (this.attr('type') === 'radio') {\n        if (querying) {\n          return this.attr('value');\n        }\n\n        this.attr('value', value);\n        return this;\n      }\n\n      return this.attr('value', value);\n    case 'select':\n      var option = this.find('option:selected');\n      var returnValue;\n      if (option === undefined) return undefined;\n      if (!querying) {\n        if (!hasOwn.call(this.attr(), 'multiple') && typeof value == 'object') {\n          return this;\n        }\n        if (typeof value != 'object') {\n          value = [value];\n        }\n        this.find('option').removeAttr('selected');\n        for (var i = 0; i < value.length; i++) {\n          this.find('option[value=\"' + value[i] + '\"]').attr('selected', '');\n        }\n        return this;\n      }\n      returnValue = option.attr('value');\n      if (hasOwn.call(this.attr(), 'multiple')) {\n        returnValue = [];\n        domEach(option, function (__, el) {\n          returnValue.push(getAttr(el, 'value'));\n        });\n      }\n      return returnValue;\n    case 'option':\n      if (!querying) {\n        this.attr('value', value);\n        return this;\n      }\n      return this.attr('value');\n  }\n};\n\n/**\n * Remove an attribute.\n *\n * @private\n * @param {node} elem - Node to remove attribute from.\n * @param {string} name - Name of the attribute to remove.\n */\nvar removeAttribute = function (elem, name) {\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n\n  delete elem.attribs[name];\n};\n\n/**\n * Splits a space-separated list of names to individual\n * names.\n *\n * @param {string} names -  Names to split.\n * @returns {string[]} - Split names.\n */\nvar splitNames = function (names) {\n  return names ? names.trim().split(rspace) : [];\n};\n\n/**\n * Method for removing attributes by `name`.\n *\n * @example\n *\n * $('.pear').removeAttr('class').html()\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite')\n * $('.apple').removeAttr('id class').html()\n * //=> <li>Apple</li>\n *\n * @param {string} name - Name of the attribute.\n *\n * @see {@link http://api.jquery.com/removeAttr/}\n */\nexports.removeAttr = function (name) {\n  var attrNames = splitNames(name);\n\n  for (var i = 0; i < attrNames.length; i++) {\n    domEach(this, function (j, elem) {\n      removeAttribute(elem, attrNames[i]);\n    });\n  }\n\n  return this;\n};\n\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @example\n *\n * $('.pear').hasClass('pear')\n * //=> true\n *\n * $('apple').hasClass('fruit')\n * //=> false\n *\n * $('li').hasClass('pear')\n * //=> true\n *\n * @param {string} className - Name of the class.\n *\n * @see {@link http://api.jquery.com/hasClass/}\n */\nexports.hasClass = function (className) {\n  return this.toArray().some(function (elem) {\n    var attrs = elem.attribs;\n    var clazz = attrs && attrs['class'];\n    var idx = -1;\n    var end;\n\n    if (clazz && className.length) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        end = idx + className.length;\n\n        if (\n          (idx === 0 || rspace.test(clazz[idx - 1])) &&\n          (end === clazz.length || rspace.test(clazz[end]))\n        ) {\n          return true;\n        }\n      }\n    }\n  });\n};\n\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`\n * like jQuery.\n *\n * @example\n *\n * $('.pear').addClass('fruit').html()\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').html()\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * @param {string} value - Name of new class.\n *\n * @see {@link http://api.jquery.com/addClass/}\n */\nexports.addClass = function (value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      var className = el.attribs['class'] || '';\n      exports.addClass.call([el], value.call(el, i, className));\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  var classNames = value.split(rspace);\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n\n    // If we don't already have classes\n    var className = getAttr(this[i], 'class');\n    var numClasses;\n    var setClass;\n\n    if (!className) {\n      setAttr(this[i], 'class', classNames.join(' ').trim());\n    } else {\n      setClass = ' ' + className + ' ';\n      numClasses = classNames.length;\n\n      // Check if class already exists\n      for (var j = 0; j < numClasses; j++) {\n        var appendClass = classNames[j] + ' ';\n        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;\n      }\n\n      setAttr(this[i], 'class', setClass.trim());\n    }\n  }\n\n  return this;\n};\n\n/**\n * Removes one or more space-separated classes from the selected elements. If\n * no `className` is defined, all classes will be removed. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *\n * $('.pear').removeClass('pear').html()\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().html()\n * //=> <li class=\"\">Apple</li>\n * @param {string} value - Name of the class.\n *\n * @see {@link http://api.jquery.com/removeClass/}\n */\nexports.removeClass = function (value) {\n  var classes;\n  var numClasses;\n  var removeAll;\n\n  // Handle if value is a function\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.removeClass.call(\n        [el],\n        value.call(el, i, el.attribs['class'] || '')\n      );\n    });\n  }\n\n  classes = splitNames(value);\n  numClasses = classes.length;\n  removeAll = arguments.length === 0;\n\n  return domEach(this, function (i, el) {\n    if (!isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs.class = '';\n    } else {\n      var elClasses = splitNames(el.attribs.class);\n      var index;\n      var changed;\n\n      for (var j = 0; j < numClasses; j++) {\n        index = elClasses.indexOf(classes[j]);\n\n        if (index >= 0) {\n          elClasses.splice(index, 1);\n          changed = true;\n\n          // We have to do another pass to ensure that there are not duplicate\n          // classes listed\n          j--;\n        }\n      }\n      if (changed) {\n        el.attribs.class = elClasses.join(' ');\n      }\n    }\n  });\n};\n\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *\n * $('.apple.green').toggleClass('fruit green red').html()\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).html()\n * //=> <li class=\"apple green fruit red\">Apple</li>\n *\n * @param {(string|Function)} value - Name of the class. Can also be a function.\n * @param {boolean} [stateVal] - If specified the state of the class.\n *\n * @see {@link http://api.jquery.com/toggleClass/}\n */\nexports.toggleClass = function (value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.toggleClass.call(\n        [el],\n        value.call(el, i, el.attribs['class'] || '', stateVal),\n        stateVal\n      );\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  var classNames = value.split(rspace);\n  var numClasses = classNames.length;\n  var state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0;\n  var numElements = this.length;\n  var elementClasses;\n  var index;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n\n    elementClasses = splitNames(this[i].attribs.class);\n\n    // Check if class already exists\n    for (var j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      index = elementClasses.indexOf(classNames[j]);\n\n      // Add if stateValue === true or we are toggling and there is no value\n      if (state >= 0 && index < 0) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index >= 0) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    this[i].attribs.class = elementClasses.join(' ');\n  }\n\n  return this;\n};\n\n/**\n * Checks the current list of elements and returns `true` if _any_ of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if _any_ of the elements match. If using a predicate\n * function, the function is executed in the context of the selected element,\n * so `this` refers to the current element.\n *\n * @param {string|Function|cheerio|node} selector - Selector for the selection.\n *\n * @see {@link http://api.jquery.com/is/}\n */\nexports.is = function (selector) {\n  if (selector) {\n    return this.filter(selector).length > 0;\n  }\n  return false;\n};\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/api/attributes.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/api/css.js":
/*!*********************************************!*\
  !*** ./node_modules/cheerio/lib/api/css.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * @module cheerio/css\n */\n\nvar domEach = __webpack_require__(/*! ../utils */ \"./node_modules/cheerio/lib/utils.js\").domEach;\n\nvar toString = Object.prototype.toString;\n\n/**\n * Get the value of a style property for the first element in the set of\n * matched elements or set one or more CSS properties for every matched\n * element.\n *\n * @param {string|object} prop - The name of the property.\n * @param {string} [val] - If specified the new value.\n * @returns {self}\n *\n * @see {@link http://api.jquery.com/css/}\n */\nexports.css = function (prop, val) {\n  if (\n    arguments.length === 2 ||\n    // When `prop` is a \"plain\" object\n    toString.call(prop) === '[object Object]'\n  ) {\n    return domEach(this, function (idx, el) {\n      setCss(el, prop, val, idx);\n    });\n  }\n  return getCss(this[0], prop);\n};\n\n/**\n * Set styles of all elements.\n *\n * @param {object} el - Element to set style of.\n * @param {string|object} prop - Name of property.\n * @param {string} val - Value to set property to.\n * @param {number} [idx] - Optional index within the selection.\n * @returns {self}\n * @private\n */\nfunction setCss(el, prop, val, idx) {\n  if ('string' == typeof prop) {\n    var styles = getCss(el);\n    if (typeof val === 'function') {\n      val = val.call(el, idx, styles[prop]);\n    }\n\n    if (val === '') {\n      delete styles[prop];\n    } else if (val != null) {\n      styles[prop] = val;\n    }\n\n    el.attribs.style = stringify(styles);\n  } else if ('object' == typeof prop) {\n    Object.keys(prop).forEach(function (k) {\n      setCss(el, k, prop[k]);\n    });\n  }\n}\n\n/**\n * Get parsed styles of the first element.\n *\n * @param {node} el - Element to get styles from.\n * @param {string} prop - Name of the prop.\n * @returns {object}\n * @private\n */\nfunction getCss(el, prop) {\n  if (!el || !el.attribs) {\n    return undefined;\n  }\n\n  var styles = parse(el.attribs.style);\n  if (typeof prop === 'string') {\n    return styles[prop];\n  } else if (Array.isArray(prop)) {\n    var newStyles = {};\n    prop.forEach(function (item) {\n      if (styles[item] != null) {\n        newStyles[item] = styles[item];\n      }\n    });\n    return newStyles;\n  }\n  return styles;\n}\n\n/**\n * Stringify `obj` to styles.\n *\n * @param {object} obj - Object to stringify.\n * @returns {object}\n * @private\n */\nfunction stringify(obj) {\n  return Object.keys(obj || {}).reduce(function (str, prop) {\n    return (str += '' + (str ? ' ' : '') + prop + ': ' + obj[prop] + ';');\n  }, '');\n}\n\n/**\n * Parse `styles`.\n *\n * @param {string} styles - Styles to be parsed.\n * @returns {object}\n * @private\n */\nfunction parse(styles) {\n  styles = (styles || '').trim();\n\n  if (!styles) return {};\n\n  return styles.split(';').reduce(function (obj, str) {\n    var n = str.indexOf(':');\n    // skip if there is no :, or if it is the first/last character\n    if (n < 1 || n === str.length - 1) return obj;\n    obj[str.slice(0, n).trim()] = str.slice(n + 1).trim();\n    return obj;\n  }, {});\n}\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/api/css.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/api/forms.js":
/*!***********************************************!*\
  !*** ./node_modules/cheerio/lib/api/forms.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @module cheerio/forms\n */\n\n// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @see {@link http://api.jquery.com/serialize/}\n */\nexports.serialize = function () {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray();\n\n  // Serialize each element into a key/value string\n  var retArr = arr.map(function (data) {\n    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);\n  });\n\n  // Return the resulting serialization\n  return retArr.join('&').replace(r20, '+');\n};\n\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @example\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray()\n * //=> [ { name: 'foo', value: 'bar' } ]\n *\n * @see {@link http://api.jquery.com/serializeArray/}\n */\nexports.serializeArray = function () {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function () {\n    var elem = this;\n    var $elem = Cheerio(elem);\n    if (elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n    return $elem.filter(submittableSelector).toArray();\n  })\n    .filter(\n      // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n      '[name!=\"\"]:not(:disabled)' +\n        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        ':not(:submit, :button, :image, :reset, :file)' +\n        // and are either checked/don't have a checkable state\n        ':matches([checked], :not(:checkbox, :radio))'\n      // Convert each of the elements to its value(s)\n    )\n    .map(function (i, elem) {\n      var $elem = Cheerio(elem);\n      var name = $elem.attr('name');\n      var value = $elem.val();\n\n      // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n      if (value == null) {\n        value = '';\n      }\n\n      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n      if (Array.isArray(value)) {\n        return value.map(function (val) {\n          // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n          //   These can occur inside of `<textarea>'s`\n          return { name: name, value: val.replace(rCRLF, '\\r\\n') };\n        });\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n      }\n      return { name: name, value: value.replace(rCRLF, '\\r\\n') };\n\n      // Convert our result to an array\n    })\n    .get();\n};\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/api/forms.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/api/manipulation.js":
/*!******************************************************!*\
  !*** ./node_modules/cheerio/lib/api/manipulation.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\n\nvar parse = __webpack_require__(/*! ../parse */ \"./node_modules/cheerio/lib/parse.js\");\nvar html = __webpack_require__(/*! ../static */ \"./node_modules/cheerio/lib/static.js\").html;\nvar text = __webpack_require__(/*! ../static */ \"./node_modules/cheerio/lib/static.js\").text;\nvar updateDOM = parse.update;\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/cheerio/lib/utils.js\");\nvar domEach = utils.domEach;\nvar cloneDom = utils.cloneDom;\nvar isHtml = utils.isHtml;\nvar slice = Array.prototype.slice;\nvar domhandler = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\nvar DomUtils = __webpack_require__(/*! htmlparser2 */ \"./node_modules/htmlparser2/lib/index.js\").DomUtils;\n\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if\n * necessary.\n *\n * @param {cheerio|string|cheerio[]|string[]} [elem] - Elements to make an array of.\n * @param {boolean} [clone] - Optionally clone nodes.\n * @private\n */\nexports._makeDomArray = function makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  } else if (elem.cheerio) {\n    return clone ? cloneDom(elem.get(), elem.options) : elem.get();\n  } else if (Array.isArray(elem)) {\n    return elem.reduce(\n      function (newElems, el) {\n        return newElems.concat(this._makeDomArray(el, clone));\n      }.bind(this),\n      []\n    );\n  } else if (typeof elem === 'string') {\n    return parse(elem, this.options, false).children;\n  }\n  return clone ? cloneDom([elem]) : [elem];\n};\n\nvar _insert = function (concatenator) {\n  return function () {\n    var elems = slice.call(arguments);\n    var lastIdx = this.length - 1;\n\n    return domEach(this, function (i, el) {\n      var dom;\n      var domSrc;\n\n      if (typeof elems[0] === 'function') {\n        domSrc = elems[0].call(el, i, html(el.children));\n      } else {\n        domSrc = elems;\n      }\n\n      dom = this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n};\n\n/*\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @param {Array} array Target array to splice.\n * @param {Number} spliceIdx Index at which to begin changing the array.\n * @param {Number} spliceCount Number of elements to remove from the array.\n * @param {Array} newElems Elements to insert into the array.\n *\n * @private\n */\nvar uniqueSplice = function (array, spliceIdx, spliceCount, newElems, parent) {\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems);\n  var prev = array[spliceIdx - 1] || null;\n  var next = array[spliceIdx + spliceCount] || null;\n  var idx;\n  var len;\n  var prevIdx;\n  var node;\n  var oldParent;\n\n  // Before splicing in new elements, ensure they do not already appear in the\n  // current array.\n  for (idx = 0, len = newElems.length; idx < len; ++idx) {\n    node = newElems[idx];\n    oldParent = node.parent;\n    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\n\n    if (oldParent && prevIdx > -1) {\n      oldParent.children.splice(prevIdx, 1);\n      if (parent === oldParent && spliceIdx > prevIdx) {\n        spliceArgs[0]--;\n      }\n    }\n\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = node.next || null;\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev || null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n  return array.splice.apply(array, spliceArgs);\n};\n\n/**\n * Insert every element in the set of matched elements to the end of the\n * target.\n *\n * @param {string|cheerio} target - Element to append elements to.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/appendTo/}\n */\nexports.appendTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n\n  target.append(this);\n\n  return this;\n};\n\n/**\n * Insert every element in the set of matched elements to the beginning of the\n * target.\n *\n * @param {string|cheerio} target - Element to prepend elements to.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/prependTo/}\n */\nexports.prependTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n\n  target.prepend(this);\n\n  return this;\n};\n\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @function\n *\n * @example\n *\n * $('ul').append('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/append/}\n */\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @function\n *\n * @example\n *\n * $('ul').prepend('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/prepend/}\n */\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nfunction _wrap(insert) {\n  return function (wrapper) {\n    var wrapperFn = typeof wrapper === 'function' && wrapper;\n    var lastIdx = this.length - 1;\n    var lastParent = this.parents().last();\n\n    for (var i = 0; i < this.length; i++) {\n      var el = this[i];\n      var wrapperDom;\n      var elInsertLocation;\n      var j;\n\n      if (wrapperFn) {\n        wrapper = wrapperFn.call(el, i);\n      }\n\n      if (typeof wrapper === 'string' && !isHtml(wrapper)) {\n        wrapper = lastParent.find(wrapper).clone();\n      }\n\n      wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);\n      elInsertLocation = wrapperDom[0];\n      // Find the deepest child. Only consider the first tag child of each node\n      // (ignore text); stop if no children are found.\n      j = 0;\n\n      while (elInsertLocation && elInsertLocation.children) {\n        if (j >= elInsertLocation.children.length) {\n          break;\n        }\n\n        if (elInsertLocation.children[j].type === 'tag') {\n          elInsertLocation = elInsertLocation.children[j];\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n\n      insert(el, elInsertLocation, wrapperDom);\n    }\n\n    return this;\n  };\n}\n\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the\n * set of matched elements. This method returns the original set of elements\n * for chaining purposes.\n *\n * @param {cheerio} wrapper - The DOM structure to wrap around each element in the selection.\n *\n * @example\n *\n * const redFruit = $('<div class=\"red-fruit\"></div>')\n * $('.apple').wrap(redFruit)\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>')\n * $('li').wrap(healthy)\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n *\n * @see {@link http://api.jquery.com/wrap/}\n */\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n  var parent = el.parent;\n  var siblings = parent.children;\n  var index = siblings.indexOf(el);\n\n  updateDOM([el], elInsertLocation);\n  // The previous operation removed the current element from the `siblings`\n  // array, so the `dom` array can be inserted without removing any\n  // additional elements.\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n\n/**\n * The .wrapInner() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the set\n * of matched elements.\n *\n * @param {cheerio} wrapper - The DOM structure to wrap around the content of each element in the selection.\n *\n * @example\n *\n * const redFruit = $('<div class=\"red-fruit\"></div>')\n * $('.apple').wrapInner(redFruit)\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>')\n * $('li').wrapInner(healthy)\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n *\n * @see {@link http://api.jquery.com/wrapInner/}\n */\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n  updateDOM(el.children, elInsertLocation);\n  updateDOM(wrapperDom, el);\n});\n\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @example\n *\n * $('.apple').after('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/after/}\n */\nexports.after = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    var domSrc;\n    var dom;\n\n    // If not found, move on\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, html(el.children));\n    } else {\n      domSrc = elems;\n    }\n    dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element after `this` element\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n\n  return this;\n};\n\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @param {string|cheerio} target - Element to insert elements after.\n *\n * @see {@link http://api.jquery.com/insertAfter/}\n */\nexports.insertAfter = function (target) {\n  var clones = [];\n  var self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @example\n *\n * $('.apple').before('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/before/}\n */\nexports.before = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    var domSrc;\n    var dom;\n\n    // If not found, move on\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, html(el.children));\n    } else {\n      domSrc = elems;\n    }\n\n    dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element before `el` element\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n\n  return this;\n};\n\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @param {string|cheerio} target - Element to insert elements before.\n *\n * @see {@link http://api.jquery.com/insertBefore/}\n */\nexports.insertBefore = function (target) {\n  var clones = [];\n  var self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @example\n *\n * $('.pear').remove()\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n *\n * @param {string} [selector] - Optional selector for elements to remove.\n *\n * @see {@link http://api.jquery.com/remove/}\n */\nexports.remove = function (selector) {\n  var elems = this;\n\n  // Filter if we have selector\n  if (selector) elems = elems.filter(selector);\n\n  domEach(elems, function (i, el) {\n    DomUtils.removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n\n  return this;\n};\n\n/**\n * Replaces matched elements with `content`.\n *\n * @example\n *\n * const plum = $('<li class=\"plum\">Plum</li>')\n * $('.pear').replaceWith(plum)\n * $.html()\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * @param {cheerio|Function} content - Replacement for matched elements.\n *\n * @see {@link http://api.jquery.com/replaceWith/}\n */\nexports.replaceWith = function (content) {\n  var self = this;\n\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var dom = self._makeDomArray(\n      typeof content === 'function' ? content.call(el, i, el) : content\n    );\n    var index;\n\n    // In the case that `dom` contains nodes that already exist in other\n    // structures, ensure those nodes are properly removed.\n    updateDOM(dom, null);\n\n    index = siblings.indexOf(el);\n\n    // Completely remove old element\n    uniqueSplice(siblings, index, 1, dom, parent);\n    el.parent = el.prev = el.next = null;\n  });\n\n  return this;\n};\n\n/**\n * Empties an element, removing all its children.\n *\n * @example\n *\n * $('ul').empty()\n * $.html()\n * //=>  <ul id=\"fruits\"></ul>\n *\n * @see {@link http://api.jquery.com/empty/}\n */\nexports.empty = function () {\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    el.children.length = 0;\n  });\n  return this;\n};\n\n/**\n * Gets an HTML content string from the first selected element. If `htmlString`\n * is specified, each selected element's content is replaced by the new\n * content.\n *\n * @param {string} str - If specified used to replace selection's contents.\n *\n * @example\n *\n * $('.orange').html()\n * //=> Orange\n *\n * $('#fruits').html('<li class=\"mango\">Mango</li>').html()\n * //=> <li class=\"mango\">Mango</li>\n *\n * @see {@link http://api.jquery.com/html/}\n */\nexports.html = function (str) {\n  if (str === undefined) {\n    if (!this[0] || !this[0].children) return null;\n    return html(this[0].children, this.options);\n  }\n\n  var opts = this.options;\n\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    var content = str.cheerio\n      ? str.clone().get()\n      : parse('' + str, opts, false).children;\n\n    updateDOM(content, el);\n  });\n\n  return this;\n};\n\nexports.toString = function () {\n  return html(this, this.options);\n};\n\n/**\n * Get the combined text contents of each element in the set of matched\n * elements, including their descendants. If `textString` is specified, each\n * selected element's content is replaced by the new text content.\n *\n * @param {string} [str] - If specified replacement for the selected element's contents.\n *\n * @example\n *\n * $('.orange').text()\n * //=> Orange\n *\n * $('ul').text()\n * //=>  Apple\n * //    Orange\n * //    Pear\n *\n * @see {@link http://api.jquery.com/text/}\n */\nexports.text = function (str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return text(this);\n  } else if (typeof str === 'function') {\n    // Function support\n    var self = this;\n    return domEach(this, function (i, el) {\n      return exports.text.call(self._make(el), str.call(el, i, text([el])));\n    });\n  }\n\n  // Append text node to each selected elements\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    var textNode = new domhandler.Text(str);\n\n    updateDOM(textNode, el);\n  });\n\n  return this;\n};\n\n/**\n * Clone the cheerio object.\n *\n * @example\n *\n * const moreFruit = $('#fruits').clone()\n *\n * @see {@link http://api.jquery.com/clone/}\n */\nexports.clone = function () {\n  return this._make(cloneDom(this.get(), this.options));\n};\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/api/manipulation.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/api/traversing.js":
/*!****************************************************!*\
  !*** ./node_modules/cheerio/lib/api/traversing.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Methods for traversing the DOM structure.\n *\n * @module cheerio/traversing\n */\n\nvar select = __webpack_require__(/*! cheerio-select-tmp */ \"./node_modules/cheerio-select-tmp/lib/index.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/cheerio/lib/utils.js\");\nvar domEach = utils.domEach;\nvar uniqueSort = __webpack_require__(/*! htmlparser2 */ \"./node_modules/htmlparser2/lib/index.js\").DomUtils.uniqueSort;\nvar isTag = utils.isTag;\n\n/**\n * Get the descendants of each element in the current set of matched elements,\n * filtered by a selector, jQuery object, or element.\n *\n * @example\n *\n * $('#fruits').find('li').length\n * //=> 3\n * $('#fruits').find($('.apple')).length\n * //=> 1\n *\n * @param {string|cheerio|node} selectorOrHaystack - Element to look for.\n *\n * @see {@link http://api.jquery.com/find/}\n */\nexports.find = function (selectorOrHaystack) {\n  var elems = this.toArray().reduce(function (newElems, elem) {\n    return newElems.concat(elem.children.filter(isTag));\n  }, []);\n  var contains = this.constructor.contains;\n  var haystack;\n\n  if (selectorOrHaystack && typeof selectorOrHaystack !== 'string') {\n    if (selectorOrHaystack.cheerio) {\n      haystack = selectorOrHaystack.get();\n    } else {\n      haystack = [selectorOrHaystack];\n    }\n\n    return this._make(\n      haystack.filter(function (elem) {\n        var idx;\n        var len;\n        for (idx = 0, len = this.length; idx < len; ++idx) {\n          if (contains(this[idx], elem)) {\n            return true;\n          }\n        }\n      }, this)\n    );\n  }\n\n  var options = { __proto__: this.options, context: this.toArray() };\n\n  return this._make(select.select(selectorOrHaystack || '', elems, options));\n};\n\n/**\n * Get the parent of each element in the current set of matched elements,\n * optionally filtered by a selector.\n *\n * @example\n *\n * $('.pear').parent().attr('id')\n * //=> fruits\n *\n * @param {string} [selector] - If specified filter for parent.\n *\n * @see {@link http://api.jquery.com/parent/}\n */\nexports.parent = function (selector) {\n  var set = [];\n\n  domEach(this, function (idx, elem) {\n    var parentElem = elem.parent;\n    if (\n      parentElem &&\n      parentElem.type !== 'root' &&\n      set.indexOf(parentElem) < 0\n    ) {\n      set.push(parentElem);\n    }\n  });\n\n  if (arguments.length) {\n    set = exports.filter.call(set, selector, this);\n  }\n\n  return this._make(set);\n};\n\n/**\n * Get a set of parents filtered by `selector` of each element in the current\n * set of match elements.\n *\n * @example\n *\n * $('.orange').parents().length\n * // => 2\n * $('.orange').parents('#fruits').length\n * // => 1\n *\n * @param {string} [selector] - If specified filter for parents.\n *\n * @see {@link http://api.jquery.com/parents/}\n */\nexports.parents = function (selector) {\n  var parentNodes = [];\n\n  // When multiple DOM elements are in the original set, the resulting set will\n  // be in *reverse* order of the original elements as well, with duplicates\n  // removed.\n  this.get()\n    .reverse()\n    .forEach(function (elem) {\n      traverseParents(this, elem.parent, selector, Infinity).forEach(function (\n        node\n      ) {\n        if (parentNodes.indexOf(node) === -1) {\n          parentNodes.push(node);\n        }\n      });\n    }, this);\n\n  return this._make(parentNodes);\n};\n\n/**\n * Get the ancestors of each element in the current set of matched elements, up\n * to but not including the element matched by the selector, DOM node, or\n * cheerio object.\n *\n * @example\n *\n * $('.orange').parentsUntil('#food').length\n * // => 1\n *\n * @param {string|node|cheerio} selector - Selector for element to stop at.\n * @param {string|Function} [filter] - Optional filter for parents.\n *\n * @see {@link http://api.jquery.com/parentsUntil/}\n */\nexports.parentsUntil = function (selector, filter) {\n  var parentNodes = [];\n  var untilNode;\n  var untilNodes;\n\n  if (typeof selector === 'string') {\n    untilNode = select.select(\n      selector,\n      this.parents().toArray(),\n      this.options\n    )[0];\n  } else if (selector && selector.cheerio) {\n    untilNodes = selector.toArray();\n  } else if (selector) {\n    untilNode = selector;\n  }\n\n  // When multiple DOM elements are in the original set, the resulting set will\n  // be in *reverse* order of the original elements as well, with duplicates\n  // removed.\n\n  this.toArray()\n    .reverse()\n    .forEach(function (elem) {\n      while ((elem = elem.parent)) {\n        if (\n          (untilNode && elem !== untilNode) ||\n          (untilNodes && untilNodes.indexOf(elem) === -1) ||\n          (!untilNode && !untilNodes)\n        ) {\n          if (isTag(elem) && parentNodes.indexOf(elem) === -1) {\n            parentNodes.push(elem);\n          }\n        } else {\n          break;\n        }\n      }\n    }, this);\n\n  return this._make(\n    filter ? select.select(filter, parentNodes, this.options) : parentNodes\n  );\n};\n\n/**\n * For each element in the set, get the first element that matches the selector\n * by testing the element itself and traversing up through its ancestors in\n * the DOM tree.\n *\n * @example\n *\n * $('.orange').closest()\n * // => []\n * $('.orange').closest('.apple')\n * // => []\n * $('.orange').closest('li')\n * // => [<li class=\"orange\">Orange</li>]\n * $('.orange').closest('#fruits')\n * // => [<ul id=\"fruits\"> ... </ul>]\n *\n * @param {string} [selector] - Selector for the element to find.\n *\n * @see {@link http://api.jquery.com/closest/}\n */\nexports.closest = function (selector) {\n  var set = [];\n\n  if (!selector) {\n    return this._make(set);\n  }\n\n  domEach(this, function (idx, elem) {\n    var closestElem = traverseParents(this, elem, selector, 1)[0];\n\n    // Do not add duplicate elements to the set\n    if (closestElem && set.indexOf(closestElem) < 0) {\n      set.push(closestElem);\n    }\n  });\n\n  return this._make(set);\n};\n\n/**\n * Gets the next sibling of the first selected element, optionally filtered by\n * a selector.\n *\n * @example\n *\n * $('.apple').next().hasClass('orange')\n * //=> true\n *\n * @param {string} [selector] - If specified filter for sibling.\n *\n * @see {@link http://api.jquery.com/next/}\n */\nexports.next = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n  var elems = [];\n\n  this.toArray().forEach(function (elem) {\n    while ((elem = elem.next)) {\n      if (isTag(elem)) {\n        elems.push(elem);\n        return;\n      }\n    }\n  });\n\n  return selector\n    ? exports.filter.call(elems, selector, this)\n    : this._make(elems);\n};\n\n/**\n * Gets all the following siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @example\n *\n * $('.apple').nextAll()\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"pear\">Pear</li>]\n * $('.apple').nextAll('.orange')\n * //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string} [selector] - If specified filter for siblings.\n *\n * @see {@link http://api.jquery.com/nextAll/}\n */\nexports.nextAll = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n  var elems = [];\n\n  this.toArray().forEach(function (elem) {\n    while ((elem = elem.next)) {\n      if (isTag(elem) && elems.indexOf(elem) === -1) {\n        elems.push(elem);\n      }\n    }\n  });\n\n  return selector\n    ? exports.filter.call(elems, selector, this)\n    : this._make(elems);\n};\n\n/**\n * Gets all the following siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @example\n *\n * $('.apple').nextUntil('.pear')\n * //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string|cheerio|node} selector - Selector for element to stop at.\n * @param {string} [filterSelector] - If specified filter for siblings.\n *\n * @see {@link http://api.jquery.com/nextUntil/}\n */\nexports.nextUntil = function (selector, filterSelector) {\n  if (!this[0]) {\n    return this;\n  }\n  var elems = [];\n  var untilNode;\n  var untilNodes;\n\n  if (typeof selector === 'string') {\n    untilNode = select.select(selector, this.nextAll().get(), this.options)[0];\n  } else if (selector && selector.cheerio) {\n    untilNodes = selector.get();\n  } else if (selector) {\n    untilNode = selector;\n  }\n\n  this.toArray().forEach(function (elem) {\n    while ((elem = elem.next)) {\n      if (\n        (untilNode && elem !== untilNode) ||\n        (untilNodes && untilNodes.indexOf(elem) === -1) ||\n        (!untilNode && !untilNodes)\n      ) {\n        if (isTag(elem) && elems.indexOf(elem) === -1) {\n          elems.push(elem);\n        }\n      } else {\n        break;\n      }\n    }\n  });\n\n  return filterSelector\n    ? exports.filter.call(elems, filterSelector, this)\n    : this._make(elems);\n};\n\n/**\n * Gets the previous sibling of the first selected element optionally filtered\n * by a selector.\n *\n * @example\n *\n * $('.orange').prev().hasClass('apple')\n * //=> true\n *\n * @param {string} [selector] - If specified filter for siblings.\n *\n * @see {@link http://api.jquery.com/prev/}\n */\nexports.prev = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n  var elems = [];\n\n  this.toArray().forEach(function (elem) {\n    while ((elem = elem.prev)) {\n      if (isTag(elem)) {\n        elems.push(elem);\n        return;\n      }\n    }\n  });\n\n  return selector\n    ? exports.filter.call(elems, selector, this)\n    : this._make(elems);\n};\n\n/**\n * Gets all the preceding siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @example\n *\n * $('.pear').prevAll()\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"apple\">Apple</li>]\n * $('.pear').prevAll('.orange')\n * //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string} [selector] - If specified filter for siblings.\n *\n * @see {@link http://api.jquery.com/prevAll/}\n */\nexports.prevAll = function (selector) {\n  if (!this[0]) {\n    return this;\n  }\n  var elems = [];\n\n  this.toArray().forEach(function (elem) {\n    while ((elem = elem.prev)) {\n      if (isTag(elem) && elems.indexOf(elem) === -1) {\n        elems.push(elem);\n      }\n    }\n  });\n\n  return selector\n    ? exports.filter.call(elems, selector, this)\n    : this._make(elems);\n};\n\n/**\n * Gets all the preceding siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @example\n *\n * $('.pear').prevUntil('.apple')\n * //=> [<li class=\"orange\">Orange</li>]\n *\n * @param {string|cheerio|node} selector - Selector for element to stop at.\n * @param {string} [filterSelector] - If specified filter for siblings.\n *\n * @see {@link http://api.jquery.com/prevUntil/}\n */\nexports.prevUntil = function (selector, filterSelector) {\n  if (!this[0]) {\n    return this;\n  }\n  var elems = [];\n  var untilNode;\n  var untilNodes;\n\n  if (typeof selector === 'string') {\n    untilNode = select.select(selector, this.prevAll().get(), this.options)[0];\n  } else if (selector && selector.cheerio) {\n    untilNodes = selector.get();\n  } else if (selector) {\n    untilNode = selector;\n  }\n\n  this.toArray().forEach(function (elem) {\n    while ((elem = elem.prev)) {\n      if (\n        (untilNode && elem !== untilNode) ||\n        (untilNodes && untilNodes.indexOf(elem) === -1) ||\n        (!untilNode && !untilNodes)\n      ) {\n        if (isTag(elem) && elems.indexOf(elem) === -1) {\n          elems.push(elem);\n        }\n      } else {\n        break;\n      }\n    }\n  });\n\n  return filterSelector\n    ? exports.filter.call(elems, filterSelector, this)\n    : this._make(elems);\n};\n\n/**\n * Gets the first selected element's siblings, excluding itself.\n *\n * @example\n *\n * $('.pear').siblings().length\n * //=> 2\n *\n * $('.pear').siblings('.orange').length\n * //=> 1\n *\n * @param {string} [selector] - If specified filter for siblings.\n *\n * @see {@link http://api.jquery.com/siblings/}\n */\nexports.siblings = function (selector) {\n  var parent = this.parent();\n\n  var elems = (parent ? parent.children() : this.siblingsAndMe())\n    .toArray()\n    .filter(function (elem) {\n      return isTag(elem) && !this.is(elem);\n    }, this);\n\n  if (selector !== undefined) {\n    return exports.filter.call(elems, selector, this);\n  }\n  return this._make(elems);\n};\n\n/**\n * Gets the children of the first selected element.\n *\n * @example\n *\n * $('#fruits').children().length\n * //=> 3\n *\n * $('#fruits').children('.pear').text()\n * //=> Pear\n *\n * @param {string} [selector] - If specified filter for children.\n *\n * @see {@link http://api.jquery.com/children/}\n */\nexports.children = function (selector) {\n  var elems = this.toArray().reduce(function (newElems, elem) {\n    return newElems.concat(elem.children.filter(isTag));\n  }, []);\n\n  if (selector === undefined) return this._make(elems);\n\n  return exports.filter.call(elems, selector, this);\n};\n\n/**\n * Gets the children of each element in the set of matched elements, including\n * text and comment nodes.\n *\n * @example\n *\n * $('#fruits').contents().length\n * //=> 3\n *\n * @see {@link http://api.jquery.com/contents/}\n */\nexports.contents = function () {\n  var elems = this.toArray().reduce(function (newElems, elem) {\n    return newElems.concat(elem.children);\n  }, []);\n  return this._make(elems);\n};\n\n/**\n * Iterates over a cheerio object, executing a function for each matched\n * element. When the callback is fired, the function is fired in the context of\n * the DOM element, so `this` refers to the current element, which is\n * equivalent to the function parameter `element`. To break out of the `each`\n * loop early, return with `false`.\n *\n * @example\n *\n * const fruits = [];\n *\n * $('li').each(function(i, elem) {\n *   fruits[i] = $(this).text();\n * });\n *\n * fruits.join(', ');\n * //=> Apple, Orange, Pear\n *\n * @param {Function} fn - Function to execute.\n *\n * @see {@link http://api.jquery.com/each/}\n */\nexports.each = function (fn) {\n  var i = 0;\n  var len = this.length;\n  while (i < len && fn.call(this[i], i, this[i]) !== false) ++i;\n  return this;\n};\n\n/**\n * Pass each element in the current matched set through a function, producing a\n * new Cheerio object containing the return values. The function can return an\n * individual data item or an array of data items to be inserted into the\n * resulting set. If an array is returned, the elements inside the array are\n * inserted into the set. If the function returns null or undefined, no element\n * will be inserted.\n *\n * @example\n *\n * $('li').map(function(i, el) {\n *   // this === el\n *   return $(this).text();\n * }).get().join(' ');\n * //=> \"apple orange pear\"\n *\n * @param {Function} fn - Function to execute.\n *\n * @see {@link http://api.jquery.com/map/}\n */\nexports.map = function (fn) {\n  var elems = [];\n  for (var i = 0; i < this.length; i++) {\n    var el = this[i];\n    var val = fn.call(el, i, el);\n    if (val != null) {\n      elems = elems.concat(val);\n    }\n  }\n  return this._make(elems);\n};\n\nfunction getFilterFn(match) {\n  if (typeof match === 'function') {\n    return function (el, i) {\n      return match.call(el, i, el);\n    };\n  } else if (match.cheerio) {\n    return match.is.bind(match);\n  }\n  return function (el) {\n    return match === el;\n  };\n}\n\n/**\n * Iterates over a cheerio object, reducing the set of selector elements to\n * those that match the selector or pass the function's test. When a Cheerio\n * selection is specified, return only the elements contained in that\n * selection. When an element is specified, return only that element (if it is\n * contained in the original selection). If using the function method, the\n * function is executed in the context of the selected element, so `this`\n * refers to the current element.\n *\n * @function\n * @param {string | Function} match - Value to look for, following the rules above.\n * @param {node[]} container - Optional node to filter instead.\n *\n * @example <caption>Selector</caption>\n *\n * $('li').filter('.orange').attr('class');\n * //=> orange\n *\n * @example <caption>Function</caption>\n *\n * $('li').filter(function(i, el) {\n *   // this === el\n *   return $(this).attr('class') === 'orange';\n * }).attr('class')\n * //=> orange\n *\n * @see {@link http://api.jquery.com/filter/}\n */\nexports.filter = function (match, container) {\n  container = container || this;\n  var elements = this.toArray ? this.toArray() : this;\n\n  if (typeof match === 'string') {\n    elements = select.filter(match, elements, container.options);\n  } else {\n    elements = elements.filter(getFilterFn(match));\n  }\n\n  return container._make(elements);\n};\n\n/**\n * Remove elements from the set of matched elements. Given a jQuery object that\n * represents a set of DOM elements, the `.not()` method constructs a new\n * jQuery object from a subset of the matching elements. The supplied selector\n * is tested against each element; the elements that don't match the selector\n * will be included in the result. The `.not()` method can take a function as\n * its argument in the same way that `.filter()` does. Elements for which the\n * function returns true are excluded from the filtered set; all other elements\n * are included.\n *\n * @function\n * @param {string | Function} match - Value to look for, following the rules above.\n * @param {node[]} container - Optional node to filter instead.\n *\n * @example <caption>Selector</caption>\n *\n * $('li').not('.apple').length;\n * //=> 2\n *\n * @example <caption>Function</caption>\n *\n * $('li').not(function(i, el) {\n *   // this === el\n *   return $(this).attr('class') === 'orange';\n * }).length;\n * //=> 2\n *\n * @see {@link http://api.jquery.com/not/}\n */\nexports.not = function (match, container) {\n  container = container || this;\n  var elements = container.toArray ? container.toArray() : container;\n  var matches;\n  var filterFn;\n\n  if (typeof match === 'string') {\n    matches = new Set(select.filter(match, elements, this.options));\n    elements = elements.filter(function (el) {\n      return !matches.has(el);\n    });\n  } else {\n    filterFn = getFilterFn(match);\n    elements = elements.filter(function (el, i) {\n      return !filterFn(el, i);\n    });\n  }\n\n  return container._make(elements);\n};\n\n/**\n * Filters the set of matched elements to only those which have the given DOM\n * element as a descendant or which have a descendant that matches the given\n * selector. Equivalent to `.filter(':has(selector)')`.\n *\n * @example <caption>Selector</caption>\n *\n * $('ul').has('.pear').attr('id');\n * //=> fruits\n *\n * @example <caption>Element</caption>\n *\n * $('ul').has($('.pear')[0]).attr('id');\n * //=> fruits\n *\n * @param {string|cheerio|node} selectorOrHaystack - Element to look for.\n *\n * @see {@link http://api.jquery.com/has/}\n */\nexports.has = function (selectorOrHaystack) {\n  var that = this;\n  return exports.filter.call(this, function () {\n    return that._make(this).find(selectorOrHaystack).length > 0;\n  });\n};\n\n/**\n * Will select the first element of a cheerio object.\n *\n * @example\n *\n * $('#fruits').children().first().text()\n * //=> Apple\n *\n * @see {@link http://api.jquery.com/first/}\n */\nexports.first = function () {\n  return this.length > 1 ? this._make(this[0]) : this;\n};\n\n/**\n * Will select the last element of a cheerio object.\n *\n * @example\n *\n * $('#fruits').children().last().text()\n * //=> Pear\n *\n * @see {@link http://api.jquery.com/last/}\n */\nexports.last = function () {\n  return this.length > 1 ? this._make(this[this.length - 1]) : this;\n};\n\n/**\n * Reduce the set of matched elements to the one at the specified index. Use\n * `.eq(-i)` to count backwards from the last selected element.\n *\n * @example\n *\n * $('li').eq(0).text()\n * //=> Apple\n *\n * $('li').eq(-1).text()\n * //=> Pear\n *\n * @param {number} i - Index of the element to select.\n *\n * @see {@link http://api.jquery.com/eq/}\n */\nexports.eq = function (i) {\n  i = +i;\n\n  // Use the first identity optimization if possible\n  if (i === 0 && this.length <= 1) return this;\n\n  if (i < 0) i = this.length + i;\n  return this[i] ? this._make(this[i]) : this._make([]);\n};\n\n/**\n * Retrieve the DOM elements matched by the Cheerio object. If an index is\n * specified, retrieve one of the elements matched by the Cheerio object.\n *\n * @example\n *\n * $('li').get(0).tagName\n * //=> li\n *\n * If no index is specified, retrieve all elements matched by the Cheerio object:\n *\n * @example\n *\n * $('li').get().length\n * //=> 3\n *\n * @param {number} [i] - Element to retrieve.\n *\n * @see {@link http://api.jquery.com/get/}\n */\nexports.get = function (i) {\n  if (i == null) {\n    return Array.prototype.slice.call(this);\n  }\n  return this[i < 0 ? this.length + i : i];\n};\n\n/**\n * Search for a given element from among the matched elements.\n *\n * @example\n *\n * $('.pear').index()\n * //=> 2\n * $('.orange').index('li')\n * //=> 1\n * $('.apple').index($('#fruit, li'))\n * //=> 1\n *\n * @param {string|cheerio|node} [selectorOrNeedle] - Element to look for.\n *\n * @see {@link http://api.jquery.com/index/}\n */\nexports.index = function (selectorOrNeedle) {\n  var $haystack;\n  var needle;\n\n  if (arguments.length === 0) {\n    $haystack = this.parent().children();\n    needle = this[0];\n  } else if (typeof selectorOrNeedle === 'string') {\n    $haystack = this._make(selectorOrNeedle);\n    needle = this[0];\n  } else {\n    $haystack = this;\n    needle = selectorOrNeedle.cheerio ? selectorOrNeedle[0] : selectorOrNeedle;\n  }\n\n  return $haystack.get().indexOf(needle);\n};\n\n/**\n * Gets the elements matching the specified range.\n *\n * @example\n *\n * $('li').slice(1).eq(0).text()\n * //=> 'Orange'\n *\n * $('li').slice(1, 2).length\n * //=> 1\n *\n * @see {@link http://api.jquery.com/slice/}\n */\nexports.slice = function () {\n  return this._make([].slice.apply(this, arguments));\n};\n\nfunction traverseParents(self, elem, selector, limit) {\n  var elems = [];\n  while (elem && elems.length < limit && elem.type !== 'root') {\n    if (!selector || exports.filter.call([elem], selector, self).length) {\n      elems.push(elem);\n    }\n    elem = elem.parent;\n  }\n  return elems;\n}\n\n/**\n * End the most recent filtering operation in the current chain and return the\n * set of matched elements to its previous state.\n *\n * @example\n *\n * $('li').eq(0).end().length\n * //=> 3\n *\n * @see {@link http://api.jquery.com/end/}\n */\nexports.end = function () {\n  return this.prevObject || this._make([]);\n};\n\n/**\n * Add elements to the set of matched elements.\n *\n * @example\n *\n * $('.apple').add('.orange').length\n * //=> 2\n *\n * @param {string|cheerio} other - Elements to add.\n * @param {cheerio} [context] - Optionally the context of the new selection.\n *\n * @see {@link http://api.jquery.com/add/}\n */\nexports.add = function (other, context) {\n  var selection = this._make(other, context);\n  var contents = uniqueSort(selection.get().concat(this.get()));\n\n  for (var i = 0; i < contents.length; ++i) {\n    selection[i] = contents[i];\n  }\n  selection.length = contents.length;\n\n  return selection;\n};\n\n/**\n * Add the previous set of elements on the stack to the current set, optionally\n * filtered by a selector.\n *\n * @example\n *\n * $('li').eq(0).addBack('.orange').length\n * //=> 2\n *\n * @param {string} selector - Selector for the elements to add.\n *\n * @see {@link http://api.jquery.com/addBack/}\n */\nexports.addBack = function (selector) {\n  return this.add(\n    arguments.length ? this.prevObject.filter(selector) : this.prevObject\n  );\n};\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/api/traversing.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/cheerio.js":
/*!*********************************************!*\
  !*** ./node_modules/cheerio/lib/cheerio.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  Module dependencies\n*/\n\nvar parse = __webpack_require__(/*! ./parse */ \"./node_modules/cheerio/lib/parse.js\");\nvar defaultOptions = __webpack_require__(/*! ./options */ \"./node_modules/cheerio/lib/options.js\").default;\nvar flattenOptions = __webpack_require__(/*! ./options */ \"./node_modules/cheerio/lib/options.js\").flatten;\nvar isHtml = __webpack_require__(/*! ./utils */ \"./node_modules/cheerio/lib/utils.js\").isHtml;\n\n/*\n * The API\n */\nvar api = [\n  __webpack_require__(/*! ./api/attributes */ \"./node_modules/cheerio/lib/api/attributes.js\"),\n  __webpack_require__(/*! ./api/traversing */ \"./node_modules/cheerio/lib/api/traversing.js\"),\n  __webpack_require__(/*! ./api/manipulation */ \"./node_modules/cheerio/lib/api/manipulation.js\"),\n  __webpack_require__(/*! ./api/css */ \"./node_modules/cheerio/lib/api/css.js\"),\n  __webpack_require__(/*! ./api/forms */ \"./node_modules/cheerio/lib/api/forms.js\"),\n];\n\n/**\n * Instance of cheerio. Methods are specified in the modules.\n * Usage of this constructor is not recommended. Please use $.load instead.\n *\n * @class\n * @hideconstructor\n * @param {string|cheerio|node|node[]} selector - The new selection.\n * @param {string|cheerio|node|node[]} [context] - Context of the selection.\n * @param {string|cheerio|node|node[]} [root] - Sets the root node.\n * @param {object} [options] - Options for the instance.\n *\n * @mixes module:cheerio/attributes\n * @mixes module:cheerio/css\n * @mixes module:cheerio/forms\n * @mixes module:cheerio/manipulation\n * @mixes module:cheerio/traversing\n */\nvar Cheerio = (module.exports = function (selector, context, root, options) {\n  if (!(this instanceof Cheerio)) {\n    return new Cheerio(selector, context, root, options);\n  }\n\n  this.options = Object.assign(\n    {},\n    defaultOptions,\n    this.options,\n    flattenOptions(options)\n  );\n\n  // $(), $(null), $(undefined), $(false)\n  if (!selector) return this;\n\n  if (root) {\n    if (typeof root === 'string') root = parse(root, this.options, false);\n    this._root = Cheerio.call(this, root);\n  }\n\n  // $($)\n  if (selector.cheerio) return selector;\n\n  // $(dom)\n  if (isNode(selector)) selector = [selector];\n\n  // $([dom])\n  if (Array.isArray(selector)) {\n    selector.forEach(function (elem, idx) {\n      this[idx] = elem;\n    }, this);\n    this.length = selector.length;\n    return this;\n  }\n\n  // $(<html>)\n  if (typeof selector === 'string' && isHtml(selector)) {\n    return Cheerio.call(this, parse(selector, this.options, false).children);\n  }\n\n  // If we don't have a context, maybe we have a root, from loading\n  if (!context) {\n    context = this._root;\n  } else if (typeof context === 'string') {\n    if (isHtml(context)) {\n      // $('li', '<ul>...</ul>')\n      context = parse(context, this.options, false);\n      context = Cheerio.call(this, context);\n    } else {\n      // $('li', 'ul')\n      selector = [context, selector].join(' ');\n      context = this._root;\n    }\n  } else if (!context.cheerio) {\n    // $('li', node), $('li', [nodes])\n    context = Cheerio.call(this, context);\n  }\n\n  // If we still don't have a context, return\n  if (!context) return this;\n\n  // #id, .class, tag\n  return context.find(selector);\n});\n\n/*\n * Set a signature of the object\n */\nCheerio.prototype.cheerio = '[cheerio object]';\n\n/*\n * Make cheerio an array-like object\n */\nCheerio.prototype.length = 0;\nCheerio.prototype.splice = Array.prototype.splice;\n\n/*\n * Make a cheerio object\n *\n * @private\n */\nCheerio.prototype._make = function (dom, context) {\n  var cheerio = new this.constructor(dom, context, this._root, this.options);\n  cheerio.prevObject = this;\n  return cheerio;\n};\n\n/**\n * Retrieve all the DOM elements contained in the jQuery set as an array.\n *\n * @example\n * $('li').toArray()\n * //=> [ {...}, {...}, {...} ]\n */\nCheerio.prototype.toArray = function () {\n  return this.get();\n};\n\n// Support for (const element of $(...)) iteration:\nif (typeof Symbol !== 'undefined') {\n  Cheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n}\n\n// Plug in the API\napi.forEach(function (mod) {\n  Object.assign(Cheerio.prototype, mod);\n});\n\nvar isNode = function (obj) {\n  return (\n    obj.name ||\n    obj.type === 'root' ||\n    obj.type === 'text' ||\n    obj.type === 'comment'\n  );\n};\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/cheerio.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/options.js":
/*!*********************************************!*\
  !*** ./node_modules/cheerio/lib/options.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n * Cheerio default options\n */\n\nexports.default = {\n  xml: false,\n  decodeEntities: true,\n};\n\nvar xmlModeDefault = { _useHtmlParser2: true, xmlMode: true };\n\nexports.flatten = function (options) {\n  return options && options.xml\n    ? typeof options.xml === 'boolean'\n      ? xmlModeDefault\n      : Object.assign({}, xmlModeDefault, options.xml)\n    : options;\n};\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/options.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/parse.js":
/*!*******************************************!*\
  !*** ./node_modules/cheerio/lib/parse.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n  Module Dependencies\n*/\nvar htmlparser = __webpack_require__(/*! htmlparser2 */ \"./node_modules/htmlparser2/lib/index.js\");\nvar parse5 = __webpack_require__(/*! parse5 */ \"./node_modules/parse5/lib/index.js\");\nvar htmlparser2Adapter = __webpack_require__(/*! parse5-htmlparser2-tree-adapter */ \"./node_modules/parse5-htmlparser2-tree-adapter/lib/index.js\");\nvar domhandler = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\nvar DomUtils = htmlparser.DomUtils;\n\n/*\n  Parser\n*/\nexports = module.exports = function parse(content, options, isDocument) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n    content = content.toString();\n  }\n\n  if (typeof content === 'string') {\n    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;\n\n    dom = useHtmlParser2\n      ? htmlparser.parseDocument(content, options)\n      : parseWithParse5(content, options, isDocument);\n  } else {\n    if (\n      typeof content === 'object' &&\n      content != null &&\n      content.type === 'root'\n    ) {\n      dom = content;\n    } else {\n      // Generic root element\n      var root = new domhandler.Document(content);\n      content.forEach(function (node) {\n        node.parent = root;\n      });\n\n      dom = root;\n    }\n  }\n\n  return dom;\n};\n\nfunction parseWithParse5(content, options, isDocument) {\n  var parse = isDocument ? parse5.parse : parse5.parseFragment;\n\n  return parse(content, {\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo,\n  });\n}\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    if (node.parent && node.parent.children !== arr) {\n      DomUtils.removeElement(node);\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    node.parent = parent;\n  }\n\n  return parent;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/parse.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/static.js":
/*!********************************************!*\
  !*** ./node_modules/cheerio/lib/static.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var htmlparser2Adapter = __webpack_require__(/*! parse5-htmlparser2-tree-adapter */ \"./node_modules/parse5-htmlparser2-tree-adapter/lib/index.js\");\n\n/**\n * @module cheerio/static\n * @ignore\n */\n\nvar serialize = __webpack_require__(/*! dom-serializer */ \"./node_modules/cheerio/node_modules/dom-serializer/lib/index.js\").default;\nvar defaultOptions = __webpack_require__(/*! ./options */ \"./node_modules/cheerio/lib/options.js\").default;\nvar flattenOptions = __webpack_require__(/*! ./options */ \"./node_modules/cheerio/lib/options.js\").flatten;\nvar select = __webpack_require__(/*! cheerio-select-tmp */ \"./node_modules/cheerio-select-tmp/lib/index.js\").select;\nvar parse5 = __webpack_require__(/*! parse5 */ \"./node_modules/parse5/lib/index.js\");\nvar parse = __webpack_require__(/*! ./parse */ \"./node_modules/cheerio/lib/parse.js\");\n\n/**\n * Create a querying function, bound to a document created from the provided\n * markup. Note that similar to web browser contexts, this operation may\n * introduce `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false`\n * to switch to fragment mode and disable this.\n *\n * See the README section titled \"Loading\" for additional usage information.\n *\n * @param {string} content - Markup to be loaded.\n * @param {object} [options] - Options for the created instance.\n * @param {boolean} [isDocument] - Allows parser to be switched to fragment mode.\n *\n */\nexports.load = function (content, options, isDocument) {\n  if (content === null || content === undefined) {\n    throw new Error('cheerio.load() expects a string');\n  }\n\n  var Cheerio = __webpack_require__(/*! ./cheerio */ \"./node_modules/cheerio/lib/cheerio.js\");\n\n  options = Object.assign({}, defaultOptions, flattenOptions(options));\n\n  if (isDocument === void 0) isDocument = true;\n\n  var root = parse(content, options, isDocument);\n\n  var initialize = function (selector, context, r, opts) {\n    if (!(this instanceof initialize)) {\n      return new initialize(selector, context, r, opts);\n    }\n    opts = Object.assign({}, options, opts);\n    return Cheerio.call(this, selector, context, r || root, opts);\n  };\n\n  // Ensure that selections created by the \"loaded\" `initialize` function are\n  // true Cheerio instances.\n  initialize.prototype = Object.create(Cheerio.prototype);\n  initialize.prototype.constructor = initialize;\n\n  // Mimic jQuery's prototype alias for plugin authors.\n  initialize.fn = initialize.prototype;\n\n  // Keep a reference to the top-level scope so we can chain methods that implicitly\n  // resolve selectors; e.g. $(\"<span>\").(\".bar\"), which otherwise loses ._root\n  initialize.prototype._originalRoot = root;\n\n  // Add in the static methods\n  Object.assign(initialize, exports);\n\n  // Add in the root\n  initialize._root = root;\n  // store options\n  initialize._options = options;\n\n  return initialize;\n};\n\n/*\n * Helper function\n */\n\nfunction render(that, dom, options) {\n  if (!dom) {\n    if (that._root && that._root.children) {\n      dom = that._root.children;\n    } else {\n      return '';\n    }\n  } else if (typeof dom === 'string') {\n    dom = select(dom, that._root, options);\n  }\n\n  if (options.xmlMode || options._useHtmlParser2) {\n    return serialize(dom, options);\n  }\n\n  // `dom-serializer` passes over the special \"root\" node and renders the\n  // node's children in its place. To mimic this behavior with `parse5`, an\n  // equivalent operation must be applied to the input array.\n  var nodes = 'length' in dom ? dom : [dom];\n  for (var index = 0; index < nodes.length; index += 1) {\n    if (nodes[index].type === 'root') {\n      nodes.splice.apply(nodes, [index, 1].concat(nodes[index].children));\n    }\n  }\n\n  return parse5.serialize(\n    { children: nodes },\n    { treeAdapter: htmlparser2Adapter }\n  );\n}\n\n/**\n * Renders the document.\n *\n * @param {string|cheerio|node} [dom] - Element to render.\n * @param {object} [options] - Options for the renderer.\n */\nexports.html = function (dom, options) {\n  // be flexible about parameters, sometimes we call html(),\n  // with options as only parameter\n  // check dom argument for dom element specific properties\n  // assume there is no 'length' or 'type' properties in the options object\n  if (\n    Object.prototype.toString.call(dom) === '[object Object]' &&\n    !options &&\n    !('length' in dom) &&\n    !('type' in dom)\n  ) {\n    options = dom;\n    dom = undefined;\n  }\n\n  // sometimes $.html() used without preloading html\n  // so fallback non existing options to the default ones\n  options = Object.assign(\n    {},\n    defaultOptions,\n    this._options,\n    flattenOptions(options || {})\n  );\n\n  return render(this, dom, options);\n};\n\n/**\n * Render the document as XML.\n *\n * @param {string|cheerio|node} [dom] - Element to render.\n */\nexports.xml = function (dom) {\n  var options = Object.assign({}, this._options, { xmlMode: true });\n\n  return render(this, dom, options);\n};\n\n/**\n * Render the document as text.\n *\n * @param {string|cheerio|node} [elems] - Elements to render.\n */\nexports.text = function (elems) {\n  if (!elems) {\n    elems = this.root();\n  }\n\n  var ret = '';\n  var len = elems.length;\n  var elem;\n\n  for (var i = 0; i < len; i++) {\n    elem = elems[i];\n    if (elem.type === 'text') ret += elem.data;\n    else if (\n      elem.children &&\n      elem.type !== 'comment' &&\n      elem.tagName !== 'script' &&\n      elem.tagName !== 'style'\n    ) {\n      ret += exports.text(elem.children);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parses a string into an array of DOM nodes. The `context` argument has no\n * meaning for Cheerio, but it is maintained for API compatibility with jQuery.\n *\n * @param {string} data - Markup that will be parsed.\n * @param {any|boolean} [context] - Will be ignored. If it is a boolean it will be used as the value of `keepScripts`.\n * @param {boolean} [keepScripts] - If false all scripts will be removed.\n *\n * @alias Cheerio.parseHTML\n * @see {@link https://api.jquery.com/jQuery.parseHTML/}\n */\nexports.parseHTML = function (data, context, keepScripts) {\n  var parsed;\n\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  parsed = this.load(data, defaultOptions, false);\n  if (!keepScripts) {\n    parsed('script').remove();\n  }\n\n  // The `children` array is used by Cheerio internally to group elements that\n  // share the same parents. When nodes created through `parseHTML` are\n  // inserted into previously-existing DOM structures, they will be removed\n  // from the `children` array. The results of `parseHTML` should remain\n  // constant across these operations, so a shallow copy should be returned.\n  return parsed.root()[0].children.slice();\n};\n\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @alias Cheerio.root\n *\n * @example\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n */\nexports.root = function () {\n  return this(this._root);\n};\n\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param {node} container - Potential parent node.\n * @param {node} contained - Potential child node.\n * @returns {boolean}\n *\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains}\n */\nexports.contains = function (container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  }\n\n  // Step up the descendants, stopping when the root element is reached\n  // (signaled by `.parent` returning a reference to the same object)\n  while (contained && contained !== contained.parent) {\n    contained = contained.parent;\n    if (contained === container) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * $.merge().\n *\n * @param {Array|cheerio} arr1 - First array.\n * @param {Array|cheerio} arr2 - Second array.\n *\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge}\n */\nexports.merge = function (arr1, arr2) {\n  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n    return;\n  }\n  var newLength = arr1.length + arr2.length;\n  for (var i = 0; i < arr2.length; i++) {\n    arr1[i + arr1.length] = arr2[i];\n  }\n  arr1.length = newLength;\n  return arr1;\n};\n\nfunction isArrayLike(item) {\n  if (Array.isArray(item)) {\n    return true;\n  }\n\n  if (\n    typeof item !== 'object' ||\n    !Object.prototype.hasOwnProperty.call(item, 'length') ||\n    typeof item.length !== 'number' ||\n    item.length < 0\n  ) {\n    return false;\n  }\n\n  for (var i = 0; i < item.length; i++) {\n    if (!(i in item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/static.js?");

/***/ }),

/***/ "./node_modules/cheerio/lib/utils.js":
/*!*******************************************!*\
  !*** ./node_modules/cheerio/lib/utils.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var htmlparser2 = __webpack_require__(/*! htmlparser2 */ \"./node_modules/htmlparser2/lib/index.js\");\nvar domhandler = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\n\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @param {node} type - DOM node to check.\n * @returns {boolean}\n *\n * @private\n */\nexports.isTag = htmlparser2.DomUtils.isTag;\n\n/**\n * Convert a string to camel case notation.\n *\n * @param  {string} str - String to be converted.\n * @returns {string}      String in camel case notation.\n *\n * @private\n */\nexports.camelCase = function (str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n};\n\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @param  {string} str - String to be converted.\n * @returns {string}      String in \"CSS case\".\n *\n * @private\n */\nexports.cssCase = function (str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n};\n\n/**\n * Iterate over each DOM element without creating intermediary Cheerio\n * instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @param {cheerio} cheerio - Cheerio object.\n * @param {Function} fn - Function to call.\n */\nexports.domEach = function (cheerio, fn) {\n  var i = 0;\n  var len = cheerio.length;\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;\n  return cheerio;\n};\n\n/**\n * Create a deep copy of the given DOM structure.\n * Sets the parents of the copies of the passed nodes to `null`.\n *\n * @param {object} dom - The htmlparser2-compliant DOM structure.\n * @private\n */\nexports.cloneDom = function (dom) {\n  var clone =\n    'length' in dom\n      ? Array.prototype.map.call(dom, function (el) {\n          return domhandler.cloneNode(el, true);\n        })\n      : [domhandler.cloneNode(dom, true)];\n\n  // Add a root node around the cloned nodes\n  var root = new domhandler.Document(clone);\n  clone.forEach(function (node) {\n    node.parent = root;\n  });\n\n  return clone;\n};\n\n/*\n * A simple way to check for HTML strings or ID strings\n */\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w-]*)$)/;\n\n/**\n * Check if string is HTML.\n *\n * @param {string} str - String to check.\n *\n * @private\n */\nexports.isHtml = function (str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if (\n    str.charAt(0) === '<' &&\n    str.charAt(str.length - 1) === '>' &&\n    str.length >= 3\n  ) {\n    return true;\n  }\n\n  // Run the regex\n  var match = quickExpr.exec(str);\n  return !!(match && match[1]);\n};\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/lib/utils.js?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/lib/foreignNames.js":
/*!******************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/lib/foreignNames.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attributeNames = exports.elementNames = void 0;\nexports.elementNames = new Map([\n    [\"altglyph\", \"altGlyph\"],\n    [\"altglyphdef\", \"altGlyphDef\"],\n    [\"altglyphitem\", \"altGlyphItem\"],\n    [\"animatecolor\", \"animateColor\"],\n    [\"animatemotion\", \"animateMotion\"],\n    [\"animatetransform\", \"animateTransform\"],\n    [\"clippath\", \"clipPath\"],\n    [\"feblend\", \"feBlend\"],\n    [\"fecolormatrix\", \"feColorMatrix\"],\n    [\"fecomponenttransfer\", \"feComponentTransfer\"],\n    [\"fecomposite\", \"feComposite\"],\n    [\"feconvolvematrix\", \"feConvolveMatrix\"],\n    [\"fediffuselighting\", \"feDiffuseLighting\"],\n    [\"fedisplacementmap\", \"feDisplacementMap\"],\n    [\"fedistantlight\", \"feDistantLight\"],\n    [\"fedropshadow\", \"feDropShadow\"],\n    [\"feflood\", \"feFlood\"],\n    [\"fefunca\", \"feFuncA\"],\n    [\"fefuncb\", \"feFuncB\"],\n    [\"fefuncg\", \"feFuncG\"],\n    [\"fefuncr\", \"feFuncR\"],\n    [\"fegaussianblur\", \"feGaussianBlur\"],\n    [\"feimage\", \"feImage\"],\n    [\"femerge\", \"feMerge\"],\n    [\"femergenode\", \"feMergeNode\"],\n    [\"femorphology\", \"feMorphology\"],\n    [\"feoffset\", \"feOffset\"],\n    [\"fepointlight\", \"fePointLight\"],\n    [\"fespecularlighting\", \"feSpecularLighting\"],\n    [\"fespotlight\", \"feSpotLight\"],\n    [\"fetile\", \"feTile\"],\n    [\"feturbulence\", \"feTurbulence\"],\n    [\"foreignobject\", \"foreignObject\"],\n    [\"glyphref\", \"glyphRef\"],\n    [\"lineargradient\", \"linearGradient\"],\n    [\"radialgradient\", \"radialGradient\"],\n    [\"textpath\", \"textPath\"],\n]);\nexports.attributeNames = new Map([\n    [\"definitionurl\", \"definitionURL\"],\n    [\"attributename\", \"attributeName\"],\n    [\"attributetype\", \"attributeType\"],\n    [\"basefrequency\", \"baseFrequency\"],\n    [\"baseprofile\", \"baseProfile\"],\n    [\"calcmode\", \"calcMode\"],\n    [\"clippathunits\", \"clipPathUnits\"],\n    [\"diffuseconstant\", \"diffuseConstant\"],\n    [\"edgemode\", \"edgeMode\"],\n    [\"filterunits\", \"filterUnits\"],\n    [\"glyphref\", \"glyphRef\"],\n    [\"gradienttransform\", \"gradientTransform\"],\n    [\"gradientunits\", \"gradientUnits\"],\n    [\"kernelmatrix\", \"kernelMatrix\"],\n    [\"kernelunitlength\", \"kernelUnitLength\"],\n    [\"keypoints\", \"keyPoints\"],\n    [\"keysplines\", \"keySplines\"],\n    [\"keytimes\", \"keyTimes\"],\n    [\"lengthadjust\", \"lengthAdjust\"],\n    [\"limitingconeangle\", \"limitingConeAngle\"],\n    [\"markerheight\", \"markerHeight\"],\n    [\"markerunits\", \"markerUnits\"],\n    [\"markerwidth\", \"markerWidth\"],\n    [\"maskcontentunits\", \"maskContentUnits\"],\n    [\"maskunits\", \"maskUnits\"],\n    [\"numoctaves\", \"numOctaves\"],\n    [\"pathlength\", \"pathLength\"],\n    [\"patterncontentunits\", \"patternContentUnits\"],\n    [\"patterntransform\", \"patternTransform\"],\n    [\"patternunits\", \"patternUnits\"],\n    [\"pointsatx\", \"pointsAtX\"],\n    [\"pointsaty\", \"pointsAtY\"],\n    [\"pointsatz\", \"pointsAtZ\"],\n    [\"preservealpha\", \"preserveAlpha\"],\n    [\"preserveaspectratio\", \"preserveAspectRatio\"],\n    [\"primitiveunits\", \"primitiveUnits\"],\n    [\"refx\", \"refX\"],\n    [\"refy\", \"refY\"],\n    [\"repeatcount\", \"repeatCount\"],\n    [\"repeatdur\", \"repeatDur\"],\n    [\"requiredextensions\", \"requiredExtensions\"],\n    [\"requiredfeatures\", \"requiredFeatures\"],\n    [\"specularconstant\", \"specularConstant\"],\n    [\"specularexponent\", \"specularExponent\"],\n    [\"spreadmethod\", \"spreadMethod\"],\n    [\"startoffset\", \"startOffset\"],\n    [\"stddeviation\", \"stdDeviation\"],\n    [\"stitchtiles\", \"stitchTiles\"],\n    [\"surfacescale\", \"surfaceScale\"],\n    [\"systemlanguage\", \"systemLanguage\"],\n    [\"tablevalues\", \"tableValues\"],\n    [\"targetx\", \"targetX\"],\n    [\"targety\", \"targetY\"],\n    [\"textlength\", \"textLength\"],\n    [\"viewbox\", \"viewBox\"],\n    [\"viewtarget\", \"viewTarget\"],\n    [\"xchannelselector\", \"xChannelSelector\"],\n    [\"ychannelselector\", \"yChannelSelector\"],\n    [\"zoomandpan\", \"zoomAndPan\"],\n]);\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/lib/foreignNames.js?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/lib/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/lib/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Module dependencies\n */\nvar ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"./node_modules/domelementtype/lib/index.js\"));\nvar entities_1 = __webpack_require__(/*! entities */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/index.js\");\n/*\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser, see\n * https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\nvar foreignNames_1 = __webpack_require__(/*! ./foreignNames */ \"./node_modules/cheerio/node_modules/dom-serializer/lib/foreignNames.js\");\nvar unencodedElements = new Set([\n    \"style\",\n    \"script\",\n    \"xmp\",\n    \"iframe\",\n    \"noembed\",\n    \"noframes\",\n    \"plaintext\",\n    \"noscript\",\n]);\n/**\n * Format attributes\n */\nfunction formatAttributes(attributes, opts) {\n    if (!attributes)\n        return;\n    return Object.keys(attributes)\n        .map(function (key) {\n        var _a, _b;\n        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n        if (opts.xmlMode === \"foreign\") {\n            /* Fix up mixed-case attribute names */\n            key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n        }\n        if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n            return key;\n        }\n        return key + \"=\\\"\" + (opts.decodeEntities ? entities_1.encodeXML(value) : value.replace(/\"/g, \"&quot;\")) + \"\\\"\";\n    })\n        .join(\" \");\n}\n/**\n * Self-enclosing tags\n */\nvar singleTag = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\",\n]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\nfunction render(node, options) {\n    if (options === void 0) { options = {}; }\n    // TODO: This is a bit hacky.\n    var nodes = Array.isArray(node) || node.cheerio ? node : [node];\n    var output = \"\";\n    for (var i = 0; i < nodes.length; i++) {\n        output += renderNode(nodes[i], options);\n    }\n    return output;\n}\nexports.default = render;\nfunction renderNode(node, options) {\n    switch (node.type) {\n        case ElementType.Root:\n            return render(node.children, options);\n        case ElementType.Directive:\n        case ElementType.Doctype:\n            return renderDirective(node);\n        case ElementType.Comment:\n            return renderComment(node);\n        case ElementType.CDATA:\n            return renderCdata(node);\n        case ElementType.Script:\n        case ElementType.Style:\n        case ElementType.Tag:\n            return renderTag(node, options);\n        case ElementType.Text:\n            return renderText(node, options);\n    }\n}\nvar foreignModeIntegrationPoints = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\",\n]);\nvar foreignElements = new Set([\"svg\", \"math\"]);\nfunction renderTag(elem, opts) {\n    var _a;\n    // Handle SVG / MathML in HTML\n    if (opts.xmlMode === \"foreign\") {\n        /* Fix up mixed-case element names */\n        elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n        /* Exit foreign mode at integration points */\n        if (elem.parent &&\n            foreignModeIntegrationPoints.has(elem.parent.name)) {\n            opts = __assign(__assign({}, opts), { xmlMode: false });\n        }\n    }\n    if (!opts.xmlMode && foreignElements.has(elem.name)) {\n        opts = __assign(__assign({}, opts), { xmlMode: \"foreign\" });\n    }\n    var tag = \"<\" + elem.name;\n    var attribs = formatAttributes(elem.attribs, opts);\n    if (attribs) {\n        tag += \" \" + attribs;\n    }\n    if (elem.children.length === 0 &&\n        (opts.xmlMode\n            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n                opts.selfClosingTags !== false\n            : // User explicitly asked for self-closing tags, even in HTML mode\n                opts.selfClosingTags && singleTag.has(elem.name))) {\n        if (!opts.xmlMode)\n            tag += \" \";\n        tag += \"/>\";\n    }\n    else {\n        tag += \">\";\n        if (elem.children.length > 0) {\n            tag += render(elem.children, opts);\n        }\n        if (opts.xmlMode || !singleTag.has(elem.name)) {\n            tag += \"</\" + elem.name + \">\";\n        }\n    }\n    return tag;\n}\nfunction renderDirective(elem) {\n    return \"<\" + elem.data + \">\";\n}\nfunction renderText(elem, opts) {\n    var data = elem.data || \"\";\n    // If entities weren't decoded, no need to encode them back\n    if (opts.decodeEntities &&\n        !(elem.parent && unencodedElements.has(elem.parent.name))) {\n        data = entities_1.encodeXML(data);\n    }\n    return data;\n}\nfunction renderCdata(elem) {\n    return \"<![CDATA[\" + elem.children[0].data + \"]]>\";\n}\nfunction renderComment(elem) {\n    return \"<!--\" + elem.data + \"-->\";\n}\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/lib/index.js?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;\nvar entities_json_1 = __importDefault(__webpack_require__(/*! ./maps/entities.json */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/entities.json\"));\nvar legacy_json_1 = __importDefault(__webpack_require__(/*! ./maps/legacy.json */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/legacy.json\"));\nvar xml_json_1 = __importDefault(__webpack_require__(/*! ./maps/xml.json */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/xml.json\"));\nvar decode_codepoint_1 = __importDefault(__webpack_require__(/*! ./decode_codepoint */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode_codepoint.js\"));\nvar strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\\da-fA-F]+|#\\d+);/g;\nexports.decodeXML = getStrictDecoder(xml_json_1.default);\nexports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);\nfunction getStrictDecoder(map) {\n    var replace = getReplacer(map);\n    return function (str) { return String(str).replace(strictEntityRe, replace); };\n}\nvar sorter = function (a, b) { return (a < b ? 1 : -1); };\nexports.decodeHTML = (function () {\n    var legacy = Object.keys(legacy_json_1.default).sort(sorter);\n    var keys = Object.keys(entities_json_1.default).sort(sorter);\n    for (var i = 0, j = 0; i < keys.length; i++) {\n        if (legacy[j] === keys[i]) {\n            keys[i] += \";?\";\n            j++;\n        }\n        else {\n            keys[i] += \";\";\n        }\n    }\n    var re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\");\n    var replace = getReplacer(entities_json_1.default);\n    function replacer(str) {\n        if (str.substr(-1) !== \";\")\n            str += \";\";\n        return replace(str);\n    }\n    // TODO consider creating a merged map\n    return function (str) { return String(str).replace(re, replacer); };\n})();\nfunction getReplacer(map) {\n    return function replace(str) {\n        if (str.charAt(1) === \"#\") {\n            var secondChar = str.charAt(2);\n            if (secondChar === \"X\" || secondChar === \"x\") {\n                return decode_codepoint_1.default(parseInt(str.substr(3), 16));\n            }\n            return decode_codepoint_1.default(parseInt(str.substr(2), 10));\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        return map[str.slice(1, -1)] || str;\n    };\n}\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode.js?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode_codepoint.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode_codepoint.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_json_1 = __importDefault(__webpack_require__(/*! ./maps/decode.json */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/decode.json\"));\n// Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nvar fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.fromCodePoint ||\n    function (codePoint) {\n        var output = \"\";\n        if (codePoint > 0xffff) {\n            codePoint -= 0x10000;\n            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n            codePoint = 0xdc00 | (codePoint & 0x3ff);\n        }\n        output += String.fromCharCode(codePoint);\n        return output;\n    };\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n    if (codePoint in decode_json_1.default) {\n        codePoint = decode_json_1.default[codePoint];\n    }\n    return fromCodePoint(codePoint);\n}\nexports.default = decodeCodePoint;\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode_codepoint.js?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/encode.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/encode.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(__webpack_require__(/*! ./maps/xml.json */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeXML = getASCIIEncoder(inverseXML);\nvar entities_json_1 = __importDefault(__webpack_require__(/*! ./maps/entities.json */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\n/**\n * Encodes all entities and non-ASCII characters in the input.\n *\n * This includes characters that are valid ASCII characters in HTML documents.\n * For example `#` will be encoded as `&num;`. To get a more compact output,\n * consider using the `encodeNonAsciiHTML` function.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\n// /[^\\0-\\x7F]/gu\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nvar getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        function (str) { return str.codePointAt(0); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c) {\n            return (c.charCodeAt(0) - 0xd800) * 0x400 +\n                c.charCodeAt(1) -\n                0xdc00 +\n                0x10000;\n        };\nfunction singleCharReplacer(c) {\n    return \"&#x\" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))\n        .toString(16)\n        .toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reEscapeChars = new RegExp(xmlReplacer.source + \"|\" + reNonASCII.source, \"g\");\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nfunction escape(data) {\n    return data.replace(reEscapeChars, singleCharReplacer);\n}\nexports.escape = escape;\n/**\n * Encodes all characters not valid in XML documents using numeric hexadecimal\n * reference (eg. `&#xfc;`).\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nfunction escapeUTF8(data) {\n    return data.replace(xmlReplacer, singleCharReplacer);\n}\nexports.escapeUTF8 = escapeUTF8;\nfunction getASCIIEncoder(obj) {\n    return function (data) {\n        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });\n    };\n}\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/encode.js?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;\nvar decode_1 = __webpack_require__(/*! ./decode */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode.js\");\nvar encode_1 = __webpack_require__(/*! ./encode */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/encode.js\");\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `decodeXML` or `decodeHTML` directly.\n */\nfunction decode(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);\n}\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.\n */\nfunction decodeStrict(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);\n}\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.\n */\nfunction encode(data, level) {\n    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);\n}\nexports.encode = encode;\nvar encode_2 = __webpack_require__(/*! ./encode */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/encode.js\");\nObject.defineProperty(exports, \"encodeXML\", { enumerable: true, get: function () { return encode_2.encodeXML; } });\nObject.defineProperty(exports, \"encodeHTML\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeNonAsciiHTML\", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return encode_2.escape; } });\nObject.defineProperty(exports, \"escapeUTF8\", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"encodeHTML4\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeHTML5\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nvar decode_2 = __webpack_require__(/*! ./decode */ \"./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/decode.js\");\nObject.defineProperty(exports, \"decodeXML\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\nObject.defineProperty(exports, \"decodeHTML\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTMLStrict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"decodeHTML4\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML5\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML4Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeHTML5Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeXMLStrict\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\n\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/index.js?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/decode.json":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/decode.json ***!
  \*****************************************************************************************************/
/*! exports provided: 0, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"0\\\":65533,\\\"128\\\":8364,\\\"130\\\":8218,\\\"131\\\":402,\\\"132\\\":8222,\\\"133\\\":8230,\\\"134\\\":8224,\\\"135\\\":8225,\\\"136\\\":710,\\\"137\\\":8240,\\\"138\\\":352,\\\"139\\\":8249,\\\"140\\\":338,\\\"142\\\":381,\\\"145\\\":8216,\\\"146\\\":8217,\\\"147\\\":8220,\\\"148\\\":8221,\\\"149\\\":8226,\\\"150\\\":8211,\\\"151\\\":8212,\\\"152\\\":732,\\\"153\\\":8482,\\\"154\\\":353,\\\"155\\\":8250,\\\"156\\\":339,\\\"158\\\":382,\\\"159\\\":376}\");\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/decode.json?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/entities.json":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/entities.json ***!
  \*******************************************************************************************************/
/*! exports provided: Aacute, aacute, Abreve, abreve, ac, acd, acE, Acirc, acirc, acute, Acy, acy, AElig, aelig, af, Afr, afr, Agrave, agrave, alefsym, aleph, Alpha, alpha, Amacr, amacr, amalg, amp, AMP, andand, And, and, andd, andslope, andv, ang, ange, angle, angmsdaa, angmsdab, angmsdac, angmsdad, angmsdae, angmsdaf, angmsdag, angmsdah, angmsd, angrt, angrtvb, angrtvbd, angsph, angst, angzarr, Aogon, aogon, Aopf, aopf, apacir, ap, apE, ape, apid, apos, ApplyFunction, approx, approxeq, Aring, aring, Ascr, ascr, Assign, ast, asymp, asympeq, Atilde, atilde, Auml, auml, awconint, awint, backcong, backepsilon, backprime, backsim, backsimeq, Backslash, Barv, barvee, barwed, Barwed, barwedge, bbrk, bbrktbrk, bcong, Bcy, bcy, bdquo, becaus, because, Because, bemptyv, bepsi, bernou, Bernoullis, Beta, beta, beth, between, Bfr, bfr, bigcap, bigcirc, bigcup, bigodot, bigoplus, bigotimes, bigsqcup, bigstar, bigtriangledown, bigtriangleup, biguplus, bigvee, bigwedge, bkarow, blacklozenge, blacksquare, blacktriangle, blacktriangledown, blacktriangleleft, blacktriangleright, blank, blk12, blk14, blk34, block, bne, bnequiv, bNot, bnot, Bopf, bopf, bot, bottom, bowtie, boxbox, boxdl, boxdL, boxDl, boxDL, boxdr, boxdR, boxDr, boxDR, boxh, boxH, boxhd, boxHd, boxhD, boxHD, boxhu, boxHu, boxhU, boxHU, boxminus, boxplus, boxtimes, boxul, boxuL, boxUl, boxUL, boxur, boxuR, boxUr, boxUR, boxv, boxV, boxvh, boxvH, boxVh, boxVH, boxvl, boxvL, boxVl, boxVL, boxvr, boxvR, boxVr, boxVR, bprime, breve, Breve, brvbar, bscr, Bscr, bsemi, bsim, bsime, bsolb, bsol, bsolhsub, bull, bullet, bump, bumpE, bumpe, Bumpeq, bumpeq, Cacute, cacute, capand, capbrcup, capcap, cap, Cap, capcup, capdot, CapitalDifferentialD, caps, caret, caron, Cayleys, ccaps, Ccaron, ccaron, Ccedil, ccedil, Ccirc, ccirc, Cconint, ccups, ccupssm, Cdot, cdot, cedil, Cedilla, cemptyv, cent, centerdot, CenterDot, cfr, Cfr, CHcy, chcy, check, checkmark, Chi, chi, circ, circeq, circlearrowleft, circlearrowright, circledast, circledcirc, circleddash, CircleDot, circledR, circledS, CircleMinus, CirclePlus, CircleTimes, cir, cirE, cire, cirfnint, cirmid, cirscir, ClockwiseContourIntegral, CloseCurlyDoubleQuote, CloseCurlyQuote, clubs, clubsuit, colon, Colon, Colone, colone, coloneq, comma, commat, comp, compfn, complement, complexes, cong, congdot, Congruent, conint, Conint, ContourIntegral, copf, Copf, coprod, Coproduct, copy, COPY, copysr, CounterClockwiseContourIntegral, crarr, cross, Cross, Cscr, cscr, csub, csube, csup, csupe, ctdot, cudarrl, cudarrr, cuepr, cuesc, cularr, cularrp, cupbrcap, cupcap, CupCap, cup, Cup, cupcup, cupdot, cupor, cups, curarr, curarrm, curlyeqprec, curlyeqsucc, curlyvee, curlywedge, curren, curvearrowleft, curvearrowright, cuvee, cuwed, cwconint, cwint, cylcty, dagger, Dagger, daleth, darr, Darr, dArr, dash, Dashv, dashv, dbkarow, dblac, Dcaron, dcaron, Dcy, dcy, ddagger, ddarr, DD, dd, DDotrahd, ddotseq, deg, Del, Delta, delta, demptyv, dfisht, Dfr, dfr, dHar, dharl, dharr, DiacriticalAcute, DiacriticalDot, DiacriticalDoubleAcute, DiacriticalGrave, DiacriticalTilde, diam, diamond, Diamond, diamondsuit, diams, die, DifferentialD, digamma, disin, div, divide, divideontimes, divonx, DJcy, djcy, dlcorn, dlcrop, dollar, Dopf, dopf, Dot, dot, DotDot, doteq, doteqdot, DotEqual, dotminus, dotplus, dotsquare, doublebarwedge, DoubleContourIntegral, DoubleDot, DoubleDownArrow, DoubleLeftArrow, DoubleLeftRightArrow, DoubleLeftTee, DoubleLongLeftArrow, DoubleLongLeftRightArrow, DoubleLongRightArrow, DoubleRightArrow, DoubleRightTee, DoubleUpArrow, DoubleUpDownArrow, DoubleVerticalBar, DownArrowBar, downarrow, DownArrow, Downarrow, DownArrowUpArrow, DownBreve, downdownarrows, downharpoonleft, downharpoonright, DownLeftRightVector, DownLeftTeeVector, DownLeftVectorBar, DownLeftVector, DownRightTeeVector, DownRightVectorBar, DownRightVector, DownTeeArrow, DownTee, drbkarow, drcorn, drcrop, Dscr, dscr, DScy, dscy, dsol, Dstrok, dstrok, dtdot, dtri, dtrif, duarr, duhar, dwangle, DZcy, dzcy, dzigrarr, Eacute, eacute, easter, Ecaron, ecaron, Ecirc, ecirc, ecir, ecolon, Ecy, ecy, eDDot, Edot, edot, eDot, ee, efDot, Efr, efr, eg, Egrave, egrave, egs, egsdot, el, Element, elinters, ell, els, elsdot, Emacr, emacr, empty, emptyset, EmptySmallSquare, emptyv, EmptyVerySmallSquare, emsp13, emsp14, emsp, ENG, eng, ensp, Eogon, eogon, Eopf, eopf, epar, eparsl, eplus, epsi, Epsilon, epsilon, epsiv, eqcirc, eqcolon, eqsim, eqslantgtr, eqslantless, Equal, equals, EqualTilde, equest, Equilibrium, equiv, equivDD, eqvparsl, erarr, erDot, escr, Escr, esdot, Esim, esim, Eta, eta, ETH, eth, Euml, euml, euro, excl, exist, Exists, expectation, exponentiale, ExponentialE, fallingdotseq, Fcy, fcy, female, ffilig, fflig, ffllig, Ffr, ffr, filig, FilledSmallSquare, FilledVerySmallSquare, fjlig, flat, fllig, fltns, fnof, Fopf, fopf, forall, ForAll, fork, forkv, Fouriertrf, fpartint, frac12, frac13, frac14, frac15, frac16, frac18, frac23, frac25, frac34, frac35, frac38, frac45, frac56, frac58, frac78, frasl, frown, fscr, Fscr, gacute, Gamma, gamma, Gammad, gammad, gap, Gbreve, gbreve, Gcedil, Gcirc, gcirc, Gcy, gcy, Gdot, gdot, ge, gE, gEl, gel, geq, geqq, geqslant, gescc, ges, gesdot, gesdoto, gesdotol, gesl, gesles, Gfr, gfr, gg, Gg, ggg, gimel, GJcy, gjcy, gla, gl, glE, glj, gnap, gnapprox, gne, gnE, gneq, gneqq, gnsim, Gopf, gopf, grave, GreaterEqual, GreaterEqualLess, GreaterFullEqual, GreaterGreater, GreaterLess, GreaterSlantEqual, GreaterTilde, Gscr, gscr, gsim, gsime, gsiml, gtcc, gtcir, gt, GT, Gt, gtdot, gtlPar, gtquest, gtrapprox, gtrarr, gtrdot, gtreqless, gtreqqless, gtrless, gtrsim, gvertneqq, gvnE, Hacek, hairsp, half, hamilt, HARDcy, hardcy, harrcir, harr, hArr, harrw, Hat, hbar, Hcirc, hcirc, hearts, heartsuit, hellip, hercon, hfr, Hfr, HilbertSpace, hksearow, hkswarow, hoarr, homtht, hookleftarrow, hookrightarrow, hopf, Hopf, horbar, HorizontalLine, hscr, Hscr, hslash, Hstrok, hstrok, HumpDownHump, HumpEqual, hybull, hyphen, Iacute, iacute, ic, Icirc, icirc, Icy, icy, Idot, IEcy, iecy, iexcl, iff, ifr, Ifr, Igrave, igrave, ii, iiiint, iiint, iinfin, iiota, IJlig, ijlig, Imacr, imacr, image, ImaginaryI, imagline, imagpart, imath, Im, imof, imped, Implies, incare, in, infin, infintie, inodot, intcal, int, Int, integers, Integral, intercal, Intersection, intlarhk, intprod, InvisibleComma, InvisibleTimes, IOcy, iocy, Iogon, iogon, Iopf, iopf, Iota, iota, iprod, iquest, iscr, Iscr, isin, isindot, isinE, isins, isinsv, isinv, it, Itilde, itilde, Iukcy, iukcy, Iuml, iuml, Jcirc, jcirc, Jcy, jcy, Jfr, jfr, jmath, Jopf, jopf, Jscr, jscr, Jsercy, jsercy, Jukcy, jukcy, Kappa, kappa, kappav, Kcedil, kcedil, Kcy, kcy, Kfr, kfr, kgreen, KHcy, khcy, KJcy, kjcy, Kopf, kopf, Kscr, kscr, lAarr, Lacute, lacute, laemptyv, lagran, Lambda, lambda, lang, Lang, langd, langle, lap, Laplacetrf, laquo, larrb, larrbfs, larr, Larr, lArr, larrfs, larrhk, larrlp, larrpl, larrsim, larrtl, latail, lAtail, lat, late, lates, lbarr, lBarr, lbbrk, lbrace, lbrack, lbrke, lbrksld, lbrkslu, Lcaron, lcaron, Lcedil, lcedil, lceil, lcub, Lcy, lcy, ldca, ldquo, ldquor, ldrdhar, ldrushar, ldsh, le, lE, LeftAngleBracket, LeftArrowBar, leftarrow, LeftArrow, Leftarrow, LeftArrowRightArrow, leftarrowtail, LeftCeiling, LeftDoubleBracket, LeftDownTeeVector, LeftDownVectorBar, LeftDownVector, LeftFloor, leftharpoondown, leftharpoonup, leftleftarrows, leftrightarrow, LeftRightArrow, Leftrightarrow, leftrightarrows, leftrightharpoons, leftrightsquigarrow, LeftRightVector, LeftTeeArrow, LeftTee, LeftTeeVector, leftthreetimes, LeftTriangleBar, LeftTriangle, LeftTriangleEqual, LeftUpDownVector, LeftUpTeeVector, LeftUpVectorBar, LeftUpVector, LeftVectorBar, LeftVector, lEg, leg, leq, leqq, leqslant, lescc, les, lesdot, lesdoto, lesdotor, lesg, lesges, lessapprox, lessdot, lesseqgtr, lesseqqgtr, LessEqualGreater, LessFullEqual, LessGreater, lessgtr, LessLess, lesssim, LessSlantEqual, LessTilde, lfisht, lfloor, Lfr, lfr, lg, lgE, lHar, lhard, lharu, lharul, lhblk, LJcy, ljcy, llarr, ll, Ll, llcorner, Lleftarrow, llhard, lltri, Lmidot, lmidot, lmoustache, lmoust, lnap, lnapprox, lne, lnE, lneq, lneqq, lnsim, loang, loarr, lobrk, longleftarrow, LongLeftArrow, Longleftarrow, longleftrightarrow, LongLeftRightArrow, Longleftrightarrow, longmapsto, longrightarrow, LongRightArrow, Longrightarrow, looparrowleft, looparrowright, lopar, Lopf, lopf, loplus, lotimes, lowast, lowbar, LowerLeftArrow, LowerRightArrow, loz, lozenge, lozf, lpar, lparlt, lrarr, lrcorner, lrhar, lrhard, lrm, lrtri, lsaquo, lscr, Lscr, lsh, Lsh, lsim, lsime, lsimg, lsqb, lsquo, lsquor, Lstrok, lstrok, ltcc, ltcir, lt, LT, Lt, ltdot, lthree, ltimes, ltlarr, ltquest, ltri, ltrie, ltrif, ltrPar, lurdshar, luruhar, lvertneqq, lvnE, macr, male, malt, maltese, Map, map, mapsto, mapstodown, mapstoleft, mapstoup, marker, mcomma, Mcy, mcy, mdash, mDDot, measuredangle, MediumSpace, Mellintrf, Mfr, mfr, mho, micro, midast, midcir, mid, middot, minusb, minus, minusd, minusdu, MinusPlus, mlcp, mldr, mnplus, models, Mopf, mopf, mp, mscr, Mscr, mstpos, Mu, mu, multimap, mumap, nabla, Nacute, nacute, nang, nap, napE, napid, napos, napprox, natural, naturals, natur, nbsp, nbump, nbumpe, ncap, Ncaron, ncaron, Ncedil, ncedil, ncong, ncongdot, ncup, Ncy, ncy, ndash, nearhk, nearr, neArr, nearrow, ne, nedot, NegativeMediumSpace, NegativeThickSpace, NegativeThinSpace, NegativeVeryThinSpace, nequiv, nesear, nesim, NestedGreaterGreater, NestedLessLess, NewLine, nexist, nexists, Nfr, nfr, ngE, nge, ngeq, ngeqq, ngeqslant, nges, nGg, ngsim, nGt, ngt, ngtr, nGtv, nharr, nhArr, nhpar, ni, nis, nisd, niv, NJcy, njcy, nlarr, nlArr, nldr, nlE, nle, nleftarrow, nLeftarrow, nleftrightarrow, nLeftrightarrow, nleq, nleqq, nleqslant, nles, nless, nLl, nlsim, nLt, nlt, nltri, nltrie, nLtv, nmid, NoBreak, NonBreakingSpace, nopf, Nopf, Not, not, NotCongruent, NotCupCap, NotDoubleVerticalBar, NotElement, NotEqual, NotEqualTilde, NotExists, NotGreater, NotGreaterEqual, NotGreaterFullEqual, NotGreaterGreater, NotGreaterLess, NotGreaterSlantEqual, NotGreaterTilde, NotHumpDownHump, NotHumpEqual, notin, notindot, notinE, notinva, notinvb, notinvc, NotLeftTriangleBar, NotLeftTriangle, NotLeftTriangleEqual, NotLess, NotLessEqual, NotLessGreater, NotLessLess, NotLessSlantEqual, NotLessTilde, NotNestedGreaterGreater, NotNestedLessLess, notni, notniva, notnivb, notnivc, NotPrecedes, NotPrecedesEqual, NotPrecedesSlantEqual, NotReverseElement, NotRightTriangleBar, NotRightTriangle, NotRightTriangleEqual, NotSquareSubset, NotSquareSubsetEqual, NotSquareSuperset, NotSquareSupersetEqual, NotSubset, NotSubsetEqual, NotSucceeds, NotSucceedsEqual, NotSucceedsSlantEqual, NotSucceedsTilde, NotSuperset, NotSupersetEqual, NotTilde, NotTildeEqual, NotTildeFullEqual, NotTildeTilde, NotVerticalBar, nparallel, npar, nparsl, npart, npolint, npr, nprcue, nprec, npreceq, npre, nrarrc, nrarr, nrArr, nrarrw, nrightarrow, nRightarrow, nrtri, nrtrie, nsc, nsccue, nsce, Nscr, nscr, nshortmid, nshortparallel, nsim, nsime, nsimeq, nsmid, nspar, nsqsube, nsqsupe, nsub, nsubE, nsube, nsubset, nsubseteq, nsubseteqq, nsucc, nsucceq, nsup, nsupE, nsupe, nsupset, nsupseteq, nsupseteqq, ntgl, Ntilde, ntilde, ntlg, ntriangleleft, ntrianglelefteq, ntriangleright, ntrianglerighteq, Nu, nu, num, numero, numsp, nvap, nvdash, nvDash, nVdash, nVDash, nvge, nvgt, nvHarr, nvinfin, nvlArr, nvle, nvlt, nvltrie, nvrArr, nvrtrie, nvsim, nwarhk, nwarr, nwArr, nwarrow, nwnear, Oacute, oacute, oast, Ocirc, ocirc, ocir, Ocy, ocy, odash, Odblac, odblac, odiv, odot, odsold, OElig, oelig, ofcir, Ofr, ofr, ogon, Ograve, ograve, ogt, ohbar, ohm, oint, olarr, olcir, olcross, oline, olt, Omacr, omacr, Omega, omega, Omicron, omicron, omid, ominus, Oopf, oopf, opar, OpenCurlyDoubleQuote, OpenCurlyQuote, operp, oplus, orarr, Or, or, ord, order, orderof, ordf, ordm, origof, oror, orslope, orv, oS, Oscr, oscr, Oslash, oslash, osol, Otilde, otilde, otimesas, Otimes, otimes, Ouml, ouml, ovbar, OverBar, OverBrace, OverBracket, OverParenthesis, para, parallel, par, parsim, parsl, part, PartialD, Pcy, pcy, percnt, period, permil, perp, pertenk, Pfr, pfr, Phi, phi, phiv, phmmat, phone, Pi, pi, pitchfork, piv, planck, planckh, plankv, plusacir, plusb, pluscir, plus, plusdo, plusdu, pluse, PlusMinus, plusmn, plussim, plustwo, pm, Poincareplane, pointint, popf, Popf, pound, prap, Pr, pr, prcue, precapprox, prec, preccurlyeq, Precedes, PrecedesEqual, PrecedesSlantEqual, PrecedesTilde, preceq, precnapprox, precneqq, precnsim, pre, prE, precsim, prime, Prime, primes, prnap, prnE, prnsim, prod, Product, profalar, profline, profsurf, prop, Proportional, Proportion, propto, prsim, prurel, Pscr, pscr, Psi, psi, puncsp, Qfr, qfr, qint, qopf, Qopf, qprime, Qscr, qscr, quaternions, quatint, quest, questeq, quot, QUOT, rAarr, race, Racute, racute, radic, raemptyv, rang, Rang, rangd, range, rangle, raquo, rarrap, rarrb, rarrbfs, rarrc, rarr, Rarr, rArr, rarrfs, rarrhk, rarrlp, rarrpl, rarrsim, Rarrtl, rarrtl, rarrw, ratail, rAtail, ratio, rationals, rbarr, rBarr, RBarr, rbbrk, rbrace, rbrack, rbrke, rbrksld, rbrkslu, Rcaron, rcaron, Rcedil, rcedil, rceil, rcub, Rcy, rcy, rdca, rdldhar, rdquo, rdquor, rdsh, real, realine, realpart, reals, Re, rect, reg, REG, ReverseElement, ReverseEquilibrium, ReverseUpEquilibrium, rfisht, rfloor, rfr, Rfr, rHar, rhard, rharu, rharul, Rho, rho, rhov, RightAngleBracket, RightArrowBar, rightarrow, RightArrow, Rightarrow, RightArrowLeftArrow, rightarrowtail, RightCeiling, RightDoubleBracket, RightDownTeeVector, RightDownVectorBar, RightDownVector, RightFloor, rightharpoondown, rightharpoonup, rightleftarrows, rightleftharpoons, rightrightarrows, rightsquigarrow, RightTeeArrow, RightTee, RightTeeVector, rightthreetimes, RightTriangleBar, RightTriangle, RightTriangleEqual, RightUpDownVector, RightUpTeeVector, RightUpVectorBar, RightUpVector, RightVectorBar, RightVector, ring, risingdotseq, rlarr, rlhar, rlm, rmoustache, rmoust, rnmid, roang, roarr, robrk, ropar, ropf, Ropf, roplus, rotimes, RoundImplies, rpar, rpargt, rppolint, rrarr, Rrightarrow, rsaquo, rscr, Rscr, rsh, Rsh, rsqb, rsquo, rsquor, rthree, rtimes, rtri, rtrie, rtrif, rtriltri, RuleDelayed, ruluhar, rx, Sacute, sacute, sbquo, scap, Scaron, scaron, Sc, sc, sccue, sce, scE, Scedil, scedil, Scirc, scirc, scnap, scnE, scnsim, scpolint, scsim, Scy, scy, sdotb, sdot, sdote, searhk, searr, seArr, searrow, sect, semi, seswar, setminus, setmn, sext, Sfr, sfr, sfrown, sharp, SHCHcy, shchcy, SHcy, shcy, ShortDownArrow, ShortLeftArrow, shortmid, shortparallel, ShortRightArrow, ShortUpArrow, shy, Sigma, sigma, sigmaf, sigmav, sim, simdot, sime, simeq, simg, simgE, siml, simlE, simne, simplus, simrarr, slarr, SmallCircle, smallsetminus, smashp, smeparsl, smid, smile, smt, smte, smtes, SOFTcy, softcy, solbar, solb, sol, Sopf, sopf, spades, spadesuit, spar, sqcap, sqcaps, sqcup, sqcups, Sqrt, sqsub, sqsube, sqsubset, sqsubseteq, sqsup, sqsupe, sqsupset, sqsupseteq, square, Square, SquareIntersection, SquareSubset, SquareSubsetEqual, SquareSuperset, SquareSupersetEqual, SquareUnion, squarf, squ, squf, srarr, Sscr, sscr, ssetmn, ssmile, sstarf, Star, star, starf, straightepsilon, straightphi, strns, sub, Sub, subdot, subE, sube, subedot, submult, subnE, subne, subplus, subrarr, subset, Subset, subseteq, subseteqq, SubsetEqual, subsetneq, subsetneqq, subsim, subsub, subsup, succapprox, succ, succcurlyeq, Succeeds, SucceedsEqual, SucceedsSlantEqual, SucceedsTilde, succeq, succnapprox, succneqq, succnsim, succsim, SuchThat, sum, Sum, sung, sup1, sup2, sup3, sup, Sup, supdot, supdsub, supE, supe, supedot, Superset, SupersetEqual, suphsol, suphsub, suplarr, supmult, supnE, supne, supplus, supset, Supset, supseteq, supseteqq, supsetneq, supsetneqq, supsim, supsub, supsup, swarhk, swarr, swArr, swarrow, swnwar, szlig, Tab, target, Tau, tau, tbrk, Tcaron, tcaron, Tcedil, tcedil, Tcy, tcy, tdot, telrec, Tfr, tfr, there4, therefore, Therefore, Theta, theta, thetasym, thetav, thickapprox, thicksim, ThickSpace, ThinSpace, thinsp, thkap, thksim, THORN, thorn, tilde, Tilde, TildeEqual, TildeFullEqual, TildeTilde, timesbar, timesb, times, timesd, tint, toea, topbot, topcir, top, Topf, topf, topfork, tosa, tprime, trade, TRADE, triangle, triangledown, triangleleft, trianglelefteq, triangleq, triangleright, trianglerighteq, tridot, trie, triminus, TripleDot, triplus, trisb, tritime, trpezium, Tscr, tscr, TScy, tscy, TSHcy, tshcy, Tstrok, tstrok, twixt, twoheadleftarrow, twoheadrightarrow, Uacute, uacute, uarr, Uarr, uArr, Uarrocir, Ubrcy, ubrcy, Ubreve, ubreve, Ucirc, ucirc, Ucy, ucy, udarr, Udblac, udblac, udhar, ufisht, Ufr, ufr, Ugrave, ugrave, uHar, uharl, uharr, uhblk, ulcorn, ulcorner, ulcrop, ultri, Umacr, umacr, uml, UnderBar, UnderBrace, UnderBracket, UnderParenthesis, Union, UnionPlus, Uogon, uogon, Uopf, uopf, UpArrowBar, uparrow, UpArrow, Uparrow, UpArrowDownArrow, updownarrow, UpDownArrow, Updownarrow, UpEquilibrium, upharpoonleft, upharpoonright, uplus, UpperLeftArrow, UpperRightArrow, upsi, Upsi, upsih, Upsilon, upsilon, UpTeeArrow, UpTee, upuparrows, urcorn, urcorner, urcrop, Uring, uring, urtri, Uscr, uscr, utdot, Utilde, utilde, utri, utrif, uuarr, Uuml, uuml, uwangle, vangrt, varepsilon, varkappa, varnothing, varphi, varpi, varpropto, varr, vArr, varrho, varsigma, varsubsetneq, varsubsetneqq, varsupsetneq, varsupsetneqq, vartheta, vartriangleleft, vartriangleright, vBar, Vbar, vBarv, Vcy, vcy, vdash, vDash, Vdash, VDash, Vdashl, veebar, vee, Vee, veeeq, vellip, verbar, Verbar, vert, Vert, VerticalBar, VerticalLine, VerticalSeparator, VerticalTilde, VeryThinSpace, Vfr, vfr, vltri, vnsub, vnsup, Vopf, vopf, vprop, vrtri, Vscr, vscr, vsubnE, vsubne, vsupnE, vsupne, Vvdash, vzigzag, Wcirc, wcirc, wedbar, wedge, Wedge, wedgeq, weierp, Wfr, wfr, Wopf, wopf, wp, wr, wreath, Wscr, wscr, xcap, xcirc, xcup, xdtri, Xfr, xfr, xharr, xhArr, Xi, xi, xlarr, xlArr, xmap, xnis, xodot, Xopf, xopf, xoplus, xotime, xrarr, xrArr, Xscr, xscr, xsqcup, xuplus, xutri, xvee, xwedge, Yacute, yacute, YAcy, yacy, Ycirc, ycirc, Ycy, ycy, yen, Yfr, yfr, YIcy, yicy, Yopf, yopf, Yscr, yscr, YUcy, yucy, yuml, Yuml, Zacute, zacute, Zcaron, zcaron, Zcy, zcy, Zdot, zdot, zeetrf, ZeroWidthSpace, Zeta, zeta, zfr, Zfr, ZHcy, zhcy, zigrarr, zopf, Zopf, Zscr, zscr, zwj, zwnj, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"Aacute\\\":\\\"Á\\\",\\\"aacute\\\":\\\"á\\\",\\\"Abreve\\\":\\\"Ă\\\",\\\"abreve\\\":\\\"ă\\\",\\\"ac\\\":\\\"∾\\\",\\\"acd\\\":\\\"∿\\\",\\\"acE\\\":\\\"∾̳\\\",\\\"Acirc\\\":\\\"Â\\\",\\\"acirc\\\":\\\"â\\\",\\\"acute\\\":\\\"´\\\",\\\"Acy\\\":\\\"А\\\",\\\"acy\\\":\\\"а\\\",\\\"AElig\\\":\\\"Æ\\\",\\\"aelig\\\":\\\"æ\\\",\\\"af\\\":\\\"⁡\\\",\\\"Afr\\\":\\\"𝔄\\\",\\\"afr\\\":\\\"𝔞\\\",\\\"Agrave\\\":\\\"À\\\",\\\"agrave\\\":\\\"à\\\",\\\"alefsym\\\":\\\"ℵ\\\",\\\"aleph\\\":\\\"ℵ\\\",\\\"Alpha\\\":\\\"Α\\\",\\\"alpha\\\":\\\"α\\\",\\\"Amacr\\\":\\\"Ā\\\",\\\"amacr\\\":\\\"ā\\\",\\\"amalg\\\":\\\"⨿\\\",\\\"amp\\\":\\\"&\\\",\\\"AMP\\\":\\\"&\\\",\\\"andand\\\":\\\"⩕\\\",\\\"And\\\":\\\"⩓\\\",\\\"and\\\":\\\"∧\\\",\\\"andd\\\":\\\"⩜\\\",\\\"andslope\\\":\\\"⩘\\\",\\\"andv\\\":\\\"⩚\\\",\\\"ang\\\":\\\"∠\\\",\\\"ange\\\":\\\"⦤\\\",\\\"angle\\\":\\\"∠\\\",\\\"angmsdaa\\\":\\\"⦨\\\",\\\"angmsdab\\\":\\\"⦩\\\",\\\"angmsdac\\\":\\\"⦪\\\",\\\"angmsdad\\\":\\\"⦫\\\",\\\"angmsdae\\\":\\\"⦬\\\",\\\"angmsdaf\\\":\\\"⦭\\\",\\\"angmsdag\\\":\\\"⦮\\\",\\\"angmsdah\\\":\\\"⦯\\\",\\\"angmsd\\\":\\\"∡\\\",\\\"angrt\\\":\\\"∟\\\",\\\"angrtvb\\\":\\\"⊾\\\",\\\"angrtvbd\\\":\\\"⦝\\\",\\\"angsph\\\":\\\"∢\\\",\\\"angst\\\":\\\"Å\\\",\\\"angzarr\\\":\\\"⍼\\\",\\\"Aogon\\\":\\\"Ą\\\",\\\"aogon\\\":\\\"ą\\\",\\\"Aopf\\\":\\\"𝔸\\\",\\\"aopf\\\":\\\"𝕒\\\",\\\"apacir\\\":\\\"⩯\\\",\\\"ap\\\":\\\"≈\\\",\\\"apE\\\":\\\"⩰\\\",\\\"ape\\\":\\\"≊\\\",\\\"apid\\\":\\\"≋\\\",\\\"apos\\\":\\\"'\\\",\\\"ApplyFunction\\\":\\\"⁡\\\",\\\"approx\\\":\\\"≈\\\",\\\"approxeq\\\":\\\"≊\\\",\\\"Aring\\\":\\\"Å\\\",\\\"aring\\\":\\\"å\\\",\\\"Ascr\\\":\\\"𝒜\\\",\\\"ascr\\\":\\\"𝒶\\\",\\\"Assign\\\":\\\"≔\\\",\\\"ast\\\":\\\"*\\\",\\\"asymp\\\":\\\"≈\\\",\\\"asympeq\\\":\\\"≍\\\",\\\"Atilde\\\":\\\"Ã\\\",\\\"atilde\\\":\\\"ã\\\",\\\"Auml\\\":\\\"Ä\\\",\\\"auml\\\":\\\"ä\\\",\\\"awconint\\\":\\\"∳\\\",\\\"awint\\\":\\\"⨑\\\",\\\"backcong\\\":\\\"≌\\\",\\\"backepsilon\\\":\\\"϶\\\",\\\"backprime\\\":\\\"‵\\\",\\\"backsim\\\":\\\"∽\\\",\\\"backsimeq\\\":\\\"⋍\\\",\\\"Backslash\\\":\\\"∖\\\",\\\"Barv\\\":\\\"⫧\\\",\\\"barvee\\\":\\\"⊽\\\",\\\"barwed\\\":\\\"⌅\\\",\\\"Barwed\\\":\\\"⌆\\\",\\\"barwedge\\\":\\\"⌅\\\",\\\"bbrk\\\":\\\"⎵\\\",\\\"bbrktbrk\\\":\\\"⎶\\\",\\\"bcong\\\":\\\"≌\\\",\\\"Bcy\\\":\\\"Б\\\",\\\"bcy\\\":\\\"б\\\",\\\"bdquo\\\":\\\"„\\\",\\\"becaus\\\":\\\"∵\\\",\\\"because\\\":\\\"∵\\\",\\\"Because\\\":\\\"∵\\\",\\\"bemptyv\\\":\\\"⦰\\\",\\\"bepsi\\\":\\\"϶\\\",\\\"bernou\\\":\\\"ℬ\\\",\\\"Bernoullis\\\":\\\"ℬ\\\",\\\"Beta\\\":\\\"Β\\\",\\\"beta\\\":\\\"β\\\",\\\"beth\\\":\\\"ℶ\\\",\\\"between\\\":\\\"≬\\\",\\\"Bfr\\\":\\\"𝔅\\\",\\\"bfr\\\":\\\"𝔟\\\",\\\"bigcap\\\":\\\"⋂\\\",\\\"bigcirc\\\":\\\"◯\\\",\\\"bigcup\\\":\\\"⋃\\\",\\\"bigodot\\\":\\\"⨀\\\",\\\"bigoplus\\\":\\\"⨁\\\",\\\"bigotimes\\\":\\\"⨂\\\",\\\"bigsqcup\\\":\\\"⨆\\\",\\\"bigstar\\\":\\\"★\\\",\\\"bigtriangledown\\\":\\\"▽\\\",\\\"bigtriangleup\\\":\\\"△\\\",\\\"biguplus\\\":\\\"⨄\\\",\\\"bigvee\\\":\\\"⋁\\\",\\\"bigwedge\\\":\\\"⋀\\\",\\\"bkarow\\\":\\\"⤍\\\",\\\"blacklozenge\\\":\\\"⧫\\\",\\\"blacksquare\\\":\\\"▪\\\",\\\"blacktriangle\\\":\\\"▴\\\",\\\"blacktriangledown\\\":\\\"▾\\\",\\\"blacktriangleleft\\\":\\\"◂\\\",\\\"blacktriangleright\\\":\\\"▸\\\",\\\"blank\\\":\\\"␣\\\",\\\"blk12\\\":\\\"▒\\\",\\\"blk14\\\":\\\"░\\\",\\\"blk34\\\":\\\"▓\\\",\\\"block\\\":\\\"█\\\",\\\"bne\\\":\\\"=⃥\\\",\\\"bnequiv\\\":\\\"≡⃥\\\",\\\"bNot\\\":\\\"⫭\\\",\\\"bnot\\\":\\\"⌐\\\",\\\"Bopf\\\":\\\"𝔹\\\",\\\"bopf\\\":\\\"𝕓\\\",\\\"bot\\\":\\\"⊥\\\",\\\"bottom\\\":\\\"⊥\\\",\\\"bowtie\\\":\\\"⋈\\\",\\\"boxbox\\\":\\\"⧉\\\",\\\"boxdl\\\":\\\"┐\\\",\\\"boxdL\\\":\\\"╕\\\",\\\"boxDl\\\":\\\"╖\\\",\\\"boxDL\\\":\\\"╗\\\",\\\"boxdr\\\":\\\"┌\\\",\\\"boxdR\\\":\\\"╒\\\",\\\"boxDr\\\":\\\"╓\\\",\\\"boxDR\\\":\\\"╔\\\",\\\"boxh\\\":\\\"─\\\",\\\"boxH\\\":\\\"═\\\",\\\"boxhd\\\":\\\"┬\\\",\\\"boxHd\\\":\\\"╤\\\",\\\"boxhD\\\":\\\"╥\\\",\\\"boxHD\\\":\\\"╦\\\",\\\"boxhu\\\":\\\"┴\\\",\\\"boxHu\\\":\\\"╧\\\",\\\"boxhU\\\":\\\"╨\\\",\\\"boxHU\\\":\\\"╩\\\",\\\"boxminus\\\":\\\"⊟\\\",\\\"boxplus\\\":\\\"⊞\\\",\\\"boxtimes\\\":\\\"⊠\\\",\\\"boxul\\\":\\\"┘\\\",\\\"boxuL\\\":\\\"╛\\\",\\\"boxUl\\\":\\\"╜\\\",\\\"boxUL\\\":\\\"╝\\\",\\\"boxur\\\":\\\"└\\\",\\\"boxuR\\\":\\\"╘\\\",\\\"boxUr\\\":\\\"╙\\\",\\\"boxUR\\\":\\\"╚\\\",\\\"boxv\\\":\\\"│\\\",\\\"boxV\\\":\\\"║\\\",\\\"boxvh\\\":\\\"┼\\\",\\\"boxvH\\\":\\\"╪\\\",\\\"boxVh\\\":\\\"╫\\\",\\\"boxVH\\\":\\\"╬\\\",\\\"boxvl\\\":\\\"┤\\\",\\\"boxvL\\\":\\\"╡\\\",\\\"boxVl\\\":\\\"╢\\\",\\\"boxVL\\\":\\\"╣\\\",\\\"boxvr\\\":\\\"├\\\",\\\"boxvR\\\":\\\"╞\\\",\\\"boxVr\\\":\\\"╟\\\",\\\"boxVR\\\":\\\"╠\\\",\\\"bprime\\\":\\\"‵\\\",\\\"breve\\\":\\\"˘\\\",\\\"Breve\\\":\\\"˘\\\",\\\"brvbar\\\":\\\"¦\\\",\\\"bscr\\\":\\\"𝒷\\\",\\\"Bscr\\\":\\\"ℬ\\\",\\\"bsemi\\\":\\\"⁏\\\",\\\"bsim\\\":\\\"∽\\\",\\\"bsime\\\":\\\"⋍\\\",\\\"bsolb\\\":\\\"⧅\\\",\\\"bsol\\\":\\\"\\\\\\\\\\\",\\\"bsolhsub\\\":\\\"⟈\\\",\\\"bull\\\":\\\"•\\\",\\\"bullet\\\":\\\"•\\\",\\\"bump\\\":\\\"≎\\\",\\\"bumpE\\\":\\\"⪮\\\",\\\"bumpe\\\":\\\"≏\\\",\\\"Bumpeq\\\":\\\"≎\\\",\\\"bumpeq\\\":\\\"≏\\\",\\\"Cacute\\\":\\\"Ć\\\",\\\"cacute\\\":\\\"ć\\\",\\\"capand\\\":\\\"⩄\\\",\\\"capbrcup\\\":\\\"⩉\\\",\\\"capcap\\\":\\\"⩋\\\",\\\"cap\\\":\\\"∩\\\",\\\"Cap\\\":\\\"⋒\\\",\\\"capcup\\\":\\\"⩇\\\",\\\"capdot\\\":\\\"⩀\\\",\\\"CapitalDifferentialD\\\":\\\"ⅅ\\\",\\\"caps\\\":\\\"∩︀\\\",\\\"caret\\\":\\\"⁁\\\",\\\"caron\\\":\\\"ˇ\\\",\\\"Cayleys\\\":\\\"ℭ\\\",\\\"ccaps\\\":\\\"⩍\\\",\\\"Ccaron\\\":\\\"Č\\\",\\\"ccaron\\\":\\\"č\\\",\\\"Ccedil\\\":\\\"Ç\\\",\\\"ccedil\\\":\\\"ç\\\",\\\"Ccirc\\\":\\\"Ĉ\\\",\\\"ccirc\\\":\\\"ĉ\\\",\\\"Cconint\\\":\\\"∰\\\",\\\"ccups\\\":\\\"⩌\\\",\\\"ccupssm\\\":\\\"⩐\\\",\\\"Cdot\\\":\\\"Ċ\\\",\\\"cdot\\\":\\\"ċ\\\",\\\"cedil\\\":\\\"¸\\\",\\\"Cedilla\\\":\\\"¸\\\",\\\"cemptyv\\\":\\\"⦲\\\",\\\"cent\\\":\\\"¢\\\",\\\"centerdot\\\":\\\"·\\\",\\\"CenterDot\\\":\\\"·\\\",\\\"cfr\\\":\\\"𝔠\\\",\\\"Cfr\\\":\\\"ℭ\\\",\\\"CHcy\\\":\\\"Ч\\\",\\\"chcy\\\":\\\"ч\\\",\\\"check\\\":\\\"✓\\\",\\\"checkmark\\\":\\\"✓\\\",\\\"Chi\\\":\\\"Χ\\\",\\\"chi\\\":\\\"χ\\\",\\\"circ\\\":\\\"ˆ\\\",\\\"circeq\\\":\\\"≗\\\",\\\"circlearrowleft\\\":\\\"↺\\\",\\\"circlearrowright\\\":\\\"↻\\\",\\\"circledast\\\":\\\"⊛\\\",\\\"circledcirc\\\":\\\"⊚\\\",\\\"circleddash\\\":\\\"⊝\\\",\\\"CircleDot\\\":\\\"⊙\\\",\\\"circledR\\\":\\\"®\\\",\\\"circledS\\\":\\\"Ⓢ\\\",\\\"CircleMinus\\\":\\\"⊖\\\",\\\"CirclePlus\\\":\\\"⊕\\\",\\\"CircleTimes\\\":\\\"⊗\\\",\\\"cir\\\":\\\"○\\\",\\\"cirE\\\":\\\"⧃\\\",\\\"cire\\\":\\\"≗\\\",\\\"cirfnint\\\":\\\"⨐\\\",\\\"cirmid\\\":\\\"⫯\\\",\\\"cirscir\\\":\\\"⧂\\\",\\\"ClockwiseContourIntegral\\\":\\\"∲\\\",\\\"CloseCurlyDoubleQuote\\\":\\\"”\\\",\\\"CloseCurlyQuote\\\":\\\"’\\\",\\\"clubs\\\":\\\"♣\\\",\\\"clubsuit\\\":\\\"♣\\\",\\\"colon\\\":\\\":\\\",\\\"Colon\\\":\\\"∷\\\",\\\"Colone\\\":\\\"⩴\\\",\\\"colone\\\":\\\"≔\\\",\\\"coloneq\\\":\\\"≔\\\",\\\"comma\\\":\\\",\\\",\\\"commat\\\":\\\"@\\\",\\\"comp\\\":\\\"∁\\\",\\\"compfn\\\":\\\"∘\\\",\\\"complement\\\":\\\"∁\\\",\\\"complexes\\\":\\\"ℂ\\\",\\\"cong\\\":\\\"≅\\\",\\\"congdot\\\":\\\"⩭\\\",\\\"Congruent\\\":\\\"≡\\\",\\\"conint\\\":\\\"∮\\\",\\\"Conint\\\":\\\"∯\\\",\\\"ContourIntegral\\\":\\\"∮\\\",\\\"copf\\\":\\\"𝕔\\\",\\\"Copf\\\":\\\"ℂ\\\",\\\"coprod\\\":\\\"∐\\\",\\\"Coproduct\\\":\\\"∐\\\",\\\"copy\\\":\\\"©\\\",\\\"COPY\\\":\\\"©\\\",\\\"copysr\\\":\\\"℗\\\",\\\"CounterClockwiseContourIntegral\\\":\\\"∳\\\",\\\"crarr\\\":\\\"↵\\\",\\\"cross\\\":\\\"✗\\\",\\\"Cross\\\":\\\"⨯\\\",\\\"Cscr\\\":\\\"𝒞\\\",\\\"cscr\\\":\\\"𝒸\\\",\\\"csub\\\":\\\"⫏\\\",\\\"csube\\\":\\\"⫑\\\",\\\"csup\\\":\\\"⫐\\\",\\\"csupe\\\":\\\"⫒\\\",\\\"ctdot\\\":\\\"⋯\\\",\\\"cudarrl\\\":\\\"⤸\\\",\\\"cudarrr\\\":\\\"⤵\\\",\\\"cuepr\\\":\\\"⋞\\\",\\\"cuesc\\\":\\\"⋟\\\",\\\"cularr\\\":\\\"↶\\\",\\\"cularrp\\\":\\\"⤽\\\",\\\"cupbrcap\\\":\\\"⩈\\\",\\\"cupcap\\\":\\\"⩆\\\",\\\"CupCap\\\":\\\"≍\\\",\\\"cup\\\":\\\"∪\\\",\\\"Cup\\\":\\\"⋓\\\",\\\"cupcup\\\":\\\"⩊\\\",\\\"cupdot\\\":\\\"⊍\\\",\\\"cupor\\\":\\\"⩅\\\",\\\"cups\\\":\\\"∪︀\\\",\\\"curarr\\\":\\\"↷\\\",\\\"curarrm\\\":\\\"⤼\\\",\\\"curlyeqprec\\\":\\\"⋞\\\",\\\"curlyeqsucc\\\":\\\"⋟\\\",\\\"curlyvee\\\":\\\"⋎\\\",\\\"curlywedge\\\":\\\"⋏\\\",\\\"curren\\\":\\\"¤\\\",\\\"curvearrowleft\\\":\\\"↶\\\",\\\"curvearrowright\\\":\\\"↷\\\",\\\"cuvee\\\":\\\"⋎\\\",\\\"cuwed\\\":\\\"⋏\\\",\\\"cwconint\\\":\\\"∲\\\",\\\"cwint\\\":\\\"∱\\\",\\\"cylcty\\\":\\\"⌭\\\",\\\"dagger\\\":\\\"†\\\",\\\"Dagger\\\":\\\"‡\\\",\\\"daleth\\\":\\\"ℸ\\\",\\\"darr\\\":\\\"↓\\\",\\\"Darr\\\":\\\"↡\\\",\\\"dArr\\\":\\\"⇓\\\",\\\"dash\\\":\\\"‐\\\",\\\"Dashv\\\":\\\"⫤\\\",\\\"dashv\\\":\\\"⊣\\\",\\\"dbkarow\\\":\\\"⤏\\\",\\\"dblac\\\":\\\"˝\\\",\\\"Dcaron\\\":\\\"Ď\\\",\\\"dcaron\\\":\\\"ď\\\",\\\"Dcy\\\":\\\"Д\\\",\\\"dcy\\\":\\\"д\\\",\\\"ddagger\\\":\\\"‡\\\",\\\"ddarr\\\":\\\"⇊\\\",\\\"DD\\\":\\\"ⅅ\\\",\\\"dd\\\":\\\"ⅆ\\\",\\\"DDotrahd\\\":\\\"⤑\\\",\\\"ddotseq\\\":\\\"⩷\\\",\\\"deg\\\":\\\"°\\\",\\\"Del\\\":\\\"∇\\\",\\\"Delta\\\":\\\"Δ\\\",\\\"delta\\\":\\\"δ\\\",\\\"demptyv\\\":\\\"⦱\\\",\\\"dfisht\\\":\\\"⥿\\\",\\\"Dfr\\\":\\\"𝔇\\\",\\\"dfr\\\":\\\"𝔡\\\",\\\"dHar\\\":\\\"⥥\\\",\\\"dharl\\\":\\\"⇃\\\",\\\"dharr\\\":\\\"⇂\\\",\\\"DiacriticalAcute\\\":\\\"´\\\",\\\"DiacriticalDot\\\":\\\"˙\\\",\\\"DiacriticalDoubleAcute\\\":\\\"˝\\\",\\\"DiacriticalGrave\\\":\\\"`\\\",\\\"DiacriticalTilde\\\":\\\"˜\\\",\\\"diam\\\":\\\"⋄\\\",\\\"diamond\\\":\\\"⋄\\\",\\\"Diamond\\\":\\\"⋄\\\",\\\"diamondsuit\\\":\\\"♦\\\",\\\"diams\\\":\\\"♦\\\",\\\"die\\\":\\\"¨\\\",\\\"DifferentialD\\\":\\\"ⅆ\\\",\\\"digamma\\\":\\\"ϝ\\\",\\\"disin\\\":\\\"⋲\\\",\\\"div\\\":\\\"÷\\\",\\\"divide\\\":\\\"÷\\\",\\\"divideontimes\\\":\\\"⋇\\\",\\\"divonx\\\":\\\"⋇\\\",\\\"DJcy\\\":\\\"Ђ\\\",\\\"djcy\\\":\\\"ђ\\\",\\\"dlcorn\\\":\\\"⌞\\\",\\\"dlcrop\\\":\\\"⌍\\\",\\\"dollar\\\":\\\"$\\\",\\\"Dopf\\\":\\\"𝔻\\\",\\\"dopf\\\":\\\"𝕕\\\",\\\"Dot\\\":\\\"¨\\\",\\\"dot\\\":\\\"˙\\\",\\\"DotDot\\\":\\\"⃜\\\",\\\"doteq\\\":\\\"≐\\\",\\\"doteqdot\\\":\\\"≑\\\",\\\"DotEqual\\\":\\\"≐\\\",\\\"dotminus\\\":\\\"∸\\\",\\\"dotplus\\\":\\\"∔\\\",\\\"dotsquare\\\":\\\"⊡\\\",\\\"doublebarwedge\\\":\\\"⌆\\\",\\\"DoubleContourIntegral\\\":\\\"∯\\\",\\\"DoubleDot\\\":\\\"¨\\\",\\\"DoubleDownArrow\\\":\\\"⇓\\\",\\\"DoubleLeftArrow\\\":\\\"⇐\\\",\\\"DoubleLeftRightArrow\\\":\\\"⇔\\\",\\\"DoubleLeftTee\\\":\\\"⫤\\\",\\\"DoubleLongLeftArrow\\\":\\\"⟸\\\",\\\"DoubleLongLeftRightArrow\\\":\\\"⟺\\\",\\\"DoubleLongRightArrow\\\":\\\"⟹\\\",\\\"DoubleRightArrow\\\":\\\"⇒\\\",\\\"DoubleRightTee\\\":\\\"⊨\\\",\\\"DoubleUpArrow\\\":\\\"⇑\\\",\\\"DoubleUpDownArrow\\\":\\\"⇕\\\",\\\"DoubleVerticalBar\\\":\\\"∥\\\",\\\"DownArrowBar\\\":\\\"⤓\\\",\\\"downarrow\\\":\\\"↓\\\",\\\"DownArrow\\\":\\\"↓\\\",\\\"Downarrow\\\":\\\"⇓\\\",\\\"DownArrowUpArrow\\\":\\\"⇵\\\",\\\"DownBreve\\\":\\\"̑\\\",\\\"downdownarrows\\\":\\\"⇊\\\",\\\"downharpoonleft\\\":\\\"⇃\\\",\\\"downharpoonright\\\":\\\"⇂\\\",\\\"DownLeftRightVector\\\":\\\"⥐\\\",\\\"DownLeftTeeVector\\\":\\\"⥞\\\",\\\"DownLeftVectorBar\\\":\\\"⥖\\\",\\\"DownLeftVector\\\":\\\"↽\\\",\\\"DownRightTeeVector\\\":\\\"⥟\\\",\\\"DownRightVectorBar\\\":\\\"⥗\\\",\\\"DownRightVector\\\":\\\"⇁\\\",\\\"DownTeeArrow\\\":\\\"↧\\\",\\\"DownTee\\\":\\\"⊤\\\",\\\"drbkarow\\\":\\\"⤐\\\",\\\"drcorn\\\":\\\"⌟\\\",\\\"drcrop\\\":\\\"⌌\\\",\\\"Dscr\\\":\\\"𝒟\\\",\\\"dscr\\\":\\\"𝒹\\\",\\\"DScy\\\":\\\"Ѕ\\\",\\\"dscy\\\":\\\"ѕ\\\",\\\"dsol\\\":\\\"⧶\\\",\\\"Dstrok\\\":\\\"Đ\\\",\\\"dstrok\\\":\\\"đ\\\",\\\"dtdot\\\":\\\"⋱\\\",\\\"dtri\\\":\\\"▿\\\",\\\"dtrif\\\":\\\"▾\\\",\\\"duarr\\\":\\\"⇵\\\",\\\"duhar\\\":\\\"⥯\\\",\\\"dwangle\\\":\\\"⦦\\\",\\\"DZcy\\\":\\\"Џ\\\",\\\"dzcy\\\":\\\"џ\\\",\\\"dzigrarr\\\":\\\"⟿\\\",\\\"Eacute\\\":\\\"É\\\",\\\"eacute\\\":\\\"é\\\",\\\"easter\\\":\\\"⩮\\\",\\\"Ecaron\\\":\\\"Ě\\\",\\\"ecaron\\\":\\\"ě\\\",\\\"Ecirc\\\":\\\"Ê\\\",\\\"ecirc\\\":\\\"ê\\\",\\\"ecir\\\":\\\"≖\\\",\\\"ecolon\\\":\\\"≕\\\",\\\"Ecy\\\":\\\"Э\\\",\\\"ecy\\\":\\\"э\\\",\\\"eDDot\\\":\\\"⩷\\\",\\\"Edot\\\":\\\"Ė\\\",\\\"edot\\\":\\\"ė\\\",\\\"eDot\\\":\\\"≑\\\",\\\"ee\\\":\\\"ⅇ\\\",\\\"efDot\\\":\\\"≒\\\",\\\"Efr\\\":\\\"𝔈\\\",\\\"efr\\\":\\\"𝔢\\\",\\\"eg\\\":\\\"⪚\\\",\\\"Egrave\\\":\\\"È\\\",\\\"egrave\\\":\\\"è\\\",\\\"egs\\\":\\\"⪖\\\",\\\"egsdot\\\":\\\"⪘\\\",\\\"el\\\":\\\"⪙\\\",\\\"Element\\\":\\\"∈\\\",\\\"elinters\\\":\\\"⏧\\\",\\\"ell\\\":\\\"ℓ\\\",\\\"els\\\":\\\"⪕\\\",\\\"elsdot\\\":\\\"⪗\\\",\\\"Emacr\\\":\\\"Ē\\\",\\\"emacr\\\":\\\"ē\\\",\\\"empty\\\":\\\"∅\\\",\\\"emptyset\\\":\\\"∅\\\",\\\"EmptySmallSquare\\\":\\\"◻\\\",\\\"emptyv\\\":\\\"∅\\\",\\\"EmptyVerySmallSquare\\\":\\\"▫\\\",\\\"emsp13\\\":\\\" \\\",\\\"emsp14\\\":\\\" \\\",\\\"emsp\\\":\\\" \\\",\\\"ENG\\\":\\\"Ŋ\\\",\\\"eng\\\":\\\"ŋ\\\",\\\"ensp\\\":\\\" \\\",\\\"Eogon\\\":\\\"Ę\\\",\\\"eogon\\\":\\\"ę\\\",\\\"Eopf\\\":\\\"𝔼\\\",\\\"eopf\\\":\\\"𝕖\\\",\\\"epar\\\":\\\"⋕\\\",\\\"eparsl\\\":\\\"⧣\\\",\\\"eplus\\\":\\\"⩱\\\",\\\"epsi\\\":\\\"ε\\\",\\\"Epsilon\\\":\\\"Ε\\\",\\\"epsilon\\\":\\\"ε\\\",\\\"epsiv\\\":\\\"ϵ\\\",\\\"eqcirc\\\":\\\"≖\\\",\\\"eqcolon\\\":\\\"≕\\\",\\\"eqsim\\\":\\\"≂\\\",\\\"eqslantgtr\\\":\\\"⪖\\\",\\\"eqslantless\\\":\\\"⪕\\\",\\\"Equal\\\":\\\"⩵\\\",\\\"equals\\\":\\\"=\\\",\\\"EqualTilde\\\":\\\"≂\\\",\\\"equest\\\":\\\"≟\\\",\\\"Equilibrium\\\":\\\"⇌\\\",\\\"equiv\\\":\\\"≡\\\",\\\"equivDD\\\":\\\"⩸\\\",\\\"eqvparsl\\\":\\\"⧥\\\",\\\"erarr\\\":\\\"⥱\\\",\\\"erDot\\\":\\\"≓\\\",\\\"escr\\\":\\\"ℯ\\\",\\\"Escr\\\":\\\"ℰ\\\",\\\"esdot\\\":\\\"≐\\\",\\\"Esim\\\":\\\"⩳\\\",\\\"esim\\\":\\\"≂\\\",\\\"Eta\\\":\\\"Η\\\",\\\"eta\\\":\\\"η\\\",\\\"ETH\\\":\\\"Ð\\\",\\\"eth\\\":\\\"ð\\\",\\\"Euml\\\":\\\"Ë\\\",\\\"euml\\\":\\\"ë\\\",\\\"euro\\\":\\\"€\\\",\\\"excl\\\":\\\"!\\\",\\\"exist\\\":\\\"∃\\\",\\\"Exists\\\":\\\"∃\\\",\\\"expectation\\\":\\\"ℰ\\\",\\\"exponentiale\\\":\\\"ⅇ\\\",\\\"ExponentialE\\\":\\\"ⅇ\\\",\\\"fallingdotseq\\\":\\\"≒\\\",\\\"Fcy\\\":\\\"Ф\\\",\\\"fcy\\\":\\\"ф\\\",\\\"female\\\":\\\"♀\\\",\\\"ffilig\\\":\\\"ﬃ\\\",\\\"fflig\\\":\\\"ﬀ\\\",\\\"ffllig\\\":\\\"ﬄ\\\",\\\"Ffr\\\":\\\"𝔉\\\",\\\"ffr\\\":\\\"𝔣\\\",\\\"filig\\\":\\\"ﬁ\\\",\\\"FilledSmallSquare\\\":\\\"◼\\\",\\\"FilledVerySmallSquare\\\":\\\"▪\\\",\\\"fjlig\\\":\\\"fj\\\",\\\"flat\\\":\\\"♭\\\",\\\"fllig\\\":\\\"ﬂ\\\",\\\"fltns\\\":\\\"▱\\\",\\\"fnof\\\":\\\"ƒ\\\",\\\"Fopf\\\":\\\"𝔽\\\",\\\"fopf\\\":\\\"𝕗\\\",\\\"forall\\\":\\\"∀\\\",\\\"ForAll\\\":\\\"∀\\\",\\\"fork\\\":\\\"⋔\\\",\\\"forkv\\\":\\\"⫙\\\",\\\"Fouriertrf\\\":\\\"ℱ\\\",\\\"fpartint\\\":\\\"⨍\\\",\\\"frac12\\\":\\\"½\\\",\\\"frac13\\\":\\\"⅓\\\",\\\"frac14\\\":\\\"¼\\\",\\\"frac15\\\":\\\"⅕\\\",\\\"frac16\\\":\\\"⅙\\\",\\\"frac18\\\":\\\"⅛\\\",\\\"frac23\\\":\\\"⅔\\\",\\\"frac25\\\":\\\"⅖\\\",\\\"frac34\\\":\\\"¾\\\",\\\"frac35\\\":\\\"⅗\\\",\\\"frac38\\\":\\\"⅜\\\",\\\"frac45\\\":\\\"⅘\\\",\\\"frac56\\\":\\\"⅚\\\",\\\"frac58\\\":\\\"⅝\\\",\\\"frac78\\\":\\\"⅞\\\",\\\"frasl\\\":\\\"⁄\\\",\\\"frown\\\":\\\"⌢\\\",\\\"fscr\\\":\\\"𝒻\\\",\\\"Fscr\\\":\\\"ℱ\\\",\\\"gacute\\\":\\\"ǵ\\\",\\\"Gamma\\\":\\\"Γ\\\",\\\"gamma\\\":\\\"γ\\\",\\\"Gammad\\\":\\\"Ϝ\\\",\\\"gammad\\\":\\\"ϝ\\\",\\\"gap\\\":\\\"⪆\\\",\\\"Gbreve\\\":\\\"Ğ\\\",\\\"gbreve\\\":\\\"ğ\\\",\\\"Gcedil\\\":\\\"Ģ\\\",\\\"Gcirc\\\":\\\"Ĝ\\\",\\\"gcirc\\\":\\\"ĝ\\\",\\\"Gcy\\\":\\\"Г\\\",\\\"gcy\\\":\\\"г\\\",\\\"Gdot\\\":\\\"Ġ\\\",\\\"gdot\\\":\\\"ġ\\\",\\\"ge\\\":\\\"≥\\\",\\\"gE\\\":\\\"≧\\\",\\\"gEl\\\":\\\"⪌\\\",\\\"gel\\\":\\\"⋛\\\",\\\"geq\\\":\\\"≥\\\",\\\"geqq\\\":\\\"≧\\\",\\\"geqslant\\\":\\\"⩾\\\",\\\"gescc\\\":\\\"⪩\\\",\\\"ges\\\":\\\"⩾\\\",\\\"gesdot\\\":\\\"⪀\\\",\\\"gesdoto\\\":\\\"⪂\\\",\\\"gesdotol\\\":\\\"⪄\\\",\\\"gesl\\\":\\\"⋛︀\\\",\\\"gesles\\\":\\\"⪔\\\",\\\"Gfr\\\":\\\"𝔊\\\",\\\"gfr\\\":\\\"𝔤\\\",\\\"gg\\\":\\\"≫\\\",\\\"Gg\\\":\\\"⋙\\\",\\\"ggg\\\":\\\"⋙\\\",\\\"gimel\\\":\\\"ℷ\\\",\\\"GJcy\\\":\\\"Ѓ\\\",\\\"gjcy\\\":\\\"ѓ\\\",\\\"gla\\\":\\\"⪥\\\",\\\"gl\\\":\\\"≷\\\",\\\"glE\\\":\\\"⪒\\\",\\\"glj\\\":\\\"⪤\\\",\\\"gnap\\\":\\\"⪊\\\",\\\"gnapprox\\\":\\\"⪊\\\",\\\"gne\\\":\\\"⪈\\\",\\\"gnE\\\":\\\"≩\\\",\\\"gneq\\\":\\\"⪈\\\",\\\"gneqq\\\":\\\"≩\\\",\\\"gnsim\\\":\\\"⋧\\\",\\\"Gopf\\\":\\\"𝔾\\\",\\\"gopf\\\":\\\"𝕘\\\",\\\"grave\\\":\\\"`\\\",\\\"GreaterEqual\\\":\\\"≥\\\",\\\"GreaterEqualLess\\\":\\\"⋛\\\",\\\"GreaterFullEqual\\\":\\\"≧\\\",\\\"GreaterGreater\\\":\\\"⪢\\\",\\\"GreaterLess\\\":\\\"≷\\\",\\\"GreaterSlantEqual\\\":\\\"⩾\\\",\\\"GreaterTilde\\\":\\\"≳\\\",\\\"Gscr\\\":\\\"𝒢\\\",\\\"gscr\\\":\\\"ℊ\\\",\\\"gsim\\\":\\\"≳\\\",\\\"gsime\\\":\\\"⪎\\\",\\\"gsiml\\\":\\\"⪐\\\",\\\"gtcc\\\":\\\"⪧\\\",\\\"gtcir\\\":\\\"⩺\\\",\\\"gt\\\":\\\">\\\",\\\"GT\\\":\\\">\\\",\\\"Gt\\\":\\\"≫\\\",\\\"gtdot\\\":\\\"⋗\\\",\\\"gtlPar\\\":\\\"⦕\\\",\\\"gtquest\\\":\\\"⩼\\\",\\\"gtrapprox\\\":\\\"⪆\\\",\\\"gtrarr\\\":\\\"⥸\\\",\\\"gtrdot\\\":\\\"⋗\\\",\\\"gtreqless\\\":\\\"⋛\\\",\\\"gtreqqless\\\":\\\"⪌\\\",\\\"gtrless\\\":\\\"≷\\\",\\\"gtrsim\\\":\\\"≳\\\",\\\"gvertneqq\\\":\\\"≩︀\\\",\\\"gvnE\\\":\\\"≩︀\\\",\\\"Hacek\\\":\\\"ˇ\\\",\\\"hairsp\\\":\\\" \\\",\\\"half\\\":\\\"½\\\",\\\"hamilt\\\":\\\"ℋ\\\",\\\"HARDcy\\\":\\\"Ъ\\\",\\\"hardcy\\\":\\\"ъ\\\",\\\"harrcir\\\":\\\"⥈\\\",\\\"harr\\\":\\\"↔\\\",\\\"hArr\\\":\\\"⇔\\\",\\\"harrw\\\":\\\"↭\\\",\\\"Hat\\\":\\\"^\\\",\\\"hbar\\\":\\\"ℏ\\\",\\\"Hcirc\\\":\\\"Ĥ\\\",\\\"hcirc\\\":\\\"ĥ\\\",\\\"hearts\\\":\\\"♥\\\",\\\"heartsuit\\\":\\\"♥\\\",\\\"hellip\\\":\\\"…\\\",\\\"hercon\\\":\\\"⊹\\\",\\\"hfr\\\":\\\"𝔥\\\",\\\"Hfr\\\":\\\"ℌ\\\",\\\"HilbertSpace\\\":\\\"ℋ\\\",\\\"hksearow\\\":\\\"⤥\\\",\\\"hkswarow\\\":\\\"⤦\\\",\\\"hoarr\\\":\\\"⇿\\\",\\\"homtht\\\":\\\"∻\\\",\\\"hookleftarrow\\\":\\\"↩\\\",\\\"hookrightarrow\\\":\\\"↪\\\",\\\"hopf\\\":\\\"𝕙\\\",\\\"Hopf\\\":\\\"ℍ\\\",\\\"horbar\\\":\\\"―\\\",\\\"HorizontalLine\\\":\\\"─\\\",\\\"hscr\\\":\\\"𝒽\\\",\\\"Hscr\\\":\\\"ℋ\\\",\\\"hslash\\\":\\\"ℏ\\\",\\\"Hstrok\\\":\\\"Ħ\\\",\\\"hstrok\\\":\\\"ħ\\\",\\\"HumpDownHump\\\":\\\"≎\\\",\\\"HumpEqual\\\":\\\"≏\\\",\\\"hybull\\\":\\\"⁃\\\",\\\"hyphen\\\":\\\"‐\\\",\\\"Iacute\\\":\\\"Í\\\",\\\"iacute\\\":\\\"í\\\",\\\"ic\\\":\\\"⁣\\\",\\\"Icirc\\\":\\\"Î\\\",\\\"icirc\\\":\\\"î\\\",\\\"Icy\\\":\\\"И\\\",\\\"icy\\\":\\\"и\\\",\\\"Idot\\\":\\\"İ\\\",\\\"IEcy\\\":\\\"Е\\\",\\\"iecy\\\":\\\"е\\\",\\\"iexcl\\\":\\\"¡\\\",\\\"iff\\\":\\\"⇔\\\",\\\"ifr\\\":\\\"𝔦\\\",\\\"Ifr\\\":\\\"ℑ\\\",\\\"Igrave\\\":\\\"Ì\\\",\\\"igrave\\\":\\\"ì\\\",\\\"ii\\\":\\\"ⅈ\\\",\\\"iiiint\\\":\\\"⨌\\\",\\\"iiint\\\":\\\"∭\\\",\\\"iinfin\\\":\\\"⧜\\\",\\\"iiota\\\":\\\"℩\\\",\\\"IJlig\\\":\\\"Ĳ\\\",\\\"ijlig\\\":\\\"ĳ\\\",\\\"Imacr\\\":\\\"Ī\\\",\\\"imacr\\\":\\\"ī\\\",\\\"image\\\":\\\"ℑ\\\",\\\"ImaginaryI\\\":\\\"ⅈ\\\",\\\"imagline\\\":\\\"ℐ\\\",\\\"imagpart\\\":\\\"ℑ\\\",\\\"imath\\\":\\\"ı\\\",\\\"Im\\\":\\\"ℑ\\\",\\\"imof\\\":\\\"⊷\\\",\\\"imped\\\":\\\"Ƶ\\\",\\\"Implies\\\":\\\"⇒\\\",\\\"incare\\\":\\\"℅\\\",\\\"in\\\":\\\"∈\\\",\\\"infin\\\":\\\"∞\\\",\\\"infintie\\\":\\\"⧝\\\",\\\"inodot\\\":\\\"ı\\\",\\\"intcal\\\":\\\"⊺\\\",\\\"int\\\":\\\"∫\\\",\\\"Int\\\":\\\"∬\\\",\\\"integers\\\":\\\"ℤ\\\",\\\"Integral\\\":\\\"∫\\\",\\\"intercal\\\":\\\"⊺\\\",\\\"Intersection\\\":\\\"⋂\\\",\\\"intlarhk\\\":\\\"⨗\\\",\\\"intprod\\\":\\\"⨼\\\",\\\"InvisibleComma\\\":\\\"⁣\\\",\\\"InvisibleTimes\\\":\\\"⁢\\\",\\\"IOcy\\\":\\\"Ё\\\",\\\"iocy\\\":\\\"ё\\\",\\\"Iogon\\\":\\\"Į\\\",\\\"iogon\\\":\\\"į\\\",\\\"Iopf\\\":\\\"𝕀\\\",\\\"iopf\\\":\\\"𝕚\\\",\\\"Iota\\\":\\\"Ι\\\",\\\"iota\\\":\\\"ι\\\",\\\"iprod\\\":\\\"⨼\\\",\\\"iquest\\\":\\\"¿\\\",\\\"iscr\\\":\\\"𝒾\\\",\\\"Iscr\\\":\\\"ℐ\\\",\\\"isin\\\":\\\"∈\\\",\\\"isindot\\\":\\\"⋵\\\",\\\"isinE\\\":\\\"⋹\\\",\\\"isins\\\":\\\"⋴\\\",\\\"isinsv\\\":\\\"⋳\\\",\\\"isinv\\\":\\\"∈\\\",\\\"it\\\":\\\"⁢\\\",\\\"Itilde\\\":\\\"Ĩ\\\",\\\"itilde\\\":\\\"ĩ\\\",\\\"Iukcy\\\":\\\"І\\\",\\\"iukcy\\\":\\\"і\\\",\\\"Iuml\\\":\\\"Ï\\\",\\\"iuml\\\":\\\"ï\\\",\\\"Jcirc\\\":\\\"Ĵ\\\",\\\"jcirc\\\":\\\"ĵ\\\",\\\"Jcy\\\":\\\"Й\\\",\\\"jcy\\\":\\\"й\\\",\\\"Jfr\\\":\\\"𝔍\\\",\\\"jfr\\\":\\\"𝔧\\\",\\\"jmath\\\":\\\"ȷ\\\",\\\"Jopf\\\":\\\"𝕁\\\",\\\"jopf\\\":\\\"𝕛\\\",\\\"Jscr\\\":\\\"𝒥\\\",\\\"jscr\\\":\\\"𝒿\\\",\\\"Jsercy\\\":\\\"Ј\\\",\\\"jsercy\\\":\\\"ј\\\",\\\"Jukcy\\\":\\\"Є\\\",\\\"jukcy\\\":\\\"є\\\",\\\"Kappa\\\":\\\"Κ\\\",\\\"kappa\\\":\\\"κ\\\",\\\"kappav\\\":\\\"ϰ\\\",\\\"Kcedil\\\":\\\"Ķ\\\",\\\"kcedil\\\":\\\"ķ\\\",\\\"Kcy\\\":\\\"К\\\",\\\"kcy\\\":\\\"к\\\",\\\"Kfr\\\":\\\"𝔎\\\",\\\"kfr\\\":\\\"𝔨\\\",\\\"kgreen\\\":\\\"ĸ\\\",\\\"KHcy\\\":\\\"Х\\\",\\\"khcy\\\":\\\"х\\\",\\\"KJcy\\\":\\\"Ќ\\\",\\\"kjcy\\\":\\\"ќ\\\",\\\"Kopf\\\":\\\"𝕂\\\",\\\"kopf\\\":\\\"𝕜\\\",\\\"Kscr\\\":\\\"𝒦\\\",\\\"kscr\\\":\\\"𝓀\\\",\\\"lAarr\\\":\\\"⇚\\\",\\\"Lacute\\\":\\\"Ĺ\\\",\\\"lacute\\\":\\\"ĺ\\\",\\\"laemptyv\\\":\\\"⦴\\\",\\\"lagran\\\":\\\"ℒ\\\",\\\"Lambda\\\":\\\"Λ\\\",\\\"lambda\\\":\\\"λ\\\",\\\"lang\\\":\\\"⟨\\\",\\\"Lang\\\":\\\"⟪\\\",\\\"langd\\\":\\\"⦑\\\",\\\"langle\\\":\\\"⟨\\\",\\\"lap\\\":\\\"⪅\\\",\\\"Laplacetrf\\\":\\\"ℒ\\\",\\\"laquo\\\":\\\"«\\\",\\\"larrb\\\":\\\"⇤\\\",\\\"larrbfs\\\":\\\"⤟\\\",\\\"larr\\\":\\\"←\\\",\\\"Larr\\\":\\\"↞\\\",\\\"lArr\\\":\\\"⇐\\\",\\\"larrfs\\\":\\\"⤝\\\",\\\"larrhk\\\":\\\"↩\\\",\\\"larrlp\\\":\\\"↫\\\",\\\"larrpl\\\":\\\"⤹\\\",\\\"larrsim\\\":\\\"⥳\\\",\\\"larrtl\\\":\\\"↢\\\",\\\"latail\\\":\\\"⤙\\\",\\\"lAtail\\\":\\\"⤛\\\",\\\"lat\\\":\\\"⪫\\\",\\\"late\\\":\\\"⪭\\\",\\\"lates\\\":\\\"⪭︀\\\",\\\"lbarr\\\":\\\"⤌\\\",\\\"lBarr\\\":\\\"⤎\\\",\\\"lbbrk\\\":\\\"❲\\\",\\\"lbrace\\\":\\\"{\\\",\\\"lbrack\\\":\\\"[\\\",\\\"lbrke\\\":\\\"⦋\\\",\\\"lbrksld\\\":\\\"⦏\\\",\\\"lbrkslu\\\":\\\"⦍\\\",\\\"Lcaron\\\":\\\"Ľ\\\",\\\"lcaron\\\":\\\"ľ\\\",\\\"Lcedil\\\":\\\"Ļ\\\",\\\"lcedil\\\":\\\"ļ\\\",\\\"lceil\\\":\\\"⌈\\\",\\\"lcub\\\":\\\"{\\\",\\\"Lcy\\\":\\\"Л\\\",\\\"lcy\\\":\\\"л\\\",\\\"ldca\\\":\\\"⤶\\\",\\\"ldquo\\\":\\\"“\\\",\\\"ldquor\\\":\\\"„\\\",\\\"ldrdhar\\\":\\\"⥧\\\",\\\"ldrushar\\\":\\\"⥋\\\",\\\"ldsh\\\":\\\"↲\\\",\\\"le\\\":\\\"≤\\\",\\\"lE\\\":\\\"≦\\\",\\\"LeftAngleBracket\\\":\\\"⟨\\\",\\\"LeftArrowBar\\\":\\\"⇤\\\",\\\"leftarrow\\\":\\\"←\\\",\\\"LeftArrow\\\":\\\"←\\\",\\\"Leftarrow\\\":\\\"⇐\\\",\\\"LeftArrowRightArrow\\\":\\\"⇆\\\",\\\"leftarrowtail\\\":\\\"↢\\\",\\\"LeftCeiling\\\":\\\"⌈\\\",\\\"LeftDoubleBracket\\\":\\\"⟦\\\",\\\"LeftDownTeeVector\\\":\\\"⥡\\\",\\\"LeftDownVectorBar\\\":\\\"⥙\\\",\\\"LeftDownVector\\\":\\\"⇃\\\",\\\"LeftFloor\\\":\\\"⌊\\\",\\\"leftharpoondown\\\":\\\"↽\\\",\\\"leftharpoonup\\\":\\\"↼\\\",\\\"leftleftarrows\\\":\\\"⇇\\\",\\\"leftrightarrow\\\":\\\"↔\\\",\\\"LeftRightArrow\\\":\\\"↔\\\",\\\"Leftrightarrow\\\":\\\"⇔\\\",\\\"leftrightarrows\\\":\\\"⇆\\\",\\\"leftrightharpoons\\\":\\\"⇋\\\",\\\"leftrightsquigarrow\\\":\\\"↭\\\",\\\"LeftRightVector\\\":\\\"⥎\\\",\\\"LeftTeeArrow\\\":\\\"↤\\\",\\\"LeftTee\\\":\\\"⊣\\\",\\\"LeftTeeVector\\\":\\\"⥚\\\",\\\"leftthreetimes\\\":\\\"⋋\\\",\\\"LeftTriangleBar\\\":\\\"⧏\\\",\\\"LeftTriangle\\\":\\\"⊲\\\",\\\"LeftTriangleEqual\\\":\\\"⊴\\\",\\\"LeftUpDownVector\\\":\\\"⥑\\\",\\\"LeftUpTeeVector\\\":\\\"⥠\\\",\\\"LeftUpVectorBar\\\":\\\"⥘\\\",\\\"LeftUpVector\\\":\\\"↿\\\",\\\"LeftVectorBar\\\":\\\"⥒\\\",\\\"LeftVector\\\":\\\"↼\\\",\\\"lEg\\\":\\\"⪋\\\",\\\"leg\\\":\\\"⋚\\\",\\\"leq\\\":\\\"≤\\\",\\\"leqq\\\":\\\"≦\\\",\\\"leqslant\\\":\\\"⩽\\\",\\\"lescc\\\":\\\"⪨\\\",\\\"les\\\":\\\"⩽\\\",\\\"lesdot\\\":\\\"⩿\\\",\\\"lesdoto\\\":\\\"⪁\\\",\\\"lesdotor\\\":\\\"⪃\\\",\\\"lesg\\\":\\\"⋚︀\\\",\\\"lesges\\\":\\\"⪓\\\",\\\"lessapprox\\\":\\\"⪅\\\",\\\"lessdot\\\":\\\"⋖\\\",\\\"lesseqgtr\\\":\\\"⋚\\\",\\\"lesseqqgtr\\\":\\\"⪋\\\",\\\"LessEqualGreater\\\":\\\"⋚\\\",\\\"LessFullEqual\\\":\\\"≦\\\",\\\"LessGreater\\\":\\\"≶\\\",\\\"lessgtr\\\":\\\"≶\\\",\\\"LessLess\\\":\\\"⪡\\\",\\\"lesssim\\\":\\\"≲\\\",\\\"LessSlantEqual\\\":\\\"⩽\\\",\\\"LessTilde\\\":\\\"≲\\\",\\\"lfisht\\\":\\\"⥼\\\",\\\"lfloor\\\":\\\"⌊\\\",\\\"Lfr\\\":\\\"𝔏\\\",\\\"lfr\\\":\\\"𝔩\\\",\\\"lg\\\":\\\"≶\\\",\\\"lgE\\\":\\\"⪑\\\",\\\"lHar\\\":\\\"⥢\\\",\\\"lhard\\\":\\\"↽\\\",\\\"lharu\\\":\\\"↼\\\",\\\"lharul\\\":\\\"⥪\\\",\\\"lhblk\\\":\\\"▄\\\",\\\"LJcy\\\":\\\"Љ\\\",\\\"ljcy\\\":\\\"љ\\\",\\\"llarr\\\":\\\"⇇\\\",\\\"ll\\\":\\\"≪\\\",\\\"Ll\\\":\\\"⋘\\\",\\\"llcorner\\\":\\\"⌞\\\",\\\"Lleftarrow\\\":\\\"⇚\\\",\\\"llhard\\\":\\\"⥫\\\",\\\"lltri\\\":\\\"◺\\\",\\\"Lmidot\\\":\\\"Ŀ\\\",\\\"lmidot\\\":\\\"ŀ\\\",\\\"lmoustache\\\":\\\"⎰\\\",\\\"lmoust\\\":\\\"⎰\\\",\\\"lnap\\\":\\\"⪉\\\",\\\"lnapprox\\\":\\\"⪉\\\",\\\"lne\\\":\\\"⪇\\\",\\\"lnE\\\":\\\"≨\\\",\\\"lneq\\\":\\\"⪇\\\",\\\"lneqq\\\":\\\"≨\\\",\\\"lnsim\\\":\\\"⋦\\\",\\\"loang\\\":\\\"⟬\\\",\\\"loarr\\\":\\\"⇽\\\",\\\"lobrk\\\":\\\"⟦\\\",\\\"longleftarrow\\\":\\\"⟵\\\",\\\"LongLeftArrow\\\":\\\"⟵\\\",\\\"Longleftarrow\\\":\\\"⟸\\\",\\\"longleftrightarrow\\\":\\\"⟷\\\",\\\"LongLeftRightArrow\\\":\\\"⟷\\\",\\\"Longleftrightarrow\\\":\\\"⟺\\\",\\\"longmapsto\\\":\\\"⟼\\\",\\\"longrightarrow\\\":\\\"⟶\\\",\\\"LongRightArrow\\\":\\\"⟶\\\",\\\"Longrightarrow\\\":\\\"⟹\\\",\\\"looparrowleft\\\":\\\"↫\\\",\\\"looparrowright\\\":\\\"↬\\\",\\\"lopar\\\":\\\"⦅\\\",\\\"Lopf\\\":\\\"𝕃\\\",\\\"lopf\\\":\\\"𝕝\\\",\\\"loplus\\\":\\\"⨭\\\",\\\"lotimes\\\":\\\"⨴\\\",\\\"lowast\\\":\\\"∗\\\",\\\"lowbar\\\":\\\"_\\\",\\\"LowerLeftArrow\\\":\\\"↙\\\",\\\"LowerRightArrow\\\":\\\"↘\\\",\\\"loz\\\":\\\"◊\\\",\\\"lozenge\\\":\\\"◊\\\",\\\"lozf\\\":\\\"⧫\\\",\\\"lpar\\\":\\\"(\\\",\\\"lparlt\\\":\\\"⦓\\\",\\\"lrarr\\\":\\\"⇆\\\",\\\"lrcorner\\\":\\\"⌟\\\",\\\"lrhar\\\":\\\"⇋\\\",\\\"lrhard\\\":\\\"⥭\\\",\\\"lrm\\\":\\\"‎\\\",\\\"lrtri\\\":\\\"⊿\\\",\\\"lsaquo\\\":\\\"‹\\\",\\\"lscr\\\":\\\"𝓁\\\",\\\"Lscr\\\":\\\"ℒ\\\",\\\"lsh\\\":\\\"↰\\\",\\\"Lsh\\\":\\\"↰\\\",\\\"lsim\\\":\\\"≲\\\",\\\"lsime\\\":\\\"⪍\\\",\\\"lsimg\\\":\\\"⪏\\\",\\\"lsqb\\\":\\\"[\\\",\\\"lsquo\\\":\\\"‘\\\",\\\"lsquor\\\":\\\"‚\\\",\\\"Lstrok\\\":\\\"Ł\\\",\\\"lstrok\\\":\\\"ł\\\",\\\"ltcc\\\":\\\"⪦\\\",\\\"ltcir\\\":\\\"⩹\\\",\\\"lt\\\":\\\"<\\\",\\\"LT\\\":\\\"<\\\",\\\"Lt\\\":\\\"≪\\\",\\\"ltdot\\\":\\\"⋖\\\",\\\"lthree\\\":\\\"⋋\\\",\\\"ltimes\\\":\\\"⋉\\\",\\\"ltlarr\\\":\\\"⥶\\\",\\\"ltquest\\\":\\\"⩻\\\",\\\"ltri\\\":\\\"◃\\\",\\\"ltrie\\\":\\\"⊴\\\",\\\"ltrif\\\":\\\"◂\\\",\\\"ltrPar\\\":\\\"⦖\\\",\\\"lurdshar\\\":\\\"⥊\\\",\\\"luruhar\\\":\\\"⥦\\\",\\\"lvertneqq\\\":\\\"≨︀\\\",\\\"lvnE\\\":\\\"≨︀\\\",\\\"macr\\\":\\\"¯\\\",\\\"male\\\":\\\"♂\\\",\\\"malt\\\":\\\"✠\\\",\\\"maltese\\\":\\\"✠\\\",\\\"Map\\\":\\\"⤅\\\",\\\"map\\\":\\\"↦\\\",\\\"mapsto\\\":\\\"↦\\\",\\\"mapstodown\\\":\\\"↧\\\",\\\"mapstoleft\\\":\\\"↤\\\",\\\"mapstoup\\\":\\\"↥\\\",\\\"marker\\\":\\\"▮\\\",\\\"mcomma\\\":\\\"⨩\\\",\\\"Mcy\\\":\\\"М\\\",\\\"mcy\\\":\\\"м\\\",\\\"mdash\\\":\\\"—\\\",\\\"mDDot\\\":\\\"∺\\\",\\\"measuredangle\\\":\\\"∡\\\",\\\"MediumSpace\\\":\\\" \\\",\\\"Mellintrf\\\":\\\"ℳ\\\",\\\"Mfr\\\":\\\"𝔐\\\",\\\"mfr\\\":\\\"𝔪\\\",\\\"mho\\\":\\\"℧\\\",\\\"micro\\\":\\\"µ\\\",\\\"midast\\\":\\\"*\\\",\\\"midcir\\\":\\\"⫰\\\",\\\"mid\\\":\\\"∣\\\",\\\"middot\\\":\\\"·\\\",\\\"minusb\\\":\\\"⊟\\\",\\\"minus\\\":\\\"−\\\",\\\"minusd\\\":\\\"∸\\\",\\\"minusdu\\\":\\\"⨪\\\",\\\"MinusPlus\\\":\\\"∓\\\",\\\"mlcp\\\":\\\"⫛\\\",\\\"mldr\\\":\\\"…\\\",\\\"mnplus\\\":\\\"∓\\\",\\\"models\\\":\\\"⊧\\\",\\\"Mopf\\\":\\\"𝕄\\\",\\\"mopf\\\":\\\"𝕞\\\",\\\"mp\\\":\\\"∓\\\",\\\"mscr\\\":\\\"𝓂\\\",\\\"Mscr\\\":\\\"ℳ\\\",\\\"mstpos\\\":\\\"∾\\\",\\\"Mu\\\":\\\"Μ\\\",\\\"mu\\\":\\\"μ\\\",\\\"multimap\\\":\\\"⊸\\\",\\\"mumap\\\":\\\"⊸\\\",\\\"nabla\\\":\\\"∇\\\",\\\"Nacute\\\":\\\"Ń\\\",\\\"nacute\\\":\\\"ń\\\",\\\"nang\\\":\\\"∠⃒\\\",\\\"nap\\\":\\\"≉\\\",\\\"napE\\\":\\\"⩰̸\\\",\\\"napid\\\":\\\"≋̸\\\",\\\"napos\\\":\\\"ŉ\\\",\\\"napprox\\\":\\\"≉\\\",\\\"natural\\\":\\\"♮\\\",\\\"naturals\\\":\\\"ℕ\\\",\\\"natur\\\":\\\"♮\\\",\\\"nbsp\\\":\\\" \\\",\\\"nbump\\\":\\\"≎̸\\\",\\\"nbumpe\\\":\\\"≏̸\\\",\\\"ncap\\\":\\\"⩃\\\",\\\"Ncaron\\\":\\\"Ň\\\",\\\"ncaron\\\":\\\"ň\\\",\\\"Ncedil\\\":\\\"Ņ\\\",\\\"ncedil\\\":\\\"ņ\\\",\\\"ncong\\\":\\\"≇\\\",\\\"ncongdot\\\":\\\"⩭̸\\\",\\\"ncup\\\":\\\"⩂\\\",\\\"Ncy\\\":\\\"Н\\\",\\\"ncy\\\":\\\"н\\\",\\\"ndash\\\":\\\"–\\\",\\\"nearhk\\\":\\\"⤤\\\",\\\"nearr\\\":\\\"↗\\\",\\\"neArr\\\":\\\"⇗\\\",\\\"nearrow\\\":\\\"↗\\\",\\\"ne\\\":\\\"≠\\\",\\\"nedot\\\":\\\"≐̸\\\",\\\"NegativeMediumSpace\\\":\\\"​\\\",\\\"NegativeThickSpace\\\":\\\"​\\\",\\\"NegativeThinSpace\\\":\\\"​\\\",\\\"NegativeVeryThinSpace\\\":\\\"​\\\",\\\"nequiv\\\":\\\"≢\\\",\\\"nesear\\\":\\\"⤨\\\",\\\"nesim\\\":\\\"≂̸\\\",\\\"NestedGreaterGreater\\\":\\\"≫\\\",\\\"NestedLessLess\\\":\\\"≪\\\",\\\"NewLine\\\":\\\"\\\\n\\\",\\\"nexist\\\":\\\"∄\\\",\\\"nexists\\\":\\\"∄\\\",\\\"Nfr\\\":\\\"𝔑\\\",\\\"nfr\\\":\\\"𝔫\\\",\\\"ngE\\\":\\\"≧̸\\\",\\\"nge\\\":\\\"≱\\\",\\\"ngeq\\\":\\\"≱\\\",\\\"ngeqq\\\":\\\"≧̸\\\",\\\"ngeqslant\\\":\\\"⩾̸\\\",\\\"nges\\\":\\\"⩾̸\\\",\\\"nGg\\\":\\\"⋙̸\\\",\\\"ngsim\\\":\\\"≵\\\",\\\"nGt\\\":\\\"≫⃒\\\",\\\"ngt\\\":\\\"≯\\\",\\\"ngtr\\\":\\\"≯\\\",\\\"nGtv\\\":\\\"≫̸\\\",\\\"nharr\\\":\\\"↮\\\",\\\"nhArr\\\":\\\"⇎\\\",\\\"nhpar\\\":\\\"⫲\\\",\\\"ni\\\":\\\"∋\\\",\\\"nis\\\":\\\"⋼\\\",\\\"nisd\\\":\\\"⋺\\\",\\\"niv\\\":\\\"∋\\\",\\\"NJcy\\\":\\\"Њ\\\",\\\"njcy\\\":\\\"њ\\\",\\\"nlarr\\\":\\\"↚\\\",\\\"nlArr\\\":\\\"⇍\\\",\\\"nldr\\\":\\\"‥\\\",\\\"nlE\\\":\\\"≦̸\\\",\\\"nle\\\":\\\"≰\\\",\\\"nleftarrow\\\":\\\"↚\\\",\\\"nLeftarrow\\\":\\\"⇍\\\",\\\"nleftrightarrow\\\":\\\"↮\\\",\\\"nLeftrightarrow\\\":\\\"⇎\\\",\\\"nleq\\\":\\\"≰\\\",\\\"nleqq\\\":\\\"≦̸\\\",\\\"nleqslant\\\":\\\"⩽̸\\\",\\\"nles\\\":\\\"⩽̸\\\",\\\"nless\\\":\\\"≮\\\",\\\"nLl\\\":\\\"⋘̸\\\",\\\"nlsim\\\":\\\"≴\\\",\\\"nLt\\\":\\\"≪⃒\\\",\\\"nlt\\\":\\\"≮\\\",\\\"nltri\\\":\\\"⋪\\\",\\\"nltrie\\\":\\\"⋬\\\",\\\"nLtv\\\":\\\"≪̸\\\",\\\"nmid\\\":\\\"∤\\\",\\\"NoBreak\\\":\\\"⁠\\\",\\\"NonBreakingSpace\\\":\\\" \\\",\\\"nopf\\\":\\\"𝕟\\\",\\\"Nopf\\\":\\\"ℕ\\\",\\\"Not\\\":\\\"⫬\\\",\\\"not\\\":\\\"¬\\\",\\\"NotCongruent\\\":\\\"≢\\\",\\\"NotCupCap\\\":\\\"≭\\\",\\\"NotDoubleVerticalBar\\\":\\\"∦\\\",\\\"NotElement\\\":\\\"∉\\\",\\\"NotEqual\\\":\\\"≠\\\",\\\"NotEqualTilde\\\":\\\"≂̸\\\",\\\"NotExists\\\":\\\"∄\\\",\\\"NotGreater\\\":\\\"≯\\\",\\\"NotGreaterEqual\\\":\\\"≱\\\",\\\"NotGreaterFullEqual\\\":\\\"≧̸\\\",\\\"NotGreaterGreater\\\":\\\"≫̸\\\",\\\"NotGreaterLess\\\":\\\"≹\\\",\\\"NotGreaterSlantEqual\\\":\\\"⩾̸\\\",\\\"NotGreaterTilde\\\":\\\"≵\\\",\\\"NotHumpDownHump\\\":\\\"≎̸\\\",\\\"NotHumpEqual\\\":\\\"≏̸\\\",\\\"notin\\\":\\\"∉\\\",\\\"notindot\\\":\\\"⋵̸\\\",\\\"notinE\\\":\\\"⋹̸\\\",\\\"notinva\\\":\\\"∉\\\",\\\"notinvb\\\":\\\"⋷\\\",\\\"notinvc\\\":\\\"⋶\\\",\\\"NotLeftTriangleBar\\\":\\\"⧏̸\\\",\\\"NotLeftTriangle\\\":\\\"⋪\\\",\\\"NotLeftTriangleEqual\\\":\\\"⋬\\\",\\\"NotLess\\\":\\\"≮\\\",\\\"NotLessEqual\\\":\\\"≰\\\",\\\"NotLessGreater\\\":\\\"≸\\\",\\\"NotLessLess\\\":\\\"≪̸\\\",\\\"NotLessSlantEqual\\\":\\\"⩽̸\\\",\\\"NotLessTilde\\\":\\\"≴\\\",\\\"NotNestedGreaterGreater\\\":\\\"⪢̸\\\",\\\"NotNestedLessLess\\\":\\\"⪡̸\\\",\\\"notni\\\":\\\"∌\\\",\\\"notniva\\\":\\\"∌\\\",\\\"notnivb\\\":\\\"⋾\\\",\\\"notnivc\\\":\\\"⋽\\\",\\\"NotPrecedes\\\":\\\"⊀\\\",\\\"NotPrecedesEqual\\\":\\\"⪯̸\\\",\\\"NotPrecedesSlantEqual\\\":\\\"⋠\\\",\\\"NotReverseElement\\\":\\\"∌\\\",\\\"NotRightTriangleBar\\\":\\\"⧐̸\\\",\\\"NotRightTriangle\\\":\\\"⋫\\\",\\\"NotRightTriangleEqual\\\":\\\"⋭\\\",\\\"NotSquareSubset\\\":\\\"⊏̸\\\",\\\"NotSquareSubsetEqual\\\":\\\"⋢\\\",\\\"NotSquareSuperset\\\":\\\"⊐̸\\\",\\\"NotSquareSupersetEqual\\\":\\\"⋣\\\",\\\"NotSubset\\\":\\\"⊂⃒\\\",\\\"NotSubsetEqual\\\":\\\"⊈\\\",\\\"NotSucceeds\\\":\\\"⊁\\\",\\\"NotSucceedsEqual\\\":\\\"⪰̸\\\",\\\"NotSucceedsSlantEqual\\\":\\\"⋡\\\",\\\"NotSucceedsTilde\\\":\\\"≿̸\\\",\\\"NotSuperset\\\":\\\"⊃⃒\\\",\\\"NotSupersetEqual\\\":\\\"⊉\\\",\\\"NotTilde\\\":\\\"≁\\\",\\\"NotTildeEqual\\\":\\\"≄\\\",\\\"NotTildeFullEqual\\\":\\\"≇\\\",\\\"NotTildeTilde\\\":\\\"≉\\\",\\\"NotVerticalBar\\\":\\\"∤\\\",\\\"nparallel\\\":\\\"∦\\\",\\\"npar\\\":\\\"∦\\\",\\\"nparsl\\\":\\\"⫽⃥\\\",\\\"npart\\\":\\\"∂̸\\\",\\\"npolint\\\":\\\"⨔\\\",\\\"npr\\\":\\\"⊀\\\",\\\"nprcue\\\":\\\"⋠\\\",\\\"nprec\\\":\\\"⊀\\\",\\\"npreceq\\\":\\\"⪯̸\\\",\\\"npre\\\":\\\"⪯̸\\\",\\\"nrarrc\\\":\\\"⤳̸\\\",\\\"nrarr\\\":\\\"↛\\\",\\\"nrArr\\\":\\\"⇏\\\",\\\"nrarrw\\\":\\\"↝̸\\\",\\\"nrightarrow\\\":\\\"↛\\\",\\\"nRightarrow\\\":\\\"⇏\\\",\\\"nrtri\\\":\\\"⋫\\\",\\\"nrtrie\\\":\\\"⋭\\\",\\\"nsc\\\":\\\"⊁\\\",\\\"nsccue\\\":\\\"⋡\\\",\\\"nsce\\\":\\\"⪰̸\\\",\\\"Nscr\\\":\\\"𝒩\\\",\\\"nscr\\\":\\\"𝓃\\\",\\\"nshortmid\\\":\\\"∤\\\",\\\"nshortparallel\\\":\\\"∦\\\",\\\"nsim\\\":\\\"≁\\\",\\\"nsime\\\":\\\"≄\\\",\\\"nsimeq\\\":\\\"≄\\\",\\\"nsmid\\\":\\\"∤\\\",\\\"nspar\\\":\\\"∦\\\",\\\"nsqsube\\\":\\\"⋢\\\",\\\"nsqsupe\\\":\\\"⋣\\\",\\\"nsub\\\":\\\"⊄\\\",\\\"nsubE\\\":\\\"⫅̸\\\",\\\"nsube\\\":\\\"⊈\\\",\\\"nsubset\\\":\\\"⊂⃒\\\",\\\"nsubseteq\\\":\\\"⊈\\\",\\\"nsubseteqq\\\":\\\"⫅̸\\\",\\\"nsucc\\\":\\\"⊁\\\",\\\"nsucceq\\\":\\\"⪰̸\\\",\\\"nsup\\\":\\\"⊅\\\",\\\"nsupE\\\":\\\"⫆̸\\\",\\\"nsupe\\\":\\\"⊉\\\",\\\"nsupset\\\":\\\"⊃⃒\\\",\\\"nsupseteq\\\":\\\"⊉\\\",\\\"nsupseteqq\\\":\\\"⫆̸\\\",\\\"ntgl\\\":\\\"≹\\\",\\\"Ntilde\\\":\\\"Ñ\\\",\\\"ntilde\\\":\\\"ñ\\\",\\\"ntlg\\\":\\\"≸\\\",\\\"ntriangleleft\\\":\\\"⋪\\\",\\\"ntrianglelefteq\\\":\\\"⋬\\\",\\\"ntriangleright\\\":\\\"⋫\\\",\\\"ntrianglerighteq\\\":\\\"⋭\\\",\\\"Nu\\\":\\\"Ν\\\",\\\"nu\\\":\\\"ν\\\",\\\"num\\\":\\\"#\\\",\\\"numero\\\":\\\"№\\\",\\\"numsp\\\":\\\" \\\",\\\"nvap\\\":\\\"≍⃒\\\",\\\"nvdash\\\":\\\"⊬\\\",\\\"nvDash\\\":\\\"⊭\\\",\\\"nVdash\\\":\\\"⊮\\\",\\\"nVDash\\\":\\\"⊯\\\",\\\"nvge\\\":\\\"≥⃒\\\",\\\"nvgt\\\":\\\">⃒\\\",\\\"nvHarr\\\":\\\"⤄\\\",\\\"nvinfin\\\":\\\"⧞\\\",\\\"nvlArr\\\":\\\"⤂\\\",\\\"nvle\\\":\\\"≤⃒\\\",\\\"nvlt\\\":\\\"<⃒\\\",\\\"nvltrie\\\":\\\"⊴⃒\\\",\\\"nvrArr\\\":\\\"⤃\\\",\\\"nvrtrie\\\":\\\"⊵⃒\\\",\\\"nvsim\\\":\\\"∼⃒\\\",\\\"nwarhk\\\":\\\"⤣\\\",\\\"nwarr\\\":\\\"↖\\\",\\\"nwArr\\\":\\\"⇖\\\",\\\"nwarrow\\\":\\\"↖\\\",\\\"nwnear\\\":\\\"⤧\\\",\\\"Oacute\\\":\\\"Ó\\\",\\\"oacute\\\":\\\"ó\\\",\\\"oast\\\":\\\"⊛\\\",\\\"Ocirc\\\":\\\"Ô\\\",\\\"ocirc\\\":\\\"ô\\\",\\\"ocir\\\":\\\"⊚\\\",\\\"Ocy\\\":\\\"О\\\",\\\"ocy\\\":\\\"о\\\",\\\"odash\\\":\\\"⊝\\\",\\\"Odblac\\\":\\\"Ő\\\",\\\"odblac\\\":\\\"ő\\\",\\\"odiv\\\":\\\"⨸\\\",\\\"odot\\\":\\\"⊙\\\",\\\"odsold\\\":\\\"⦼\\\",\\\"OElig\\\":\\\"Œ\\\",\\\"oelig\\\":\\\"œ\\\",\\\"ofcir\\\":\\\"⦿\\\",\\\"Ofr\\\":\\\"𝔒\\\",\\\"ofr\\\":\\\"𝔬\\\",\\\"ogon\\\":\\\"˛\\\",\\\"Ograve\\\":\\\"Ò\\\",\\\"ograve\\\":\\\"ò\\\",\\\"ogt\\\":\\\"⧁\\\",\\\"ohbar\\\":\\\"⦵\\\",\\\"ohm\\\":\\\"Ω\\\",\\\"oint\\\":\\\"∮\\\",\\\"olarr\\\":\\\"↺\\\",\\\"olcir\\\":\\\"⦾\\\",\\\"olcross\\\":\\\"⦻\\\",\\\"oline\\\":\\\"‾\\\",\\\"olt\\\":\\\"⧀\\\",\\\"Omacr\\\":\\\"Ō\\\",\\\"omacr\\\":\\\"ō\\\",\\\"Omega\\\":\\\"Ω\\\",\\\"omega\\\":\\\"ω\\\",\\\"Omicron\\\":\\\"Ο\\\",\\\"omicron\\\":\\\"ο\\\",\\\"omid\\\":\\\"⦶\\\",\\\"ominus\\\":\\\"⊖\\\",\\\"Oopf\\\":\\\"𝕆\\\",\\\"oopf\\\":\\\"𝕠\\\",\\\"opar\\\":\\\"⦷\\\",\\\"OpenCurlyDoubleQuote\\\":\\\"“\\\",\\\"OpenCurlyQuote\\\":\\\"‘\\\",\\\"operp\\\":\\\"⦹\\\",\\\"oplus\\\":\\\"⊕\\\",\\\"orarr\\\":\\\"↻\\\",\\\"Or\\\":\\\"⩔\\\",\\\"or\\\":\\\"∨\\\",\\\"ord\\\":\\\"⩝\\\",\\\"order\\\":\\\"ℴ\\\",\\\"orderof\\\":\\\"ℴ\\\",\\\"ordf\\\":\\\"ª\\\",\\\"ordm\\\":\\\"º\\\",\\\"origof\\\":\\\"⊶\\\",\\\"oror\\\":\\\"⩖\\\",\\\"orslope\\\":\\\"⩗\\\",\\\"orv\\\":\\\"⩛\\\",\\\"oS\\\":\\\"Ⓢ\\\",\\\"Oscr\\\":\\\"𝒪\\\",\\\"oscr\\\":\\\"ℴ\\\",\\\"Oslash\\\":\\\"Ø\\\",\\\"oslash\\\":\\\"ø\\\",\\\"osol\\\":\\\"⊘\\\",\\\"Otilde\\\":\\\"Õ\\\",\\\"otilde\\\":\\\"õ\\\",\\\"otimesas\\\":\\\"⨶\\\",\\\"Otimes\\\":\\\"⨷\\\",\\\"otimes\\\":\\\"⊗\\\",\\\"Ouml\\\":\\\"Ö\\\",\\\"ouml\\\":\\\"ö\\\",\\\"ovbar\\\":\\\"⌽\\\",\\\"OverBar\\\":\\\"‾\\\",\\\"OverBrace\\\":\\\"⏞\\\",\\\"OverBracket\\\":\\\"⎴\\\",\\\"OverParenthesis\\\":\\\"⏜\\\",\\\"para\\\":\\\"¶\\\",\\\"parallel\\\":\\\"∥\\\",\\\"par\\\":\\\"∥\\\",\\\"parsim\\\":\\\"⫳\\\",\\\"parsl\\\":\\\"⫽\\\",\\\"part\\\":\\\"∂\\\",\\\"PartialD\\\":\\\"∂\\\",\\\"Pcy\\\":\\\"П\\\",\\\"pcy\\\":\\\"п\\\",\\\"percnt\\\":\\\"%\\\",\\\"period\\\":\\\".\\\",\\\"permil\\\":\\\"‰\\\",\\\"perp\\\":\\\"⊥\\\",\\\"pertenk\\\":\\\"‱\\\",\\\"Pfr\\\":\\\"𝔓\\\",\\\"pfr\\\":\\\"𝔭\\\",\\\"Phi\\\":\\\"Φ\\\",\\\"phi\\\":\\\"φ\\\",\\\"phiv\\\":\\\"ϕ\\\",\\\"phmmat\\\":\\\"ℳ\\\",\\\"phone\\\":\\\"☎\\\",\\\"Pi\\\":\\\"Π\\\",\\\"pi\\\":\\\"π\\\",\\\"pitchfork\\\":\\\"⋔\\\",\\\"piv\\\":\\\"ϖ\\\",\\\"planck\\\":\\\"ℏ\\\",\\\"planckh\\\":\\\"ℎ\\\",\\\"plankv\\\":\\\"ℏ\\\",\\\"plusacir\\\":\\\"⨣\\\",\\\"plusb\\\":\\\"⊞\\\",\\\"pluscir\\\":\\\"⨢\\\",\\\"plus\\\":\\\"+\\\",\\\"plusdo\\\":\\\"∔\\\",\\\"plusdu\\\":\\\"⨥\\\",\\\"pluse\\\":\\\"⩲\\\",\\\"PlusMinus\\\":\\\"±\\\",\\\"plusmn\\\":\\\"±\\\",\\\"plussim\\\":\\\"⨦\\\",\\\"plustwo\\\":\\\"⨧\\\",\\\"pm\\\":\\\"±\\\",\\\"Poincareplane\\\":\\\"ℌ\\\",\\\"pointint\\\":\\\"⨕\\\",\\\"popf\\\":\\\"𝕡\\\",\\\"Popf\\\":\\\"ℙ\\\",\\\"pound\\\":\\\"£\\\",\\\"prap\\\":\\\"⪷\\\",\\\"Pr\\\":\\\"⪻\\\",\\\"pr\\\":\\\"≺\\\",\\\"prcue\\\":\\\"≼\\\",\\\"precapprox\\\":\\\"⪷\\\",\\\"prec\\\":\\\"≺\\\",\\\"preccurlyeq\\\":\\\"≼\\\",\\\"Precedes\\\":\\\"≺\\\",\\\"PrecedesEqual\\\":\\\"⪯\\\",\\\"PrecedesSlantEqual\\\":\\\"≼\\\",\\\"PrecedesTilde\\\":\\\"≾\\\",\\\"preceq\\\":\\\"⪯\\\",\\\"precnapprox\\\":\\\"⪹\\\",\\\"precneqq\\\":\\\"⪵\\\",\\\"precnsim\\\":\\\"⋨\\\",\\\"pre\\\":\\\"⪯\\\",\\\"prE\\\":\\\"⪳\\\",\\\"precsim\\\":\\\"≾\\\",\\\"prime\\\":\\\"′\\\",\\\"Prime\\\":\\\"″\\\",\\\"primes\\\":\\\"ℙ\\\",\\\"prnap\\\":\\\"⪹\\\",\\\"prnE\\\":\\\"⪵\\\",\\\"prnsim\\\":\\\"⋨\\\",\\\"prod\\\":\\\"∏\\\",\\\"Product\\\":\\\"∏\\\",\\\"profalar\\\":\\\"⌮\\\",\\\"profline\\\":\\\"⌒\\\",\\\"profsurf\\\":\\\"⌓\\\",\\\"prop\\\":\\\"∝\\\",\\\"Proportional\\\":\\\"∝\\\",\\\"Proportion\\\":\\\"∷\\\",\\\"propto\\\":\\\"∝\\\",\\\"prsim\\\":\\\"≾\\\",\\\"prurel\\\":\\\"⊰\\\",\\\"Pscr\\\":\\\"𝒫\\\",\\\"pscr\\\":\\\"𝓅\\\",\\\"Psi\\\":\\\"Ψ\\\",\\\"psi\\\":\\\"ψ\\\",\\\"puncsp\\\":\\\" \\\",\\\"Qfr\\\":\\\"𝔔\\\",\\\"qfr\\\":\\\"𝔮\\\",\\\"qint\\\":\\\"⨌\\\",\\\"qopf\\\":\\\"𝕢\\\",\\\"Qopf\\\":\\\"ℚ\\\",\\\"qprime\\\":\\\"⁗\\\",\\\"Qscr\\\":\\\"𝒬\\\",\\\"qscr\\\":\\\"𝓆\\\",\\\"quaternions\\\":\\\"ℍ\\\",\\\"quatint\\\":\\\"⨖\\\",\\\"quest\\\":\\\"?\\\",\\\"questeq\\\":\\\"≟\\\",\\\"quot\\\":\\\"\\\\\\\"\\\",\\\"QUOT\\\":\\\"\\\\\\\"\\\",\\\"rAarr\\\":\\\"⇛\\\",\\\"race\\\":\\\"∽̱\\\",\\\"Racute\\\":\\\"Ŕ\\\",\\\"racute\\\":\\\"ŕ\\\",\\\"radic\\\":\\\"√\\\",\\\"raemptyv\\\":\\\"⦳\\\",\\\"rang\\\":\\\"⟩\\\",\\\"Rang\\\":\\\"⟫\\\",\\\"rangd\\\":\\\"⦒\\\",\\\"range\\\":\\\"⦥\\\",\\\"rangle\\\":\\\"⟩\\\",\\\"raquo\\\":\\\"»\\\",\\\"rarrap\\\":\\\"⥵\\\",\\\"rarrb\\\":\\\"⇥\\\",\\\"rarrbfs\\\":\\\"⤠\\\",\\\"rarrc\\\":\\\"⤳\\\",\\\"rarr\\\":\\\"→\\\",\\\"Rarr\\\":\\\"↠\\\",\\\"rArr\\\":\\\"⇒\\\",\\\"rarrfs\\\":\\\"⤞\\\",\\\"rarrhk\\\":\\\"↪\\\",\\\"rarrlp\\\":\\\"↬\\\",\\\"rarrpl\\\":\\\"⥅\\\",\\\"rarrsim\\\":\\\"⥴\\\",\\\"Rarrtl\\\":\\\"⤖\\\",\\\"rarrtl\\\":\\\"↣\\\",\\\"rarrw\\\":\\\"↝\\\",\\\"ratail\\\":\\\"⤚\\\",\\\"rAtail\\\":\\\"⤜\\\",\\\"ratio\\\":\\\"∶\\\",\\\"rationals\\\":\\\"ℚ\\\",\\\"rbarr\\\":\\\"⤍\\\",\\\"rBarr\\\":\\\"⤏\\\",\\\"RBarr\\\":\\\"⤐\\\",\\\"rbbrk\\\":\\\"❳\\\",\\\"rbrace\\\":\\\"}\\\",\\\"rbrack\\\":\\\"]\\\",\\\"rbrke\\\":\\\"⦌\\\",\\\"rbrksld\\\":\\\"⦎\\\",\\\"rbrkslu\\\":\\\"⦐\\\",\\\"Rcaron\\\":\\\"Ř\\\",\\\"rcaron\\\":\\\"ř\\\",\\\"Rcedil\\\":\\\"Ŗ\\\",\\\"rcedil\\\":\\\"ŗ\\\",\\\"rceil\\\":\\\"⌉\\\",\\\"rcub\\\":\\\"}\\\",\\\"Rcy\\\":\\\"Р\\\",\\\"rcy\\\":\\\"р\\\",\\\"rdca\\\":\\\"⤷\\\",\\\"rdldhar\\\":\\\"⥩\\\",\\\"rdquo\\\":\\\"”\\\",\\\"rdquor\\\":\\\"”\\\",\\\"rdsh\\\":\\\"↳\\\",\\\"real\\\":\\\"ℜ\\\",\\\"realine\\\":\\\"ℛ\\\",\\\"realpart\\\":\\\"ℜ\\\",\\\"reals\\\":\\\"ℝ\\\",\\\"Re\\\":\\\"ℜ\\\",\\\"rect\\\":\\\"▭\\\",\\\"reg\\\":\\\"®\\\",\\\"REG\\\":\\\"®\\\",\\\"ReverseElement\\\":\\\"∋\\\",\\\"ReverseEquilibrium\\\":\\\"⇋\\\",\\\"ReverseUpEquilibrium\\\":\\\"⥯\\\",\\\"rfisht\\\":\\\"⥽\\\",\\\"rfloor\\\":\\\"⌋\\\",\\\"rfr\\\":\\\"𝔯\\\",\\\"Rfr\\\":\\\"ℜ\\\",\\\"rHar\\\":\\\"⥤\\\",\\\"rhard\\\":\\\"⇁\\\",\\\"rharu\\\":\\\"⇀\\\",\\\"rharul\\\":\\\"⥬\\\",\\\"Rho\\\":\\\"Ρ\\\",\\\"rho\\\":\\\"ρ\\\",\\\"rhov\\\":\\\"ϱ\\\",\\\"RightAngleBracket\\\":\\\"⟩\\\",\\\"RightArrowBar\\\":\\\"⇥\\\",\\\"rightarrow\\\":\\\"→\\\",\\\"RightArrow\\\":\\\"→\\\",\\\"Rightarrow\\\":\\\"⇒\\\",\\\"RightArrowLeftArrow\\\":\\\"⇄\\\",\\\"rightarrowtail\\\":\\\"↣\\\",\\\"RightCeiling\\\":\\\"⌉\\\",\\\"RightDoubleBracket\\\":\\\"⟧\\\",\\\"RightDownTeeVector\\\":\\\"⥝\\\",\\\"RightDownVectorBar\\\":\\\"⥕\\\",\\\"RightDownVector\\\":\\\"⇂\\\",\\\"RightFloor\\\":\\\"⌋\\\",\\\"rightharpoondown\\\":\\\"⇁\\\",\\\"rightharpoonup\\\":\\\"⇀\\\",\\\"rightleftarrows\\\":\\\"⇄\\\",\\\"rightleftharpoons\\\":\\\"⇌\\\",\\\"rightrightarrows\\\":\\\"⇉\\\",\\\"rightsquigarrow\\\":\\\"↝\\\",\\\"RightTeeArrow\\\":\\\"↦\\\",\\\"RightTee\\\":\\\"⊢\\\",\\\"RightTeeVector\\\":\\\"⥛\\\",\\\"rightthreetimes\\\":\\\"⋌\\\",\\\"RightTriangleBar\\\":\\\"⧐\\\",\\\"RightTriangle\\\":\\\"⊳\\\",\\\"RightTriangleEqual\\\":\\\"⊵\\\",\\\"RightUpDownVector\\\":\\\"⥏\\\",\\\"RightUpTeeVector\\\":\\\"⥜\\\",\\\"RightUpVectorBar\\\":\\\"⥔\\\",\\\"RightUpVector\\\":\\\"↾\\\",\\\"RightVectorBar\\\":\\\"⥓\\\",\\\"RightVector\\\":\\\"⇀\\\",\\\"ring\\\":\\\"˚\\\",\\\"risingdotseq\\\":\\\"≓\\\",\\\"rlarr\\\":\\\"⇄\\\",\\\"rlhar\\\":\\\"⇌\\\",\\\"rlm\\\":\\\"‏\\\",\\\"rmoustache\\\":\\\"⎱\\\",\\\"rmoust\\\":\\\"⎱\\\",\\\"rnmid\\\":\\\"⫮\\\",\\\"roang\\\":\\\"⟭\\\",\\\"roarr\\\":\\\"⇾\\\",\\\"robrk\\\":\\\"⟧\\\",\\\"ropar\\\":\\\"⦆\\\",\\\"ropf\\\":\\\"𝕣\\\",\\\"Ropf\\\":\\\"ℝ\\\",\\\"roplus\\\":\\\"⨮\\\",\\\"rotimes\\\":\\\"⨵\\\",\\\"RoundImplies\\\":\\\"⥰\\\",\\\"rpar\\\":\\\")\\\",\\\"rpargt\\\":\\\"⦔\\\",\\\"rppolint\\\":\\\"⨒\\\",\\\"rrarr\\\":\\\"⇉\\\",\\\"Rrightarrow\\\":\\\"⇛\\\",\\\"rsaquo\\\":\\\"›\\\",\\\"rscr\\\":\\\"𝓇\\\",\\\"Rscr\\\":\\\"ℛ\\\",\\\"rsh\\\":\\\"↱\\\",\\\"Rsh\\\":\\\"↱\\\",\\\"rsqb\\\":\\\"]\\\",\\\"rsquo\\\":\\\"’\\\",\\\"rsquor\\\":\\\"’\\\",\\\"rthree\\\":\\\"⋌\\\",\\\"rtimes\\\":\\\"⋊\\\",\\\"rtri\\\":\\\"▹\\\",\\\"rtrie\\\":\\\"⊵\\\",\\\"rtrif\\\":\\\"▸\\\",\\\"rtriltri\\\":\\\"⧎\\\",\\\"RuleDelayed\\\":\\\"⧴\\\",\\\"ruluhar\\\":\\\"⥨\\\",\\\"rx\\\":\\\"℞\\\",\\\"Sacute\\\":\\\"Ś\\\",\\\"sacute\\\":\\\"ś\\\",\\\"sbquo\\\":\\\"‚\\\",\\\"scap\\\":\\\"⪸\\\",\\\"Scaron\\\":\\\"Š\\\",\\\"scaron\\\":\\\"š\\\",\\\"Sc\\\":\\\"⪼\\\",\\\"sc\\\":\\\"≻\\\",\\\"sccue\\\":\\\"≽\\\",\\\"sce\\\":\\\"⪰\\\",\\\"scE\\\":\\\"⪴\\\",\\\"Scedil\\\":\\\"Ş\\\",\\\"scedil\\\":\\\"ş\\\",\\\"Scirc\\\":\\\"Ŝ\\\",\\\"scirc\\\":\\\"ŝ\\\",\\\"scnap\\\":\\\"⪺\\\",\\\"scnE\\\":\\\"⪶\\\",\\\"scnsim\\\":\\\"⋩\\\",\\\"scpolint\\\":\\\"⨓\\\",\\\"scsim\\\":\\\"≿\\\",\\\"Scy\\\":\\\"С\\\",\\\"scy\\\":\\\"с\\\",\\\"sdotb\\\":\\\"⊡\\\",\\\"sdot\\\":\\\"⋅\\\",\\\"sdote\\\":\\\"⩦\\\",\\\"searhk\\\":\\\"⤥\\\",\\\"searr\\\":\\\"↘\\\",\\\"seArr\\\":\\\"⇘\\\",\\\"searrow\\\":\\\"↘\\\",\\\"sect\\\":\\\"§\\\",\\\"semi\\\":\\\";\\\",\\\"seswar\\\":\\\"⤩\\\",\\\"setminus\\\":\\\"∖\\\",\\\"setmn\\\":\\\"∖\\\",\\\"sext\\\":\\\"✶\\\",\\\"Sfr\\\":\\\"𝔖\\\",\\\"sfr\\\":\\\"𝔰\\\",\\\"sfrown\\\":\\\"⌢\\\",\\\"sharp\\\":\\\"♯\\\",\\\"SHCHcy\\\":\\\"Щ\\\",\\\"shchcy\\\":\\\"щ\\\",\\\"SHcy\\\":\\\"Ш\\\",\\\"shcy\\\":\\\"ш\\\",\\\"ShortDownArrow\\\":\\\"↓\\\",\\\"ShortLeftArrow\\\":\\\"←\\\",\\\"shortmid\\\":\\\"∣\\\",\\\"shortparallel\\\":\\\"∥\\\",\\\"ShortRightArrow\\\":\\\"→\\\",\\\"ShortUpArrow\\\":\\\"↑\\\",\\\"shy\\\":\\\"­\\\",\\\"Sigma\\\":\\\"Σ\\\",\\\"sigma\\\":\\\"σ\\\",\\\"sigmaf\\\":\\\"ς\\\",\\\"sigmav\\\":\\\"ς\\\",\\\"sim\\\":\\\"∼\\\",\\\"simdot\\\":\\\"⩪\\\",\\\"sime\\\":\\\"≃\\\",\\\"simeq\\\":\\\"≃\\\",\\\"simg\\\":\\\"⪞\\\",\\\"simgE\\\":\\\"⪠\\\",\\\"siml\\\":\\\"⪝\\\",\\\"simlE\\\":\\\"⪟\\\",\\\"simne\\\":\\\"≆\\\",\\\"simplus\\\":\\\"⨤\\\",\\\"simrarr\\\":\\\"⥲\\\",\\\"slarr\\\":\\\"←\\\",\\\"SmallCircle\\\":\\\"∘\\\",\\\"smallsetminus\\\":\\\"∖\\\",\\\"smashp\\\":\\\"⨳\\\",\\\"smeparsl\\\":\\\"⧤\\\",\\\"smid\\\":\\\"∣\\\",\\\"smile\\\":\\\"⌣\\\",\\\"smt\\\":\\\"⪪\\\",\\\"smte\\\":\\\"⪬\\\",\\\"smtes\\\":\\\"⪬︀\\\",\\\"SOFTcy\\\":\\\"Ь\\\",\\\"softcy\\\":\\\"ь\\\",\\\"solbar\\\":\\\"⌿\\\",\\\"solb\\\":\\\"⧄\\\",\\\"sol\\\":\\\"/\\\",\\\"Sopf\\\":\\\"𝕊\\\",\\\"sopf\\\":\\\"𝕤\\\",\\\"spades\\\":\\\"♠\\\",\\\"spadesuit\\\":\\\"♠\\\",\\\"spar\\\":\\\"∥\\\",\\\"sqcap\\\":\\\"⊓\\\",\\\"sqcaps\\\":\\\"⊓︀\\\",\\\"sqcup\\\":\\\"⊔\\\",\\\"sqcups\\\":\\\"⊔︀\\\",\\\"Sqrt\\\":\\\"√\\\",\\\"sqsub\\\":\\\"⊏\\\",\\\"sqsube\\\":\\\"⊑\\\",\\\"sqsubset\\\":\\\"⊏\\\",\\\"sqsubseteq\\\":\\\"⊑\\\",\\\"sqsup\\\":\\\"⊐\\\",\\\"sqsupe\\\":\\\"⊒\\\",\\\"sqsupset\\\":\\\"⊐\\\",\\\"sqsupseteq\\\":\\\"⊒\\\",\\\"square\\\":\\\"□\\\",\\\"Square\\\":\\\"□\\\",\\\"SquareIntersection\\\":\\\"⊓\\\",\\\"SquareSubset\\\":\\\"⊏\\\",\\\"SquareSubsetEqual\\\":\\\"⊑\\\",\\\"SquareSuperset\\\":\\\"⊐\\\",\\\"SquareSupersetEqual\\\":\\\"⊒\\\",\\\"SquareUnion\\\":\\\"⊔\\\",\\\"squarf\\\":\\\"▪\\\",\\\"squ\\\":\\\"□\\\",\\\"squf\\\":\\\"▪\\\",\\\"srarr\\\":\\\"→\\\",\\\"Sscr\\\":\\\"𝒮\\\",\\\"sscr\\\":\\\"𝓈\\\",\\\"ssetmn\\\":\\\"∖\\\",\\\"ssmile\\\":\\\"⌣\\\",\\\"sstarf\\\":\\\"⋆\\\",\\\"Star\\\":\\\"⋆\\\",\\\"star\\\":\\\"☆\\\",\\\"starf\\\":\\\"★\\\",\\\"straightepsilon\\\":\\\"ϵ\\\",\\\"straightphi\\\":\\\"ϕ\\\",\\\"strns\\\":\\\"¯\\\",\\\"sub\\\":\\\"⊂\\\",\\\"Sub\\\":\\\"⋐\\\",\\\"subdot\\\":\\\"⪽\\\",\\\"subE\\\":\\\"⫅\\\",\\\"sube\\\":\\\"⊆\\\",\\\"subedot\\\":\\\"⫃\\\",\\\"submult\\\":\\\"⫁\\\",\\\"subnE\\\":\\\"⫋\\\",\\\"subne\\\":\\\"⊊\\\",\\\"subplus\\\":\\\"⪿\\\",\\\"subrarr\\\":\\\"⥹\\\",\\\"subset\\\":\\\"⊂\\\",\\\"Subset\\\":\\\"⋐\\\",\\\"subseteq\\\":\\\"⊆\\\",\\\"subseteqq\\\":\\\"⫅\\\",\\\"SubsetEqual\\\":\\\"⊆\\\",\\\"subsetneq\\\":\\\"⊊\\\",\\\"subsetneqq\\\":\\\"⫋\\\",\\\"subsim\\\":\\\"⫇\\\",\\\"subsub\\\":\\\"⫕\\\",\\\"subsup\\\":\\\"⫓\\\",\\\"succapprox\\\":\\\"⪸\\\",\\\"succ\\\":\\\"≻\\\",\\\"succcurlyeq\\\":\\\"≽\\\",\\\"Succeeds\\\":\\\"≻\\\",\\\"SucceedsEqual\\\":\\\"⪰\\\",\\\"SucceedsSlantEqual\\\":\\\"≽\\\",\\\"SucceedsTilde\\\":\\\"≿\\\",\\\"succeq\\\":\\\"⪰\\\",\\\"succnapprox\\\":\\\"⪺\\\",\\\"succneqq\\\":\\\"⪶\\\",\\\"succnsim\\\":\\\"⋩\\\",\\\"succsim\\\":\\\"≿\\\",\\\"SuchThat\\\":\\\"∋\\\",\\\"sum\\\":\\\"∑\\\",\\\"Sum\\\":\\\"∑\\\",\\\"sung\\\":\\\"♪\\\",\\\"sup1\\\":\\\"¹\\\",\\\"sup2\\\":\\\"²\\\",\\\"sup3\\\":\\\"³\\\",\\\"sup\\\":\\\"⊃\\\",\\\"Sup\\\":\\\"⋑\\\",\\\"supdot\\\":\\\"⪾\\\",\\\"supdsub\\\":\\\"⫘\\\",\\\"supE\\\":\\\"⫆\\\",\\\"supe\\\":\\\"⊇\\\",\\\"supedot\\\":\\\"⫄\\\",\\\"Superset\\\":\\\"⊃\\\",\\\"SupersetEqual\\\":\\\"⊇\\\",\\\"suphsol\\\":\\\"⟉\\\",\\\"suphsub\\\":\\\"⫗\\\",\\\"suplarr\\\":\\\"⥻\\\",\\\"supmult\\\":\\\"⫂\\\",\\\"supnE\\\":\\\"⫌\\\",\\\"supne\\\":\\\"⊋\\\",\\\"supplus\\\":\\\"⫀\\\",\\\"supset\\\":\\\"⊃\\\",\\\"Supset\\\":\\\"⋑\\\",\\\"supseteq\\\":\\\"⊇\\\",\\\"supseteqq\\\":\\\"⫆\\\",\\\"supsetneq\\\":\\\"⊋\\\",\\\"supsetneqq\\\":\\\"⫌\\\",\\\"supsim\\\":\\\"⫈\\\",\\\"supsub\\\":\\\"⫔\\\",\\\"supsup\\\":\\\"⫖\\\",\\\"swarhk\\\":\\\"⤦\\\",\\\"swarr\\\":\\\"↙\\\",\\\"swArr\\\":\\\"⇙\\\",\\\"swarrow\\\":\\\"↙\\\",\\\"swnwar\\\":\\\"⤪\\\",\\\"szlig\\\":\\\"ß\\\",\\\"Tab\\\":\\\"\\\\t\\\",\\\"target\\\":\\\"⌖\\\",\\\"Tau\\\":\\\"Τ\\\",\\\"tau\\\":\\\"τ\\\",\\\"tbrk\\\":\\\"⎴\\\",\\\"Tcaron\\\":\\\"Ť\\\",\\\"tcaron\\\":\\\"ť\\\",\\\"Tcedil\\\":\\\"Ţ\\\",\\\"tcedil\\\":\\\"ţ\\\",\\\"Tcy\\\":\\\"Т\\\",\\\"tcy\\\":\\\"т\\\",\\\"tdot\\\":\\\"⃛\\\",\\\"telrec\\\":\\\"⌕\\\",\\\"Tfr\\\":\\\"𝔗\\\",\\\"tfr\\\":\\\"𝔱\\\",\\\"there4\\\":\\\"∴\\\",\\\"therefore\\\":\\\"∴\\\",\\\"Therefore\\\":\\\"∴\\\",\\\"Theta\\\":\\\"Θ\\\",\\\"theta\\\":\\\"θ\\\",\\\"thetasym\\\":\\\"ϑ\\\",\\\"thetav\\\":\\\"ϑ\\\",\\\"thickapprox\\\":\\\"≈\\\",\\\"thicksim\\\":\\\"∼\\\",\\\"ThickSpace\\\":\\\"  \\\",\\\"ThinSpace\\\":\\\" \\\",\\\"thinsp\\\":\\\" \\\",\\\"thkap\\\":\\\"≈\\\",\\\"thksim\\\":\\\"∼\\\",\\\"THORN\\\":\\\"Þ\\\",\\\"thorn\\\":\\\"þ\\\",\\\"tilde\\\":\\\"˜\\\",\\\"Tilde\\\":\\\"∼\\\",\\\"TildeEqual\\\":\\\"≃\\\",\\\"TildeFullEqual\\\":\\\"≅\\\",\\\"TildeTilde\\\":\\\"≈\\\",\\\"timesbar\\\":\\\"⨱\\\",\\\"timesb\\\":\\\"⊠\\\",\\\"times\\\":\\\"×\\\",\\\"timesd\\\":\\\"⨰\\\",\\\"tint\\\":\\\"∭\\\",\\\"toea\\\":\\\"⤨\\\",\\\"topbot\\\":\\\"⌶\\\",\\\"topcir\\\":\\\"⫱\\\",\\\"top\\\":\\\"⊤\\\",\\\"Topf\\\":\\\"𝕋\\\",\\\"topf\\\":\\\"𝕥\\\",\\\"topfork\\\":\\\"⫚\\\",\\\"tosa\\\":\\\"⤩\\\",\\\"tprime\\\":\\\"‴\\\",\\\"trade\\\":\\\"™\\\",\\\"TRADE\\\":\\\"™\\\",\\\"triangle\\\":\\\"▵\\\",\\\"triangledown\\\":\\\"▿\\\",\\\"triangleleft\\\":\\\"◃\\\",\\\"trianglelefteq\\\":\\\"⊴\\\",\\\"triangleq\\\":\\\"≜\\\",\\\"triangleright\\\":\\\"▹\\\",\\\"trianglerighteq\\\":\\\"⊵\\\",\\\"tridot\\\":\\\"◬\\\",\\\"trie\\\":\\\"≜\\\",\\\"triminus\\\":\\\"⨺\\\",\\\"TripleDot\\\":\\\"⃛\\\",\\\"triplus\\\":\\\"⨹\\\",\\\"trisb\\\":\\\"⧍\\\",\\\"tritime\\\":\\\"⨻\\\",\\\"trpezium\\\":\\\"⏢\\\",\\\"Tscr\\\":\\\"𝒯\\\",\\\"tscr\\\":\\\"𝓉\\\",\\\"TScy\\\":\\\"Ц\\\",\\\"tscy\\\":\\\"ц\\\",\\\"TSHcy\\\":\\\"Ћ\\\",\\\"tshcy\\\":\\\"ћ\\\",\\\"Tstrok\\\":\\\"Ŧ\\\",\\\"tstrok\\\":\\\"ŧ\\\",\\\"twixt\\\":\\\"≬\\\",\\\"twoheadleftarrow\\\":\\\"↞\\\",\\\"twoheadrightarrow\\\":\\\"↠\\\",\\\"Uacute\\\":\\\"Ú\\\",\\\"uacute\\\":\\\"ú\\\",\\\"uarr\\\":\\\"↑\\\",\\\"Uarr\\\":\\\"↟\\\",\\\"uArr\\\":\\\"⇑\\\",\\\"Uarrocir\\\":\\\"⥉\\\",\\\"Ubrcy\\\":\\\"Ў\\\",\\\"ubrcy\\\":\\\"ў\\\",\\\"Ubreve\\\":\\\"Ŭ\\\",\\\"ubreve\\\":\\\"ŭ\\\",\\\"Ucirc\\\":\\\"Û\\\",\\\"ucirc\\\":\\\"û\\\",\\\"Ucy\\\":\\\"У\\\",\\\"ucy\\\":\\\"у\\\",\\\"udarr\\\":\\\"⇅\\\",\\\"Udblac\\\":\\\"Ű\\\",\\\"udblac\\\":\\\"ű\\\",\\\"udhar\\\":\\\"⥮\\\",\\\"ufisht\\\":\\\"⥾\\\",\\\"Ufr\\\":\\\"𝔘\\\",\\\"ufr\\\":\\\"𝔲\\\",\\\"Ugrave\\\":\\\"Ù\\\",\\\"ugrave\\\":\\\"ù\\\",\\\"uHar\\\":\\\"⥣\\\",\\\"uharl\\\":\\\"↿\\\",\\\"uharr\\\":\\\"↾\\\",\\\"uhblk\\\":\\\"▀\\\",\\\"ulcorn\\\":\\\"⌜\\\",\\\"ulcorner\\\":\\\"⌜\\\",\\\"ulcrop\\\":\\\"⌏\\\",\\\"ultri\\\":\\\"◸\\\",\\\"Umacr\\\":\\\"Ū\\\",\\\"umacr\\\":\\\"ū\\\",\\\"uml\\\":\\\"¨\\\",\\\"UnderBar\\\":\\\"_\\\",\\\"UnderBrace\\\":\\\"⏟\\\",\\\"UnderBracket\\\":\\\"⎵\\\",\\\"UnderParenthesis\\\":\\\"⏝\\\",\\\"Union\\\":\\\"⋃\\\",\\\"UnionPlus\\\":\\\"⊎\\\",\\\"Uogon\\\":\\\"Ų\\\",\\\"uogon\\\":\\\"ų\\\",\\\"Uopf\\\":\\\"𝕌\\\",\\\"uopf\\\":\\\"𝕦\\\",\\\"UpArrowBar\\\":\\\"⤒\\\",\\\"uparrow\\\":\\\"↑\\\",\\\"UpArrow\\\":\\\"↑\\\",\\\"Uparrow\\\":\\\"⇑\\\",\\\"UpArrowDownArrow\\\":\\\"⇅\\\",\\\"updownarrow\\\":\\\"↕\\\",\\\"UpDownArrow\\\":\\\"↕\\\",\\\"Updownarrow\\\":\\\"⇕\\\",\\\"UpEquilibrium\\\":\\\"⥮\\\",\\\"upharpoonleft\\\":\\\"↿\\\",\\\"upharpoonright\\\":\\\"↾\\\",\\\"uplus\\\":\\\"⊎\\\",\\\"UpperLeftArrow\\\":\\\"↖\\\",\\\"UpperRightArrow\\\":\\\"↗\\\",\\\"upsi\\\":\\\"υ\\\",\\\"Upsi\\\":\\\"ϒ\\\",\\\"upsih\\\":\\\"ϒ\\\",\\\"Upsilon\\\":\\\"Υ\\\",\\\"upsilon\\\":\\\"υ\\\",\\\"UpTeeArrow\\\":\\\"↥\\\",\\\"UpTee\\\":\\\"⊥\\\",\\\"upuparrows\\\":\\\"⇈\\\",\\\"urcorn\\\":\\\"⌝\\\",\\\"urcorner\\\":\\\"⌝\\\",\\\"urcrop\\\":\\\"⌎\\\",\\\"Uring\\\":\\\"Ů\\\",\\\"uring\\\":\\\"ů\\\",\\\"urtri\\\":\\\"◹\\\",\\\"Uscr\\\":\\\"𝒰\\\",\\\"uscr\\\":\\\"𝓊\\\",\\\"utdot\\\":\\\"⋰\\\",\\\"Utilde\\\":\\\"Ũ\\\",\\\"utilde\\\":\\\"ũ\\\",\\\"utri\\\":\\\"▵\\\",\\\"utrif\\\":\\\"▴\\\",\\\"uuarr\\\":\\\"⇈\\\",\\\"Uuml\\\":\\\"Ü\\\",\\\"uuml\\\":\\\"ü\\\",\\\"uwangle\\\":\\\"⦧\\\",\\\"vangrt\\\":\\\"⦜\\\",\\\"varepsilon\\\":\\\"ϵ\\\",\\\"varkappa\\\":\\\"ϰ\\\",\\\"varnothing\\\":\\\"∅\\\",\\\"varphi\\\":\\\"ϕ\\\",\\\"varpi\\\":\\\"ϖ\\\",\\\"varpropto\\\":\\\"∝\\\",\\\"varr\\\":\\\"↕\\\",\\\"vArr\\\":\\\"⇕\\\",\\\"varrho\\\":\\\"ϱ\\\",\\\"varsigma\\\":\\\"ς\\\",\\\"varsubsetneq\\\":\\\"⊊︀\\\",\\\"varsubsetneqq\\\":\\\"⫋︀\\\",\\\"varsupsetneq\\\":\\\"⊋︀\\\",\\\"varsupsetneqq\\\":\\\"⫌︀\\\",\\\"vartheta\\\":\\\"ϑ\\\",\\\"vartriangleleft\\\":\\\"⊲\\\",\\\"vartriangleright\\\":\\\"⊳\\\",\\\"vBar\\\":\\\"⫨\\\",\\\"Vbar\\\":\\\"⫫\\\",\\\"vBarv\\\":\\\"⫩\\\",\\\"Vcy\\\":\\\"В\\\",\\\"vcy\\\":\\\"в\\\",\\\"vdash\\\":\\\"⊢\\\",\\\"vDash\\\":\\\"⊨\\\",\\\"Vdash\\\":\\\"⊩\\\",\\\"VDash\\\":\\\"⊫\\\",\\\"Vdashl\\\":\\\"⫦\\\",\\\"veebar\\\":\\\"⊻\\\",\\\"vee\\\":\\\"∨\\\",\\\"Vee\\\":\\\"⋁\\\",\\\"veeeq\\\":\\\"≚\\\",\\\"vellip\\\":\\\"⋮\\\",\\\"verbar\\\":\\\"|\\\",\\\"Verbar\\\":\\\"‖\\\",\\\"vert\\\":\\\"|\\\",\\\"Vert\\\":\\\"‖\\\",\\\"VerticalBar\\\":\\\"∣\\\",\\\"VerticalLine\\\":\\\"|\\\",\\\"VerticalSeparator\\\":\\\"❘\\\",\\\"VerticalTilde\\\":\\\"≀\\\",\\\"VeryThinSpace\\\":\\\" \\\",\\\"Vfr\\\":\\\"𝔙\\\",\\\"vfr\\\":\\\"𝔳\\\",\\\"vltri\\\":\\\"⊲\\\",\\\"vnsub\\\":\\\"⊂⃒\\\",\\\"vnsup\\\":\\\"⊃⃒\\\",\\\"Vopf\\\":\\\"𝕍\\\",\\\"vopf\\\":\\\"𝕧\\\",\\\"vprop\\\":\\\"∝\\\",\\\"vrtri\\\":\\\"⊳\\\",\\\"Vscr\\\":\\\"𝒱\\\",\\\"vscr\\\":\\\"𝓋\\\",\\\"vsubnE\\\":\\\"⫋︀\\\",\\\"vsubne\\\":\\\"⊊︀\\\",\\\"vsupnE\\\":\\\"⫌︀\\\",\\\"vsupne\\\":\\\"⊋︀\\\",\\\"Vvdash\\\":\\\"⊪\\\",\\\"vzigzag\\\":\\\"⦚\\\",\\\"Wcirc\\\":\\\"Ŵ\\\",\\\"wcirc\\\":\\\"ŵ\\\",\\\"wedbar\\\":\\\"⩟\\\",\\\"wedge\\\":\\\"∧\\\",\\\"Wedge\\\":\\\"⋀\\\",\\\"wedgeq\\\":\\\"≙\\\",\\\"weierp\\\":\\\"℘\\\",\\\"Wfr\\\":\\\"𝔚\\\",\\\"wfr\\\":\\\"𝔴\\\",\\\"Wopf\\\":\\\"𝕎\\\",\\\"wopf\\\":\\\"𝕨\\\",\\\"wp\\\":\\\"℘\\\",\\\"wr\\\":\\\"≀\\\",\\\"wreath\\\":\\\"≀\\\",\\\"Wscr\\\":\\\"𝒲\\\",\\\"wscr\\\":\\\"𝓌\\\",\\\"xcap\\\":\\\"⋂\\\",\\\"xcirc\\\":\\\"◯\\\",\\\"xcup\\\":\\\"⋃\\\",\\\"xdtri\\\":\\\"▽\\\",\\\"Xfr\\\":\\\"𝔛\\\",\\\"xfr\\\":\\\"𝔵\\\",\\\"xharr\\\":\\\"⟷\\\",\\\"xhArr\\\":\\\"⟺\\\",\\\"Xi\\\":\\\"Ξ\\\",\\\"xi\\\":\\\"ξ\\\",\\\"xlarr\\\":\\\"⟵\\\",\\\"xlArr\\\":\\\"⟸\\\",\\\"xmap\\\":\\\"⟼\\\",\\\"xnis\\\":\\\"⋻\\\",\\\"xodot\\\":\\\"⨀\\\",\\\"Xopf\\\":\\\"𝕏\\\",\\\"xopf\\\":\\\"𝕩\\\",\\\"xoplus\\\":\\\"⨁\\\",\\\"xotime\\\":\\\"⨂\\\",\\\"xrarr\\\":\\\"⟶\\\",\\\"xrArr\\\":\\\"⟹\\\",\\\"Xscr\\\":\\\"𝒳\\\",\\\"xscr\\\":\\\"𝓍\\\",\\\"xsqcup\\\":\\\"⨆\\\",\\\"xuplus\\\":\\\"⨄\\\",\\\"xutri\\\":\\\"△\\\",\\\"xvee\\\":\\\"⋁\\\",\\\"xwedge\\\":\\\"⋀\\\",\\\"Yacute\\\":\\\"Ý\\\",\\\"yacute\\\":\\\"ý\\\",\\\"YAcy\\\":\\\"Я\\\",\\\"yacy\\\":\\\"я\\\",\\\"Ycirc\\\":\\\"Ŷ\\\",\\\"ycirc\\\":\\\"ŷ\\\",\\\"Ycy\\\":\\\"Ы\\\",\\\"ycy\\\":\\\"ы\\\",\\\"yen\\\":\\\"¥\\\",\\\"Yfr\\\":\\\"𝔜\\\",\\\"yfr\\\":\\\"𝔶\\\",\\\"YIcy\\\":\\\"Ї\\\",\\\"yicy\\\":\\\"ї\\\",\\\"Yopf\\\":\\\"𝕐\\\",\\\"yopf\\\":\\\"𝕪\\\",\\\"Yscr\\\":\\\"𝒴\\\",\\\"yscr\\\":\\\"𝓎\\\",\\\"YUcy\\\":\\\"Ю\\\",\\\"yucy\\\":\\\"ю\\\",\\\"yuml\\\":\\\"ÿ\\\",\\\"Yuml\\\":\\\"Ÿ\\\",\\\"Zacute\\\":\\\"Ź\\\",\\\"zacute\\\":\\\"ź\\\",\\\"Zcaron\\\":\\\"Ž\\\",\\\"zcaron\\\":\\\"ž\\\",\\\"Zcy\\\":\\\"З\\\",\\\"zcy\\\":\\\"з\\\",\\\"Zdot\\\":\\\"Ż\\\",\\\"zdot\\\":\\\"ż\\\",\\\"zeetrf\\\":\\\"ℨ\\\",\\\"ZeroWidthSpace\\\":\\\"​\\\",\\\"Zeta\\\":\\\"Ζ\\\",\\\"zeta\\\":\\\"ζ\\\",\\\"zfr\\\":\\\"𝔷\\\",\\\"Zfr\\\":\\\"ℨ\\\",\\\"ZHcy\\\":\\\"Ж\\\",\\\"zhcy\\\":\\\"ж\\\",\\\"zigrarr\\\":\\\"⇝\\\",\\\"zopf\\\":\\\"𝕫\\\",\\\"Zopf\\\":\\\"ℤ\\\",\\\"Zscr\\\":\\\"𝒵\\\",\\\"zscr\\\":\\\"𝓏\\\",\\\"zwj\\\":\\\"‍\\\",\\\"zwnj\\\":\\\"‌\\\"}\");\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/entities.json?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/legacy.json":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/legacy.json ***!
  \*****************************************************************************************************/
/*! exports provided: Aacute, aacute, Acirc, acirc, acute, AElig, aelig, Agrave, agrave, amp, AMP, Aring, aring, Atilde, atilde, Auml, auml, brvbar, Ccedil, ccedil, cedil, cent, copy, COPY, curren, deg, divide, Eacute, eacute, Ecirc, ecirc, Egrave, egrave, ETH, eth, Euml, euml, frac12, frac14, frac34, gt, GT, Iacute, iacute, Icirc, icirc, iexcl, Igrave, igrave, iquest, Iuml, iuml, laquo, lt, LT, macr, micro, middot, nbsp, not, Ntilde, ntilde, Oacute, oacute, Ocirc, ocirc, Ograve, ograve, ordf, ordm, Oslash, oslash, Otilde, otilde, Ouml, ouml, para, plusmn, pound, quot, QUOT, raquo, reg, REG, sect, shy, sup1, sup2, sup3, szlig, THORN, thorn, times, Uacute, uacute, Ucirc, ucirc, Ugrave, ugrave, uml, Uuml, uuml, Yacute, yacute, yen, yuml, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"Aacute\\\":\\\"Á\\\",\\\"aacute\\\":\\\"á\\\",\\\"Acirc\\\":\\\"Â\\\",\\\"acirc\\\":\\\"â\\\",\\\"acute\\\":\\\"´\\\",\\\"AElig\\\":\\\"Æ\\\",\\\"aelig\\\":\\\"æ\\\",\\\"Agrave\\\":\\\"À\\\",\\\"agrave\\\":\\\"à\\\",\\\"amp\\\":\\\"&\\\",\\\"AMP\\\":\\\"&\\\",\\\"Aring\\\":\\\"Å\\\",\\\"aring\\\":\\\"å\\\",\\\"Atilde\\\":\\\"Ã\\\",\\\"atilde\\\":\\\"ã\\\",\\\"Auml\\\":\\\"Ä\\\",\\\"auml\\\":\\\"ä\\\",\\\"brvbar\\\":\\\"¦\\\",\\\"Ccedil\\\":\\\"Ç\\\",\\\"ccedil\\\":\\\"ç\\\",\\\"cedil\\\":\\\"¸\\\",\\\"cent\\\":\\\"¢\\\",\\\"copy\\\":\\\"©\\\",\\\"COPY\\\":\\\"©\\\",\\\"curren\\\":\\\"¤\\\",\\\"deg\\\":\\\"°\\\",\\\"divide\\\":\\\"÷\\\",\\\"Eacute\\\":\\\"É\\\",\\\"eacute\\\":\\\"é\\\",\\\"Ecirc\\\":\\\"Ê\\\",\\\"ecirc\\\":\\\"ê\\\",\\\"Egrave\\\":\\\"È\\\",\\\"egrave\\\":\\\"è\\\",\\\"ETH\\\":\\\"Ð\\\",\\\"eth\\\":\\\"ð\\\",\\\"Euml\\\":\\\"Ë\\\",\\\"euml\\\":\\\"ë\\\",\\\"frac12\\\":\\\"½\\\",\\\"frac14\\\":\\\"¼\\\",\\\"frac34\\\":\\\"¾\\\",\\\"gt\\\":\\\">\\\",\\\"GT\\\":\\\">\\\",\\\"Iacute\\\":\\\"Í\\\",\\\"iacute\\\":\\\"í\\\",\\\"Icirc\\\":\\\"Î\\\",\\\"icirc\\\":\\\"î\\\",\\\"iexcl\\\":\\\"¡\\\",\\\"Igrave\\\":\\\"Ì\\\",\\\"igrave\\\":\\\"ì\\\",\\\"iquest\\\":\\\"¿\\\",\\\"Iuml\\\":\\\"Ï\\\",\\\"iuml\\\":\\\"ï\\\",\\\"laquo\\\":\\\"«\\\",\\\"lt\\\":\\\"<\\\",\\\"LT\\\":\\\"<\\\",\\\"macr\\\":\\\"¯\\\",\\\"micro\\\":\\\"µ\\\",\\\"middot\\\":\\\"·\\\",\\\"nbsp\\\":\\\" \\\",\\\"not\\\":\\\"¬\\\",\\\"Ntilde\\\":\\\"Ñ\\\",\\\"ntilde\\\":\\\"ñ\\\",\\\"Oacute\\\":\\\"Ó\\\",\\\"oacute\\\":\\\"ó\\\",\\\"Ocirc\\\":\\\"Ô\\\",\\\"ocirc\\\":\\\"ô\\\",\\\"Ograve\\\":\\\"Ò\\\",\\\"ograve\\\":\\\"ò\\\",\\\"ordf\\\":\\\"ª\\\",\\\"ordm\\\":\\\"º\\\",\\\"Oslash\\\":\\\"Ø\\\",\\\"oslash\\\":\\\"ø\\\",\\\"Otilde\\\":\\\"Õ\\\",\\\"otilde\\\":\\\"õ\\\",\\\"Ouml\\\":\\\"Ö\\\",\\\"ouml\\\":\\\"ö\\\",\\\"para\\\":\\\"¶\\\",\\\"plusmn\\\":\\\"±\\\",\\\"pound\\\":\\\"£\\\",\\\"quot\\\":\\\"\\\\\\\"\\\",\\\"QUOT\\\":\\\"\\\\\\\"\\\",\\\"raquo\\\":\\\"»\\\",\\\"reg\\\":\\\"®\\\",\\\"REG\\\":\\\"®\\\",\\\"sect\\\":\\\"§\\\",\\\"shy\\\":\\\"­\\\",\\\"sup1\\\":\\\"¹\\\",\\\"sup2\\\":\\\"²\\\",\\\"sup3\\\":\\\"³\\\",\\\"szlig\\\":\\\"ß\\\",\\\"THORN\\\":\\\"Þ\\\",\\\"thorn\\\":\\\"þ\\\",\\\"times\\\":\\\"×\\\",\\\"Uacute\\\":\\\"Ú\\\",\\\"uacute\\\":\\\"ú\\\",\\\"Ucirc\\\":\\\"Û\\\",\\\"ucirc\\\":\\\"û\\\",\\\"Ugrave\\\":\\\"Ù\\\",\\\"ugrave\\\":\\\"ù\\\",\\\"uml\\\":\\\"¨\\\",\\\"Uuml\\\":\\\"Ü\\\",\\\"uuml\\\":\\\"ü\\\",\\\"Yacute\\\":\\\"Ý\\\",\\\"yacute\\\":\\\"ý\\\",\\\"yen\\\":\\\"¥\\\",\\\"yuml\\\":\\\"ÿ\\\"}\");\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/legacy.json?");

/***/ }),

/***/ "./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/xml.json":
/*!**************************************************************************************************!*\
  !*** ./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/xml.json ***!
  \**************************************************************************************************/
/*! exports provided: amp, apos, gt, lt, quot, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"amp\\\":\\\"&\\\",\\\"apos\\\":\\\"'\\\",\\\"gt\\\":\\\">\\\",\\\"lt\\\":\\\"<\\\",\\\"quot\\\":\\\"\\\\\\\"\\\"}\");\n\n//# sourceURL=webpack:///./node_modules/cheerio/node_modules/dom-serializer/node_modules/entities/lib/maps/xml.json?");

/***/ }),

/***/ "./node_modules/cheerio/package.json":
/*!*******************************************!*\
  !*** ./node_modules/cheerio/package.json ***!
  \*******************************************/
/*! exports provided: name, version, description, author, license, keywords, repository, main, types, files, engines, dependencies, devDependencies, scripts, prettier, lint-staged, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"cheerio\\\",\\\"version\\\":\\\"1.0.0-rc.5\\\",\\\"description\\\":\\\"Tiny, fast, and elegant implementation of core jQuery designed specifically for the server\\\",\\\"author\\\":\\\"Matt Mueller <mattmuelle@gmail.com> (mat.io)\\\",\\\"license\\\":\\\"MIT\\\",\\\"keywords\\\":[\\\"htmlparser\\\",\\\"jquery\\\",\\\"selector\\\",\\\"scraper\\\",\\\"parser\\\",\\\"html\\\"],\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git://github.com/cheeriojs/cheerio.git\\\"},\\\"main\\\":\\\"./index.js\\\",\\\"types\\\":\\\"types/index.d.ts\\\",\\\"files\\\":[\\\"index.js\\\",\\\"types/index.d.ts\\\",\\\"lib\\\"],\\\"engines\\\":{\\\"node\\\":\\\">= 0.12\\\"},\\\"dependencies\\\":{\\\"cheerio-select-tmp\\\":\\\"^0.1.0\\\",\\\"dom-serializer\\\":\\\"~1.2.0\\\",\\\"domhandler\\\":\\\"^4.0.0\\\",\\\"entities\\\":\\\"~2.1.0\\\",\\\"htmlparser2\\\":\\\"^6.0.0\\\",\\\"parse5\\\":\\\"^6.0.0\\\",\\\"parse5-htmlparser2-tree-adapter\\\":\\\"^6.0.0\\\"},\\\"devDependencies\\\":{\\\"@types/node\\\":\\\"^14.14.10\\\",\\\"benchmark\\\":\\\"^2.1.4\\\",\\\"coveralls\\\":\\\"^3.0.2\\\",\\\"eslint\\\":\\\"^7.10.0\\\",\\\"eslint-config-prettier\\\":\\\"^7.0.0\\\",\\\"eslint-plugin-jsdoc\\\":\\\"^30.6.2\\\",\\\"expect.js\\\":\\\"~0.3.1\\\",\\\"husky\\\":\\\"^4.2.5\\\",\\\"jquery\\\":\\\"^3.0.0\\\",\\\"jsdoc\\\":\\\"^3.6.6\\\",\\\"jsdom\\\":\\\"^16.2.2\\\",\\\"lint-staged\\\":\\\"^10.2.2\\\",\\\"mocha\\\":\\\"^8.1.1\\\",\\\"nyc\\\":\\\"^15.0.1\\\",\\\"prettier\\\":\\\"^2.1.1\\\",\\\"tsd\\\":\\\"^0.14.0\\\",\\\"xyz\\\":\\\"~4.0.0\\\"},\\\"scripts\\\":{\\\"test\\\":\\\"npm run lint && npm run test:mocha && npm run test:types\\\",\\\"test:mocha\\\":\\\"mocha --recursive --reporter dot --parallel\\\",\\\"test:types\\\":\\\"tsd\\\",\\\"lint\\\":\\\"npm run lint:es && npm run lint:prettier\\\",\\\"lint:es\\\":\\\"eslint --ignore-path .prettierignore .\\\",\\\"lint:prettier\\\":\\\"npm run format:prettier:raw -- --check\\\",\\\"format\\\":\\\"npm run format:es && npm run format:prettier\\\",\\\"format:es\\\":\\\"npm run lint:es -- --fix\\\",\\\"format:prettier\\\":\\\"npm run format:prettier:raw -- --write\\\",\\\"format:prettier:raw\\\":\\\"prettier '**/*.{js,ts,md,json,yml}' --ignore-path .prettierignore\\\",\\\"build:docs\\\":\\\"jsdoc --configure jsdoc-config.json\\\",\\\"pre-commit\\\":\\\"lint-staged\\\"},\\\"prettier\\\":{\\\"singleQuote\\\":true,\\\"tabWidth\\\":2},\\\"lint-staged\\\":{\\\"*.js\\\":[\\\"prettier --write\\\",\\\"npm run test:lint -- --fix\\\"],\\\"*.{json,md,ts,yml}\\\":[\\\"prettier --write\\\"]}}\");\n\n//# sourceURL=webpack:///./node_modules/cheerio/package.json?");

/***/ }),

/***/ "./node_modules/codemirror-asciidoc/lib/asciidoc.js":
/*!**********************************************************!*\
  !*** ./node_modules/codemirror-asciidoc/lib/asciidoc.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Parts from Ace; see <https://raw.githubusercontent.com/ajaxorg/ace/master/LICENSE>\n\n(function (mod) {\n    if (true) {\n        // CommonJS\n        mod(__webpack_require__(/*! codemirror */ \"./node_modules/codemirror/lib/codemirror.js\"));\n    } else {}\n})(function (CodeMirror) {\n    \"use strict\";\n\n    CodeMirror.defineMode(\"asciidoc\", function (config, parserConfig) {\n\n        // Ace highlight rules function imported below.\n        var HighlightRules = function () {\n            var identifierRe = \"[a-zA-Z\\u00a1-\\uffff]+\\\\b\";\n\n            this.$rules = {\n                \"start\": [\n                    {token: \"empty\", regex: /$/},\n                    {token: \"literal\", regex: /^\\.{4,}\\s*$/, next: \"listingBlock\"},\n                    {token: \"literal\", regex: /^-{4,}\\s*$/, next: \"literalBlock\"},\n                    {token: \"literal\", regex: /^\\+{4,}\\s*$/, next: \"passthroughBlock\"},\n                    {token: \"keyword\", regex: /^={4,}\\s*$/},\n                    {token: \"text\", regex: /^\\s*$/},\n                    // immediately return to the start mode without matching anything\n                    {token: \"empty\", regex: \"\", next: \"dissallowDelimitedBlock\"}\n                ],\n\n                \"dissallowDelimitedBlock\": [\n                    {include: \"paragraphEnd\"},\n                    {token: \"comment\", regex: '^//.+$'},\n                    {token: \"keyword\", regex: \"^(?:NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\\\s\"},\n\n                    {include: \"listStart\"},\n                    {token: \"literal\", regex: /^\\s+.+$/, next: \"indentedBlock\"},\n                    {token: \"empty\", regex: \"\", next: \"text\"}\n                ],\n\n                \"paragraphEnd\": [\n                    {token: \"doc.comment\", regex: /^\\/{4,}\\s*$/, next: \"commentBlock\"},\n                    {token: \"tableBlock\", regex: /^\\s*[|!]=+\\s*$/, next: \"tableBlock\"},\n                    // open block, ruler\n                    {token: \"keyword\", regex: /^(?:--|''')\\s*$/, next: \"start\"},\n                    {token: \"option\", regex: /^\\[.*\\]\\s*$/, next: \"start\"},\n                    {token: \"pageBreak\", regex: /^>{3,}$/, next: \"start\"},\n                    {token: \"literal\", regex: /^\\.{4,}\\s*$/, next: \"listingBlock\"},\n                    {token: \"titleUnderline\", regex: /^(?:={2,}|-{2,}|~{2,}|\\^{2,}|\\+{2,})\\s*$/, next: \"start\"},\n                    {token: \"singleLineTitle\", regex: /^={1,6}\\s+\\S.*$/, next: \"start\"},\n\n                    {token: \"otherBlock\", regex: /^(?:\\*{2,}|_{2,})\\s*$/, next: \"start\"},\n                    // .optional title\n                    {token: \"optionalTitle\", regex: /^\\.[^.\\s].+$/, next: \"start\"}\n                ],\n\n                \"listStart\": [\n                    {\n                        token: \"keyword\",\n                        regex: /^\\s*(?:\\d+\\.|[a-zA-Z]\\.|[ixvmIXVM]+\\)|\\*{1,5}|-|\\.{1,5})\\s/,\n                        next: \"listText\"\n                    },\n                    {token: \"meta.tag\", regex: /^.+(?::{2,4}|;;)(?: |$)/, next: \"listText\"},\n                    // continuation\n                    {token: \"keyword\", regex: /^\\+\\s*$/, next: \"start\"}\n                ],\n\n                \"text\": [\n                    {\n                        token: [\"link\", \"link\"],\n                        regex: /((?:https?:\\/\\/|ftp:\\/\\/|file:\\/\\/|mailto:|callto:)[^\\s\\[]+)(\\[.*?\\])/\n                    },\n                    {token: [\"link\", \"link\"], regex: /(?:https?:\\/\\/|ftp:\\/\\/|file:\\/\\/|mailto:|callto:)[^\\s\\[]+/},\n                    {token: \"link\", regex: /\\b[\\w\\.\\/\\-]+@[\\w\\.\\/\\-]+\\b/},\n                    {include: \"macros\"},\n                    {include: \"paragraphEnd\"},\n                    {token: \"literal\", regex: /\\+{3,}/, next: \"smallPassthrough\"},\n                    {\n                        token: \"escape\",\n                        regex: /\\((?:C|TM|R)\\)|\\.{3}|->|<-|=>|<=|&#(?:\\d+|x[a-fA-F\\d]+);|(?: |^)--(?=\\s+\\S)/\n                    },\n                    {token: \"escape\", regex: /\\\\[_*'`+#]|\\\\{2}[_*'`+#]{2}/},\n                    {token: \"keyword\", regex: /\\s\\+$/},\n                    // any word\n                    {token: \"text\", regex: identifierRe},\n                    {\n                        token: [\"keyword\", \"string\", \"keyword\"],\n                        regex: /(<<[\\w\\d\\-$]+,)(.*?)(>>|$)/\n                    },\n                    {token: \"keyword\", regex: /<<[\\w\\d\\-$]+,?|>>/},\n                    {token: \"constant.character\", regex: /\\({2,3}.*?\\){2,3}/},\n                    // List of callouts\n                    {token: \"support.function.list.callout\", regex: /^(?:<\\d+>|\\d+>|>) /, next: \"text\"},\n                    // Anchor\n                    {token: \"keyword\", regex: /\\[\\[.+?\\]\\]/},\n                    // bibliography\n                    {token: \"support\", regex: /^\\[{3}[\\w\\d =\\-]+\\]{3}/},\n\n                    {include: \"quotes\"},\n                    // text block end\n                    {token: \"empty\", regex: /^\\s*$/, next: \"start\"}\n                ],\n\n                \"listText\": [\n                    {include: \"listStart\"},\n                    {include: \"text\"}\n                ],\n\n                \"indentedBlock\": [\n                    {token: \"literal\", regex: /^[\\s\\w].+$/, next: \"indentedBlock\"},\n                    {token: \"literal\", regex: \"\", next: \"start\"}\n                ],\n\n                \"listingBlock\": [\n                    {token: \"literal\", regex: /^\\.{4,}\\s*$/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"constant.numeric\", regex: '<\\\\d+>'},\n                    {token: \"literal\", regex: '[^<]+'},\n                    {token: \"literal\", regex: '<'}\n                ],\n                \"literalBlock\": [\n                    {token: \"literal\", regex: /^-{4,}\\s*$/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"constant.numeric\", regex: '<\\\\d+>'},\n                    {token: \"literal\", regex: '[^<]+'},\n                    {token: \"literal\", regex: '<'}\n                ],\n                \"passthroughBlock\": [\n                    {token: \"literal\", regex: /^\\+{4,}\\s*$/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"literal\", regex: identifierRe + \"|\\\\d+\"},\n                    {include: \"macros\"},\n                    {token: \"literal\", regex: \".\"}\n                ],\n\n                \"smallPassthrough\": [\n                    {token: \"literal\", regex: /[+]{3,}/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"literal\", regex: /^\\s*$/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"literal\", regex: identifierRe + \"|\\\\d+\"},\n                    {include: \"macros\"}\n                ],\n\n                \"commentBlock\": [\n                    {token: \"doc.comment\", regex: /^\\/{4,}\\s*$/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"doc.comment\", regex: '^.*$'}\n                ],\n                \"tableBlock\": [\n                    {token: \"tableBlock\", regex: /^\\s*\\|={3,}\\s*$/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"tableBlock\", regex: /^\\s*!={3,}\\s*$/, next: \"innerTableBlock\"},\n                    {token: \"tableBlock\", regex: /\\|/},\n                    {include: \"text\", noEscape: true}\n                ],\n                \"innerTableBlock\": [\n                    {token: \"tableBlock\", regex: /^\\s*!={3,}\\s*$/, next: \"tableBlock\"},\n                    {token: \"tableBlock\", regex: /^\\s*|={3,}\\s*$/, next: \"dissallowDelimitedBlock\"},\n                    {token: \"tableBlock\", regex: /\\!/}\n                ],\n                \"macros\": [\n                    {token: \"macro\", regex: /{[\\w\\-$]+}/},\n                    {\n                        token: [\"text\", \"string\", \"text\", \"constant.character\", \"text\"],\n                        regex: /({)([\\w\\-$]+)(:)?(.+)?(})/\n                    },\n                    {\n                        token: [\"text\", \"markup.list.macro\", \"keyword\", \"string\"],\n                        regex: /(\\w+)(footnote(?:ref)?::?)([^\\s\\[]+)?(\\[.*?\\])?/\n                    },\n                    {\n                        token: [\"markup.list.macro\", \"keyword\", \"string\"],\n                        regex: /([a-zA-Z\\-][\\w\\.\\/\\-]*::?)([^\\s\\[]+)(\\[.*?\\])?/\n                    },\n                    {token: [\"markup.list.macro\", \"keyword\"], regex: /([a-zA-Z\\-][\\w\\.\\/\\-]+::?)(\\[.*?\\])/},\n                    {token: \"keyword\", regex: /^:.+?:(?= |$)/}\n                ],\n\n                \"quotes\": [\n                    {token: \"string.italic\", regex: /__[^_\\s].*?__/},\n                    {token: \"string.italic\", regex: quoteRule(\"_\")},\n\n                    {token: \"keyword.bold\", regex: /\\*\\*[^*\\s].*?\\*\\*/},\n                    {token: \"keyword.bold\", regex: quoteRule(\"\\\\*\")},\n\n                    {token: \"literal\", regex: /\\+\\+[^+\\s].*?\\+\\+/},\n                    {token: \"literal\", regex: quoteRule(\"\\\\+\")},\n\n                    {token: \"literal\", regex: /\\$\\$.+?\\$\\$/},\n                    {token: \"literal\", regex: quoteRule(\"\\\\$\")},\n\n                    {token: \"literal\", regex: /``[^`\\s].*?``/},\n                    {token: \"literal\", regex: quoteRule(\"`\")},\n\n                    {token: \"keyword\", regex: /\\^[^\\^].*?\\^/},\n                    {token: \"keyword\", regex: quoteRule(\"\\\\^\")},\n                    {token: \"keyword\", regex: /~[^~].*?~/},\n                    {token: \"keyword\", regex: quoteRule(\"~\")},\n\n                    {token: \"keyword\", regex: /##?/},\n                    {token: \"keyword\", regex: /(?:\\B|^)``|\\b''/}\n                ]\n\n            };\n\n            function quoteRule(ch) {\n                var prefix = /\\w/.test(ch) ? \"\\\\b\" : \"(?:\\\\B|^)\";\n                return prefix + ch + \"[^\" + ch + \"].*?\" + ch + \"(?![\\\\w*])\";\n            }\n\n            //addQuoteBlock(\"text\")\n\n            var tokenMap = {\n                macro: \"constant.character\",\n                tableBlock: \"doc.comment\",\n                titleUnderline: \"markup.heading\",\n                singleLineTitle: \"markup.heading\",\n                pageBreak: \"string\",\n                option: \"string.regexp\",\n                otherBlock: \"markup.list\",\n                literal: \"support.function\",\n                optionalTitle: \"constant.numeric\",\n                escape: \"constant.language.escape\",\n                link: \"markup.underline.list\"\n            };\n\n            for (var state in this.$rules) {\n                var stateRules = this.$rules[state];\n                for (var i = stateRules.length; i--;) {\n                    var rule = stateRules[i];\n                    if (rule.include || typeof rule == \"string\") {\n                        var args = [i, 1].concat(this.$rules[rule.include || rule]);\n                        if (rule.noEscape) {\n                            args = args.filter(function (x) {\n                                return !x.next;\n                            });\n                        }\n                        stateRules.splice.apply(stateRules, args);\n                    } else if (rule.token in tokenMap) {\n                        rule.token = tokenMap[rule.token];\n                    }\n                }\n            }\n        };\n\n\n        // Ace's Syntax Tokenizer.\n\n        // tokenizing lines longer than this makes editor very slow\n        var MAX_TOKEN_COUNT = 1000;\n        var Tokenizer = function (rules) {\n            this.states = rules;\n\n            this.regExps = {};\n            this.matchMappings = {};\n            for (var key in this.states) {\n                var state = this.states[key];\n                var ruleRegExps = [];\n                var matchTotal = 0;\n                var mapping = this.matchMappings[key] = {defaultToken: \"text\"};\n                var flag = \"g\";\n\n                var splitterRurles = [];\n                for (var i = 0; i < state.length; i++) {\n                    var rule = state[i];\n                    if (rule.defaultToken)\n                        mapping.defaultToken = rule.defaultToken;\n                    if (rule.caseInsensitive)\n                        flag = \"gi\";\n                    if (rule.regex == null)\n                        continue;\n\n                    if (rule.regex instanceof RegExp)\n                        rule.regex = rule.regex.toString().slice(1, -1);\n\n                    // Count number of matching groups. 2 extra groups from the full match\n                    // And the catch-all on the end (used to force a match);\n                    var adjustedregex = rule.regex;\n                    var matchcount = new RegExp(\"(?:(\" + adjustedregex + \")|(.))\").exec(\"a\").length - 2;\n                    if (Array.isArray(rule.token)) {\n                        if (rule.token.length == 1 || matchcount == 1) {\n                            rule.token = rule.token[0];\n                        } else if (matchcount - 1 != rule.token.length) {\n                            throw new Error(\"number of classes and regexp groups in '\" +\n                            rule.token + \"'\\n'\" + rule.regex + \"' doesn't match\\n\"\n                            + (matchcount - 1) + \"!=\" + rule.token.length);\n                        } else {\n                            rule.tokenArray = rule.token;\n                            rule.token = null;\n                            rule.onMatch = this.$arrayTokens;\n                        }\n                    } else if (typeof rule.token == \"function\" && !rule.onMatch) {\n                        if (matchcount > 1)\n                            rule.onMatch = this.$applyToken;\n                        else\n                            rule.onMatch = rule.token;\n                    }\n\n                    if (matchcount > 1) {\n                        if (/\\\\\\d/.test(rule.regex)) {\n                            // Replace any backreferences and offset appropriately.\n                            adjustedregex = rule.regex.replace(/\\\\([0-9]+)/g, function (match, digit) {\n                                return \"\\\\\" + (parseInt(digit, 10) + matchTotal + 1);\n                            });\n                        } else {\n                            matchcount = 1;\n                            adjustedregex = this.removeCapturingGroups(rule.regex);\n                        }\n                        if (!rule.splitRegex && typeof rule.token != \"string\")\n                            splitterRurles.push(rule); // flag will be known only at the very end\n                    }\n\n                    mapping[matchTotal] = i;\n                    matchTotal += matchcount;\n\n                    ruleRegExps.push(adjustedregex);\n\n                    // makes property access faster\n                    if (!rule.onMatch)\n                        rule.onMatch = null;\n                }\n\n                splitterRurles.forEach(function (rule) {\n                    rule.splitRegex = this.createSplitterRegexp(rule.regex, flag);\n                }, this);\n\n                this.regExps[key] = new RegExp(\"(\" + ruleRegExps.join(\")|(\") + \")|($)\", flag);\n            }\n        };\n\n        (function () {\n            this.$setMaxTokenCount = function (m) {\n                MAX_TOKEN_COUNT = m | 0;\n            };\n\n            this.$applyToken = function (str) {\n                var values = this.splitRegex.exec(str).slice(1);\n                var types = this.token.apply(this, values);\n\n                // required for compatibility with old modes\n                if (typeof types === \"string\")\n                    return [{type: types, value: str}];\n\n                var tokens = [];\n                for (var i = 0, l = types.length; i < l; i++) {\n                    if (values[i])\n                        tokens[tokens.length] = {\n                            type: types[i],\n                            value: values[i]\n                        };\n                }\n                return tokens;\n            },\n\n                this.$arrayTokens = function (str) {\n                    if (!str)\n                        return [];\n                    var values = this.splitRegex.exec(str);\n                    if (!values)\n                        return \"text\";\n                    var tokens = [];\n                    var types = this.tokenArray;\n                    for (var i = 0, l = types.length; i < l; i++) {\n                        if (values[i + 1])\n                            tokens[tokens.length] = {\n                                type: types[i],\n                                value: values[i + 1]\n                            };\n                    }\n                    return tokens;\n                };\n\n            this.removeCapturingGroups = function (src) {\n                var r = src.replace(\n                    /\\[(?:\\\\.|[^\\]])*?\\]|\\\\.|\\(\\?[:=!]|(\\()/g,\n                    function (x, y) {\n                        return y ? \"(?:\" : x;\n                    }\n                );\n                return r;\n            };\n\n            this.createSplitterRegexp = function (src, flag) {\n                if (src.indexOf(\"(?=\") != -1) {\n                    var stack = 0;\n                    var inChClass = false;\n                    var lastCapture = {};\n                    src.replace(/(\\\\.)|(\\((?:\\?[=!])?)|(\\))|([\\[\\]])/g, function (m, esc, parenOpen, parenClose, square, index) {\n                        if (inChClass) {\n                            inChClass = square != \"]\";\n                        } else if (square) {\n                            inChClass = true;\n                        } else if (parenClose) {\n                            if (stack == lastCapture.stack) {\n                                lastCapture.end = index + 1;\n                                lastCapture.stack = -1;\n                            }\n                            stack--;\n                        } else if (parenOpen) {\n                            stack++;\n                            if (parenOpen.length != 1) {\n                                lastCapture.stack = stack\n                                lastCapture.start = index;\n                            }\n                        }\n                        return m;\n                    });\n\n                    if (lastCapture.end != null && /^\\)*$/.test(src.substr(lastCapture.end)))\n                        src = src.substring(0, lastCapture.start) + src.substr(lastCapture.end);\n                }\n                return new RegExp(src, (flag || \"\").replace(\"g\", \"\"));\n            };\n\n            /**\n             * Returns an object containing two properties: `tokens`, which contains all the tokens; and `state`, the current state.\n             * @returns {Object}\n             **/\n            this.getLineTokens = function (line, startState) {\n                if (startState && typeof startState != \"string\") {\n                    var stack = startState.slice(0);\n                    startState = stack[0];\n                } else\n                    var stack = [];\n\n                var currentState = startState || \"start\";\n                var state = this.states[currentState];\n                if (!state) {\n                    currentState = \"start\";\n                    state = this.states[currentState];\n                }\n                var mapping = this.matchMappings[currentState];\n                var re = this.regExps[currentState];\n                re.lastIndex = 0;\n\n                var match, tokens = [];\n                var lastIndex = 0;\n\n                var token = {type: null, value: \"\"};\n\n                while (match = re.exec(line)) {\n                    var type = mapping.defaultToken;\n                    var rule = null;\n                    var value = match[0];\n                    var index = re.lastIndex;\n\n                    if (index - value.length > lastIndex) {\n                        var skipped = line.substring(lastIndex, index - value.length);\n                        if (token.type == type) {\n                            token.value += skipped;\n                        } else {\n                            if (token.type)\n                                tokens.push(token);\n                            token = {type: type, value: skipped};\n                        }\n                    }\n\n                    for (var i = 0; i < match.length - 2; i++) {\n                        if (match[i + 1] === undefined)\n                            continue;\n\n                        rule = state[mapping[i]];\n\n                        if (rule.onMatch)\n                            type = rule.onMatch(value, currentState, stack);\n                        else\n                            type = rule.token;\n\n                        if (rule.next) {\n                            if (typeof rule.next == \"string\")\n                                currentState = rule.next;\n                            else\n                                currentState = rule.next(currentState, stack);\n\n                            state = this.states[currentState];\n                            if (!state) {\n                                window.console && console.error && console.error(currentState, \"doesn't exist\");\n                                currentState = \"start\";\n                                state = this.states[currentState];\n                            }\n                            mapping = this.matchMappings[currentState];\n                            lastIndex = index;\n                            re = this.regExps[currentState];\n                            re.lastIndex = index;\n                        }\n                        break;\n                    }\n\n                    if (value) {\n                        if (typeof type == \"string\") {\n                            if ((!rule || rule.merge !== false) && token.type === type) {\n                                token.value += value;\n                            } else {\n                                if (token.type)\n                                    tokens.push(token);\n                                token = {type: type, value: value};\n                            }\n                        } else if (type) {\n                            if (token.type)\n                                tokens.push(token);\n                            token = {type: null, value: \"\"};\n                            for (var i = 0; i < type.length; i++)\n                                tokens.push(type[i]);\n                        }\n                    }\n\n                    if (lastIndex == line.length)\n                        break;\n\n                    lastIndex = index;\n\n                    if (tokens.length > MAX_TOKEN_COUNT) {\n                        // chrome doens't show contents of text nodes with very long text\n                        while (lastIndex < line.length) {\n                            if (token.type)\n                                tokens.push(token);\n                            token = {\n                                value: line.substring(lastIndex, lastIndex += 2000),\n                                type: \"overflow\"\n                            };\n                        }\n                        currentState = \"start\";\n                        stack = [];\n                        break;\n                    }\n                }\n\n                if (token.type)\n                    tokens.push(token);\n\n                if (stack.length > 1) {\n                    if (stack[0] !== currentState)\n                        stack.unshift(currentState);\n                }\n                return {\n                    tokens: tokens,\n                    state: stack.length ? stack : currentState\n                };\n            };\n\n        }).call(Tokenizer.prototype);\n\n        // Token conversion.\n        // See <https://github.com/ajaxorg/ace/wiki/Creating-or-Extending-an-Edit-Mode#common-tokens>\n        // This is not an exact match nor the best match that can be made.\n        var tokenFromAceToken = {\n            empty: null,\n            text: null,\n\n            // Keyword\n            keyword: 'keyword',\n            control: 'keyword',\n            operator: 'operator',\n\n            // Constants\n            constant: 'atom',\n            numeric: 'number',\n            character: 'atom',\n            escape: 'atom',\n\n            // Variables\n            variable: 'variable',\n            parameter: 'variable-3',\n            language: 'variable-2',  // Python's `self` uses that.\n\n            // Comments\n            comment: 'comment',\n            line: 'comment',\n            'double-slash': 'comment',\n            'double-dash': 'comment',\n            'number-sign': 'comment',\n            percentage: 'comment',\n            block: 'comment',\n            doc: 'comment',\n\n            // String\n            string: 'string',\n            quoted: 'string',\n            single: 'string',\n            double: 'string',\n            triple: 'string',\n            unquoted: 'string',\n            interpolated: 'string',\n            regexp: 'string-2',\n\n            meta: 'keyword',\n            literal: 'qualifier',\n            support: 'builtin',\n\n            // Markup\n            markup: 'tag',\n            underline: 'link',\n            link: 'link',\n            strong: 'strong',\n            heading: 'header',\n            em: 'em',\n            list: 'variable-2',\n            numbered: 'variable-2',\n            unnumbered: 'variable-2',\n            quote: 'quote',\n            raw: 'variable-2',  // Markdown's raw block uses that.\n\n            // Invalid\n            invalid: 'error',\n            illegal: 'invalidchar',\n            deprecated: 'error'\n        };\n\n        // Takes a list of Ace tokens, returns a (string) CodeMirror token.\n        var cmTokenFromAceTokens = function (tokens) {\n            var token = null;\n            for (var i = 0; i < tokens.length; i++) {\n                // Find the most specific token.\n                if (tokenFromAceToken[tokens[i]] !== undefined) {\n                    token = tokenFromAceToken[tokens[i]];\n                }\n            }\n            return token;\n        };\n\n        // Consume a token from plannedTokens.\n        var consumeToken = function (stream, state) {\n            var plannedToken = state.plannedTokens.shift();\n            if (plannedToken === undefined) {\n                return null;\n            }\n            stream.match(plannedToken.value);\n            var tokens = plannedToken.type.split('.');\n            return cmTokenFromAceTokens(tokens);\n        };\n\n        var matchToken = function (stream, state) {\n            // Anormal start: we already have planned tokens to consume.\n            if (state.plannedTokens.length > 0) {\n                return consumeToken(stream, state);\n            }\n\n            // Normal start.\n            var currentState = state.current;\n            var currentLine = stream.match(/.*$/, false)[0];\n            var tokenized = tokenizer.getLineTokens(currentLine, currentState);\n            // We got a {tokens, state} object.\n            // Each token is a {value, type} object.\n            state.plannedTokens = tokenized.tokens;\n            state.current = tokenized.state;\n\n            // Consume a token.\n            return consumeToken(stream, state);\n        }\n\n        // Initialize all state.\n        var aceHighlightRules = new HighlightRules();\n        var tokenizer = new Tokenizer(aceHighlightRules.$rules);\n\n        return {\n            startState: function () {\n                return {\n                    current: 'start',\n                    // List of {value, type}, with type being an Ace token string.\n                    plannedTokens: []\n                };\n            },\n            blankLine: function (state) {\n                matchToken('', state);\n            },\n            token: matchToken\n        };\n    });\n\n    CodeMirror.defineMIME(\"text/x-asciidoc\", \"asciidoc\");\n});\n\n\n//# sourceURL=webpack:///./node_modules/codemirror-asciidoc/lib/asciidoc.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/attributes.js":
/*!***************************************************!*\
  !*** ./node_modules/css-select/lib/attributes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attributeRules = void 0;\nvar boolbase_1 = __webpack_require__(/*! boolbase */ \"./node_modules/boolbase/index.js\");\n/**\n * All reserved characters in a regex, used for escaping.\n *\n * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license\n * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794\n */\nvar reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\nfunction escapeRegex(value) {\n    return value.replace(reChars, \"\\\\$&\");\n}\n/**\n * Attribute selectors\n */\nexports.attributeRules = {\n    equals: function (next, data, _a) {\n        var adapter = _a.adapter;\n        var name = data.name;\n        var value = data.value;\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n            return function (elem) {\n                var _a;\n                return ((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) ===\n                    value && next(elem);\n            };\n        }\n        return function (elem) {\n            return adapter.getAttributeValue(elem, name) === value && next(elem);\n        };\n    },\n    hyphen: function (next, data, _a) {\n        var adapter = _a.adapter;\n        var name = data.name;\n        var value = data.value;\n        var len = value.length;\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n            return function hyphenIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    (attr.length === len || attr.charAt(len) === \"-\") &&\n                    attr.substr(0, len).toLowerCase() === value &&\n                    next(elem));\n            };\n        }\n        return function hyphen(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return (attr != null &&\n                attr.substr(0, len) === value &&\n                (attr.length === len || attr.charAt(len) === \"-\") &&\n                next(elem));\n        };\n    },\n    element: function (next, _a, _b) {\n        var name = _a.name, value = _a.value, ignoreCase = _a.ignoreCase;\n        var adapter = _b.adapter;\n        if (/\\s/.test(value)) {\n            return boolbase_1.falseFunc;\n        }\n        var regex = new RegExp(\"(?:^|\\\\s)\" + escapeRegex(value) + \"(?:$|\\\\s)\", ignoreCase ? \"i\" : \"\");\n        return function element(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return attr != null && regex.test(attr) && next(elem);\n        };\n    },\n    exists: function (next, _a, _b) {\n        var name = _a.name;\n        var adapter = _b.adapter;\n        return function (elem) { return adapter.hasAttrib(elem, name) && next(elem); };\n    },\n    start: function (next, data, _a) {\n        var adapter = _a.adapter;\n        var name = data.name;\n        var value = data.value;\n        var len = value.length;\n        if (len === 0) {\n            return boolbase_1.falseFunc;\n        }\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n            return function (elem) {\n                var _a;\n                return ((_a = adapter\n                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(0, len).toLowerCase()) === value && next(elem);\n            };\n        }\n        return function (elem) {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) &&\n                next(elem);\n        };\n    },\n    end: function (next, data, _a) {\n        var adapter = _a.adapter;\n        var name = data.name;\n        var value = data.value;\n        var len = -value.length;\n        if (len === 0) {\n            return boolbase_1.falseFunc;\n        }\n        if (data.ignoreCase) {\n            value = value.toLowerCase();\n            return function (elem) {\n                var _a;\n                return ((_a = adapter\n                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);\n            };\n        }\n        return function (elem) {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) &&\n                next(elem);\n        };\n    },\n    any: function (next, data, _a) {\n        var adapter = _a.adapter;\n        var name = data.name, value = data.value;\n        if (value === \"\") {\n            return boolbase_1.falseFunc;\n        }\n        if (data.ignoreCase) {\n            var regex_1 = new RegExp(escapeRegex(value), \"i\");\n            return function anyIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && regex_1.test(attr) && next(elem);\n            };\n        }\n        return function (elem) {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) &&\n                next(elem);\n        };\n    },\n    not: function (next, data, _a) {\n        var adapter = _a.adapter;\n        var name = data.name;\n        var value = data.value;\n        if (value === \"\") {\n            return function (elem) {\n                return !!adapter.getAttributeValue(elem, name) && next(elem);\n            };\n        }\n        else if (data.ignoreCase) {\n            value = value.toLowerCase();\n            return function (elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    attr.toLocaleLowerCase() !== value &&\n                    next(elem));\n            };\n        }\n        return function (elem) {\n            return adapter.getAttributeValue(elem, name) !== value && next(elem);\n        };\n    },\n};\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/attributes.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/compile.js":
/*!************************************************!*\
  !*** ./node_modules/css-select/lib/compile.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compileToken = exports.compileUnsafe = exports.compile = void 0;\nvar css_what_1 = __webpack_require__(/*! css-what */ \"./node_modules/css-what/lib/index.js\");\nvar boolbase_1 = __webpack_require__(/*! boolbase */ \"./node_modules/boolbase/index.js\");\nvar sort_1 = __importDefault(__webpack_require__(/*! ./sort */ \"./node_modules/css-select/lib/sort.js\"));\nvar procedure_1 = __webpack_require__(/*! ./procedure */ \"./node_modules/css-select/lib/procedure.js\");\nvar general_1 = __webpack_require__(/*! ./general */ \"./node_modules/css-select/lib/general.js\");\nvar subselects_1 = __webpack_require__(/*! ./pseudo-selectors/subselects */ \"./node_modules/css-select/lib/pseudo-selectors/subselects.js\");\n/**\n * Compiles a selector to an executable function.\n *\n * @param selector Selector to compile.\n * @param options Compilation options.\n * @param context Optional context for the selector.\n */\nfunction compile(selector, options, context) {\n    var next = compileUnsafe(selector, options, context);\n    return subselects_1.ensureIsTag(next, options.adapter);\n}\nexports.compile = compile;\nfunction compileUnsafe(selector, options, context) {\n    var token = css_what_1.parse(selector, options);\n    return compileToken(token, options, context);\n}\nexports.compileUnsafe = compileUnsafe;\nfunction includesScopePseudo(t) {\n    return (t.type === \"pseudo\" &&\n        (t.name === \"scope\" ||\n            (Array.isArray(t.data) &&\n                t.data.some(function (data) { return data.some(includesScopePseudo); }))));\n}\nvar DESCENDANT_TOKEN = { type: \"descendant\" };\nvar FLEXIBLE_DESCENDANT_TOKEN = {\n    type: \"_flexibleDescendant\",\n};\nvar SCOPE_TOKEN = { type: \"pseudo\", name: \"scope\", data: null };\n/*\n * CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector\n * http://www.w3.org/TR/selectors4/#absolutizing\n */\nfunction absolutize(token, _a, context) {\n    var adapter = _a.adapter;\n    // TODO Use better check if the context is a document\n    var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function (e) {\n        var parent = adapter.getParent(e);\n        return e === subselects_1.PLACEHOLDER_ELEMENT || !!(parent && adapter.isTag(parent));\n    }));\n    for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {\n        var t = token_1[_i];\n        if (t.length > 0 && procedure_1.isTraversal(t[0]) && t[0].type !== \"descendant\") {\n            // Don't continue in else branch\n        }\n        else if (hasContext && !t.some(includesScopePseudo)) {\n            t.unshift(DESCENDANT_TOKEN);\n        }\n        else {\n            continue;\n        }\n        t.unshift(SCOPE_TOKEN);\n    }\n}\nfunction compileToken(token, options, context) {\n    var _a;\n    token = token.filter(function (t) { return t.length > 0; });\n    token.forEach(sort_1.default);\n    context = (_a = options.context) !== null && _a !== void 0 ? _a : context;\n    var isArrayContext = Array.isArray(context);\n    var finalContext = context && (Array.isArray(context) ? context : [context]);\n    absolutize(token, options, finalContext);\n    var shouldTestNextSiblings = false;\n    var query = token\n        .map(function (rules) {\n        if (rules.length >= 2) {\n            var first = rules[0], second = rules[1];\n            if (first.type !== \"pseudo\" || first.name !== \"scope\") {\n                // Ignore\n            }\n            else if (isArrayContext && second.type === \"descendant\") {\n                rules[1] = FLEXIBLE_DESCENDANT_TOKEN;\n            }\n            else if (second.type === \"adjacent\" ||\n                second.type === \"sibling\") {\n                shouldTestNextSiblings = true;\n            }\n        }\n        return compileRules(rules, options, finalContext);\n    })\n        .reduce(reduceRules, boolbase_1.falseFunc);\n    query.shouldTestNextSiblings = shouldTestNextSiblings;\n    return query;\n}\nexports.compileToken = compileToken;\nfunction compileRules(rules, options, context) {\n    var _a;\n    return rules.reduce(function (previous, rule) {\n        return previous === boolbase_1.falseFunc\n            ? boolbase_1.falseFunc\n            : general_1.compileGeneralSelector(previous, rule, options, context, compileToken);\n    }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.trueFunc);\n}\nfunction reduceRules(a, b) {\n    if (b === boolbase_1.falseFunc || a === boolbase_1.trueFunc) {\n        return a;\n    }\n    if (a === boolbase_1.falseFunc || b === boolbase_1.trueFunc) {\n        return b;\n    }\n    return function combine(elem) {\n        return a(elem) || b(elem);\n    };\n}\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/compile.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/general.js":
/*!************************************************!*\
  !*** ./node_modules/css-select/lib/general.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compileGeneralSelector = void 0;\nvar attributes_1 = __webpack_require__(/*! ./attributes */ \"./node_modules/css-select/lib/attributes.js\");\nvar pseudo_selectors_1 = __webpack_require__(/*! ./pseudo-selectors */ \"./node_modules/css-select/lib/pseudo-selectors/index.js\");\n/*\n * All available rules\n */\nfunction compileGeneralSelector(next, selector, options, context, compileToken) {\n    var adapter = options.adapter, equals = options.equals;\n    switch (selector.type) {\n        case \"pseudo-element\":\n            throw new Error(\"Pseudo-elements are not supported by css-select\");\n        case \"attribute\":\n            if (options.strict &&\n                (selector.ignoreCase || selector.action === \"not\")) {\n                throw new Error(\"Unsupported attribute selector\");\n            }\n            return attributes_1.attributeRules[selector.action](next, selector, options);\n        case \"pseudo\":\n            return pseudo_selectors_1.compilePseudoSelector(next, selector, options, context, compileToken);\n        // Tags\n        case \"tag\":\n            return function tag(elem) {\n                return adapter.getName(elem) === selector.name && next(elem);\n            };\n        // Traversal\n        case \"descendant\":\n            if (options.cacheResults === false ||\n                typeof WeakSet === \"undefined\") {\n                return function descendant(elem) {\n                    var current = elem;\n                    while ((current = adapter.getParent(current))) {\n                        if (adapter.isTag(current) && next(current)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n            }\n            // @ts-expect-error `ElementNode` is not extending object\n            // eslint-disable-next-line no-case-declarations\n            var isFalseCache_1 = new WeakSet();\n            return function cachedDescendant(elem) {\n                var current = elem;\n                while ((current = adapter.getParent(current))) {\n                    if (!isFalseCache_1.has(current)) {\n                        if (adapter.isTag(current) && next(current)) {\n                            return true;\n                        }\n                        isFalseCache_1.add(current);\n                    }\n                }\n                return false;\n            };\n        case \"_flexibleDescendant\":\n            // Include element itself, only used while querying an array\n            return function flexibleDescendant(elem) {\n                var current = elem;\n                do {\n                    if (adapter.isTag(current) && next(current))\n                        return true;\n                } while ((current = adapter.getParent(current)));\n                return false;\n            };\n        case \"parent\":\n            if (options.strict) {\n                throw new Error(\"Parent selector isn't part of CSS3\");\n            }\n            return function parent(elem) {\n                return adapter\n                    .getChildren(elem)\n                    .some(function (elem) { return adapter.isTag(elem) && next(elem); });\n            };\n        case \"child\":\n            return function child(elem) {\n                var parent = adapter.getParent(elem);\n                return !!parent && adapter.isTag(parent) && next(parent);\n            };\n        case \"sibling\":\n            return function sibling(elem) {\n                var siblings = adapter.getSiblings(elem);\n                for (var i = 0; i < siblings.length; i++) {\n                    var currentSibling = siblings[i];\n                    if (equals(elem, currentSibling))\n                        break;\n                    if (adapter.isTag(currentSibling) && next(currentSibling)) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n        case \"adjacent\":\n            return function adjacent(elem) {\n                var siblings = adapter.getSiblings(elem);\n                var lastElement;\n                for (var i = 0; i < siblings.length; i++) {\n                    var currentSibling = siblings[i];\n                    if (equals(elem, currentSibling))\n                        break;\n                    if (adapter.isTag(currentSibling)) {\n                        lastElement = currentSibling;\n                    }\n                }\n                return !!lastElement && next(lastElement);\n            };\n        case \"universal\":\n            return next;\n    }\n}\nexports.compileGeneralSelector = compileGeneralSelector;\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/general.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/css-select/lib/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;\nvar DomUtils = __importStar(__webpack_require__(/*! domutils */ \"./node_modules/domutils/lib/index.js\"));\nvar boolbase_1 = __webpack_require__(/*! boolbase */ \"./node_modules/boolbase/index.js\");\nvar compile_1 = __webpack_require__(/*! ./compile */ \"./node_modules/css-select/lib/compile.js\");\nvar subselects_1 = __webpack_require__(/*! ./pseudo-selectors/subselects */ \"./node_modules/css-select/lib/pseudo-selectors/subselects.js\");\nvar defaultEquals = function (a, b) { return a === b; };\nvar defaultOptions = {\n    adapter: DomUtils,\n    equals: defaultEquals,\n};\nfunction convertOptionFormats(options) {\n    var _a, _b, _c, _d;\n    /*\n     * We force one format of options to the other one.\n     */\n    // @ts-expect-error Default options may have incompatible `Node` / `ElementNode`.\n    var opts = options !== null && options !== void 0 ? options : defaultOptions;\n    // @ts-expect-error Same as above.\n    (_a = opts.adapter) !== null && _a !== void 0 ? _a : (opts.adapter = DomUtils);\n    // @ts-expect-error `equals` does not exist on `Options`\n    (_b = opts.equals) !== null && _b !== void 0 ? _b : (opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals);\n    return opts;\n}\nfunction wrapCompile(func) {\n    return function addAdapter(selector, options, context) {\n        var opts = convertOptionFormats(options);\n        return func(selector, opts, context);\n    };\n}\n/**\n * Compiles the query, returns a function.\n */\nexports.compile = wrapCompile(compile_1.compile);\nexports._compileUnsafe = wrapCompile(compile_1.compileUnsafe);\nexports._compileToken = wrapCompile(compile_1.compileToken);\nfunction getSelectorFunc(searchFunc) {\n    return function select(query, elements, options) {\n        var opts = convertOptionFormats(options);\n        if (typeof query !== \"function\") {\n            query = compile_1.compileUnsafe(query, opts, elements);\n        }\n        var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);\n        return searchFunc(query, filteredElements, opts);\n    };\n}\nfunction prepareContext(elems, adapter, shouldTestNextSiblings) {\n    if (shouldTestNextSiblings === void 0) { shouldTestNextSiblings = false; }\n    /*\n     * Add siblings if the query requires them.\n     * See https://github.com/fb55/css-select/pull/43#issuecomment-225414692\n     */\n    if (shouldTestNextSiblings) {\n        elems = appendNextSiblings(elems, adapter);\n    }\n    return Array.isArray(elems)\n        ? adapter.removeSubsets(elems)\n        : adapter.getChildren(elems);\n}\nexports.prepareContext = prepareContext;\nfunction appendNextSiblings(elem, adapter) {\n    // Order matters because jQuery seems to check the children before the siblings\n    var elems = Array.isArray(elem) ? elem.slice(0) : [elem];\n    for (var i = 0; i < elems.length; i++) {\n        var nextSiblings = subselects_1.getNextSiblings(elems[i], adapter);\n        elems.push.apply(elems, nextSiblings);\n    }\n    return elems;\n}\n/**\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elems Elements to query. If it is an element, its children will be queried..\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns All matching elements.\n *\n */\nexports.selectAll = getSelectorFunc(function (query, elems, options) {\n    return query === boolbase_1.falseFunc || !elems || elems.length === 0\n        ? []\n        : options.adapter.findAll(query, elems);\n});\n/**\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elems Elements to query. If it is an element, its children will be queried..\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns the first match, or null if there was no match.\n */\nexports.selectOne = getSelectorFunc(function (query, elems, options) {\n    return query === boolbase_1.falseFunc || !elems || elems.length === 0\n        ? null\n        : options.adapter.findOne(query, elems);\n});\n/**\n * Tests whether or not an element is matched by query.\n *\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elem The element to test if it matches the query.\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns\n */\nfunction is(elem, query, options) {\n    var opts = convertOptionFormats(options);\n    return (typeof query === \"function\" ? query : compile_1.compile(query, opts))(elem);\n}\nexports.is = is;\n/**\n * Alias for selectAll(query, elems, options).\n * @see [compile] for supported selector queries.\n */\nexports.default = exports.selectAll;\n// Export filters and pseudos to allow users to supply their own.\nvar pseudo_selectors_1 = __webpack_require__(/*! ./pseudo-selectors */ \"./node_modules/css-select/lib/pseudo-selectors/index.js\");\nObject.defineProperty(exports, \"filters\", { enumerable: true, get: function () { return pseudo_selectors_1.filters; } });\nObject.defineProperty(exports, \"pseudos\", { enumerable: true, get: function () { return pseudo_selectors_1.pseudos; } });\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/index.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/procedure.js":
/*!**************************************************!*\
  !*** ./node_modules/css-select/lib/procedure.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTraversal = exports.procedure = void 0;\nexports.procedure = {\n    universal: 50,\n    tag: 30,\n    attribute: 1,\n    pseudo: 0,\n    \"pseudo-element\": 0,\n    descendant: -1,\n    child: -1,\n    parent: -1,\n    sibling: -1,\n    adjacent: -1,\n    _flexibleDescendant: -1,\n};\nfunction isTraversal(t) {\n    return exports.procedure[t.type] < 0;\n}\nexports.isTraversal = isTraversal;\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/procedure.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/pseudo-selectors/filters.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/filters.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.filters = void 0;\nvar nth_check_1 = __importDefault(__webpack_require__(/*! nth-check */ \"./node_modules/nth-check/lib/index.js\"));\nvar boolbase_1 = __webpack_require__(/*! boolbase */ \"./node_modules/boolbase/index.js\");\nvar attributes_1 = __webpack_require__(/*! ../attributes */ \"./node_modules/css-select/lib/attributes.js\");\nvar checkAttrib = attributes_1.attributeRules.equals;\nfunction getAttribFunc(name, value) {\n    var data = {\n        type: \"attribute\",\n        action: \"equals\",\n        ignoreCase: false,\n        namespace: null,\n        name: name,\n        value: value,\n    };\n    return function attribFunc(next, _rule, options) {\n        return checkAttrib(next, data, options);\n    };\n}\nfunction getChildFunc(next, adapter) {\n    return function (elem) {\n        var parent = adapter.getParent(elem);\n        return !!parent && adapter.isTag(parent) && next(elem);\n    };\n}\nexports.filters = {\n    contains: function (next, text, _a) {\n        var adapter = _a.adapter;\n        return function contains(elem) {\n            return next(elem) && adapter.getText(elem).includes(text);\n        };\n    },\n    icontains: function (next, text, _a) {\n        var adapter = _a.adapter;\n        var itext = text.toLowerCase();\n        return function icontains(elem) {\n            return (next(elem) &&\n                adapter.getText(elem).toLowerCase().includes(itext));\n        };\n    },\n    // Location specific methods\n    \"nth-child\": function (next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = nth_check_1.default(rule);\n        if (func === boolbase_1.falseFunc)\n            return boolbase_1.falseFunc;\n        if (func === boolbase_1.trueFunc)\n            return getChildFunc(next, adapter);\n        return function nthChild(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for (var i = 0; i < siblings.length; i++) {\n                if (equals(elem, siblings[i]))\n                    break;\n                if (adapter.isTag(siblings[i])) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-last-child\": function (next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = nth_check_1.default(rule);\n        if (func === boolbase_1.falseFunc)\n            return boolbase_1.falseFunc;\n        if (func === boolbase_1.trueFunc)\n            return getChildFunc(next, adapter);\n        return function nthLastChild(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for (var i = siblings.length - 1; i >= 0; i--) {\n                if (equals(elem, siblings[i]))\n                    break;\n                if (adapter.isTag(siblings[i])) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-of-type\": function (next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = nth_check_1.default(rule);\n        if (func === boolbase_1.falseFunc)\n            return boolbase_1.falseFunc;\n        if (func === boolbase_1.trueFunc)\n            return getChildFunc(next, adapter);\n        return function nthOfType(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for (var i = 0; i < siblings.length; i++) {\n                var currentSibling = siblings[i];\n                if (equals(elem, currentSibling))\n                    break;\n                if (adapter.isTag(currentSibling) &&\n                    adapter.getName(currentSibling) === adapter.getName(elem)) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-last-of-type\": function (next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = nth_check_1.default(rule);\n        if (func === boolbase_1.falseFunc)\n            return boolbase_1.falseFunc;\n        if (func === boolbase_1.trueFunc)\n            return getChildFunc(next, adapter);\n        return function nthLastOfType(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for (var i = siblings.length - 1; i >= 0; i--) {\n                var currentSibling = siblings[i];\n                if (equals(elem, currentSibling))\n                    break;\n                if (adapter.isTag(currentSibling) &&\n                    adapter.getName(currentSibling) === adapter.getName(elem)) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    // TODO determine the actual root element\n    root: function (next, _rule, _a) {\n        var adapter = _a.adapter;\n        return function (elem) {\n            var parent = adapter.getParent(elem);\n            return (parent == null || !adapter.isTag(parent)) && next(elem);\n        };\n    },\n    scope: function (next, rule, options, context) {\n        var equals = options.equals;\n        if (!context || context.length === 0) {\n            // Equivalent to :root\n            return exports.filters.root(next, rule, options);\n        }\n        if (context.length === 1) {\n            // NOTE: can't be unpacked, as :has uses this for side-effects\n            return function (elem) { return equals(context[0], elem) && next(elem); };\n        }\n        return function (elem) { return context.includes(elem) && next(elem); };\n    },\n    // JQuery extensions (others follow as pseudos)\n    checkbox: getAttribFunc(\"type\", \"checkbox\"),\n    file: getAttribFunc(\"type\", \"file\"),\n    password: getAttribFunc(\"type\", \"password\"),\n    radio: getAttribFunc(\"type\", \"radio\"),\n    reset: getAttribFunc(\"type\", \"reset\"),\n    image: getAttribFunc(\"type\", \"image\"),\n    submit: getAttribFunc(\"type\", \"submit\"),\n    // Dynamic state pseudos. These depend on optional Adapter methods.\n    hover: function (next, _rule, _a) {\n        var adapter = _a.adapter;\n        var isHovered = adapter.isHovered;\n        if (typeof isHovered !== \"function\") {\n            return boolbase_1.falseFunc;\n        }\n        return function hover(elem) {\n            return isHovered(elem) && next(elem);\n        };\n    },\n    visited: function (next, _rule, _a) {\n        var adapter = _a.adapter;\n        var isVisited = adapter.isVisited;\n        if (typeof isVisited !== \"function\") {\n            return boolbase_1.falseFunc;\n        }\n        return function visited(elem) {\n            return isVisited(elem) && next(elem);\n        };\n    },\n    active: function (next, _rule, _a) {\n        var adapter = _a.adapter;\n        var isActive = adapter.isActive;\n        if (typeof isActive !== \"function\") {\n            return boolbase_1.falseFunc;\n        }\n        return function active(elem) {\n            return isActive(elem) && next(elem);\n        };\n    },\n};\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/pseudo-selectors/filters.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/pseudo-selectors/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compilePseudoSelector = exports.pseudos = exports.filters = void 0;\n/*\n * Pseudo selectors\n *\n * Pseudo selectors are available in three forms:\n *\n * 1. Filters are called when the selector is compiled and return a function\n *  that has to return either false, or the results of `next()`.\n * 2. Pseudos are called on execution. They have to return a boolean.\n * 3. Subselects work like filters, but have an embedded selector that will be run separately.\n *\n * Filters are great if you want to do some pre-processing, or change the call order\n * of `next()` and your code.\n * Pseudos should be used to implement simple checks.\n */\nvar boolbase_1 = __webpack_require__(/*! boolbase */ \"./node_modules/boolbase/index.js\");\nvar filters_1 = __webpack_require__(/*! ./filters */ \"./node_modules/css-select/lib/pseudo-selectors/filters.js\");\nObject.defineProperty(exports, \"filters\", { enumerable: true, get: function () { return filters_1.filters; } });\nvar pseudos_1 = __webpack_require__(/*! ./pseudos */ \"./node_modules/css-select/lib/pseudo-selectors/pseudos.js\");\nObject.defineProperty(exports, \"pseudos\", { enumerable: true, get: function () { return pseudos_1.pseudos; } });\nvar subselects_1 = __webpack_require__(/*! ./subselects */ \"./node_modules/css-select/lib/pseudo-selectors/subselects.js\");\n// FIXME This is pretty hacky\nvar reCSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;\nfunction compilePseudoSelector(next, selector, options, context, compileToken) {\n    var name = selector.name, data = selector.data;\n    if (options.strict && !reCSS3.test(name)) {\n        throw new Error(\":\" + name + \" isn't part of CSS3\");\n    }\n    if (Array.isArray(data)) {\n        return subselects_1.subselects[name](next, data, options, context, compileToken);\n    }\n    if (name in filters_1.filters) {\n        return filters_1.filters[name](next, data, options, context);\n    }\n    if (name in pseudos_1.pseudos) {\n        var pseudo_1 = pseudos_1.pseudos[name];\n        pseudos_1.verifyPseudoArgs(pseudo_1, name, data);\n        return pseudo_1 === boolbase_1.falseFunc\n            ? boolbase_1.falseFunc\n            : next === boolbase_1.trueFunc\n                ? function (elem) { return pseudo_1(elem, options, data); }\n                : function (elem) { return pseudo_1(elem, options, data) && next(elem); };\n    }\n    throw new Error(\"unmatched pseudo-class :\" + name);\n}\nexports.compilePseudoSelector = compilePseudoSelector;\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/pseudo-selectors/index.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/pseudo-selectors/pseudos.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/pseudos.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verifyPseudoArgs = exports.pseudos = void 0;\nvar isLinkTag = namePseudo([\"a\", \"area\", \"link\"]);\n// While filters are precompiled, pseudos get called when they are needed\nexports.pseudos = {\n    empty: function (elem, _a) {\n        var adapter = _a.adapter;\n        return !adapter.getChildren(elem).some(function (elem) {\n            // FIXME: `getText` call is potentially expensive.\n            return adapter.isTag(elem) || adapter.getText(elem) !== \"\";\n        });\n    },\n    \"first-child\": function (elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var firstChild = adapter\n            .getSiblings(elem)\n            .find(function (elem) { return adapter.isTag(elem); });\n        return firstChild != null && equals(elem, firstChild);\n    },\n    \"last-child\": function (elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var siblings = adapter.getSiblings(elem);\n        for (var i = siblings.length - 1; i >= 0; i--) {\n            if (equals(elem, siblings[i]))\n                return true;\n            if (adapter.isTag(siblings[i]))\n                break;\n        }\n        return false;\n    },\n    \"first-of-type\": function (elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var siblings = adapter.getSiblings(elem);\n        var elemName = adapter.getName(elem);\n        for (var i = 0; i < siblings.length; i++) {\n            var currentSibling = siblings[i];\n            if (equals(elem, currentSibling))\n                return true;\n            if (adapter.isTag(currentSibling) &&\n                adapter.getName(currentSibling) === elemName) {\n                break;\n            }\n        }\n        return false;\n    },\n    \"last-of-type\": function (elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var siblings = adapter.getSiblings(elem);\n        var elemName = adapter.getName(elem);\n        for (var i = siblings.length - 1; i >= 0; i--) {\n            var currentSibling = siblings[i];\n            if (equals(elem, currentSibling))\n                return true;\n            if (adapter.isTag(currentSibling) &&\n                adapter.getName(currentSibling) === elemName) {\n                break;\n            }\n        }\n        return false;\n    },\n    \"only-of-type\": function (elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var elemName = adapter.getName(elem);\n        return adapter\n            .getSiblings(elem)\n            .every(function (sibling) {\n            return equals(elem, sibling) ||\n                !adapter.isTag(sibling) ||\n                adapter.getName(sibling) !== elemName;\n        });\n    },\n    \"only-child\": function (elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        return adapter\n            .getSiblings(elem)\n            .every(function (sibling) { return equals(elem, sibling) || !adapter.isTag(sibling); });\n    },\n    // :matches(a, area, link)[href]\n    \"any-link\": function (elem, options) {\n        return (isLinkTag(elem, options) && options.adapter.hasAttrib(elem, \"href\"));\n    },\n    // :any-link:not(:visited)\n    link: function (elem, options) {\n        var _a, _b;\n        return (((_b = (_a = options.adapter).isVisited) === null || _b === void 0 ? void 0 : _b.call(_a, elem)) !== true &&\n            exports.pseudos[\"any-link\"](elem, options));\n    },\n    /*\n     * Forms\n     * to consider: :target\n     */\n    // :matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)\n    selected: function (elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        if (adapter.hasAttrib(elem, \"selected\"))\n            return true;\n        else if (adapter.getName(elem) !== \"option\")\n            return false;\n        // The first <option> in a <select> is also selected\n        var parent = adapter.getParent(elem);\n        if (!parent ||\n            !adapter.isTag(parent) ||\n            adapter.getName(parent) !== \"select\" ||\n            adapter.hasAttrib(parent, \"multiple\")) {\n            return false;\n        }\n        var siblings = adapter.getChildren(parent);\n        var sawElem = false;\n        for (var i = 0; i < siblings.length; i++) {\n            var currentSibling = siblings[i];\n            if (adapter.isTag(currentSibling)) {\n                if (equals(elem, currentSibling)) {\n                    sawElem = true;\n                }\n                else if (!sawElem) {\n                    return false;\n                }\n                else if (adapter.hasAttrib(currentSibling, \"selected\")) {\n                    return false;\n                }\n            }\n        }\n        return sawElem;\n    },\n    /*\n     * https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements\n     * :matches(\n     *   :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],\n     *   optgroup[disabled] > option),\n     *  fieldset[disabled] * //TODO not child of first <legend>\n     * )\n     */\n    disabled: function (elem, _a) {\n        var adapter = _a.adapter;\n        return adapter.hasAttrib(elem, \"disabled\");\n    },\n    enabled: function (elem, _a) {\n        var adapter = _a.adapter;\n        return !adapter.hasAttrib(elem, \"disabled\");\n    },\n    // :matches(:matches(:radio, :checkbox)[checked], :selected) (TODO menuitem)\n    checked: function (elem, options) {\n        return (options.adapter.hasAttrib(elem, \"checked\") ||\n            exports.pseudos.selected(elem, options));\n    },\n    // :matches(input, select, textarea)[required]\n    required: function (elem, _a) {\n        var adapter = _a.adapter;\n        return adapter.hasAttrib(elem, \"required\");\n    },\n    // :matches(input, select, textarea):not([required])\n    optional: function (elem, _a) {\n        var adapter = _a.adapter;\n        return !adapter.hasAttrib(elem, \"required\");\n    },\n    // JQuery extensions\n    // :not(:empty)\n    parent: function (elem, options) {\n        return !exports.pseudos.empty(elem, options);\n    },\n    // :matches(h1, h2, h3, h4, h5, h6)\n    header: namePseudo([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"]),\n    // :matches(button, input[type=button])\n    button: function (elem, _a) {\n        var adapter = _a.adapter;\n        var name = adapter.getName(elem);\n        return (name === \"button\" ||\n            (name === \"input\" &&\n                adapter.getAttributeValue(elem, \"type\") === \"button\"));\n    },\n    // :matches(input, textarea, select, button)\n    input: namePseudo([\"input\", \"textarea\", \"select\", \"button\"]),\n    // `input:matches(:not([type!='']), [type='text' i])`\n    text: function (elem, _a) {\n        var adapter = _a.adapter;\n        var type = adapter.getAttributeValue(elem, \"type\");\n        return (adapter.getName(elem) === \"input\" &&\n            (!type || type.toLowerCase() === \"text\"));\n    },\n};\nfunction namePseudo(names) {\n    if (typeof Set !== \"undefined\") {\n        var nameSet_1 = new Set(names);\n        return function (elem, _a) {\n            var adapter = _a.adapter;\n            return nameSet_1.has(adapter.getName(elem));\n        };\n    }\n    return function (elem, _a) {\n        var adapter = _a.adapter;\n        return names.includes(adapter.getName(elem));\n    };\n}\nfunction verifyPseudoArgs(func, name, subselect) {\n    if (subselect === null) {\n        if (func.length > 2 && name !== \"scope\") {\n            throw new Error(\"pseudo-selector :\" + name + \" requires an argument\");\n        }\n    }\n    else {\n        if (func.length === 2) {\n            throw new Error(\"pseudo-selector :\" + name + \" doesn't have any arguments\");\n        }\n    }\n}\nexports.verifyPseudoArgs = verifyPseudoArgs;\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/pseudo-selectors/pseudos.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/pseudo-selectors/subselects.js":
/*!********************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/subselects.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;\nvar boolbase_1 = __webpack_require__(/*! boolbase */ \"./node_modules/boolbase/index.js\");\nvar procedure_1 = __webpack_require__(/*! ../procedure */ \"./node_modules/css-select/lib/procedure.js\");\n/** Used as a placeholder for :has. Will be replaced with the actual element. */\nexports.PLACEHOLDER_ELEMENT = {};\nfunction containsTraversal(t) {\n    return t.some(procedure_1.isTraversal);\n}\nfunction ensureIsTag(next, adapter) {\n    if (next === boolbase_1.falseFunc)\n        return next;\n    return function (elem) { return adapter.isTag(elem) && next(elem); };\n}\nexports.ensureIsTag = ensureIsTag;\nfunction getNextSiblings(elem, adapter) {\n    var siblings = adapter.getSiblings(elem);\n    if (siblings.length <= 1)\n        return [];\n    var elemIndex = siblings.indexOf(elem);\n    if (elemIndex < 0 || elemIndex === siblings.length - 1)\n        return [];\n    return siblings.slice(elemIndex + 1).filter(adapter.isTag);\n}\nexports.getNextSiblings = getNextSiblings;\n/*\n * :not, :has and :matches have to compile selectors\n * doing this in src/pseudos.ts would lead to circular dependencies,\n * so we add them here\n */\nexports.subselects = {\n    /**\n     * `:is` is an alias for `:matches`.\n     */\n    is: function (next, token, options, context, compileToken) {\n        return exports.subselects.matches(next, token, options, context, compileToken);\n    },\n    matches: function (next, token, options, context, compileToken) {\n        var opts = {\n            xmlMode: !!options.xmlMode,\n            strict: !!options.strict,\n            adapter: options.adapter,\n            equals: options.equals,\n            rootFunc: next,\n        };\n        return compileToken(token, opts, context);\n    },\n    not: function (next, token, options, context, compileToken) {\n        var opts = {\n            xmlMode: !!options.xmlMode,\n            strict: !!options.strict,\n            adapter: options.adapter,\n            equals: options.equals,\n        };\n        if (opts.strict) {\n            if (token.length > 1 || token.some(containsTraversal)) {\n                throw new Error(\"complex selectors in :not aren't allowed in strict mode\");\n            }\n        }\n        var func = compileToken(token, opts, context);\n        if (func === boolbase_1.falseFunc)\n            return next;\n        if (func === boolbase_1.trueFunc)\n            return boolbase_1.falseFunc;\n        return function not(elem) {\n            return !func(elem) && next(elem);\n        };\n    },\n    has: function (next, subselect, options, _context, compileToken) {\n        var adapter = options.adapter;\n        var opts = {\n            xmlMode: !!options.xmlMode,\n            strict: !!options.strict,\n            adapter: adapter,\n            equals: options.equals,\n        };\n        // @ts-expect-error Uses an array as a pointer to the current element (side effects)\n        var context = subselect.some(containsTraversal)\n            ? [exports.PLACEHOLDER_ELEMENT]\n            : undefined;\n        var compiled = compileToken(subselect, opts, context);\n        if (compiled === boolbase_1.falseFunc)\n            return boolbase_1.falseFunc;\n        if (compiled === boolbase_1.trueFunc) {\n            return function (elem) {\n                return adapter.getChildren(elem).some(adapter.isTag) && next(elem);\n            };\n        }\n        var hasElement = ensureIsTag(compiled, adapter);\n        var _a = compiled.shouldTestNextSiblings, shouldTestNextSiblings = _a === void 0 ? false : _a;\n        /*\n         * `shouldTestNextSiblings` will only be true if the query starts with\n         * a traversal (sibling or adjacent). That means we will always have a context.\n         */\n        if (context) {\n            return function (elem) {\n                context[0] = elem;\n                var childs = adapter.getChildren(elem);\n                var nextElements = shouldTestNextSiblings\n                    ? __spreadArrays(childs, getNextSiblings(elem, adapter)) : childs;\n                return (next(elem) && adapter.existsOne(hasElement, nextElements));\n            };\n        }\n        return function (elem) {\n            return next(elem) &&\n                adapter.existsOne(hasElement, adapter.getChildren(elem));\n        };\n    },\n};\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/pseudo-selectors/subselects.js?");

/***/ }),

/***/ "./node_modules/css-select/lib/sort.js":
/*!*********************************************!*\
  !*** ./node_modules/css-select/lib/sort.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar procedure_1 = __webpack_require__(/*! ./procedure */ \"./node_modules/css-select/lib/procedure.js\");\nvar attributes = {\n    exists: 10,\n    equals: 8,\n    not: 7,\n    start: 6,\n    end: 6,\n    any: 5,\n    hyphen: 4,\n    element: 4,\n};\n/**\n * Sort the parts of the passed selector,\n * as there is potential for optimization\n * (some types of selectors are faster than others)\n *\n * @param arr Selector to sort\n */\nfunction sortByProcedure(arr) {\n    var procs = arr.map(getProcedure);\n    for (var i = 1; i < arr.length; i++) {\n        var procNew = procs[i];\n        if (procNew < 0)\n            continue;\n        for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n            var token = arr[j + 1];\n            arr[j + 1] = arr[j];\n            arr[j] = token;\n            procs[j + 1] = procs[j];\n            procs[j] = procNew;\n        }\n    }\n}\nexports.default = sortByProcedure;\nfunction getProcedure(token) {\n    var proc = procedure_1.procedure[token.type];\n    if (token.type === \"attribute\") {\n        proc = attributes[token.action];\n        if (proc === attributes.equals && token.name === \"id\") {\n            // Prefer ID selectors (eg. #ID)\n            proc = 9;\n        }\n        if (token.ignoreCase) {\n            /*\n             * IgnoreCase adds some overhead, prefer \"normal\" token\n             * this is a binary operation, to ensure it's still an int\n             */\n            proc >>= 1;\n        }\n    }\n    else if (token.type === \"pseudo\") {\n        if (!token.data) {\n            proc = 3;\n        }\n        else if (token.name === \"has\" || token.name === \"contains\") {\n            proc = 0; // Expensive in any case\n        }\n        else if (Array.isArray(token.data)) {\n            // \"matches\" and \"not\"\n            proc = 0;\n            for (var i = 0; i < token.data.length; i++) {\n                // TODO better handling of complex selectors\n                if (token.data[i].length !== 1)\n                    continue;\n                var cur = getProcedure(token.data[i][0]);\n                // Avoid executing :has or :contains\n                if (cur === 0) {\n                    proc = 0;\n                    break;\n                }\n                if (cur > proc)\n                    proc = cur;\n            }\n            if (token.data.length > 1 && proc > 0)\n                proc -= 1;\n        }\n        else {\n            proc = 1;\n        }\n    }\n    return proc;\n}\n\n\n//# sourceURL=webpack:///./node_modules/css-select/lib/sort.js?");

/***/ }),

/***/ "./node_modules/css-what/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/css-what/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringify = exports.parse = void 0;\n__exportStar(__webpack_require__(/*! ./parse */ \"./node_modules/css-what/lib/parse.js\"), exports);\nvar parse_1 = __webpack_require__(/*! ./parse */ \"./node_modules/css-what/lib/parse.js\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return __importDefault(parse_1).default; } });\nvar stringify_1 = __webpack_require__(/*! ./stringify */ \"./node_modules/css-what/lib/stringify.js\");\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return __importDefault(stringify_1).default; } });\n\n\n//# sourceURL=webpack:///./node_modules/css-what/lib/index.js?");

/***/ }),

/***/ "./node_modules/css-what/lib/parse.js":
/*!********************************************!*\
  !*** ./node_modules/css-what/lib/parse.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTraversal = void 0;\nvar reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\n// Modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87\nvar reAttr = /^\\s*(?:(\\*|[-\\w]*)\\|)?((?:\\\\.|[\\w\\u00b0-\\uFFFF-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])((?:[^\\\\]|\\\\[^])*?)\\4|(#?(?:\\\\.|[\\w\\u00b0-\\uFFFF-])*)|)|)\\s*([iI])?\\]/;\nvar actionTypes = {\n    undefined: \"exists\",\n    \"\": \"equals\",\n    \"~\": \"element\",\n    \"^\": \"start\",\n    $: \"end\",\n    \"*\": \"any\",\n    \"!\": \"not\",\n    \"|\": \"hyphen\",\n};\nvar Traversals = {\n    \">\": \"child\",\n    \"<\": \"parent\",\n    \"~\": \"sibling\",\n    \"+\": \"adjacent\",\n};\nvar attribSelectors = {\n    \"#\": [\"id\", \"equals\"],\n    \".\": [\"class\", \"element\"],\n};\n// Pseudos, whose data property is parsed as well.\nvar unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"host\",\n    \"host-context\",\n]);\nvar traversalNames = new Set(__spreadArrays([\n    \"descendant\"\n], Object.keys(Traversals).map(function (k) { return Traversals[k]; })));\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nfunction isTraversal(selector) {\n    return traversalNames.has(selector.type);\n}\nexports.isTraversal = isTraversal;\nvar stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\nvar quotes = new Set(['\"', \"'\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    var high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isWhitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nfunction parse(selector, options) {\n    var subselects = [];\n    var endIndex = parseSelector(subselects, \"\" + selector, options, 0);\n    if (endIndex < selector.length) {\n        throw new Error(\"Unmatched selector: \" + selector.slice(endIndex));\n    }\n    return subselects;\n}\nexports.default = parse;\nfunction parseSelector(subselects, selector, options, selectorIndex) {\n    var _a, _b;\n    if (options === void 0) { options = {}; }\n    var tokens = [];\n    var sawWS = false;\n    function getName(offset) {\n        var match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(\"Expected name, found \" + selector.slice(selectorIndex));\n        }\n        var name = match[0];\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        while (isWhitespace(selector.charAt(selectorIndex + offset)))\n            offset++;\n        selectorIndex += offset;\n    }\n    function isEscaped(pos) {\n        var slashCount = 0;\n        while (selector.charAt(--pos) === \"\\\\\")\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    stripWhitespace(0);\n    while (selector !== \"\") {\n        var firstChar = selector.charAt(selectorIndex);\n        if (isWhitespace(firstChar)) {\n            sawWS = true;\n            stripWhitespace(1);\n        }\n        else if (firstChar in Traversals) {\n            ensureNotTraversal();\n            tokens.push({ type: Traversals[firstChar] });\n            sawWS = false;\n            stripWhitespace(1);\n        }\n        else if (firstChar === \",\") {\n            if (tokens.length === 0) {\n                throw new Error(\"Empty sub-selector\");\n            }\n            subselects.push(tokens);\n            tokens = [];\n            sawWS = false;\n            stripWhitespace(1);\n        }\n        else {\n            if (sawWS) {\n                ensureNotTraversal();\n                tokens.push({ type: \"descendant\" });\n                sawWS = false;\n            }\n            if (firstChar in attribSelectors) {\n                var _c = attribSelectors[firstChar], name_1 = _c[0], action = _c[1];\n                tokens.push({\n                    type: \"attribute\",\n                    name: name_1,\n                    action: action,\n                    value: getName(1),\n                    ignoreCase: false,\n                    namespace: null,\n                });\n            }\n            else if (firstChar === \"[\") {\n                var attributeMatch = selector\n                    .slice(selectorIndex + 1)\n                    .match(reAttr);\n                if (!attributeMatch) {\n                    throw new Error(\"Malformed attribute selector: \" + selector.slice(selectorIndex));\n                }\n                var completeSelector = attributeMatch[0], _d = attributeMatch[1], namespace = _d === void 0 ? null : _d, baseName = attributeMatch[2], actionType = attributeMatch[3], _e = attributeMatch[5], quotedValue = _e === void 0 ? \"\" : _e, _f = attributeMatch[6], value = _f === void 0 ? quotedValue : _f, ignoreCase = attributeMatch[7];\n                selectorIndex += completeSelector.length + 1;\n                var name_2 = unescapeCSS(baseName);\n                if ((_a = options.lowerCaseAttributeNames) !== null && _a !== void 0 ? _a : !options.xmlMode) {\n                    name_2 = name_2.toLowerCase();\n                }\n                tokens.push({\n                    type: \"attribute\",\n                    name: name_2,\n                    action: actionTypes[actionType],\n                    value: unescapeCSS(value),\n                    namespace: namespace,\n                    ignoreCase: !!ignoreCase,\n                });\n            }\n            else if (firstChar === \":\") {\n                if (selector.charAt(selectorIndex + 1) === \":\") {\n                    tokens.push({\n                        type: \"pseudo-element\",\n                        name: getName(2).toLowerCase(),\n                    });\n                    continue;\n                }\n                var name_3 = getName(1).toLowerCase();\n                var data = null;\n                if (selector.charAt(selectorIndex) === \"(\") {\n                    if (unpackPseudos.has(name_3)) {\n                        if (quotes.has(selector.charAt(selectorIndex + 1))) {\n                            throw new Error(\"Pseudo-selector \" + name_3 + \" cannot be quoted\");\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, options, selectorIndex + 1);\n                        if (selector.charAt(selectorIndex) !== \")\") {\n                            throw new Error(\"Missing closing parenthesis in :\" + name_3 + \" (\" + selector + \")\");\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        selectorIndex += 1;\n                        var start = selectorIndex;\n                        var counter = 1;\n                        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n                            if (selector.charAt(selectorIndex) === \"(\" &&\n                                !isEscaped(selectorIndex)) {\n                                counter++;\n                            }\n                            else if (selector.charAt(selectorIndex) === \")\" &&\n                                !isEscaped(selectorIndex)) {\n                                counter--;\n                            }\n                        }\n                        if (counter) {\n                            throw new Error(\"Parenthesis not matched\");\n                        }\n                        data = selector.slice(start, selectorIndex - 1);\n                        if (stripQuotesFromPseudos.has(name_3)) {\n                            var quot = data.charAt(0);\n                            if (quot === data.slice(-1) && quotes.has(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                            data = unescapeCSS(data);\n                        }\n                    }\n                }\n                tokens.push({ type: \"pseudo\", name: name_3, data: data });\n            }\n            else {\n                var namespace = null;\n                var name_4 = void 0;\n                if (firstChar === \"*\") {\n                    selectorIndex += 1;\n                    name_4 = \"*\";\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name_4 = getName(0);\n                }\n                else {\n                    /*\n                     * We have finished parsing the selector.\n                     * Remove descendant tokens at the end if they exist,\n                     * and return the last index, so that parsing can be\n                     * picked up from here.\n                     */\n                    if (tokens.length &&\n                        tokens[tokens.length - 1].type === \"descendant\") {\n                        tokens.pop();\n                    }\n                    addToken(subselects, tokens);\n                    return selectorIndex;\n                }\n                if (selector.charAt(selectorIndex) === \"|\") {\n                    namespace = name_4;\n                    if (selector.charAt(selectorIndex + 1) === \"*\") {\n                        name_4 = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name_4 = getName(1);\n                    }\n                }\n                if (name_4 === \"*\") {\n                    tokens.push({ type: \"universal\", namespace: namespace });\n                }\n                else {\n                    if ((_b = options.lowerCaseTags) !== null && _b !== void 0 ? _b : !options.xmlMode) {\n                        name_4 = name_4.toLowerCase();\n                    }\n                    tokens.push({ type: \"tag\", name: name_4, namespace: namespace });\n                }\n            }\n        }\n    }\n    addToken(subselects, tokens);\n    return selectorIndex;\n}\nfunction addToken(subselects, tokens) {\n    if (subselects.length > 0 && tokens.length === 0) {\n        throw new Error(\"Empty sub-selector\");\n    }\n    subselects.push(tokens);\n}\n\n\n//# sourceURL=webpack:///./node_modules/css-what/lib/parse.js?");

/***/ }),

/***/ "./node_modules/css-what/lib/stringify.js":
/*!************************************************!*\
  !*** ./node_modules/css-what/lib/stringify.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar actionTypes = {\n    equals: \"\",\n    element: \"~\",\n    start: \"^\",\n    end: \"$\",\n    any: \"*\",\n    not: \"!\",\n    hyphen: \"|\",\n};\nvar charsToEscape = new Set(__spreadArrays(Object.keys(actionTypes)\n    .map(function (typeKey) { return actionTypes[typeKey]; })\n    .filter(Boolean), [\n    \":\",\n    \"[\",\n    \"]\",\n    \" \",\n    \"\\\\\",\n    \"(\",\n    \")\",\n]));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */\nfunction stringify(selector) {\n    return selector.map(stringifySubselector).join(\", \");\n}\nexports.default = stringify;\nfunction stringifySubselector(token) {\n    return token.map(stringifyToken).join(\"\");\n}\nfunction stringifyToken(token) {\n    switch (token.type) {\n        // Simple types\n        case \"child\":\n            return \" > \";\n        case \"parent\":\n            return \" < \";\n        case \"sibling\":\n            return \" ~ \";\n        case \"adjacent\":\n            return \" + \";\n        case \"descendant\":\n            return \" \";\n        case \"universal\":\n            return getNamespace(token.namespace) + \"*\";\n        case \"tag\":\n            return getNamespacedName(token);\n        case \"pseudo-element\":\n            return \"::\" + escapeName(token.name);\n        case \"pseudo\":\n            if (token.data === null)\n                return \":\" + escapeName(token.name);\n            if (typeof token.data === \"string\") {\n                return \":\" + escapeName(token.name) + \"(\" + escapeName(token.data) + \")\";\n            }\n            return \":\" + escapeName(token.name) + \"(\" + stringify(token.data) + \")\";\n        case \"attribute\": {\n            if (token.name === \"id\" &&\n                token.action === \"equals\" &&\n                !token.ignoreCase &&\n                !token.namespace) {\n                return \"#\" + escapeName(token.value);\n            }\n            if (token.name === \"class\" &&\n                token.action === \"element\" &&\n                !token.ignoreCase &&\n                !token.namespace) {\n                return \".\" + escapeName(token.value);\n            }\n            var name_1 = getNamespacedName(token);\n            if (token.action === \"exists\") {\n                return \"[\" + name_1 + \"]\";\n            }\n            return \"[\" + name_1 + actionTypes[token.action] + \"='\" + escapeName(token.value) + \"'\" + (token.ignoreCase ? \"i\" : \"\") + \"]\";\n        }\n    }\n}\nfunction getNamespacedName(token) {\n    return \"\" + getNamespace(token.namespace) + escapeName(token.name);\n}\nfunction getNamespace(namespace) {\n    return namespace\n        ? (namespace === \"*\" ? \"*\" : escapeName(namespace)) + \"|\"\n        : \"\";\n}\nfunction escapeName(str) {\n    return str\n        .split(\"\")\n        .map(function (c) { return (charsToEscape.has(c) ? \"\\\\\" + c : c); })\n        .join(\"\");\n}\n\n\n//# sourceURL=webpack:///./node_modules/css-what/lib/stringify.js?");

/***/ }),

/***/ "./node_modules/dom-serializer/lib/foreignNames.js":
/*!*********************************************************!*\
  !*** ./node_modules/dom-serializer/lib/foreignNames.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attributeNames = exports.elementNames = void 0;\nexports.elementNames = new Map([\n    [\"altglyph\", \"altGlyph\"],\n    [\"altglyphdef\", \"altGlyphDef\"],\n    [\"altglyphitem\", \"altGlyphItem\"],\n    [\"animatecolor\", \"animateColor\"],\n    [\"animatemotion\", \"animateMotion\"],\n    [\"animatetransform\", \"animateTransform\"],\n    [\"clippath\", \"clipPath\"],\n    [\"feblend\", \"feBlend\"],\n    [\"fecolormatrix\", \"feColorMatrix\"],\n    [\"fecomponenttransfer\", \"feComponentTransfer\"],\n    [\"fecomposite\", \"feComposite\"],\n    [\"feconvolvematrix\", \"feConvolveMatrix\"],\n    [\"fediffuselighting\", \"feDiffuseLighting\"],\n    [\"fedisplacementmap\", \"feDisplacementMap\"],\n    [\"fedistantlight\", \"feDistantLight\"],\n    [\"fedropshadow\", \"feDropShadow\"],\n    [\"feflood\", \"feFlood\"],\n    [\"fefunca\", \"feFuncA\"],\n    [\"fefuncb\", \"feFuncB\"],\n    [\"fefuncg\", \"feFuncG\"],\n    [\"fefuncr\", \"feFuncR\"],\n    [\"fegaussianblur\", \"feGaussianBlur\"],\n    [\"feimage\", \"feImage\"],\n    [\"femerge\", \"feMerge\"],\n    [\"femergenode\", \"feMergeNode\"],\n    [\"femorphology\", \"feMorphology\"],\n    [\"feoffset\", \"feOffset\"],\n    [\"fepointlight\", \"fePointLight\"],\n    [\"fespecularlighting\", \"feSpecularLighting\"],\n    [\"fespotlight\", \"feSpotLight\"],\n    [\"fetile\", \"feTile\"],\n    [\"feturbulence\", \"feTurbulence\"],\n    [\"foreignobject\", \"foreignObject\"],\n    [\"glyphref\", \"glyphRef\"],\n    [\"lineargradient\", \"linearGradient\"],\n    [\"radialgradient\", \"radialGradient\"],\n    [\"textpath\", \"textPath\"],\n]);\nexports.attributeNames = new Map([\n    [\"definitionurl\", \"definitionURL\"],\n    [\"attributename\", \"attributeName\"],\n    [\"attributetype\", \"attributeType\"],\n    [\"basefrequency\", \"baseFrequency\"],\n    [\"baseprofile\", \"baseProfile\"],\n    [\"calcmode\", \"calcMode\"],\n    [\"clippathunits\", \"clipPathUnits\"],\n    [\"diffuseconstant\", \"diffuseConstant\"],\n    [\"edgemode\", \"edgeMode\"],\n    [\"filterunits\", \"filterUnits\"],\n    [\"glyphref\", \"glyphRef\"],\n    [\"gradienttransform\", \"gradientTransform\"],\n    [\"gradientunits\", \"gradientUnits\"],\n    [\"kernelmatrix\", \"kernelMatrix\"],\n    [\"kernelunitlength\", \"kernelUnitLength\"],\n    [\"keypoints\", \"keyPoints\"],\n    [\"keysplines\", \"keySplines\"],\n    [\"keytimes\", \"keyTimes\"],\n    [\"lengthadjust\", \"lengthAdjust\"],\n    [\"limitingconeangle\", \"limitingConeAngle\"],\n    [\"markerheight\", \"markerHeight\"],\n    [\"markerunits\", \"markerUnits\"],\n    [\"markerwidth\", \"markerWidth\"],\n    [\"maskcontentunits\", \"maskContentUnits\"],\n    [\"maskunits\", \"maskUnits\"],\n    [\"numoctaves\", \"numOctaves\"],\n    [\"pathlength\", \"pathLength\"],\n    [\"patterncontentunits\", \"patternContentUnits\"],\n    [\"patterntransform\", \"patternTransform\"],\n    [\"patternunits\", \"patternUnits\"],\n    [\"pointsatx\", \"pointsAtX\"],\n    [\"pointsaty\", \"pointsAtY\"],\n    [\"pointsatz\", \"pointsAtZ\"],\n    [\"preservealpha\", \"preserveAlpha\"],\n    [\"preserveaspectratio\", \"preserveAspectRatio\"],\n    [\"primitiveunits\", \"primitiveUnits\"],\n    [\"refx\", \"refX\"],\n    [\"refy\", \"refY\"],\n    [\"repeatcount\", \"repeatCount\"],\n    [\"repeatdur\", \"repeatDur\"],\n    [\"requiredextensions\", \"requiredExtensions\"],\n    [\"requiredfeatures\", \"requiredFeatures\"],\n    [\"specularconstant\", \"specularConstant\"],\n    [\"specularexponent\", \"specularExponent\"],\n    [\"spreadmethod\", \"spreadMethod\"],\n    [\"startoffset\", \"startOffset\"],\n    [\"stddeviation\", \"stdDeviation\"],\n    [\"stitchtiles\", \"stitchTiles\"],\n    [\"surfacescale\", \"surfaceScale\"],\n    [\"systemlanguage\", \"systemLanguage\"],\n    [\"tablevalues\", \"tableValues\"],\n    [\"targetx\", \"targetX\"],\n    [\"targety\", \"targetY\"],\n    [\"textlength\", \"textLength\"],\n    [\"viewbox\", \"viewBox\"],\n    [\"viewtarget\", \"viewTarget\"],\n    [\"xchannelselector\", \"xChannelSelector\"],\n    [\"ychannelselector\", \"yChannelSelector\"],\n    [\"zoomandpan\", \"zoomAndPan\"],\n]);\n\n\n//# sourceURL=webpack:///./node_modules/dom-serializer/lib/foreignNames.js?");

/***/ }),

/***/ "./node_modules/dom-serializer/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/dom-serializer/lib/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Module dependencies\n */\nvar ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"./node_modules/domelementtype/lib/index.js\"));\nvar entities_1 = __webpack_require__(/*! entities */ \"./node_modules/entities/lib/index.js\");\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */\nvar foreignNames_1 = __webpack_require__(/*! ./foreignNames */ \"./node_modules/dom-serializer/lib/foreignNames.js\");\nvar unencodedElements = new Set([\n    \"style\",\n    \"script\",\n    \"xmp\",\n    \"iframe\",\n    \"noembed\",\n    \"noframes\",\n    \"plaintext\",\n    \"noscript\",\n]);\n/**\n * Format attributes\n */\nfunction formatAttributes(attributes, opts) {\n    if (!attributes)\n        return;\n    return Object.keys(attributes)\n        .map(function (key) {\n        var _a, _b;\n        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n        if (opts.xmlMode === \"foreign\") {\n            /* Fix up mixed-case attribute names */\n            key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n        }\n        if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n            return key;\n        }\n        return key + \"=\\\"\" + (opts.decodeEntities !== false\n            ? entities_1.encodeXML(value)\n            : value.replace(/\"/g, \"&quot;\")) + \"\\\"\";\n    })\n        .join(\" \");\n}\n/**\n * Self-enclosing tags\n */\nvar singleTag = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\",\n]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */\nfunction render(node, options) {\n    if (options === void 0) { options = {}; }\n    var nodes = \"length\" in node ? node : [node];\n    var output = \"\";\n    for (var i = 0; i < nodes.length; i++) {\n        output += renderNode(nodes[i], options);\n    }\n    return output;\n}\nexports.default = render;\nfunction renderNode(node, options) {\n    switch (node.type) {\n        case ElementType.Root:\n            return render(node.children, options);\n        case ElementType.Directive:\n        case ElementType.Doctype:\n            return renderDirective(node);\n        case ElementType.Comment:\n            return renderComment(node);\n        case ElementType.CDATA:\n            return renderCdata(node);\n        case ElementType.Script:\n        case ElementType.Style:\n        case ElementType.Tag:\n            return renderTag(node, options);\n        case ElementType.Text:\n            return renderText(node, options);\n    }\n}\nvar foreignModeIntegrationPoints = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\",\n]);\nvar foreignElements = new Set([\"svg\", \"math\"]);\nfunction renderTag(elem, opts) {\n    var _a;\n    // Handle SVG / MathML in HTML\n    if (opts.xmlMode === \"foreign\") {\n        /* Fix up mixed-case element names */\n        elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n        /* Exit foreign mode at integration points */\n        if (elem.parent &&\n            foreignModeIntegrationPoints.has(elem.parent.name)) {\n            opts = __assign(__assign({}, opts), { xmlMode: false });\n        }\n    }\n    if (!opts.xmlMode && foreignElements.has(elem.name)) {\n        opts = __assign(__assign({}, opts), { xmlMode: \"foreign\" });\n    }\n    var tag = \"<\" + elem.name;\n    var attribs = formatAttributes(elem.attribs, opts);\n    if (attribs) {\n        tag += \" \" + attribs;\n    }\n    if (elem.children.length === 0 &&\n        (opts.xmlMode\n            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags\n                opts.selfClosingTags !== false\n            : // User explicitly asked for self-closing tags, even in HTML mode\n                opts.selfClosingTags && singleTag.has(elem.name))) {\n        if (!opts.xmlMode)\n            tag += \" \";\n        tag += \"/>\";\n    }\n    else {\n        tag += \">\";\n        if (elem.children.length > 0) {\n            tag += render(elem.children, opts);\n        }\n        if (opts.xmlMode || !singleTag.has(elem.name)) {\n            tag += \"</\" + elem.name + \">\";\n        }\n    }\n    return tag;\n}\nfunction renderDirective(elem) {\n    return \"<\" + elem.data + \">\";\n}\nfunction renderText(elem, opts) {\n    var data = elem.data || \"\";\n    // If entities weren't decoded, no need to encode them back\n    if (opts.decodeEntities !== false &&\n        !(!opts.xmlMode &&\n            elem.parent &&\n            unencodedElements.has(elem.parent.name))) {\n        data = entities_1.encodeXML(data);\n    }\n    return data;\n}\nfunction renderCdata(elem) {\n    return \"<![CDATA[\" + elem.children[0].data + \"]]>\";\n}\nfunction renderComment(elem) {\n    return \"<!--\" + elem.data + \"-->\";\n}\n\n\n//# sourceURL=webpack:///./node_modules/dom-serializer/lib/index.js?");

/***/ }),

/***/ "./node_modules/domelementtype/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/domelementtype/lib/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\n/** Types of elements found in htmlparser2's DOM */\nvar ElementType;\n(function (ElementType) {\n    /** Type for the root element of a document */\n    ElementType[\"Root\"] = \"root\";\n    /** Type for Text */\n    ElementType[\"Text\"] = \"text\";\n    /** Type for <? ... ?> */\n    ElementType[\"Directive\"] = \"directive\";\n    /** Type for <!-- ... --> */\n    ElementType[\"Comment\"] = \"comment\";\n    /** Type for <script> tags */\n    ElementType[\"Script\"] = \"script\";\n    /** Type for <style> tags */\n    ElementType[\"Style\"] = \"style\";\n    /** Type for Any tag */\n    ElementType[\"Tag\"] = \"tag\";\n    /** Type for <![CDATA[ ... ]]> */\n    ElementType[\"CDATA\"] = \"cdata\";\n    /** Type for <!doctype ...> */\n    ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */\nfunction isTag(elem) {\n    return (elem.type === ElementType.Tag ||\n        elem.type === ElementType.Script ||\n        elem.type === ElementType.Style);\n}\nexports.isTag = isTag;\n// Exports for backwards compatibility\n/** Type for the root element of a document */\nexports.Root = ElementType.Root;\n/** Type for Text */\nexports.Text = ElementType.Text;\n/** Type for <? ... ?> */\nexports.Directive = ElementType.Directive;\n/** Type for <!-- ... --> */\nexports.Comment = ElementType.Comment;\n/** Type for <script> tags */\nexports.Script = ElementType.Script;\n/** Type for <style> tags */\nexports.Style = ElementType.Style;\n/** Type for Any tag */\nexports.Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */\nexports.CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\nexports.Doctype = ElementType.Doctype;\n\n\n//# sourceURL=webpack:///./node_modules/domelementtype/lib/index.js?");

/***/ }),

/***/ "./node_modules/domhandler/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/domhandler/lib/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DomHandler = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"./node_modules/domelementtype/lib/index.js\");\nvar node_1 = __webpack_require__(/*! ./node */ \"./node_modules/domhandler/lib/node.js\");\n__exportStar(__webpack_require__(/*! ./node */ \"./node_modules/domhandler/lib/node.js\"), exports);\nvar reWhitespace = /\\s+/g;\n// Default options\nvar defaultOpts = {\n    normalizeWhitespace: false,\n    withStartIndices: false,\n    withEndIndices: false,\n    xmlMode: false,\n};\nvar DomHandler = /** @class */ (function () {\n    /**\n     * @param callback Called once parsing has completed.\n     * @param options Settings for the handler.\n     * @param elementCB Callback whenever a tag is closed.\n     */\n    function DomHandler(callback, options, elementCB) {\n        /** The elements of the DOM */\n        this.dom = [];\n        /** The root element for the DOM */\n        this.root = new node_1.Document(this.dom);\n        /** Indicated whether parsing has been completed. */\n        this.done = false;\n        /** Stack of open tags. */\n        this.tagStack = [this.root];\n        /** A data node that is still being written to. */\n        this.lastNode = null;\n        /** Reference to the parser instance. Used for location information. */\n        this.parser = null;\n        // Make it possible to skip arguments, for backwards-compatibility\n        if (typeof options === \"function\") {\n            elementCB = options;\n            options = defaultOpts;\n        }\n        if (typeof callback === \"object\") {\n            options = callback;\n            callback = undefined;\n        }\n        this.callback = callback !== null && callback !== void 0 ? callback : null;\n        this.options = options !== null && options !== void 0 ? options : defaultOpts;\n        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n    }\n    DomHandler.prototype.onparserinit = function (parser) {\n        this.parser = parser;\n    };\n    // Resets the handler back to starting state\n    DomHandler.prototype.onreset = function () {\n        this.dom = [];\n        this.root = new node_1.Document(this.dom);\n        this.done = false;\n        this.tagStack = [this.root];\n        this.lastNode = null;\n        this.parser = null;\n    };\n    // Signals the handler that parsing is done\n    DomHandler.prototype.onend = function () {\n        if (this.done)\n            return;\n        this.done = true;\n        this.parser = null;\n        this.handleCallback(null);\n    };\n    DomHandler.prototype.onerror = function (error) {\n        this.handleCallback(error);\n    };\n    DomHandler.prototype.onclosetag = function () {\n        this.lastNode = null;\n        var elem = this.tagStack.pop();\n        if (this.options.withEndIndices) {\n            elem.endIndex = this.parser.endIndex;\n        }\n        if (this.elementCB)\n            this.elementCB(elem);\n    };\n    DomHandler.prototype.onopentag = function (name, attribs) {\n        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;\n        var element = new node_1.Element(name, attribs, undefined, type);\n        this.addNode(element);\n        this.tagStack.push(element);\n    };\n    DomHandler.prototype.ontext = function (data) {\n        var normalizeWhitespace = this.options.normalizeWhitespace;\n        var lastNode = this.lastNode;\n        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {\n            if (normalizeWhitespace) {\n                lastNode.data = (lastNode.data + data).replace(reWhitespace, \" \");\n            }\n            else {\n                lastNode.data += data;\n            }\n            if (this.options.withEndIndices) {\n                lastNode.endIndex = this.parser.endIndex;\n            }\n        }\n        else {\n            if (normalizeWhitespace) {\n                data = data.replace(reWhitespace, \" \");\n            }\n            var node = new node_1.Text(data);\n            this.addNode(node);\n            this.lastNode = node;\n        }\n    };\n    DomHandler.prototype.oncomment = function (data) {\n        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {\n            this.lastNode.data += data;\n            return;\n        }\n        var node = new node_1.Comment(data);\n        this.addNode(node);\n        this.lastNode = node;\n    };\n    DomHandler.prototype.oncommentend = function () {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.oncdatastart = function () {\n        var text = new node_1.Text(\"\");\n        var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [text]);\n        this.addNode(node);\n        text.parent = node;\n        this.lastNode = text;\n    };\n    DomHandler.prototype.oncdataend = function () {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.onprocessinginstruction = function (name, data) {\n        var node = new node_1.ProcessingInstruction(name, data);\n        this.addNode(node);\n    };\n    DomHandler.prototype.handleCallback = function (error) {\n        if (typeof this.callback === \"function\") {\n            this.callback(error, this.dom);\n        }\n        else if (error) {\n            throw error;\n        }\n    };\n    DomHandler.prototype.addNode = function (node) {\n        var parent = this.tagStack[this.tagStack.length - 1];\n        var previousSibling = parent.children[parent.children.length - 1];\n        if (this.options.withStartIndices) {\n            node.startIndex = this.parser.startIndex;\n        }\n        if (this.options.withEndIndices) {\n            node.endIndex = this.parser.endIndex;\n        }\n        parent.children.push(node);\n        if (previousSibling) {\n            node.prev = previousSibling;\n            previousSibling.next = node;\n        }\n        node.parent = parent;\n        this.lastNode = null;\n    };\n    return DomHandler;\n}());\nexports.DomHandler = DomHandler;\nexports.default = DomHandler;\n\n\n//# sourceURL=webpack:///./node_modules/domhandler/lib/index.js?");

/***/ }),

/***/ "./node_modules/domhandler/lib/node.js":
/*!*********************************************!*\
  !*** ./node_modules/domhandler/lib/node.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"./node_modules/domelementtype/lib/index.js\");\nvar nodeTypes = new Map([\n    [domelementtype_1.ElementType.Tag, 1],\n    [domelementtype_1.ElementType.Script, 1],\n    [domelementtype_1.ElementType.Style, 1],\n    [domelementtype_1.ElementType.Directive, 1],\n    [domelementtype_1.ElementType.Text, 3],\n    [domelementtype_1.ElementType.CDATA, 4],\n    [domelementtype_1.ElementType.Comment, 8],\n    [domelementtype_1.ElementType.Root, 9],\n]);\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */\nvar Node = /** @class */ (function () {\n    /**\n     *\n     * @param type The type of the node.\n     */\n    function Node(type) {\n        this.type = type;\n        /** Parent of the node */\n        this.parent = null;\n        /** Previous sibling */\n        this.prev = null;\n        /** Next sibling */\n        this.next = null;\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */\n        this.startIndex = null;\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */\n        this.endIndex = null;\n    }\n    Object.defineProperty(Node.prototype, \"nodeType\", {\n        // Read-only aliases\n        /**\n         * [DOM spec](https://dom.spec.whatwg.org/#dom-node-nodetype)-compatible\n         * node {@link type}.\n         */\n        get: function () {\n            var _a;\n            return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"parentNode\", {\n        // Read-write aliases for properties\n        /**\n         * Same as {@link parent}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */\n        get: function () {\n            return this.parent;\n        },\n        set: function (parent) {\n            this.parent = parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"previousSibling\", {\n        /**\n         * Same as {@link prev}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */\n        get: function () {\n            return this.prev;\n        },\n        set: function (prev) {\n            this.prev = prev;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"nextSibling\", {\n        /**\n         * Same as {@link next}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */\n        get: function () {\n            return this.next;\n        },\n        set: function (next) {\n            this.next = next;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Clone this node, and optionally its children.\n     *\n     * @param recursive Clone child nodes as well.\n     * @returns A clone of the node.\n     */\n    Node.prototype.cloneNode = function (recursive) {\n        if (recursive === void 0) { recursive = false; }\n        return cloneNode(this, recursive);\n    };\n    return Node;\n}());\nexports.Node = Node;\n/**\n * A node that contains some data.\n */\nvar DataNode = /** @class */ (function (_super) {\n    __extends(DataNode, _super);\n    /**\n     * @param type The type of the node\n     * @param data The content of the data node\n     */\n    function DataNode(type, data) {\n        var _this = _super.call(this, type) || this;\n        _this.data = data;\n        return _this;\n    }\n    Object.defineProperty(DataNode.prototype, \"nodeValue\", {\n        /**\n         * Same as {@link data}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */\n        get: function () {\n            return this.data;\n        },\n        set: function (data) {\n            this.data = data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DataNode;\n}(Node));\nexports.DataNode = DataNode;\n/**\n * Text within the document.\n */\nvar Text = /** @class */ (function (_super) {\n    __extends(Text, _super);\n    function Text(data) {\n        return _super.call(this, domelementtype_1.ElementType.Text, data) || this;\n    }\n    return Text;\n}(DataNode));\nexports.Text = Text;\n/**\n * Comments within the document.\n */\nvar Comment = /** @class */ (function (_super) {\n    __extends(Comment, _super);\n    function Comment(data) {\n        return _super.call(this, domelementtype_1.ElementType.Comment, data) || this;\n    }\n    return Comment;\n}(DataNode));\nexports.Comment = Comment;\n/**\n * Processing instructions, including doc types.\n */\nvar ProcessingInstruction = /** @class */ (function (_super) {\n    __extends(ProcessingInstruction, _super);\n    function ProcessingInstruction(name, data) {\n        var _this = _super.call(this, domelementtype_1.ElementType.Directive, data) || this;\n        _this.name = name;\n        return _this;\n    }\n    return ProcessingInstruction;\n}(DataNode));\nexports.ProcessingInstruction = ProcessingInstruction;\n/**\n * A `Node` that can have children.\n */\nvar NodeWithChildren = /** @class */ (function (_super) {\n    __extends(NodeWithChildren, _super);\n    /**\n     * @param type Type of the node.\n     * @param children Children of the node. Only certain node types can have children.\n     */\n    function NodeWithChildren(type, children) {\n        var _this = _super.call(this, type) || this;\n        _this.children = children;\n        return _this;\n    }\n    Object.defineProperty(NodeWithChildren.prototype, \"firstChild\", {\n        // Aliases\n        /** First child of the node. */\n        get: function () {\n            var _a;\n            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"lastChild\", {\n        /** Last child of the node. */\n        get: function () {\n            return this.children.length > 0\n                ? this.children[this.children.length - 1]\n                : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"childNodes\", {\n        /**\n         * Same as {@link children}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */\n        get: function () {\n            return this.children;\n        },\n        set: function (children) {\n            this.children = children;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return NodeWithChildren;\n}(Node));\nexports.NodeWithChildren = NodeWithChildren;\n/**\n * The root node of the document.\n */\nvar Document = /** @class */ (function (_super) {\n    __extends(Document, _super);\n    function Document(children) {\n        return _super.call(this, domelementtype_1.ElementType.Root, children) || this;\n    }\n    return Document;\n}(NodeWithChildren));\nexports.Document = Document;\n/**\n * An element within the DOM.\n */\nvar Element = /** @class */ (function (_super) {\n    __extends(Element, _super);\n    /**\n     * @param name Name of the tag, eg. `div`, `span`.\n     * @param attribs Object mapping attribute names to attribute values.\n     * @param children Children of the node.\n     */\n    function Element(name, attribs, children, type) {\n        if (children === void 0) { children = []; }\n        if (type === void 0) { type = name === \"script\"\n            ? domelementtype_1.ElementType.Script\n            : name === \"style\"\n                ? domelementtype_1.ElementType.Style\n                : domelementtype_1.ElementType.Tag; }\n        var _this = _super.call(this, type, children) || this;\n        _this.name = name;\n        _this.attribs = attribs;\n        return _this;\n    }\n    Object.defineProperty(Element.prototype, \"tagName\", {\n        // DOM Level 1 aliases\n        /**\n         * Same as {@link name}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */\n        get: function () {\n            return this.name;\n        },\n        set: function (name) {\n            this.name = name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Element.prototype, \"attributes\", {\n        get: function () {\n            var _this = this;\n            return Object.keys(this.attribs).map(function (name) {\n                var _a, _b;\n                return ({\n                    name: name,\n                    value: _this.attribs[name],\n                    namespace: (_a = _this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\n                    prefix: (_b = _this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name],\n                });\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Element;\n}(NodeWithChildren));\nexports.Element = Element;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */\nfunction isTag(node) {\n    return (0, domelementtype_1.isTag)(node);\n}\nexports.isTag = isTag;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */\nfunction isCDATA(node) {\n    return node.type === domelementtype_1.ElementType.CDATA;\n}\nexports.isCDATA = isCDATA;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */\nfunction isText(node) {\n    return node.type === domelementtype_1.ElementType.Text;\n}\nexports.isText = isText;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */\nfunction isComment(node) {\n    return node.type === domelementtype_1.ElementType.Comment;\n}\nexports.isComment = isComment;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nfunction isDirective(node) {\n    return node.type === domelementtype_1.ElementType.Directive;\n}\nexports.isDirective = isDirective;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nfunction isDocument(node) {\n    return node.type === domelementtype_1.ElementType.Root;\n}\nexports.isDocument = isDocument;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.\n */\nfunction hasChildren(node) {\n    return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\nexports.hasChildren = hasChildren;\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */\nfunction cloneNode(node, recursive) {\n    if (recursive === void 0) { recursive = false; }\n    var result;\n    if (isText(node)) {\n        result = new Text(node.data);\n    }\n    else if (isComment(node)) {\n        result = new Comment(node.data);\n    }\n    else if (isTag(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);\n        children.forEach(function (child) { return (child.parent = clone_1); });\n        if (node.namespace != null) {\n            clone_1.namespace = node.namespace;\n        }\n        if (node[\"x-attribsNamespace\"]) {\n            clone_1[\"x-attribsNamespace\"] = __assign({}, node[\"x-attribsNamespace\"]);\n        }\n        if (node[\"x-attribsPrefix\"]) {\n            clone_1[\"x-attribsPrefix\"] = __assign({}, node[\"x-attribsPrefix\"]);\n        }\n        result = clone_1;\n    }\n    else if (isCDATA(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_2 = new NodeWithChildren(domelementtype_1.ElementType.CDATA, children);\n        children.forEach(function (child) { return (child.parent = clone_2); });\n        result = clone_2;\n    }\n    else if (isDocument(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_3 = new Document(children);\n        children.forEach(function (child) { return (child.parent = clone_3); });\n        if (node[\"x-mode\"]) {\n            clone_3[\"x-mode\"] = node[\"x-mode\"];\n        }\n        result = clone_3;\n    }\n    else if (isDirective(node)) {\n        var instruction = new ProcessingInstruction(node.name, node.data);\n        if (node[\"x-name\"] != null) {\n            instruction[\"x-name\"] = node[\"x-name\"];\n            instruction[\"x-publicId\"] = node[\"x-publicId\"];\n            instruction[\"x-systemId\"] = node[\"x-systemId\"];\n        }\n        result = instruction;\n    }\n    else {\n        throw new Error(\"Not implemented yet: \".concat(node.type));\n    }\n    result.startIndex = node.startIndex;\n    result.endIndex = node.endIndex;\n    if (node.sourceCodeLocation != null) {\n        result.sourceCodeLocation = node.sourceCodeLocation;\n    }\n    return result;\n}\nexports.cloneNode = cloneNode;\nfunction cloneChildren(childs) {\n    var children = childs.map(function (child) { return cloneNode(child, true); });\n    for (var i = 1; i < children.length; i++) {\n        children[i].prev = children[i - 1];\n        children[i - 1].next = children[i];\n    }\n    return children;\n}\n\n\n//# sourceURL=webpack:///./node_modules/domhandler/lib/node.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/feeds.js":
/*!********************************************!*\
  !*** ./node_modules/domutils/lib/feeds.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFeed = void 0;\nvar stringify_1 = __webpack_require__(/*! ./stringify */ \"./node_modules/domutils/lib/stringify.js\");\nvar legacy_1 = __webpack_require__(/*! ./legacy */ \"./node_modules/domutils/lib/legacy.js\");\n/**\n * Get the feed object from the root of a DOM tree.\n *\n * @param doc - The DOM to to extract the feed from.\n * @returns The feed.\n */\nfunction getFeed(doc) {\n    var feedRoot = getOneElement(isValidFeed, doc);\n    return !feedRoot\n        ? null\n        : feedRoot.name === \"feed\"\n            ? getAtomFeed(feedRoot)\n            : getRssFeed(feedRoot);\n}\nexports.getFeed = getFeed;\n/**\n * Parse an Atom feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\nfunction getAtomFeed(feedRoot) {\n    var _a;\n    var childs = feedRoot.children;\n    var feed = {\n        type: \"atom\",\n        items: (0, legacy_1.getElementsByTagName)(\"entry\", childs).map(function (item) {\n            var _a;\n            var children = item.children;\n            var entry = { media: getMediaElements(children) };\n            addConditionally(entry, \"id\", \"id\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            var href = (_a = getOneElement(\"link\", children)) === null || _a === void 0 ? void 0 : _a.attribs.href;\n            if (href) {\n                entry.link = href;\n            }\n            var description = fetch(\"summary\", children) || fetch(\"content\", children);\n            if (description) {\n                entry.description = description;\n            }\n            var pubDate = fetch(\"updated\", children);\n            if (pubDate) {\n                entry.pubDate = new Date(pubDate);\n            }\n            return entry;\n        }),\n    };\n    addConditionally(feed, \"id\", \"id\", childs);\n    addConditionally(feed, \"title\", \"title\", childs);\n    var href = (_a = getOneElement(\"link\", childs)) === null || _a === void 0 ? void 0 : _a.attribs.href;\n    if (href) {\n        feed.link = href;\n    }\n    addConditionally(feed, \"description\", \"subtitle\", childs);\n    var updated = fetch(\"updated\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"email\", childs, true);\n    return feed;\n}\n/**\n * Parse a RSS feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */\nfunction getRssFeed(feedRoot) {\n    var _a, _b;\n    var childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n    var feed = {\n        type: feedRoot.name.substr(0, 3),\n        id: \"\",\n        items: (0, legacy_1.getElementsByTagName)(\"item\", feedRoot.children).map(function (item) {\n            var children = item.children;\n            var entry = { media: getMediaElements(children) };\n            addConditionally(entry, \"id\", \"guid\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            addConditionally(entry, \"link\", \"link\", children);\n            addConditionally(entry, \"description\", \"description\", children);\n            var pubDate = fetch(\"pubDate\", children);\n            if (pubDate)\n                entry.pubDate = new Date(pubDate);\n            return entry;\n        }),\n    };\n    addConditionally(feed, \"title\", \"title\", childs);\n    addConditionally(feed, \"link\", \"link\", childs);\n    addConditionally(feed, \"description\", \"description\", childs);\n    var updated = fetch(\"lastBuildDate\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n    return feed;\n}\nvar MEDIA_KEYS_STRING = [\"url\", \"type\", \"lang\"];\nvar MEDIA_KEYS_INT = [\n    \"fileSize\",\n    \"bitrate\",\n    \"framerate\",\n    \"samplingrate\",\n    \"channels\",\n    \"duration\",\n    \"height\",\n    \"width\",\n];\n/**\n * Get all media elements of a feed item.\n *\n * @param where Nodes to search in.\n * @returns Media elements.\n */\nfunction getMediaElements(where) {\n    return (0, legacy_1.getElementsByTagName)(\"media:content\", where).map(function (elem) {\n        var attribs = elem.attribs;\n        var media = {\n            medium: attribs.medium,\n            isDefault: !!attribs.isDefault,\n        };\n        for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {\n            var attrib = MEDIA_KEYS_STRING_1[_i];\n            if (attribs[attrib]) {\n                media[attrib] = attribs[attrib];\n            }\n        }\n        for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {\n            var attrib = MEDIA_KEYS_INT_1[_a];\n            if (attribs[attrib]) {\n                media[attrib] = parseInt(attribs[attrib], 10);\n            }\n        }\n        if (attribs.expression) {\n            media.expression =\n                attribs.expression;\n        }\n        return media;\n    });\n}\n/**\n * Get one element by tag name.\n *\n * @param tagName Tag name to look for\n * @param node Node to search in\n * @returns The element or null\n */\nfunction getOneElement(tagName, node) {\n    return (0, legacy_1.getElementsByTagName)(tagName, node, true, 1)[0];\n}\n/**\n * Get the text content of an element with a certain tag name.\n *\n * @param tagName Tag name to look for.\n * @param where  Node to search in.\n * @param recurse Whether to recurse into child nodes.\n * @returns The text content of the element.\n */\nfunction fetch(tagName, where, recurse) {\n    if (recurse === void 0) { recurse = false; }\n    return (0, stringify_1.textContent)((0, legacy_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();\n}\n/**\n * Adds a property to an object if it has a value.\n *\n * @param obj Object to be extended\n * @param prop Property name\n * @param tagName Tag name that contains the conditionally added property\n * @param where Element to search for the property\n * @param recurse Whether to recurse into child nodes.\n */\nfunction addConditionally(obj, prop, tagName, where, recurse) {\n    if (recurse === void 0) { recurse = false; }\n    var val = fetch(tagName, where, recurse);\n    if (val)\n        obj[prop] = val;\n}\n/**\n * Checks if an element is a feed root node.\n *\n * @param value The name of the element to check.\n * @returns Whether an element is a feed root node.\n */\nfunction isValidFeed(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n}\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/feeds.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/helpers.js":
/*!**********************************************!*\
  !*** ./node_modules/domutils/lib/helpers.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\n/**\n * Given an array of nodes, remove any member that is contained by another.\n *\n * @param nodes Nodes to filter.\n * @returns Remaining nodes that aren't subtrees of each other.\n */\nfunction removeSubsets(nodes) {\n    var idx = nodes.length;\n    /*\n     * Check if each node (or one of its ancestors) is already contained in the\n     * array.\n     */\n    while (--idx >= 0) {\n        var node = nodes[idx];\n        /*\n         * Remove the node if it is not unique.\n         * We are going through the array from the end, so we only\n         * have to check nodes that preceed the node under consideration in the array.\n         */\n        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n            nodes.splice(idx, 1);\n            continue;\n        }\n        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n            if (nodes.includes(ancestor)) {\n                nodes.splice(idx, 1);\n                break;\n            }\n        }\n    }\n    return nodes;\n}\nexports.removeSubsets = removeSubsets;\n/**\n * Compare the position of one node against another node in any other document.\n * The return value is a bitmask with the following values:\n *\n * Document order:\n * > There is an ordering, document order, defined on all the nodes in the\n * > document corresponding to the order in which the first character of the\n * > XML representation of each node occurs in the XML representation of the\n * > document after expansion of general entities. Thus, the document element\n * > node will be the first node. Element nodes occur before their children.\n * > Thus, document order orders element nodes in order of the occurrence of\n * > their start-tag in the XML (after expansion of entities). The attribute\n * > nodes of an element occur after the element and before its children. The\n * > relative order of attribute nodes is implementation-dependent./\n *\n * Source:\n * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n *\n * @param nodeA The first node to use in the comparison\n * @param nodeB The second node to use in the comparison\n * @returns A bitmask describing the input nodes' relative position.\n *\n * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n * a description of these values.\n */\nfunction compareDocumentPosition(nodeA, nodeB) {\n    var aParents = [];\n    var bParents = [];\n    if (nodeA === nodeB) {\n        return 0;\n    }\n    var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n    while (current) {\n        aParents.unshift(current);\n        current = current.parent;\n    }\n    current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n    while (current) {\n        bParents.unshift(current);\n        current = current.parent;\n    }\n    var maxIdx = Math.min(aParents.length, bParents.length);\n    var idx = 0;\n    while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n        idx++;\n    }\n    if (idx === 0) {\n        return 1 /* DISCONNECTED */;\n    }\n    var sharedParent = aParents[idx - 1];\n    var siblings = sharedParent.children;\n    var aSibling = aParents[idx];\n    var bSibling = bParents[idx];\n    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n        if (sharedParent === nodeB) {\n            return 4 /* FOLLOWING */ | 16 /* CONTAINED_BY */;\n        }\n        return 4 /* FOLLOWING */;\n    }\n    if (sharedParent === nodeA) {\n        return 2 /* PRECEDING */ | 8 /* CONTAINS */;\n    }\n    return 2 /* PRECEDING */;\n}\nexports.compareDocumentPosition = compareDocumentPosition;\n/**\n * Sort an array of nodes based on their relative position in the document and\n * remove any duplicate nodes. If the array contains nodes that do not belong\n * to the same document, sort order is unspecified.\n *\n * @param nodes Array of DOM nodes.\n * @returns Collection of unique nodes, sorted in document order.\n */\nfunction uniqueSort(nodes) {\n    nodes = nodes.filter(function (node, i, arr) { return !arr.includes(node, i + 1); });\n    nodes.sort(function (a, b) {\n        var relative = compareDocumentPosition(a, b);\n        if (relative & 2 /* PRECEDING */) {\n            return -1;\n        }\n        else if (relative & 4 /* FOLLOWING */) {\n            return 1;\n        }\n        return 0;\n    });\n    return nodes;\n}\nexports.uniqueSort = uniqueSort;\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/helpers.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/domutils/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;\n__exportStar(__webpack_require__(/*! ./stringify */ \"./node_modules/domutils/lib/stringify.js\"), exports);\n__exportStar(__webpack_require__(/*! ./traversal */ \"./node_modules/domutils/lib/traversal.js\"), exports);\n__exportStar(__webpack_require__(/*! ./manipulation */ \"./node_modules/domutils/lib/manipulation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./querying */ \"./node_modules/domutils/lib/querying.js\"), exports);\n__exportStar(__webpack_require__(/*! ./legacy */ \"./node_modules/domutils/lib/legacy.js\"), exports);\n__exportStar(__webpack_require__(/*! ./helpers */ \"./node_modules/domutils/lib/helpers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./feeds */ \"./node_modules/domutils/lib/feeds.js\"), exports);\n/** @deprecated Use these methods from `domhandler` directly. */\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"isTag\", { enumerable: true, get: function () { return domhandler_1.isTag; } });\nObject.defineProperty(exports, \"isCDATA\", { enumerable: true, get: function () { return domhandler_1.isCDATA; } });\nObject.defineProperty(exports, \"isText\", { enumerable: true, get: function () { return domhandler_1.isText; } });\nObject.defineProperty(exports, \"isComment\", { enumerable: true, get: function () { return domhandler_1.isComment; } });\nObject.defineProperty(exports, \"isDocument\", { enumerable: true, get: function () { return domhandler_1.isDocument; } });\nObject.defineProperty(exports, \"hasChildren\", { enumerable: true, get: function () { return domhandler_1.hasChildren; } });\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/index.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/legacy.js":
/*!*********************************************!*\
  !*** ./node_modules/domutils/lib/legacy.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\nvar querying_1 = __webpack_require__(/*! ./querying */ \"./node_modules/domutils/lib/querying.js\");\nvar Checks = {\n    tag_name: function (name) {\n        if (typeof name === \"function\") {\n            return function (elem) { return (0, domhandler_1.isTag)(elem) && name(elem.name); };\n        }\n        else if (name === \"*\") {\n            return domhandler_1.isTag;\n        }\n        return function (elem) { return (0, domhandler_1.isTag)(elem) && elem.name === name; };\n    },\n    tag_type: function (type) {\n        if (typeof type === \"function\") {\n            return function (elem) { return type(elem.type); };\n        }\n        return function (elem) { return elem.type === type; };\n    },\n    tag_contains: function (data) {\n        if (typeof data === \"function\") {\n            return function (elem) { return (0, domhandler_1.isText)(elem) && data(elem.data); };\n        }\n        return function (elem) { return (0, domhandler_1.isText)(elem) && elem.data === data; };\n    },\n};\n/**\n * @param attrib Attribute to check.\n * @param value Attribute value to look for.\n * @returns A function to check whether the a node has an attribute with a particular value.\n */\nfunction getAttribCheck(attrib, value) {\n    if (typeof value === \"function\") {\n        return function (elem) { return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]); };\n    }\n    return function (elem) { return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value; };\n}\n/**\n * @param a First function to combine.\n * @param b Second function to combine.\n * @returns A function taking a node and returning `true` if either\n * of the input functions returns `true` for the node.\n */\nfunction combineFuncs(a, b) {\n    return function (elem) { return a(elem) || b(elem); };\n}\n/**\n * @param options An object describing nodes to look for.\n * @returns A function executing all checks in `options` and returning `true`\n * if any of them match a node.\n */\nfunction compileTest(options) {\n    var funcs = Object.keys(options).map(function (key) {\n        var value = options[key];\n        return Object.prototype.hasOwnProperty.call(Checks, key)\n            ? Checks[key](value)\n            : getAttribCheck(key, value);\n    });\n    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);\n}\n/**\n * @param options An object describing nodes to look for.\n * @param node The element to test.\n * @returns Whether the element matches the description in `options`.\n */\nfunction testElement(options, node) {\n    var test = compileTest(options);\n    return test ? test(node) : true;\n}\nexports.testElement = testElement;\n/**\n * @param options An object describing nodes to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes that match `options`.\n */\nfunction getElements(options, nodes, recurse, limit) {\n    if (limit === void 0) { limit = Infinity; }\n    var test = compileTest(options);\n    return test ? (0, querying_1.filter)(test, nodes, recurse, limit) : [];\n}\nexports.getElements = getElements;\n/**\n * @param id The unique ID attribute value to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @returns The node with the supplied ID.\n */\nfunction getElementById(id, nodes, recurse) {\n    if (recurse === void 0) { recurse = true; }\n    if (!Array.isArray(nodes))\n        nodes = [nodes];\n    return (0, querying_1.findOne)(getAttribCheck(\"id\", id), nodes, recurse);\n}\nexports.getElementById = getElementById;\n/**\n * @param tagName Tag name to search for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `tagName`.\n */\nfunction getElementsByTagName(tagName, nodes, recurse, limit) {\n    if (recurse === void 0) { recurse = true; }\n    if (limit === void 0) { limit = Infinity; }\n    return (0, querying_1.filter)(Checks.tag_name(tagName), nodes, recurse, limit);\n}\nexports.getElementsByTagName = getElementsByTagName;\n/**\n * @param type Element type to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `type`.\n */\nfunction getElementsByTagType(type, nodes, recurse, limit) {\n    if (recurse === void 0) { recurse = true; }\n    if (limit === void 0) { limit = Infinity; }\n    return (0, querying_1.filter)(Checks.tag_type(type), nodes, recurse, limit);\n}\nexports.getElementsByTagType = getElementsByTagType;\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/legacy.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/manipulation.js":
/*!***************************************************!*\
  !*** ./node_modules/domutils/lib/manipulation.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;\n/**\n * Remove an element from the dom\n *\n * @param elem The element to be removed\n */\nfunction removeElement(elem) {\n    if (elem.prev)\n        elem.prev.next = elem.next;\n    if (elem.next)\n        elem.next.prev = elem.prev;\n    if (elem.parent) {\n        var childs = elem.parent.children;\n        childs.splice(childs.lastIndexOf(elem), 1);\n    }\n}\nexports.removeElement = removeElement;\n/**\n * Replace an element in the dom\n *\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */\nfunction replaceElement(elem, replacement) {\n    var prev = (replacement.prev = elem.prev);\n    if (prev) {\n        prev.next = replacement;\n    }\n    var next = (replacement.next = elem.next);\n    if (next) {\n        next.prev = replacement;\n    }\n    var parent = (replacement.parent = elem.parent);\n    if (parent) {\n        var childs = parent.children;\n        childs[childs.lastIndexOf(elem)] = replacement;\n    }\n}\nexports.replaceElement = replaceElement;\n/**\n * Append a child to an element.\n *\n * @param elem The element to append to.\n * @param child The element to be added as a child.\n */\nfunction appendChild(elem, child) {\n    removeElement(child);\n    child.next = null;\n    child.parent = elem;\n    if (elem.children.push(child) > 1) {\n        var sibling = elem.children[elem.children.length - 2];\n        sibling.next = child;\n        child.prev = sibling;\n    }\n    else {\n        child.prev = null;\n    }\n}\nexports.appendChild = appendChild;\n/**\n * Append an element after another.\n *\n * @param elem The element to append after.\n * @param next The element be added.\n */\nfunction append(elem, next) {\n    removeElement(next);\n    var parent = elem.parent;\n    var currNext = elem.next;\n    next.next = currNext;\n    next.prev = elem;\n    elem.next = next;\n    next.parent = parent;\n    if (currNext) {\n        currNext.prev = next;\n        if (parent) {\n            var childs = parent.children;\n            childs.splice(childs.lastIndexOf(currNext), 0, next);\n        }\n    }\n    else if (parent) {\n        parent.children.push(next);\n    }\n}\nexports.append = append;\n/**\n * Prepend a child to an element.\n *\n * @param elem The element to prepend before.\n * @param child The element to be added as a child.\n */\nfunction prependChild(elem, child) {\n    removeElement(child);\n    child.parent = elem;\n    child.prev = null;\n    if (elem.children.unshift(child) !== 1) {\n        var sibling = elem.children[1];\n        sibling.prev = child;\n        child.next = sibling;\n    }\n    else {\n        child.next = null;\n    }\n}\nexports.prependChild = prependChild;\n/**\n * Prepend an element before another.\n *\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */\nfunction prepend(elem, prev) {\n    removeElement(prev);\n    var parent = elem.parent;\n    if (parent) {\n        var childs = parent.children;\n        childs.splice(childs.indexOf(elem), 0, prev);\n    }\n    if (elem.prev) {\n        elem.prev.next = prev;\n    }\n    prev.parent = parent;\n    prev.prev = elem.prev;\n    prev.next = elem;\n    elem.prev = prev;\n}\nexports.prepend = prepend;\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/manipulation.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/querying.js":
/*!***********************************************!*\
  !*** ./node_modules/domutils/lib/querying.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction filter(test, node, recurse, limit) {\n    if (recurse === void 0) { recurse = true; }\n    if (limit === void 0) { limit = Infinity; }\n    if (!Array.isArray(node))\n        node = [node];\n    return find(test, node, recurse, limit);\n}\nexports.filter = filter;\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction find(test, nodes, recurse, limit) {\n    var result = [];\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n        var elem = nodes_1[_i];\n        if (test(elem)) {\n            result.push(elem);\n            if (--limit <= 0)\n                break;\n        }\n        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n            var children = find(test, elem.children, recurse, limit);\n            result.push.apply(result, children);\n            limit -= children.length;\n            if (limit <= 0)\n                break;\n        }\n    }\n    return result;\n}\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n */\nfunction findOneChild(test, nodes) {\n    return nodes.find(test);\n}\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\nfunction findOne(test, nodes, recurse) {\n    if (recurse === void 0) { recurse = true; }\n    var elem = null;\n    for (var i = 0; i < nodes.length && !elem; i++) {\n        var checked = nodes[i];\n        if (!(0, domhandler_1.isTag)(checked)) {\n            continue;\n        }\n        else if (test(checked)) {\n            elem = checked;\n        }\n        else if (recurse && checked.children.length > 0) {\n            elem = findOne(test, checked.children);\n        }\n    }\n    return elem;\n}\nexports.findOne = findOne;\n/**\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing a test.\n */\nfunction existsOne(test, nodes) {\n    return nodes.some(function (checked) {\n        return (0, domhandler_1.isTag)(checked) &&\n            (test(checked) ||\n                (checked.children.length > 0 &&\n                    existsOne(test, checked.children)));\n    });\n}\nexports.existsOne = existsOne;\n/**\n * Search and array of nodes and its children for nodes passing a test function.\n *\n * Same as `find`, only with less options, leading to reduced complexity.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nfunction findAll(test, nodes) {\n    var _a;\n    var result = [];\n    var stack = nodes.filter(domhandler_1.isTag);\n    var elem;\n    while ((elem = stack.shift())) {\n        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);\n        if (children && children.length > 0) {\n            stack.unshift.apply(stack, children);\n        }\n        if (test(elem))\n            result.push(elem);\n    }\n    return result;\n}\nexports.findAll = findAll;\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/querying.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/stringify.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/stringify.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\nvar dom_serializer_1 = __importDefault(__webpack_require__(/*! dom-serializer */ \"./node_modules/dom-serializer/lib/index.js\"));\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"./node_modules/domelementtype/lib/index.js\");\n/**\n * @param node Node to get the outer HTML of.\n * @param options Options for serialization.\n * @deprecated Use the `dom-serializer` module directly.\n * @returns `node`'s outer HTML.\n */\nfunction getOuterHTML(node, options) {\n    return (0, dom_serializer_1.default)(node, options);\n}\nexports.getOuterHTML = getOuterHTML;\n/**\n * @param node Node to get the inner HTML of.\n * @param options Options for serialization.\n * @deprecated Use the `dom-serializer` module directly.\n * @returns `node`'s inner HTML.\n */\nfunction getInnerHTML(node, options) {\n    return (0, domhandler_1.hasChildren)(node)\n        ? node.children.map(function (node) { return getOuterHTML(node, options); }).join(\"\")\n        : \"\";\n}\nexports.getInnerHTML = getInnerHTML;\n/**\n * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.\n *\n * @deprecated Use `textContent` instead.\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n */\nfunction getText(node) {\n    if (Array.isArray(node))\n        return node.map(getText).join(\"\");\n    if ((0, domhandler_1.isTag)(node))\n        return node.name === \"br\" ? \"\\n\" : getText(node.children);\n    if ((0, domhandler_1.isCDATA)(node))\n        return getText(node.children);\n    if ((0, domhandler_1.isText)(node))\n        return node.data;\n    return \"\";\n}\nexports.getText = getText;\n/**\n * Get a node's text content.\n *\n * @param node Node to get the text content of.\n * @returns `node`'s text content.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n */\nfunction textContent(node) {\n    if (Array.isArray(node))\n        return node.map(textContent).join(\"\");\n    if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {\n        return textContent(node.children);\n    }\n    if ((0, domhandler_1.isText)(node))\n        return node.data;\n    return \"\";\n}\nexports.textContent = textContent;\n/**\n * Get a node's inner text.\n *\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n */\nfunction innerText(node) {\n    if (Array.isArray(node))\n        return node.map(innerText).join(\"\");\n    if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {\n        return innerText(node.children);\n    }\n    if ((0, domhandler_1.isText)(node))\n        return node.data;\n    return \"\";\n}\nexports.innerText = innerText;\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/stringify.js?");

/***/ }),

/***/ "./node_modules/domutils/lib/traversal.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/traversal.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\nvar emptyArray = [];\n/**\n * Get a node's children.\n *\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */\nfunction getChildren(elem) {\n    var _a;\n    return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;\n}\nexports.getChildren = getChildren;\n/**\n * Get a node's parent.\n *\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node.\n */\nfunction getParent(elem) {\n    return elem.parent || null;\n}\nexports.getParent = getParent;\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first.\n * If we don't have a parent (the element is a root node),\n * we walk the element's `prev` & `next` to get all remaining nodes.\n *\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings.\n */\nfunction getSiblings(elem) {\n    var _a, _b;\n    var parent = getParent(elem);\n    if (parent != null)\n        return getChildren(parent);\n    var siblings = [elem];\n    var prev = elem.prev, next = elem.next;\n    while (prev != null) {\n        siblings.unshift(prev);\n        (_a = prev, prev = _a.prev);\n    }\n    while (next != null) {\n        siblings.push(next);\n        (_b = next, next = _b.next);\n    }\n    return siblings;\n}\nexports.getSiblings = getSiblings;\n/**\n * Gets an attribute from an element.\n *\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */\nfunction getAttributeValue(elem, name) {\n    var _a;\n    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\nexports.getAttributeValue = getAttributeValue;\n/**\n * Checks whether an element has an attribute.\n *\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */\nfunction hasAttrib(elem, name) {\n    return (elem.attribs != null &&\n        Object.prototype.hasOwnProperty.call(elem.attribs, name) &&\n        elem.attribs[name] != null);\n}\nexports.hasAttrib = hasAttrib;\n/**\n * Get the tag name of an element.\n *\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */\nfunction getName(elem) {\n    return elem.name;\n}\nexports.getName = getName;\n/**\n * Returns the next element sibling of a node.\n *\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag.\n */\nfunction nextElementSibling(elem) {\n    var _a;\n    var next = elem.next;\n    while (next !== null && !(0, domhandler_1.isTag)(next))\n        (_a = next, next = _a.next);\n    return next;\n}\nexports.nextElementSibling = nextElementSibling;\n/**\n * Returns the previous element sibling of a node.\n *\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag.\n */\nfunction prevElementSibling(elem) {\n    var _a;\n    var prev = elem.prev;\n    while (prev !== null && !(0, domhandler_1.isTag)(prev))\n        (_a = prev, prev = _a.prev);\n    return prev;\n}\nexports.prevElementSibling = prevElementSibling;\n\n\n//# sourceURL=webpack:///./node_modules/domutils/lib/traversal.js?");

/***/ }),

/***/ "./node_modules/entities/lib/decode.js":
/*!*********************************************!*\
  !*** ./node_modules/entities/lib/decode.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;\nvar entities_json_1 = __importDefault(__webpack_require__(/*! ./maps/entities.json */ \"./node_modules/entities/lib/maps/entities.json\"));\nvar legacy_json_1 = __importDefault(__webpack_require__(/*! ./maps/legacy.json */ \"./node_modules/entities/lib/maps/legacy.json\"));\nvar xml_json_1 = __importDefault(__webpack_require__(/*! ./maps/xml.json */ \"./node_modules/entities/lib/maps/xml.json\"));\nvar decode_codepoint_1 = __importDefault(__webpack_require__(/*! ./decode_codepoint */ \"./node_modules/entities/lib/decode_codepoint.js\"));\nvar strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\\da-fA-F]+|#\\d+);/g;\nexports.decodeXML = getStrictDecoder(xml_json_1.default);\nexports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);\nfunction getStrictDecoder(map) {\n    var replace = getReplacer(map);\n    return function (str) { return String(str).replace(strictEntityRe, replace); };\n}\nvar sorter = function (a, b) { return (a < b ? 1 : -1); };\nexports.decodeHTML = (function () {\n    var legacy = Object.keys(legacy_json_1.default).sort(sorter);\n    var keys = Object.keys(entities_json_1.default).sort(sorter);\n    for (var i = 0, j = 0; i < keys.length; i++) {\n        if (legacy[j] === keys[i]) {\n            keys[i] += \";?\";\n            j++;\n        }\n        else {\n            keys[i] += \";\";\n        }\n    }\n    var re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\");\n    var replace = getReplacer(entities_json_1.default);\n    function replacer(str) {\n        if (str.substr(-1) !== \";\")\n            str += \";\";\n        return replace(str);\n    }\n    // TODO consider creating a merged map\n    return function (str) { return String(str).replace(re, replacer); };\n})();\nfunction getReplacer(map) {\n    return function replace(str) {\n        if (str.charAt(1) === \"#\") {\n            var secondChar = str.charAt(2);\n            if (secondChar === \"X\" || secondChar === \"x\") {\n                return decode_codepoint_1.default(parseInt(str.substr(3), 16));\n            }\n            return decode_codepoint_1.default(parseInt(str.substr(2), 10));\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        return map[str.slice(1, -1)] || str;\n    };\n}\n\n\n//# sourceURL=webpack:///./node_modules/entities/lib/decode.js?");

/***/ }),

/***/ "./node_modules/entities/lib/decode_codepoint.js":
/*!*******************************************************!*\
  !*** ./node_modules/entities/lib/decode_codepoint.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_json_1 = __importDefault(__webpack_require__(/*! ./maps/decode.json */ \"./node_modules/entities/lib/maps/decode.json\"));\n// Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nvar fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.fromCodePoint ||\n    function (codePoint) {\n        var output = \"\";\n        if (codePoint > 0xffff) {\n            codePoint -= 0x10000;\n            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n            codePoint = 0xdc00 | (codePoint & 0x3ff);\n        }\n        output += String.fromCharCode(codePoint);\n        return output;\n    };\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n    if (codePoint in decode_json_1.default) {\n        codePoint = decode_json_1.default[codePoint];\n    }\n    return fromCodePoint(codePoint);\n}\nexports.default = decodeCodePoint;\n\n\n//# sourceURL=webpack:///./node_modules/entities/lib/decode_codepoint.js?");

/***/ }),

/***/ "./node_modules/entities/lib/encode.js":
/*!*********************************************!*\
  !*** ./node_modules/entities/lib/encode.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(__webpack_require__(/*! ./maps/xml.json */ \"./node_modules/entities/lib/maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeXML = getASCIIEncoder(inverseXML);\nvar entities_json_1 = __importDefault(__webpack_require__(/*! ./maps/entities.json */ \"./node_modules/entities/lib/maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\n/**\n * Encodes all entities and non-ASCII characters in the input.\n *\n * This includes characters that are valid ASCII characters in HTML documents.\n * For example `#` will be encoded as `&num;`. To get a more compact output,\n * consider using the `encodeNonAsciiHTML` function.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\n// /[^\\0-\\x7F]/gu\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nvar getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        function (str) { return str.codePointAt(0); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c) {\n            return (c.charCodeAt(0) - 0xd800) * 0x400 +\n                c.charCodeAt(1) -\n                0xdc00 +\n                0x10000;\n        };\nfunction singleCharReplacer(c) {\n    return \"&#x\" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))\n        .toString(16)\n        .toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reEscapeChars = new RegExp(xmlReplacer.source + \"|\" + reNonASCII.source, \"g\");\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nfunction escape(data) {\n    return data.replace(reEscapeChars, singleCharReplacer);\n}\nexports.escape = escape;\n/**\n * Encodes all characters not valid in XML documents using numeric hexadecimal\n * reference (eg. `&#xfc;`).\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nfunction escapeUTF8(data) {\n    return data.replace(xmlReplacer, singleCharReplacer);\n}\nexports.escapeUTF8 = escapeUTF8;\nfunction getASCIIEncoder(obj) {\n    return function (data) {\n        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });\n    };\n}\n\n\n//# sourceURL=webpack:///./node_modules/entities/lib/encode.js?");

/***/ }),

/***/ "./node_modules/entities/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/entities/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;\nvar decode_1 = __webpack_require__(/*! ./decode */ \"./node_modules/entities/lib/decode.js\");\nvar encode_1 = __webpack_require__(/*! ./encode */ \"./node_modules/entities/lib/encode.js\");\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `decodeXML` or `decodeHTML` directly.\n */\nfunction decode(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);\n}\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.\n */\nfunction decodeStrict(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);\n}\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.\n */\nfunction encode(data, level) {\n    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);\n}\nexports.encode = encode;\nvar encode_2 = __webpack_require__(/*! ./encode */ \"./node_modules/entities/lib/encode.js\");\nObject.defineProperty(exports, \"encodeXML\", { enumerable: true, get: function () { return encode_2.encodeXML; } });\nObject.defineProperty(exports, \"encodeHTML\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeNonAsciiHTML\", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return encode_2.escape; } });\nObject.defineProperty(exports, \"escapeUTF8\", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"encodeHTML4\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeHTML5\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nvar decode_2 = __webpack_require__(/*! ./decode */ \"./node_modules/entities/lib/decode.js\");\nObject.defineProperty(exports, \"decodeXML\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\nObject.defineProperty(exports, \"decodeHTML\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTMLStrict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"decodeHTML4\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML5\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML4Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeHTML5Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeXMLStrict\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\n\n\n//# sourceURL=webpack:///./node_modules/entities/lib/index.js?");

/***/ }),

/***/ "./node_modules/entities/lib/maps/decode.json":
/*!****************************************************!*\
  !*** ./node_modules/entities/lib/maps/decode.json ***!
  \****************************************************/
/*! exports provided: 0, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"0\\\":65533,\\\"128\\\":8364,\\\"130\\\":8218,\\\"131\\\":402,\\\"132\\\":8222,\\\"133\\\":8230,\\\"134\\\":8224,\\\"135\\\":8225,\\\"136\\\":710,\\\"137\\\":8240,\\\"138\\\":352,\\\"139\\\":8249,\\\"140\\\":338,\\\"142\\\":381,\\\"145\\\":8216,\\\"146\\\":8217,\\\"147\\\":8220,\\\"148\\\":8221,\\\"149\\\":8226,\\\"150\\\":8211,\\\"151\\\":8212,\\\"152\\\":732,\\\"153\\\":8482,\\\"154\\\":353,\\\"155\\\":8250,\\\"156\\\":339,\\\"158\\\":382,\\\"159\\\":376}\");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/decode.json?");

/***/ }),

/***/ "./node_modules/entities/lib/maps/entities.json":
/*!******************************************************!*\
  !*** ./node_modules/entities/lib/maps/entities.json ***!
  \******************************************************/
/*! exports provided: Aacute, aacute, Abreve, abreve, ac, acd, acE, Acirc, acirc, acute, Acy, acy, AElig, aelig, af, Afr, afr, Agrave, agrave, alefsym, aleph, Alpha, alpha, Amacr, amacr, amalg, amp, AMP, andand, And, and, andd, andslope, andv, ang, ange, angle, angmsdaa, angmsdab, angmsdac, angmsdad, angmsdae, angmsdaf, angmsdag, angmsdah, angmsd, angrt, angrtvb, angrtvbd, angsph, angst, angzarr, Aogon, aogon, Aopf, aopf, apacir, ap, apE, ape, apid, apos, ApplyFunction, approx, approxeq, Aring, aring, Ascr, ascr, Assign, ast, asymp, asympeq, Atilde, atilde, Auml, auml, awconint, awint, backcong, backepsilon, backprime, backsim, backsimeq, Backslash, Barv, barvee, barwed, Barwed, barwedge, bbrk, bbrktbrk, bcong, Bcy, bcy, bdquo, becaus, because, Because, bemptyv, bepsi, bernou, Bernoullis, Beta, beta, beth, between, Bfr, bfr, bigcap, bigcirc, bigcup, bigodot, bigoplus, bigotimes, bigsqcup, bigstar, bigtriangledown, bigtriangleup, biguplus, bigvee, bigwedge, bkarow, blacklozenge, blacksquare, blacktriangle, blacktriangledown, blacktriangleleft, blacktriangleright, blank, blk12, blk14, blk34, block, bne, bnequiv, bNot, bnot, Bopf, bopf, bot, bottom, bowtie, boxbox, boxdl, boxdL, boxDl, boxDL, boxdr, boxdR, boxDr, boxDR, boxh, boxH, boxhd, boxHd, boxhD, boxHD, boxhu, boxHu, boxhU, boxHU, boxminus, boxplus, boxtimes, boxul, boxuL, boxUl, boxUL, boxur, boxuR, boxUr, boxUR, boxv, boxV, boxvh, boxvH, boxVh, boxVH, boxvl, boxvL, boxVl, boxVL, boxvr, boxvR, boxVr, boxVR, bprime, breve, Breve, brvbar, bscr, Bscr, bsemi, bsim, bsime, bsolb, bsol, bsolhsub, bull, bullet, bump, bumpE, bumpe, Bumpeq, bumpeq, Cacute, cacute, capand, capbrcup, capcap, cap, Cap, capcup, capdot, CapitalDifferentialD, caps, caret, caron, Cayleys, ccaps, Ccaron, ccaron, Ccedil, ccedil, Ccirc, ccirc, Cconint, ccups, ccupssm, Cdot, cdot, cedil, Cedilla, cemptyv, cent, centerdot, CenterDot, cfr, Cfr, CHcy, chcy, check, checkmark, Chi, chi, circ, circeq, circlearrowleft, circlearrowright, circledast, circledcirc, circleddash, CircleDot, circledR, circledS, CircleMinus, CirclePlus, CircleTimes, cir, cirE, cire, cirfnint, cirmid, cirscir, ClockwiseContourIntegral, CloseCurlyDoubleQuote, CloseCurlyQuote, clubs, clubsuit, colon, Colon, Colone, colone, coloneq, comma, commat, comp, compfn, complement, complexes, cong, congdot, Congruent, conint, Conint, ContourIntegral, copf, Copf, coprod, Coproduct, copy, COPY, copysr, CounterClockwiseContourIntegral, crarr, cross, Cross, Cscr, cscr, csub, csube, csup, csupe, ctdot, cudarrl, cudarrr, cuepr, cuesc, cularr, cularrp, cupbrcap, cupcap, CupCap, cup, Cup, cupcup, cupdot, cupor, cups, curarr, curarrm, curlyeqprec, curlyeqsucc, curlyvee, curlywedge, curren, curvearrowleft, curvearrowright, cuvee, cuwed, cwconint, cwint, cylcty, dagger, Dagger, daleth, darr, Darr, dArr, dash, Dashv, dashv, dbkarow, dblac, Dcaron, dcaron, Dcy, dcy, ddagger, ddarr, DD, dd, DDotrahd, ddotseq, deg, Del, Delta, delta, demptyv, dfisht, Dfr, dfr, dHar, dharl, dharr, DiacriticalAcute, DiacriticalDot, DiacriticalDoubleAcute, DiacriticalGrave, DiacriticalTilde, diam, diamond, Diamond, diamondsuit, diams, die, DifferentialD, digamma, disin, div, divide, divideontimes, divonx, DJcy, djcy, dlcorn, dlcrop, dollar, Dopf, dopf, Dot, dot, DotDot, doteq, doteqdot, DotEqual, dotminus, dotplus, dotsquare, doublebarwedge, DoubleContourIntegral, DoubleDot, DoubleDownArrow, DoubleLeftArrow, DoubleLeftRightArrow, DoubleLeftTee, DoubleLongLeftArrow, DoubleLongLeftRightArrow, DoubleLongRightArrow, DoubleRightArrow, DoubleRightTee, DoubleUpArrow, DoubleUpDownArrow, DoubleVerticalBar, DownArrowBar, downarrow, DownArrow, Downarrow, DownArrowUpArrow, DownBreve, downdownarrows, downharpoonleft, downharpoonright, DownLeftRightVector, DownLeftTeeVector, DownLeftVectorBar, DownLeftVector, DownRightTeeVector, DownRightVectorBar, DownRightVector, DownTeeArrow, DownTee, drbkarow, drcorn, drcrop, Dscr, dscr, DScy, dscy, dsol, Dstrok, dstrok, dtdot, dtri, dtrif, duarr, duhar, dwangle, DZcy, dzcy, dzigrarr, Eacute, eacute, easter, Ecaron, ecaron, Ecirc, ecirc, ecir, ecolon, Ecy, ecy, eDDot, Edot, edot, eDot, ee, efDot, Efr, efr, eg, Egrave, egrave, egs, egsdot, el, Element, elinters, ell, els, elsdot, Emacr, emacr, empty, emptyset, EmptySmallSquare, emptyv, EmptyVerySmallSquare, emsp13, emsp14, emsp, ENG, eng, ensp, Eogon, eogon, Eopf, eopf, epar, eparsl, eplus, epsi, Epsilon, epsilon, epsiv, eqcirc, eqcolon, eqsim, eqslantgtr, eqslantless, Equal, equals, EqualTilde, equest, Equilibrium, equiv, equivDD, eqvparsl, erarr, erDot, escr, Escr, esdot, Esim, esim, Eta, eta, ETH, eth, Euml, euml, euro, excl, exist, Exists, expectation, exponentiale, ExponentialE, fallingdotseq, Fcy, fcy, female, ffilig, fflig, ffllig, Ffr, ffr, filig, FilledSmallSquare, FilledVerySmallSquare, fjlig, flat, fllig, fltns, fnof, Fopf, fopf, forall, ForAll, fork, forkv, Fouriertrf, fpartint, frac12, frac13, frac14, frac15, frac16, frac18, frac23, frac25, frac34, frac35, frac38, frac45, frac56, frac58, frac78, frasl, frown, fscr, Fscr, gacute, Gamma, gamma, Gammad, gammad, gap, Gbreve, gbreve, Gcedil, Gcirc, gcirc, Gcy, gcy, Gdot, gdot, ge, gE, gEl, gel, geq, geqq, geqslant, gescc, ges, gesdot, gesdoto, gesdotol, gesl, gesles, Gfr, gfr, gg, Gg, ggg, gimel, GJcy, gjcy, gla, gl, glE, glj, gnap, gnapprox, gne, gnE, gneq, gneqq, gnsim, Gopf, gopf, grave, GreaterEqual, GreaterEqualLess, GreaterFullEqual, GreaterGreater, GreaterLess, GreaterSlantEqual, GreaterTilde, Gscr, gscr, gsim, gsime, gsiml, gtcc, gtcir, gt, GT, Gt, gtdot, gtlPar, gtquest, gtrapprox, gtrarr, gtrdot, gtreqless, gtreqqless, gtrless, gtrsim, gvertneqq, gvnE, Hacek, hairsp, half, hamilt, HARDcy, hardcy, harrcir, harr, hArr, harrw, Hat, hbar, Hcirc, hcirc, hearts, heartsuit, hellip, hercon, hfr, Hfr, HilbertSpace, hksearow, hkswarow, hoarr, homtht, hookleftarrow, hookrightarrow, hopf, Hopf, horbar, HorizontalLine, hscr, Hscr, hslash, Hstrok, hstrok, HumpDownHump, HumpEqual, hybull, hyphen, Iacute, iacute, ic, Icirc, icirc, Icy, icy, Idot, IEcy, iecy, iexcl, iff, ifr, Ifr, Igrave, igrave, ii, iiiint, iiint, iinfin, iiota, IJlig, ijlig, Imacr, imacr, image, ImaginaryI, imagline, imagpart, imath, Im, imof, imped, Implies, incare, in, infin, infintie, inodot, intcal, int, Int, integers, Integral, intercal, Intersection, intlarhk, intprod, InvisibleComma, InvisibleTimes, IOcy, iocy, Iogon, iogon, Iopf, iopf, Iota, iota, iprod, iquest, iscr, Iscr, isin, isindot, isinE, isins, isinsv, isinv, it, Itilde, itilde, Iukcy, iukcy, Iuml, iuml, Jcirc, jcirc, Jcy, jcy, Jfr, jfr, jmath, Jopf, jopf, Jscr, jscr, Jsercy, jsercy, Jukcy, jukcy, Kappa, kappa, kappav, Kcedil, kcedil, Kcy, kcy, Kfr, kfr, kgreen, KHcy, khcy, KJcy, kjcy, Kopf, kopf, Kscr, kscr, lAarr, Lacute, lacute, laemptyv, lagran, Lambda, lambda, lang, Lang, langd, langle, lap, Laplacetrf, laquo, larrb, larrbfs, larr, Larr, lArr, larrfs, larrhk, larrlp, larrpl, larrsim, larrtl, latail, lAtail, lat, late, lates, lbarr, lBarr, lbbrk, lbrace, lbrack, lbrke, lbrksld, lbrkslu, Lcaron, lcaron, Lcedil, lcedil, lceil, lcub, Lcy, lcy, ldca, ldquo, ldquor, ldrdhar, ldrushar, ldsh, le, lE, LeftAngleBracket, LeftArrowBar, leftarrow, LeftArrow, Leftarrow, LeftArrowRightArrow, leftarrowtail, LeftCeiling, LeftDoubleBracket, LeftDownTeeVector, LeftDownVectorBar, LeftDownVector, LeftFloor, leftharpoondown, leftharpoonup, leftleftarrows, leftrightarrow, LeftRightArrow, Leftrightarrow, leftrightarrows, leftrightharpoons, leftrightsquigarrow, LeftRightVector, LeftTeeArrow, LeftTee, LeftTeeVector, leftthreetimes, LeftTriangleBar, LeftTriangle, LeftTriangleEqual, LeftUpDownVector, LeftUpTeeVector, LeftUpVectorBar, LeftUpVector, LeftVectorBar, LeftVector, lEg, leg, leq, leqq, leqslant, lescc, les, lesdot, lesdoto, lesdotor, lesg, lesges, lessapprox, lessdot, lesseqgtr, lesseqqgtr, LessEqualGreater, LessFullEqual, LessGreater, lessgtr, LessLess, lesssim, LessSlantEqual, LessTilde, lfisht, lfloor, Lfr, lfr, lg, lgE, lHar, lhard, lharu, lharul, lhblk, LJcy, ljcy, llarr, ll, Ll, llcorner, Lleftarrow, llhard, lltri, Lmidot, lmidot, lmoustache, lmoust, lnap, lnapprox, lne, lnE, lneq, lneqq, lnsim, loang, loarr, lobrk, longleftarrow, LongLeftArrow, Longleftarrow, longleftrightarrow, LongLeftRightArrow, Longleftrightarrow, longmapsto, longrightarrow, LongRightArrow, Longrightarrow, looparrowleft, looparrowright, lopar, Lopf, lopf, loplus, lotimes, lowast, lowbar, LowerLeftArrow, LowerRightArrow, loz, lozenge, lozf, lpar, lparlt, lrarr, lrcorner, lrhar, lrhard, lrm, lrtri, lsaquo, lscr, Lscr, lsh, Lsh, lsim, lsime, lsimg, lsqb, lsquo, lsquor, Lstrok, lstrok, ltcc, ltcir, lt, LT, Lt, ltdot, lthree, ltimes, ltlarr, ltquest, ltri, ltrie, ltrif, ltrPar, lurdshar, luruhar, lvertneqq, lvnE, macr, male, malt, maltese, Map, map, mapsto, mapstodown, mapstoleft, mapstoup, marker, mcomma, Mcy, mcy, mdash, mDDot, measuredangle, MediumSpace, Mellintrf, Mfr, mfr, mho, micro, midast, midcir, mid, middot, minusb, minus, minusd, minusdu, MinusPlus, mlcp, mldr, mnplus, models, Mopf, mopf, mp, mscr, Mscr, mstpos, Mu, mu, multimap, mumap, nabla, Nacute, nacute, nang, nap, napE, napid, napos, napprox, natural, naturals, natur, nbsp, nbump, nbumpe, ncap, Ncaron, ncaron, Ncedil, ncedil, ncong, ncongdot, ncup, Ncy, ncy, ndash, nearhk, nearr, neArr, nearrow, ne, nedot, NegativeMediumSpace, NegativeThickSpace, NegativeThinSpace, NegativeVeryThinSpace, nequiv, nesear, nesim, NestedGreaterGreater, NestedLessLess, NewLine, nexist, nexists, Nfr, nfr, ngE, nge, ngeq, ngeqq, ngeqslant, nges, nGg, ngsim, nGt, ngt, ngtr, nGtv, nharr, nhArr, nhpar, ni, nis, nisd, niv, NJcy, njcy, nlarr, nlArr, nldr, nlE, nle, nleftarrow, nLeftarrow, nleftrightarrow, nLeftrightarrow, nleq, nleqq, nleqslant, nles, nless, nLl, nlsim, nLt, nlt, nltri, nltrie, nLtv, nmid, NoBreak, NonBreakingSpace, nopf, Nopf, Not, not, NotCongruent, NotCupCap, NotDoubleVerticalBar, NotElement, NotEqual, NotEqualTilde, NotExists, NotGreater, NotGreaterEqual, NotGreaterFullEqual, NotGreaterGreater, NotGreaterLess, NotGreaterSlantEqual, NotGreaterTilde, NotHumpDownHump, NotHumpEqual, notin, notindot, notinE, notinva, notinvb, notinvc, NotLeftTriangleBar, NotLeftTriangle, NotLeftTriangleEqual, NotLess, NotLessEqual, NotLessGreater, NotLessLess, NotLessSlantEqual, NotLessTilde, NotNestedGreaterGreater, NotNestedLessLess, notni, notniva, notnivb, notnivc, NotPrecedes, NotPrecedesEqual, NotPrecedesSlantEqual, NotReverseElement, NotRightTriangleBar, NotRightTriangle, NotRightTriangleEqual, NotSquareSubset, NotSquareSubsetEqual, NotSquareSuperset, NotSquareSupersetEqual, NotSubset, NotSubsetEqual, NotSucceeds, NotSucceedsEqual, NotSucceedsSlantEqual, NotSucceedsTilde, NotSuperset, NotSupersetEqual, NotTilde, NotTildeEqual, NotTildeFullEqual, NotTildeTilde, NotVerticalBar, nparallel, npar, nparsl, npart, npolint, npr, nprcue, nprec, npreceq, npre, nrarrc, nrarr, nrArr, nrarrw, nrightarrow, nRightarrow, nrtri, nrtrie, nsc, nsccue, nsce, Nscr, nscr, nshortmid, nshortparallel, nsim, nsime, nsimeq, nsmid, nspar, nsqsube, nsqsupe, nsub, nsubE, nsube, nsubset, nsubseteq, nsubseteqq, nsucc, nsucceq, nsup, nsupE, nsupe, nsupset, nsupseteq, nsupseteqq, ntgl, Ntilde, ntilde, ntlg, ntriangleleft, ntrianglelefteq, ntriangleright, ntrianglerighteq, Nu, nu, num, numero, numsp, nvap, nvdash, nvDash, nVdash, nVDash, nvge, nvgt, nvHarr, nvinfin, nvlArr, nvle, nvlt, nvltrie, nvrArr, nvrtrie, nvsim, nwarhk, nwarr, nwArr, nwarrow, nwnear, Oacute, oacute, oast, Ocirc, ocirc, ocir, Ocy, ocy, odash, Odblac, odblac, odiv, odot, odsold, OElig, oelig, ofcir, Ofr, ofr, ogon, Ograve, ograve, ogt, ohbar, ohm, oint, olarr, olcir, olcross, oline, olt, Omacr, omacr, Omega, omega, Omicron, omicron, omid, ominus, Oopf, oopf, opar, OpenCurlyDoubleQuote, OpenCurlyQuote, operp, oplus, orarr, Or, or, ord, order, orderof, ordf, ordm, origof, oror, orslope, orv, oS, Oscr, oscr, Oslash, oslash, osol, Otilde, otilde, otimesas, Otimes, otimes, Ouml, ouml, ovbar, OverBar, OverBrace, OverBracket, OverParenthesis, para, parallel, par, parsim, parsl, part, PartialD, Pcy, pcy, percnt, period, permil, perp, pertenk, Pfr, pfr, Phi, phi, phiv, phmmat, phone, Pi, pi, pitchfork, piv, planck, planckh, plankv, plusacir, plusb, pluscir, plus, plusdo, plusdu, pluse, PlusMinus, plusmn, plussim, plustwo, pm, Poincareplane, pointint, popf, Popf, pound, prap, Pr, pr, prcue, precapprox, prec, preccurlyeq, Precedes, PrecedesEqual, PrecedesSlantEqual, PrecedesTilde, preceq, precnapprox, precneqq, precnsim, pre, prE, precsim, prime, Prime, primes, prnap, prnE, prnsim, prod, Product, profalar, profline, profsurf, prop, Proportional, Proportion, propto, prsim, prurel, Pscr, pscr, Psi, psi, puncsp, Qfr, qfr, qint, qopf, Qopf, qprime, Qscr, qscr, quaternions, quatint, quest, questeq, quot, QUOT, rAarr, race, Racute, racute, radic, raemptyv, rang, Rang, rangd, range, rangle, raquo, rarrap, rarrb, rarrbfs, rarrc, rarr, Rarr, rArr, rarrfs, rarrhk, rarrlp, rarrpl, rarrsim, Rarrtl, rarrtl, rarrw, ratail, rAtail, ratio, rationals, rbarr, rBarr, RBarr, rbbrk, rbrace, rbrack, rbrke, rbrksld, rbrkslu, Rcaron, rcaron, Rcedil, rcedil, rceil, rcub, Rcy, rcy, rdca, rdldhar, rdquo, rdquor, rdsh, real, realine, realpart, reals, Re, rect, reg, REG, ReverseElement, ReverseEquilibrium, ReverseUpEquilibrium, rfisht, rfloor, rfr, Rfr, rHar, rhard, rharu, rharul, Rho, rho, rhov, RightAngleBracket, RightArrowBar, rightarrow, RightArrow, Rightarrow, RightArrowLeftArrow, rightarrowtail, RightCeiling, RightDoubleBracket, RightDownTeeVector, RightDownVectorBar, RightDownVector, RightFloor, rightharpoondown, rightharpoonup, rightleftarrows, rightleftharpoons, rightrightarrows, rightsquigarrow, RightTeeArrow, RightTee, RightTeeVector, rightthreetimes, RightTriangleBar, RightTriangle, RightTriangleEqual, RightUpDownVector, RightUpTeeVector, RightUpVectorBar, RightUpVector, RightVectorBar, RightVector, ring, risingdotseq, rlarr, rlhar, rlm, rmoustache, rmoust, rnmid, roang, roarr, robrk, ropar, ropf, Ropf, roplus, rotimes, RoundImplies, rpar, rpargt, rppolint, rrarr, Rrightarrow, rsaquo, rscr, Rscr, rsh, Rsh, rsqb, rsquo, rsquor, rthree, rtimes, rtri, rtrie, rtrif, rtriltri, RuleDelayed, ruluhar, rx, Sacute, sacute, sbquo, scap, Scaron, scaron, Sc, sc, sccue, sce, scE, Scedil, scedil, Scirc, scirc, scnap, scnE, scnsim, scpolint, scsim, Scy, scy, sdotb, sdot, sdote, searhk, searr, seArr, searrow, sect, semi, seswar, setminus, setmn, sext, Sfr, sfr, sfrown, sharp, SHCHcy, shchcy, SHcy, shcy, ShortDownArrow, ShortLeftArrow, shortmid, shortparallel, ShortRightArrow, ShortUpArrow, shy, Sigma, sigma, sigmaf, sigmav, sim, simdot, sime, simeq, simg, simgE, siml, simlE, simne, simplus, simrarr, slarr, SmallCircle, smallsetminus, smashp, smeparsl, smid, smile, smt, smte, smtes, SOFTcy, softcy, solbar, solb, sol, Sopf, sopf, spades, spadesuit, spar, sqcap, sqcaps, sqcup, sqcups, Sqrt, sqsub, sqsube, sqsubset, sqsubseteq, sqsup, sqsupe, sqsupset, sqsupseteq, square, Square, SquareIntersection, SquareSubset, SquareSubsetEqual, SquareSuperset, SquareSupersetEqual, SquareUnion, squarf, squ, squf, srarr, Sscr, sscr, ssetmn, ssmile, sstarf, Star, star, starf, straightepsilon, straightphi, strns, sub, Sub, subdot, subE, sube, subedot, submult, subnE, subne, subplus, subrarr, subset, Subset, subseteq, subseteqq, SubsetEqual, subsetneq, subsetneqq, subsim, subsub, subsup, succapprox, succ, succcurlyeq, Succeeds, SucceedsEqual, SucceedsSlantEqual, SucceedsTilde, succeq, succnapprox, succneqq, succnsim, succsim, SuchThat, sum, Sum, sung, sup1, sup2, sup3, sup, Sup, supdot, supdsub, supE, supe, supedot, Superset, SupersetEqual, suphsol, suphsub, suplarr, supmult, supnE, supne, supplus, supset, Supset, supseteq, supseteqq, supsetneq, supsetneqq, supsim, supsub, supsup, swarhk, swarr, swArr, swarrow, swnwar, szlig, Tab, target, Tau, tau, tbrk, Tcaron, tcaron, Tcedil, tcedil, Tcy, tcy, tdot, telrec, Tfr, tfr, there4, therefore, Therefore, Theta, theta, thetasym, thetav, thickapprox, thicksim, ThickSpace, ThinSpace, thinsp, thkap, thksim, THORN, thorn, tilde, Tilde, TildeEqual, TildeFullEqual, TildeTilde, timesbar, timesb, times, timesd, tint, toea, topbot, topcir, top, Topf, topf, topfork, tosa, tprime, trade, TRADE, triangle, triangledown, triangleleft, trianglelefteq, triangleq, triangleright, trianglerighteq, tridot, trie, triminus, TripleDot, triplus, trisb, tritime, trpezium, Tscr, tscr, TScy, tscy, TSHcy, tshcy, Tstrok, tstrok, twixt, twoheadleftarrow, twoheadrightarrow, Uacute, uacute, uarr, Uarr, uArr, Uarrocir, Ubrcy, ubrcy, Ubreve, ubreve, Ucirc, ucirc, Ucy, ucy, udarr, Udblac, udblac, udhar, ufisht, Ufr, ufr, Ugrave, ugrave, uHar, uharl, uharr, uhblk, ulcorn, ulcorner, ulcrop, ultri, Umacr, umacr, uml, UnderBar, UnderBrace, UnderBracket, UnderParenthesis, Union, UnionPlus, Uogon, uogon, Uopf, uopf, UpArrowBar, uparrow, UpArrow, Uparrow, UpArrowDownArrow, updownarrow, UpDownArrow, Updownarrow, UpEquilibrium, upharpoonleft, upharpoonright, uplus, UpperLeftArrow, UpperRightArrow, upsi, Upsi, upsih, Upsilon, upsilon, UpTeeArrow, UpTee, upuparrows, urcorn, urcorner, urcrop, Uring, uring, urtri, Uscr, uscr, utdot, Utilde, utilde, utri, utrif, uuarr, Uuml, uuml, uwangle, vangrt, varepsilon, varkappa, varnothing, varphi, varpi, varpropto, varr, vArr, varrho, varsigma, varsubsetneq, varsubsetneqq, varsupsetneq, varsupsetneqq, vartheta, vartriangleleft, vartriangleright, vBar, Vbar, vBarv, Vcy, vcy, vdash, vDash, Vdash, VDash, Vdashl, veebar, vee, Vee, veeeq, vellip, verbar, Verbar, vert, Vert, VerticalBar, VerticalLine, VerticalSeparator, VerticalTilde, VeryThinSpace, Vfr, vfr, vltri, vnsub, vnsup, Vopf, vopf, vprop, vrtri, Vscr, vscr, vsubnE, vsubne, vsupnE, vsupne, Vvdash, vzigzag, Wcirc, wcirc, wedbar, wedge, Wedge, wedgeq, weierp, Wfr, wfr, Wopf, wopf, wp, wr, wreath, Wscr, wscr, xcap, xcirc, xcup, xdtri, Xfr, xfr, xharr, xhArr, Xi, xi, xlarr, xlArr, xmap, xnis, xodot, Xopf, xopf, xoplus, xotime, xrarr, xrArr, Xscr, xscr, xsqcup, xuplus, xutri, xvee, xwedge, Yacute, yacute, YAcy, yacy, Ycirc, ycirc, Ycy, ycy, yen, Yfr, yfr, YIcy, yicy, Yopf, yopf, Yscr, yscr, YUcy, yucy, yuml, Yuml, Zacute, zacute, Zcaron, zcaron, Zcy, zcy, Zdot, zdot, zeetrf, ZeroWidthSpace, Zeta, zeta, zfr, Zfr, ZHcy, zhcy, zigrarr, zopf, Zopf, Zscr, zscr, zwj, zwnj, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"Aacute\\\":\\\"Á\\\",\\\"aacute\\\":\\\"á\\\",\\\"Abreve\\\":\\\"Ă\\\",\\\"abreve\\\":\\\"ă\\\",\\\"ac\\\":\\\"∾\\\",\\\"acd\\\":\\\"∿\\\",\\\"acE\\\":\\\"∾̳\\\",\\\"Acirc\\\":\\\"Â\\\",\\\"acirc\\\":\\\"â\\\",\\\"acute\\\":\\\"´\\\",\\\"Acy\\\":\\\"А\\\",\\\"acy\\\":\\\"а\\\",\\\"AElig\\\":\\\"Æ\\\",\\\"aelig\\\":\\\"æ\\\",\\\"af\\\":\\\"⁡\\\",\\\"Afr\\\":\\\"𝔄\\\",\\\"afr\\\":\\\"𝔞\\\",\\\"Agrave\\\":\\\"À\\\",\\\"agrave\\\":\\\"à\\\",\\\"alefsym\\\":\\\"ℵ\\\",\\\"aleph\\\":\\\"ℵ\\\",\\\"Alpha\\\":\\\"Α\\\",\\\"alpha\\\":\\\"α\\\",\\\"Amacr\\\":\\\"Ā\\\",\\\"amacr\\\":\\\"ā\\\",\\\"amalg\\\":\\\"⨿\\\",\\\"amp\\\":\\\"&\\\",\\\"AMP\\\":\\\"&\\\",\\\"andand\\\":\\\"⩕\\\",\\\"And\\\":\\\"⩓\\\",\\\"and\\\":\\\"∧\\\",\\\"andd\\\":\\\"⩜\\\",\\\"andslope\\\":\\\"⩘\\\",\\\"andv\\\":\\\"⩚\\\",\\\"ang\\\":\\\"∠\\\",\\\"ange\\\":\\\"⦤\\\",\\\"angle\\\":\\\"∠\\\",\\\"angmsdaa\\\":\\\"⦨\\\",\\\"angmsdab\\\":\\\"⦩\\\",\\\"angmsdac\\\":\\\"⦪\\\",\\\"angmsdad\\\":\\\"⦫\\\",\\\"angmsdae\\\":\\\"⦬\\\",\\\"angmsdaf\\\":\\\"⦭\\\",\\\"angmsdag\\\":\\\"⦮\\\",\\\"angmsdah\\\":\\\"⦯\\\",\\\"angmsd\\\":\\\"∡\\\",\\\"angrt\\\":\\\"∟\\\",\\\"angrtvb\\\":\\\"⊾\\\",\\\"angrtvbd\\\":\\\"⦝\\\",\\\"angsph\\\":\\\"∢\\\",\\\"angst\\\":\\\"Å\\\",\\\"angzarr\\\":\\\"⍼\\\",\\\"Aogon\\\":\\\"Ą\\\",\\\"aogon\\\":\\\"ą\\\",\\\"Aopf\\\":\\\"𝔸\\\",\\\"aopf\\\":\\\"𝕒\\\",\\\"apacir\\\":\\\"⩯\\\",\\\"ap\\\":\\\"≈\\\",\\\"apE\\\":\\\"⩰\\\",\\\"ape\\\":\\\"≊\\\",\\\"apid\\\":\\\"≋\\\",\\\"apos\\\":\\\"'\\\",\\\"ApplyFunction\\\":\\\"⁡\\\",\\\"approx\\\":\\\"≈\\\",\\\"approxeq\\\":\\\"≊\\\",\\\"Aring\\\":\\\"Å\\\",\\\"aring\\\":\\\"å\\\",\\\"Ascr\\\":\\\"𝒜\\\",\\\"ascr\\\":\\\"𝒶\\\",\\\"Assign\\\":\\\"≔\\\",\\\"ast\\\":\\\"*\\\",\\\"asymp\\\":\\\"≈\\\",\\\"asympeq\\\":\\\"≍\\\",\\\"Atilde\\\":\\\"Ã\\\",\\\"atilde\\\":\\\"ã\\\",\\\"Auml\\\":\\\"Ä\\\",\\\"auml\\\":\\\"ä\\\",\\\"awconint\\\":\\\"∳\\\",\\\"awint\\\":\\\"⨑\\\",\\\"backcong\\\":\\\"≌\\\",\\\"backepsilon\\\":\\\"϶\\\",\\\"backprime\\\":\\\"‵\\\",\\\"backsim\\\":\\\"∽\\\",\\\"backsimeq\\\":\\\"⋍\\\",\\\"Backslash\\\":\\\"∖\\\",\\\"Barv\\\":\\\"⫧\\\",\\\"barvee\\\":\\\"⊽\\\",\\\"barwed\\\":\\\"⌅\\\",\\\"Barwed\\\":\\\"⌆\\\",\\\"barwedge\\\":\\\"⌅\\\",\\\"bbrk\\\":\\\"⎵\\\",\\\"bbrktbrk\\\":\\\"⎶\\\",\\\"bcong\\\":\\\"≌\\\",\\\"Bcy\\\":\\\"Б\\\",\\\"bcy\\\":\\\"б\\\",\\\"bdquo\\\":\\\"„\\\",\\\"becaus\\\":\\\"∵\\\",\\\"because\\\":\\\"∵\\\",\\\"Because\\\":\\\"∵\\\",\\\"bemptyv\\\":\\\"⦰\\\",\\\"bepsi\\\":\\\"϶\\\",\\\"bernou\\\":\\\"ℬ\\\",\\\"Bernoullis\\\":\\\"ℬ\\\",\\\"Beta\\\":\\\"Β\\\",\\\"beta\\\":\\\"β\\\",\\\"beth\\\":\\\"ℶ\\\",\\\"between\\\":\\\"≬\\\",\\\"Bfr\\\":\\\"𝔅\\\",\\\"bfr\\\":\\\"𝔟\\\",\\\"bigcap\\\":\\\"⋂\\\",\\\"bigcirc\\\":\\\"◯\\\",\\\"bigcup\\\":\\\"⋃\\\",\\\"bigodot\\\":\\\"⨀\\\",\\\"bigoplus\\\":\\\"⨁\\\",\\\"bigotimes\\\":\\\"⨂\\\",\\\"bigsqcup\\\":\\\"⨆\\\",\\\"bigstar\\\":\\\"★\\\",\\\"bigtriangledown\\\":\\\"▽\\\",\\\"bigtriangleup\\\":\\\"△\\\",\\\"biguplus\\\":\\\"⨄\\\",\\\"bigvee\\\":\\\"⋁\\\",\\\"bigwedge\\\":\\\"⋀\\\",\\\"bkarow\\\":\\\"⤍\\\",\\\"blacklozenge\\\":\\\"⧫\\\",\\\"blacksquare\\\":\\\"▪\\\",\\\"blacktriangle\\\":\\\"▴\\\",\\\"blacktriangledown\\\":\\\"▾\\\",\\\"blacktriangleleft\\\":\\\"◂\\\",\\\"blacktriangleright\\\":\\\"▸\\\",\\\"blank\\\":\\\"␣\\\",\\\"blk12\\\":\\\"▒\\\",\\\"blk14\\\":\\\"░\\\",\\\"blk34\\\":\\\"▓\\\",\\\"block\\\":\\\"█\\\",\\\"bne\\\":\\\"=⃥\\\",\\\"bnequiv\\\":\\\"≡⃥\\\",\\\"bNot\\\":\\\"⫭\\\",\\\"bnot\\\":\\\"⌐\\\",\\\"Bopf\\\":\\\"𝔹\\\",\\\"bopf\\\":\\\"𝕓\\\",\\\"bot\\\":\\\"⊥\\\",\\\"bottom\\\":\\\"⊥\\\",\\\"bowtie\\\":\\\"⋈\\\",\\\"boxbox\\\":\\\"⧉\\\",\\\"boxdl\\\":\\\"┐\\\",\\\"boxdL\\\":\\\"╕\\\",\\\"boxDl\\\":\\\"╖\\\",\\\"boxDL\\\":\\\"╗\\\",\\\"boxdr\\\":\\\"┌\\\",\\\"boxdR\\\":\\\"╒\\\",\\\"boxDr\\\":\\\"╓\\\",\\\"boxDR\\\":\\\"╔\\\",\\\"boxh\\\":\\\"─\\\",\\\"boxH\\\":\\\"═\\\",\\\"boxhd\\\":\\\"┬\\\",\\\"boxHd\\\":\\\"╤\\\",\\\"boxhD\\\":\\\"╥\\\",\\\"boxHD\\\":\\\"╦\\\",\\\"boxhu\\\":\\\"┴\\\",\\\"boxHu\\\":\\\"╧\\\",\\\"boxhU\\\":\\\"╨\\\",\\\"boxHU\\\":\\\"╩\\\",\\\"boxminus\\\":\\\"⊟\\\",\\\"boxplus\\\":\\\"⊞\\\",\\\"boxtimes\\\":\\\"⊠\\\",\\\"boxul\\\":\\\"┘\\\",\\\"boxuL\\\":\\\"╛\\\",\\\"boxUl\\\":\\\"╜\\\",\\\"boxUL\\\":\\\"╝\\\",\\\"boxur\\\":\\\"└\\\",\\\"boxuR\\\":\\\"╘\\\",\\\"boxUr\\\":\\\"╙\\\",\\\"boxUR\\\":\\\"╚\\\",\\\"boxv\\\":\\\"│\\\",\\\"boxV\\\":\\\"║\\\",\\\"boxvh\\\":\\\"┼\\\",\\\"boxvH\\\":\\\"╪\\\",\\\"boxVh\\\":\\\"╫\\\",\\\"boxVH\\\":\\\"╬\\\",\\\"boxvl\\\":\\\"┤\\\",\\\"boxvL\\\":\\\"╡\\\",\\\"boxVl\\\":\\\"╢\\\",\\\"boxVL\\\":\\\"╣\\\",\\\"boxvr\\\":\\\"├\\\",\\\"boxvR\\\":\\\"╞\\\",\\\"boxVr\\\":\\\"╟\\\",\\\"boxVR\\\":\\\"╠\\\",\\\"bprime\\\":\\\"‵\\\",\\\"breve\\\":\\\"˘\\\",\\\"Breve\\\":\\\"˘\\\",\\\"brvbar\\\":\\\"¦\\\",\\\"bscr\\\":\\\"𝒷\\\",\\\"Bscr\\\":\\\"ℬ\\\",\\\"bsemi\\\":\\\"⁏\\\",\\\"bsim\\\":\\\"∽\\\",\\\"bsime\\\":\\\"⋍\\\",\\\"bsolb\\\":\\\"⧅\\\",\\\"bsol\\\":\\\"\\\\\\\\\\\",\\\"bsolhsub\\\":\\\"⟈\\\",\\\"bull\\\":\\\"•\\\",\\\"bullet\\\":\\\"•\\\",\\\"bump\\\":\\\"≎\\\",\\\"bumpE\\\":\\\"⪮\\\",\\\"bumpe\\\":\\\"≏\\\",\\\"Bumpeq\\\":\\\"≎\\\",\\\"bumpeq\\\":\\\"≏\\\",\\\"Cacute\\\":\\\"Ć\\\",\\\"cacute\\\":\\\"ć\\\",\\\"capand\\\":\\\"⩄\\\",\\\"capbrcup\\\":\\\"⩉\\\",\\\"capcap\\\":\\\"⩋\\\",\\\"cap\\\":\\\"∩\\\",\\\"Cap\\\":\\\"⋒\\\",\\\"capcup\\\":\\\"⩇\\\",\\\"capdot\\\":\\\"⩀\\\",\\\"CapitalDifferentialD\\\":\\\"ⅅ\\\",\\\"caps\\\":\\\"∩︀\\\",\\\"caret\\\":\\\"⁁\\\",\\\"caron\\\":\\\"ˇ\\\",\\\"Cayleys\\\":\\\"ℭ\\\",\\\"ccaps\\\":\\\"⩍\\\",\\\"Ccaron\\\":\\\"Č\\\",\\\"ccaron\\\":\\\"č\\\",\\\"Ccedil\\\":\\\"Ç\\\",\\\"ccedil\\\":\\\"ç\\\",\\\"Ccirc\\\":\\\"Ĉ\\\",\\\"ccirc\\\":\\\"ĉ\\\",\\\"Cconint\\\":\\\"∰\\\",\\\"ccups\\\":\\\"⩌\\\",\\\"ccupssm\\\":\\\"⩐\\\",\\\"Cdot\\\":\\\"Ċ\\\",\\\"cdot\\\":\\\"ċ\\\",\\\"cedil\\\":\\\"¸\\\",\\\"Cedilla\\\":\\\"¸\\\",\\\"cemptyv\\\":\\\"⦲\\\",\\\"cent\\\":\\\"¢\\\",\\\"centerdot\\\":\\\"·\\\",\\\"CenterDot\\\":\\\"·\\\",\\\"cfr\\\":\\\"𝔠\\\",\\\"Cfr\\\":\\\"ℭ\\\",\\\"CHcy\\\":\\\"Ч\\\",\\\"chcy\\\":\\\"ч\\\",\\\"check\\\":\\\"✓\\\",\\\"checkmark\\\":\\\"✓\\\",\\\"Chi\\\":\\\"Χ\\\",\\\"chi\\\":\\\"χ\\\",\\\"circ\\\":\\\"ˆ\\\",\\\"circeq\\\":\\\"≗\\\",\\\"circlearrowleft\\\":\\\"↺\\\",\\\"circlearrowright\\\":\\\"↻\\\",\\\"circledast\\\":\\\"⊛\\\",\\\"circledcirc\\\":\\\"⊚\\\",\\\"circleddash\\\":\\\"⊝\\\",\\\"CircleDot\\\":\\\"⊙\\\",\\\"circledR\\\":\\\"®\\\",\\\"circledS\\\":\\\"Ⓢ\\\",\\\"CircleMinus\\\":\\\"⊖\\\",\\\"CirclePlus\\\":\\\"⊕\\\",\\\"CircleTimes\\\":\\\"⊗\\\",\\\"cir\\\":\\\"○\\\",\\\"cirE\\\":\\\"⧃\\\",\\\"cire\\\":\\\"≗\\\",\\\"cirfnint\\\":\\\"⨐\\\",\\\"cirmid\\\":\\\"⫯\\\",\\\"cirscir\\\":\\\"⧂\\\",\\\"ClockwiseContourIntegral\\\":\\\"∲\\\",\\\"CloseCurlyDoubleQuote\\\":\\\"”\\\",\\\"CloseCurlyQuote\\\":\\\"’\\\",\\\"clubs\\\":\\\"♣\\\",\\\"clubsuit\\\":\\\"♣\\\",\\\"colon\\\":\\\":\\\",\\\"Colon\\\":\\\"∷\\\",\\\"Colone\\\":\\\"⩴\\\",\\\"colone\\\":\\\"≔\\\",\\\"coloneq\\\":\\\"≔\\\",\\\"comma\\\":\\\",\\\",\\\"commat\\\":\\\"@\\\",\\\"comp\\\":\\\"∁\\\",\\\"compfn\\\":\\\"∘\\\",\\\"complement\\\":\\\"∁\\\",\\\"complexes\\\":\\\"ℂ\\\",\\\"cong\\\":\\\"≅\\\",\\\"congdot\\\":\\\"⩭\\\",\\\"Congruent\\\":\\\"≡\\\",\\\"conint\\\":\\\"∮\\\",\\\"Conint\\\":\\\"∯\\\",\\\"ContourIntegral\\\":\\\"∮\\\",\\\"copf\\\":\\\"𝕔\\\",\\\"Copf\\\":\\\"ℂ\\\",\\\"coprod\\\":\\\"∐\\\",\\\"Coproduct\\\":\\\"∐\\\",\\\"copy\\\":\\\"©\\\",\\\"COPY\\\":\\\"©\\\",\\\"copysr\\\":\\\"℗\\\",\\\"CounterClockwiseContourIntegral\\\":\\\"∳\\\",\\\"crarr\\\":\\\"↵\\\",\\\"cross\\\":\\\"✗\\\",\\\"Cross\\\":\\\"⨯\\\",\\\"Cscr\\\":\\\"𝒞\\\",\\\"cscr\\\":\\\"𝒸\\\",\\\"csub\\\":\\\"⫏\\\",\\\"csube\\\":\\\"⫑\\\",\\\"csup\\\":\\\"⫐\\\",\\\"csupe\\\":\\\"⫒\\\",\\\"ctdot\\\":\\\"⋯\\\",\\\"cudarrl\\\":\\\"⤸\\\",\\\"cudarrr\\\":\\\"⤵\\\",\\\"cuepr\\\":\\\"⋞\\\",\\\"cuesc\\\":\\\"⋟\\\",\\\"cularr\\\":\\\"↶\\\",\\\"cularrp\\\":\\\"⤽\\\",\\\"cupbrcap\\\":\\\"⩈\\\",\\\"cupcap\\\":\\\"⩆\\\",\\\"CupCap\\\":\\\"≍\\\",\\\"cup\\\":\\\"∪\\\",\\\"Cup\\\":\\\"⋓\\\",\\\"cupcup\\\":\\\"⩊\\\",\\\"cupdot\\\":\\\"⊍\\\",\\\"cupor\\\":\\\"⩅\\\",\\\"cups\\\":\\\"∪︀\\\",\\\"curarr\\\":\\\"↷\\\",\\\"curarrm\\\":\\\"⤼\\\",\\\"curlyeqprec\\\":\\\"⋞\\\",\\\"curlyeqsucc\\\":\\\"⋟\\\",\\\"curlyvee\\\":\\\"⋎\\\",\\\"curlywedge\\\":\\\"⋏\\\",\\\"curren\\\":\\\"¤\\\",\\\"curvearrowleft\\\":\\\"↶\\\",\\\"curvearrowright\\\":\\\"↷\\\",\\\"cuvee\\\":\\\"⋎\\\",\\\"cuwed\\\":\\\"⋏\\\",\\\"cwconint\\\":\\\"∲\\\",\\\"cwint\\\":\\\"∱\\\",\\\"cylcty\\\":\\\"⌭\\\",\\\"dagger\\\":\\\"†\\\",\\\"Dagger\\\":\\\"‡\\\",\\\"daleth\\\":\\\"ℸ\\\",\\\"darr\\\":\\\"↓\\\",\\\"Darr\\\":\\\"↡\\\",\\\"dArr\\\":\\\"⇓\\\",\\\"dash\\\":\\\"‐\\\",\\\"Dashv\\\":\\\"⫤\\\",\\\"dashv\\\":\\\"⊣\\\",\\\"dbkarow\\\":\\\"⤏\\\",\\\"dblac\\\":\\\"˝\\\",\\\"Dcaron\\\":\\\"Ď\\\",\\\"dcaron\\\":\\\"ď\\\",\\\"Dcy\\\":\\\"Д\\\",\\\"dcy\\\":\\\"д\\\",\\\"ddagger\\\":\\\"‡\\\",\\\"ddarr\\\":\\\"⇊\\\",\\\"DD\\\":\\\"ⅅ\\\",\\\"dd\\\":\\\"ⅆ\\\",\\\"DDotrahd\\\":\\\"⤑\\\",\\\"ddotseq\\\":\\\"⩷\\\",\\\"deg\\\":\\\"°\\\",\\\"Del\\\":\\\"∇\\\",\\\"Delta\\\":\\\"Δ\\\",\\\"delta\\\":\\\"δ\\\",\\\"demptyv\\\":\\\"⦱\\\",\\\"dfisht\\\":\\\"⥿\\\",\\\"Dfr\\\":\\\"𝔇\\\",\\\"dfr\\\":\\\"𝔡\\\",\\\"dHar\\\":\\\"⥥\\\",\\\"dharl\\\":\\\"⇃\\\",\\\"dharr\\\":\\\"⇂\\\",\\\"DiacriticalAcute\\\":\\\"´\\\",\\\"DiacriticalDot\\\":\\\"˙\\\",\\\"DiacriticalDoubleAcute\\\":\\\"˝\\\",\\\"DiacriticalGrave\\\":\\\"`\\\",\\\"DiacriticalTilde\\\":\\\"˜\\\",\\\"diam\\\":\\\"⋄\\\",\\\"diamond\\\":\\\"⋄\\\",\\\"Diamond\\\":\\\"⋄\\\",\\\"diamondsuit\\\":\\\"♦\\\",\\\"diams\\\":\\\"♦\\\",\\\"die\\\":\\\"¨\\\",\\\"DifferentialD\\\":\\\"ⅆ\\\",\\\"digamma\\\":\\\"ϝ\\\",\\\"disin\\\":\\\"⋲\\\",\\\"div\\\":\\\"÷\\\",\\\"divide\\\":\\\"÷\\\",\\\"divideontimes\\\":\\\"⋇\\\",\\\"divonx\\\":\\\"⋇\\\",\\\"DJcy\\\":\\\"Ђ\\\",\\\"djcy\\\":\\\"ђ\\\",\\\"dlcorn\\\":\\\"⌞\\\",\\\"dlcrop\\\":\\\"⌍\\\",\\\"dollar\\\":\\\"$\\\",\\\"Dopf\\\":\\\"𝔻\\\",\\\"dopf\\\":\\\"𝕕\\\",\\\"Dot\\\":\\\"¨\\\",\\\"dot\\\":\\\"˙\\\",\\\"DotDot\\\":\\\"⃜\\\",\\\"doteq\\\":\\\"≐\\\",\\\"doteqdot\\\":\\\"≑\\\",\\\"DotEqual\\\":\\\"≐\\\",\\\"dotminus\\\":\\\"∸\\\",\\\"dotplus\\\":\\\"∔\\\",\\\"dotsquare\\\":\\\"⊡\\\",\\\"doublebarwedge\\\":\\\"⌆\\\",\\\"DoubleContourIntegral\\\":\\\"∯\\\",\\\"DoubleDot\\\":\\\"¨\\\",\\\"DoubleDownArrow\\\":\\\"⇓\\\",\\\"DoubleLeftArrow\\\":\\\"⇐\\\",\\\"DoubleLeftRightArrow\\\":\\\"⇔\\\",\\\"DoubleLeftTee\\\":\\\"⫤\\\",\\\"DoubleLongLeftArrow\\\":\\\"⟸\\\",\\\"DoubleLongLeftRightArrow\\\":\\\"⟺\\\",\\\"DoubleLongRightArrow\\\":\\\"⟹\\\",\\\"DoubleRightArrow\\\":\\\"⇒\\\",\\\"DoubleRightTee\\\":\\\"⊨\\\",\\\"DoubleUpArrow\\\":\\\"⇑\\\",\\\"DoubleUpDownArrow\\\":\\\"⇕\\\",\\\"DoubleVerticalBar\\\":\\\"∥\\\",\\\"DownArrowBar\\\":\\\"⤓\\\",\\\"downarrow\\\":\\\"↓\\\",\\\"DownArrow\\\":\\\"↓\\\",\\\"Downarrow\\\":\\\"⇓\\\",\\\"DownArrowUpArrow\\\":\\\"⇵\\\",\\\"DownBreve\\\":\\\"̑\\\",\\\"downdownarrows\\\":\\\"⇊\\\",\\\"downharpoonleft\\\":\\\"⇃\\\",\\\"downharpoonright\\\":\\\"⇂\\\",\\\"DownLeftRightVector\\\":\\\"⥐\\\",\\\"DownLeftTeeVector\\\":\\\"⥞\\\",\\\"DownLeftVectorBar\\\":\\\"⥖\\\",\\\"DownLeftVector\\\":\\\"↽\\\",\\\"DownRightTeeVector\\\":\\\"⥟\\\",\\\"DownRightVectorBar\\\":\\\"⥗\\\",\\\"DownRightVector\\\":\\\"⇁\\\",\\\"DownTeeArrow\\\":\\\"↧\\\",\\\"DownTee\\\":\\\"⊤\\\",\\\"drbkarow\\\":\\\"⤐\\\",\\\"drcorn\\\":\\\"⌟\\\",\\\"drcrop\\\":\\\"⌌\\\",\\\"Dscr\\\":\\\"𝒟\\\",\\\"dscr\\\":\\\"𝒹\\\",\\\"DScy\\\":\\\"Ѕ\\\",\\\"dscy\\\":\\\"ѕ\\\",\\\"dsol\\\":\\\"⧶\\\",\\\"Dstrok\\\":\\\"Đ\\\",\\\"dstrok\\\":\\\"đ\\\",\\\"dtdot\\\":\\\"⋱\\\",\\\"dtri\\\":\\\"▿\\\",\\\"dtrif\\\":\\\"▾\\\",\\\"duarr\\\":\\\"⇵\\\",\\\"duhar\\\":\\\"⥯\\\",\\\"dwangle\\\":\\\"⦦\\\",\\\"DZcy\\\":\\\"Џ\\\",\\\"dzcy\\\":\\\"џ\\\",\\\"dzigrarr\\\":\\\"⟿\\\",\\\"Eacute\\\":\\\"É\\\",\\\"eacute\\\":\\\"é\\\",\\\"easter\\\":\\\"⩮\\\",\\\"Ecaron\\\":\\\"Ě\\\",\\\"ecaron\\\":\\\"ě\\\",\\\"Ecirc\\\":\\\"Ê\\\",\\\"ecirc\\\":\\\"ê\\\",\\\"ecir\\\":\\\"≖\\\",\\\"ecolon\\\":\\\"≕\\\",\\\"Ecy\\\":\\\"Э\\\",\\\"ecy\\\":\\\"э\\\",\\\"eDDot\\\":\\\"⩷\\\",\\\"Edot\\\":\\\"Ė\\\",\\\"edot\\\":\\\"ė\\\",\\\"eDot\\\":\\\"≑\\\",\\\"ee\\\":\\\"ⅇ\\\",\\\"efDot\\\":\\\"≒\\\",\\\"Efr\\\":\\\"𝔈\\\",\\\"efr\\\":\\\"𝔢\\\",\\\"eg\\\":\\\"⪚\\\",\\\"Egrave\\\":\\\"È\\\",\\\"egrave\\\":\\\"è\\\",\\\"egs\\\":\\\"⪖\\\",\\\"egsdot\\\":\\\"⪘\\\",\\\"el\\\":\\\"⪙\\\",\\\"Element\\\":\\\"∈\\\",\\\"elinters\\\":\\\"⏧\\\",\\\"ell\\\":\\\"ℓ\\\",\\\"els\\\":\\\"⪕\\\",\\\"elsdot\\\":\\\"⪗\\\",\\\"Emacr\\\":\\\"Ē\\\",\\\"emacr\\\":\\\"ē\\\",\\\"empty\\\":\\\"∅\\\",\\\"emptyset\\\":\\\"∅\\\",\\\"EmptySmallSquare\\\":\\\"◻\\\",\\\"emptyv\\\":\\\"∅\\\",\\\"EmptyVerySmallSquare\\\":\\\"▫\\\",\\\"emsp13\\\":\\\" \\\",\\\"emsp14\\\":\\\" \\\",\\\"emsp\\\":\\\" \\\",\\\"ENG\\\":\\\"Ŋ\\\",\\\"eng\\\":\\\"ŋ\\\",\\\"ensp\\\":\\\" \\\",\\\"Eogon\\\":\\\"Ę\\\",\\\"eogon\\\":\\\"ę\\\",\\\"Eopf\\\":\\\"𝔼\\\",\\\"eopf\\\":\\\"𝕖\\\",\\\"epar\\\":\\\"⋕\\\",\\\"eparsl\\\":\\\"⧣\\\",\\\"eplus\\\":\\\"⩱\\\",\\\"epsi\\\":\\\"ε\\\",\\\"Epsilon\\\":\\\"Ε\\\",\\\"epsilon\\\":\\\"ε\\\",\\\"epsiv\\\":\\\"ϵ\\\",\\\"eqcirc\\\":\\\"≖\\\",\\\"eqcolon\\\":\\\"≕\\\",\\\"eqsim\\\":\\\"≂\\\",\\\"eqslantgtr\\\":\\\"⪖\\\",\\\"eqslantless\\\":\\\"⪕\\\",\\\"Equal\\\":\\\"⩵\\\",\\\"equals\\\":\\\"=\\\",\\\"EqualTilde\\\":\\\"≂\\\",\\\"equest\\\":\\\"≟\\\",\\\"Equilibrium\\\":\\\"⇌\\\",\\\"equiv\\\":\\\"≡\\\",\\\"equivDD\\\":\\\"⩸\\\",\\\"eqvparsl\\\":\\\"⧥\\\",\\\"erarr\\\":\\\"⥱\\\",\\\"erDot\\\":\\\"≓\\\",\\\"escr\\\":\\\"ℯ\\\",\\\"Escr\\\":\\\"ℰ\\\",\\\"esdot\\\":\\\"≐\\\",\\\"Esim\\\":\\\"⩳\\\",\\\"esim\\\":\\\"≂\\\",\\\"Eta\\\":\\\"Η\\\",\\\"eta\\\":\\\"η\\\",\\\"ETH\\\":\\\"Ð\\\",\\\"eth\\\":\\\"ð\\\",\\\"Euml\\\":\\\"Ë\\\",\\\"euml\\\":\\\"ë\\\",\\\"euro\\\":\\\"€\\\",\\\"excl\\\":\\\"!\\\",\\\"exist\\\":\\\"∃\\\",\\\"Exists\\\":\\\"∃\\\",\\\"expectation\\\":\\\"ℰ\\\",\\\"exponentiale\\\":\\\"ⅇ\\\",\\\"ExponentialE\\\":\\\"ⅇ\\\",\\\"fallingdotseq\\\":\\\"≒\\\",\\\"Fcy\\\":\\\"Ф\\\",\\\"fcy\\\":\\\"ф\\\",\\\"female\\\":\\\"♀\\\",\\\"ffilig\\\":\\\"ﬃ\\\",\\\"fflig\\\":\\\"ﬀ\\\",\\\"ffllig\\\":\\\"ﬄ\\\",\\\"Ffr\\\":\\\"𝔉\\\",\\\"ffr\\\":\\\"𝔣\\\",\\\"filig\\\":\\\"ﬁ\\\",\\\"FilledSmallSquare\\\":\\\"◼\\\",\\\"FilledVerySmallSquare\\\":\\\"▪\\\",\\\"fjlig\\\":\\\"fj\\\",\\\"flat\\\":\\\"♭\\\",\\\"fllig\\\":\\\"ﬂ\\\",\\\"fltns\\\":\\\"▱\\\",\\\"fnof\\\":\\\"ƒ\\\",\\\"Fopf\\\":\\\"𝔽\\\",\\\"fopf\\\":\\\"𝕗\\\",\\\"forall\\\":\\\"∀\\\",\\\"ForAll\\\":\\\"∀\\\",\\\"fork\\\":\\\"⋔\\\",\\\"forkv\\\":\\\"⫙\\\",\\\"Fouriertrf\\\":\\\"ℱ\\\",\\\"fpartint\\\":\\\"⨍\\\",\\\"frac12\\\":\\\"½\\\",\\\"frac13\\\":\\\"⅓\\\",\\\"frac14\\\":\\\"¼\\\",\\\"frac15\\\":\\\"⅕\\\",\\\"frac16\\\":\\\"⅙\\\",\\\"frac18\\\":\\\"⅛\\\",\\\"frac23\\\":\\\"⅔\\\",\\\"frac25\\\":\\\"⅖\\\",\\\"frac34\\\":\\\"¾\\\",\\\"frac35\\\":\\\"⅗\\\",\\\"frac38\\\":\\\"⅜\\\",\\\"frac45\\\":\\\"⅘\\\",\\\"frac56\\\":\\\"⅚\\\",\\\"frac58\\\":\\\"⅝\\\",\\\"frac78\\\":\\\"⅞\\\",\\\"frasl\\\":\\\"⁄\\\",\\\"frown\\\":\\\"⌢\\\",\\\"fscr\\\":\\\"𝒻\\\",\\\"Fscr\\\":\\\"ℱ\\\",\\\"gacute\\\":\\\"ǵ\\\",\\\"Gamma\\\":\\\"Γ\\\",\\\"gamma\\\":\\\"γ\\\",\\\"Gammad\\\":\\\"Ϝ\\\",\\\"gammad\\\":\\\"ϝ\\\",\\\"gap\\\":\\\"⪆\\\",\\\"Gbreve\\\":\\\"Ğ\\\",\\\"gbreve\\\":\\\"ğ\\\",\\\"Gcedil\\\":\\\"Ģ\\\",\\\"Gcirc\\\":\\\"Ĝ\\\",\\\"gcirc\\\":\\\"ĝ\\\",\\\"Gcy\\\":\\\"Г\\\",\\\"gcy\\\":\\\"г\\\",\\\"Gdot\\\":\\\"Ġ\\\",\\\"gdot\\\":\\\"ġ\\\",\\\"ge\\\":\\\"≥\\\",\\\"gE\\\":\\\"≧\\\",\\\"gEl\\\":\\\"⪌\\\",\\\"gel\\\":\\\"⋛\\\",\\\"geq\\\":\\\"≥\\\",\\\"geqq\\\":\\\"≧\\\",\\\"geqslant\\\":\\\"⩾\\\",\\\"gescc\\\":\\\"⪩\\\",\\\"ges\\\":\\\"⩾\\\",\\\"gesdot\\\":\\\"⪀\\\",\\\"gesdoto\\\":\\\"⪂\\\",\\\"gesdotol\\\":\\\"⪄\\\",\\\"gesl\\\":\\\"⋛︀\\\",\\\"gesles\\\":\\\"⪔\\\",\\\"Gfr\\\":\\\"𝔊\\\",\\\"gfr\\\":\\\"𝔤\\\",\\\"gg\\\":\\\"≫\\\",\\\"Gg\\\":\\\"⋙\\\",\\\"ggg\\\":\\\"⋙\\\",\\\"gimel\\\":\\\"ℷ\\\",\\\"GJcy\\\":\\\"Ѓ\\\",\\\"gjcy\\\":\\\"ѓ\\\",\\\"gla\\\":\\\"⪥\\\",\\\"gl\\\":\\\"≷\\\",\\\"glE\\\":\\\"⪒\\\",\\\"glj\\\":\\\"⪤\\\",\\\"gnap\\\":\\\"⪊\\\",\\\"gnapprox\\\":\\\"⪊\\\",\\\"gne\\\":\\\"⪈\\\",\\\"gnE\\\":\\\"≩\\\",\\\"gneq\\\":\\\"⪈\\\",\\\"gneqq\\\":\\\"≩\\\",\\\"gnsim\\\":\\\"⋧\\\",\\\"Gopf\\\":\\\"𝔾\\\",\\\"gopf\\\":\\\"𝕘\\\",\\\"grave\\\":\\\"`\\\",\\\"GreaterEqual\\\":\\\"≥\\\",\\\"GreaterEqualLess\\\":\\\"⋛\\\",\\\"GreaterFullEqual\\\":\\\"≧\\\",\\\"GreaterGreater\\\":\\\"⪢\\\",\\\"GreaterLess\\\":\\\"≷\\\",\\\"GreaterSlantEqual\\\":\\\"⩾\\\",\\\"GreaterTilde\\\":\\\"≳\\\",\\\"Gscr\\\":\\\"𝒢\\\",\\\"gscr\\\":\\\"ℊ\\\",\\\"gsim\\\":\\\"≳\\\",\\\"gsime\\\":\\\"⪎\\\",\\\"gsiml\\\":\\\"⪐\\\",\\\"gtcc\\\":\\\"⪧\\\",\\\"gtcir\\\":\\\"⩺\\\",\\\"gt\\\":\\\">\\\",\\\"GT\\\":\\\">\\\",\\\"Gt\\\":\\\"≫\\\",\\\"gtdot\\\":\\\"⋗\\\",\\\"gtlPar\\\":\\\"⦕\\\",\\\"gtquest\\\":\\\"⩼\\\",\\\"gtrapprox\\\":\\\"⪆\\\",\\\"gtrarr\\\":\\\"⥸\\\",\\\"gtrdot\\\":\\\"⋗\\\",\\\"gtreqless\\\":\\\"⋛\\\",\\\"gtreqqless\\\":\\\"⪌\\\",\\\"gtrless\\\":\\\"≷\\\",\\\"gtrsim\\\":\\\"≳\\\",\\\"gvertneqq\\\":\\\"≩︀\\\",\\\"gvnE\\\":\\\"≩︀\\\",\\\"Hacek\\\":\\\"ˇ\\\",\\\"hairsp\\\":\\\" \\\",\\\"half\\\":\\\"½\\\",\\\"hamilt\\\":\\\"ℋ\\\",\\\"HARDcy\\\":\\\"Ъ\\\",\\\"hardcy\\\":\\\"ъ\\\",\\\"harrcir\\\":\\\"⥈\\\",\\\"harr\\\":\\\"↔\\\",\\\"hArr\\\":\\\"⇔\\\",\\\"harrw\\\":\\\"↭\\\",\\\"Hat\\\":\\\"^\\\",\\\"hbar\\\":\\\"ℏ\\\",\\\"Hcirc\\\":\\\"Ĥ\\\",\\\"hcirc\\\":\\\"ĥ\\\",\\\"hearts\\\":\\\"♥\\\",\\\"heartsuit\\\":\\\"♥\\\",\\\"hellip\\\":\\\"…\\\",\\\"hercon\\\":\\\"⊹\\\",\\\"hfr\\\":\\\"𝔥\\\",\\\"Hfr\\\":\\\"ℌ\\\",\\\"HilbertSpace\\\":\\\"ℋ\\\",\\\"hksearow\\\":\\\"⤥\\\",\\\"hkswarow\\\":\\\"⤦\\\",\\\"hoarr\\\":\\\"⇿\\\",\\\"homtht\\\":\\\"∻\\\",\\\"hookleftarrow\\\":\\\"↩\\\",\\\"hookrightarrow\\\":\\\"↪\\\",\\\"hopf\\\":\\\"𝕙\\\",\\\"Hopf\\\":\\\"ℍ\\\",\\\"horbar\\\":\\\"―\\\",\\\"HorizontalLine\\\":\\\"─\\\",\\\"hscr\\\":\\\"𝒽\\\",\\\"Hscr\\\":\\\"ℋ\\\",\\\"hslash\\\":\\\"ℏ\\\",\\\"Hstrok\\\":\\\"Ħ\\\",\\\"hstrok\\\":\\\"ħ\\\",\\\"HumpDownHump\\\":\\\"≎\\\",\\\"HumpEqual\\\":\\\"≏\\\",\\\"hybull\\\":\\\"⁃\\\",\\\"hyphen\\\":\\\"‐\\\",\\\"Iacute\\\":\\\"Í\\\",\\\"iacute\\\":\\\"í\\\",\\\"ic\\\":\\\"⁣\\\",\\\"Icirc\\\":\\\"Î\\\",\\\"icirc\\\":\\\"î\\\",\\\"Icy\\\":\\\"И\\\",\\\"icy\\\":\\\"и\\\",\\\"Idot\\\":\\\"İ\\\",\\\"IEcy\\\":\\\"Е\\\",\\\"iecy\\\":\\\"е\\\",\\\"iexcl\\\":\\\"¡\\\",\\\"iff\\\":\\\"⇔\\\",\\\"ifr\\\":\\\"𝔦\\\",\\\"Ifr\\\":\\\"ℑ\\\",\\\"Igrave\\\":\\\"Ì\\\",\\\"igrave\\\":\\\"ì\\\",\\\"ii\\\":\\\"ⅈ\\\",\\\"iiiint\\\":\\\"⨌\\\",\\\"iiint\\\":\\\"∭\\\",\\\"iinfin\\\":\\\"⧜\\\",\\\"iiota\\\":\\\"℩\\\",\\\"IJlig\\\":\\\"Ĳ\\\",\\\"ijlig\\\":\\\"ĳ\\\",\\\"Imacr\\\":\\\"Ī\\\",\\\"imacr\\\":\\\"ī\\\",\\\"image\\\":\\\"ℑ\\\",\\\"ImaginaryI\\\":\\\"ⅈ\\\",\\\"imagline\\\":\\\"ℐ\\\",\\\"imagpart\\\":\\\"ℑ\\\",\\\"imath\\\":\\\"ı\\\",\\\"Im\\\":\\\"ℑ\\\",\\\"imof\\\":\\\"⊷\\\",\\\"imped\\\":\\\"Ƶ\\\",\\\"Implies\\\":\\\"⇒\\\",\\\"incare\\\":\\\"℅\\\",\\\"in\\\":\\\"∈\\\",\\\"infin\\\":\\\"∞\\\",\\\"infintie\\\":\\\"⧝\\\",\\\"inodot\\\":\\\"ı\\\",\\\"intcal\\\":\\\"⊺\\\",\\\"int\\\":\\\"∫\\\",\\\"Int\\\":\\\"∬\\\",\\\"integers\\\":\\\"ℤ\\\",\\\"Integral\\\":\\\"∫\\\",\\\"intercal\\\":\\\"⊺\\\",\\\"Intersection\\\":\\\"⋂\\\",\\\"intlarhk\\\":\\\"⨗\\\",\\\"intprod\\\":\\\"⨼\\\",\\\"InvisibleComma\\\":\\\"⁣\\\",\\\"InvisibleTimes\\\":\\\"⁢\\\",\\\"IOcy\\\":\\\"Ё\\\",\\\"iocy\\\":\\\"ё\\\",\\\"Iogon\\\":\\\"Į\\\",\\\"iogon\\\":\\\"į\\\",\\\"Iopf\\\":\\\"𝕀\\\",\\\"iopf\\\":\\\"𝕚\\\",\\\"Iota\\\":\\\"Ι\\\",\\\"iota\\\":\\\"ι\\\",\\\"iprod\\\":\\\"⨼\\\",\\\"iquest\\\":\\\"¿\\\",\\\"iscr\\\":\\\"𝒾\\\",\\\"Iscr\\\":\\\"ℐ\\\",\\\"isin\\\":\\\"∈\\\",\\\"isindot\\\":\\\"⋵\\\",\\\"isinE\\\":\\\"⋹\\\",\\\"isins\\\":\\\"⋴\\\",\\\"isinsv\\\":\\\"⋳\\\",\\\"isinv\\\":\\\"∈\\\",\\\"it\\\":\\\"⁢\\\",\\\"Itilde\\\":\\\"Ĩ\\\",\\\"itilde\\\":\\\"ĩ\\\",\\\"Iukcy\\\":\\\"І\\\",\\\"iukcy\\\":\\\"і\\\",\\\"Iuml\\\":\\\"Ï\\\",\\\"iuml\\\":\\\"ï\\\",\\\"Jcirc\\\":\\\"Ĵ\\\",\\\"jcirc\\\":\\\"ĵ\\\",\\\"Jcy\\\":\\\"Й\\\",\\\"jcy\\\":\\\"й\\\",\\\"Jfr\\\":\\\"𝔍\\\",\\\"jfr\\\":\\\"𝔧\\\",\\\"jmath\\\":\\\"ȷ\\\",\\\"Jopf\\\":\\\"𝕁\\\",\\\"jopf\\\":\\\"𝕛\\\",\\\"Jscr\\\":\\\"𝒥\\\",\\\"jscr\\\":\\\"𝒿\\\",\\\"Jsercy\\\":\\\"Ј\\\",\\\"jsercy\\\":\\\"ј\\\",\\\"Jukcy\\\":\\\"Є\\\",\\\"jukcy\\\":\\\"є\\\",\\\"Kappa\\\":\\\"Κ\\\",\\\"kappa\\\":\\\"κ\\\",\\\"kappav\\\":\\\"ϰ\\\",\\\"Kcedil\\\":\\\"Ķ\\\",\\\"kcedil\\\":\\\"ķ\\\",\\\"Kcy\\\":\\\"К\\\",\\\"kcy\\\":\\\"к\\\",\\\"Kfr\\\":\\\"𝔎\\\",\\\"kfr\\\":\\\"𝔨\\\",\\\"kgreen\\\":\\\"ĸ\\\",\\\"KHcy\\\":\\\"Х\\\",\\\"khcy\\\":\\\"х\\\",\\\"KJcy\\\":\\\"Ќ\\\",\\\"kjcy\\\":\\\"ќ\\\",\\\"Kopf\\\":\\\"𝕂\\\",\\\"kopf\\\":\\\"𝕜\\\",\\\"Kscr\\\":\\\"𝒦\\\",\\\"kscr\\\":\\\"𝓀\\\",\\\"lAarr\\\":\\\"⇚\\\",\\\"Lacute\\\":\\\"Ĺ\\\",\\\"lacute\\\":\\\"ĺ\\\",\\\"laemptyv\\\":\\\"⦴\\\",\\\"lagran\\\":\\\"ℒ\\\",\\\"Lambda\\\":\\\"Λ\\\",\\\"lambda\\\":\\\"λ\\\",\\\"lang\\\":\\\"⟨\\\",\\\"Lang\\\":\\\"⟪\\\",\\\"langd\\\":\\\"⦑\\\",\\\"langle\\\":\\\"⟨\\\",\\\"lap\\\":\\\"⪅\\\",\\\"Laplacetrf\\\":\\\"ℒ\\\",\\\"laquo\\\":\\\"«\\\",\\\"larrb\\\":\\\"⇤\\\",\\\"larrbfs\\\":\\\"⤟\\\",\\\"larr\\\":\\\"←\\\",\\\"Larr\\\":\\\"↞\\\",\\\"lArr\\\":\\\"⇐\\\",\\\"larrfs\\\":\\\"⤝\\\",\\\"larrhk\\\":\\\"↩\\\",\\\"larrlp\\\":\\\"↫\\\",\\\"larrpl\\\":\\\"⤹\\\",\\\"larrsim\\\":\\\"⥳\\\",\\\"larrtl\\\":\\\"↢\\\",\\\"latail\\\":\\\"⤙\\\",\\\"lAtail\\\":\\\"⤛\\\",\\\"lat\\\":\\\"⪫\\\",\\\"late\\\":\\\"⪭\\\",\\\"lates\\\":\\\"⪭︀\\\",\\\"lbarr\\\":\\\"⤌\\\",\\\"lBarr\\\":\\\"⤎\\\",\\\"lbbrk\\\":\\\"❲\\\",\\\"lbrace\\\":\\\"{\\\",\\\"lbrack\\\":\\\"[\\\",\\\"lbrke\\\":\\\"⦋\\\",\\\"lbrksld\\\":\\\"⦏\\\",\\\"lbrkslu\\\":\\\"⦍\\\",\\\"Lcaron\\\":\\\"Ľ\\\",\\\"lcaron\\\":\\\"ľ\\\",\\\"Lcedil\\\":\\\"Ļ\\\",\\\"lcedil\\\":\\\"ļ\\\",\\\"lceil\\\":\\\"⌈\\\",\\\"lcub\\\":\\\"{\\\",\\\"Lcy\\\":\\\"Л\\\",\\\"lcy\\\":\\\"л\\\",\\\"ldca\\\":\\\"⤶\\\",\\\"ldquo\\\":\\\"“\\\",\\\"ldquor\\\":\\\"„\\\",\\\"ldrdhar\\\":\\\"⥧\\\",\\\"ldrushar\\\":\\\"⥋\\\",\\\"ldsh\\\":\\\"↲\\\",\\\"le\\\":\\\"≤\\\",\\\"lE\\\":\\\"≦\\\",\\\"LeftAngleBracket\\\":\\\"⟨\\\",\\\"LeftArrowBar\\\":\\\"⇤\\\",\\\"leftarrow\\\":\\\"←\\\",\\\"LeftArrow\\\":\\\"←\\\",\\\"Leftarrow\\\":\\\"⇐\\\",\\\"LeftArrowRightArrow\\\":\\\"⇆\\\",\\\"leftarrowtail\\\":\\\"↢\\\",\\\"LeftCeiling\\\":\\\"⌈\\\",\\\"LeftDoubleBracket\\\":\\\"⟦\\\",\\\"LeftDownTeeVector\\\":\\\"⥡\\\",\\\"LeftDownVectorBar\\\":\\\"⥙\\\",\\\"LeftDownVector\\\":\\\"⇃\\\",\\\"LeftFloor\\\":\\\"⌊\\\",\\\"leftharpoondown\\\":\\\"↽\\\",\\\"leftharpoonup\\\":\\\"↼\\\",\\\"leftleftarrows\\\":\\\"⇇\\\",\\\"leftrightarrow\\\":\\\"↔\\\",\\\"LeftRightArrow\\\":\\\"↔\\\",\\\"Leftrightarrow\\\":\\\"⇔\\\",\\\"leftrightarrows\\\":\\\"⇆\\\",\\\"leftrightharpoons\\\":\\\"⇋\\\",\\\"leftrightsquigarrow\\\":\\\"↭\\\",\\\"LeftRightVector\\\":\\\"⥎\\\",\\\"LeftTeeArrow\\\":\\\"↤\\\",\\\"LeftTee\\\":\\\"⊣\\\",\\\"LeftTeeVector\\\":\\\"⥚\\\",\\\"leftthreetimes\\\":\\\"⋋\\\",\\\"LeftTriangleBar\\\":\\\"⧏\\\",\\\"LeftTriangle\\\":\\\"⊲\\\",\\\"LeftTriangleEqual\\\":\\\"⊴\\\",\\\"LeftUpDownVector\\\":\\\"⥑\\\",\\\"LeftUpTeeVector\\\":\\\"⥠\\\",\\\"LeftUpVectorBar\\\":\\\"⥘\\\",\\\"LeftUpVector\\\":\\\"↿\\\",\\\"LeftVectorBar\\\":\\\"⥒\\\",\\\"LeftVector\\\":\\\"↼\\\",\\\"lEg\\\":\\\"⪋\\\",\\\"leg\\\":\\\"⋚\\\",\\\"leq\\\":\\\"≤\\\",\\\"leqq\\\":\\\"≦\\\",\\\"leqslant\\\":\\\"⩽\\\",\\\"lescc\\\":\\\"⪨\\\",\\\"les\\\":\\\"⩽\\\",\\\"lesdot\\\":\\\"⩿\\\",\\\"lesdoto\\\":\\\"⪁\\\",\\\"lesdotor\\\":\\\"⪃\\\",\\\"lesg\\\":\\\"⋚︀\\\",\\\"lesges\\\":\\\"⪓\\\",\\\"lessapprox\\\":\\\"⪅\\\",\\\"lessdot\\\":\\\"⋖\\\",\\\"lesseqgtr\\\":\\\"⋚\\\",\\\"lesseqqgtr\\\":\\\"⪋\\\",\\\"LessEqualGreater\\\":\\\"⋚\\\",\\\"LessFullEqual\\\":\\\"≦\\\",\\\"LessGreater\\\":\\\"≶\\\",\\\"lessgtr\\\":\\\"≶\\\",\\\"LessLess\\\":\\\"⪡\\\",\\\"lesssim\\\":\\\"≲\\\",\\\"LessSlantEqual\\\":\\\"⩽\\\",\\\"LessTilde\\\":\\\"≲\\\",\\\"lfisht\\\":\\\"⥼\\\",\\\"lfloor\\\":\\\"⌊\\\",\\\"Lfr\\\":\\\"𝔏\\\",\\\"lfr\\\":\\\"𝔩\\\",\\\"lg\\\":\\\"≶\\\",\\\"lgE\\\":\\\"⪑\\\",\\\"lHar\\\":\\\"⥢\\\",\\\"lhard\\\":\\\"↽\\\",\\\"lharu\\\":\\\"↼\\\",\\\"lharul\\\":\\\"⥪\\\",\\\"lhblk\\\":\\\"▄\\\",\\\"LJcy\\\":\\\"Љ\\\",\\\"ljcy\\\":\\\"љ\\\",\\\"llarr\\\":\\\"⇇\\\",\\\"ll\\\":\\\"≪\\\",\\\"Ll\\\":\\\"⋘\\\",\\\"llcorner\\\":\\\"⌞\\\",\\\"Lleftarrow\\\":\\\"⇚\\\",\\\"llhard\\\":\\\"⥫\\\",\\\"lltri\\\":\\\"◺\\\",\\\"Lmidot\\\":\\\"Ŀ\\\",\\\"lmidot\\\":\\\"ŀ\\\",\\\"lmoustache\\\":\\\"⎰\\\",\\\"lmoust\\\":\\\"⎰\\\",\\\"lnap\\\":\\\"⪉\\\",\\\"lnapprox\\\":\\\"⪉\\\",\\\"lne\\\":\\\"⪇\\\",\\\"lnE\\\":\\\"≨\\\",\\\"lneq\\\":\\\"⪇\\\",\\\"lneqq\\\":\\\"≨\\\",\\\"lnsim\\\":\\\"⋦\\\",\\\"loang\\\":\\\"⟬\\\",\\\"loarr\\\":\\\"⇽\\\",\\\"lobrk\\\":\\\"⟦\\\",\\\"longleftarrow\\\":\\\"⟵\\\",\\\"LongLeftArrow\\\":\\\"⟵\\\",\\\"Longleftarrow\\\":\\\"⟸\\\",\\\"longleftrightarrow\\\":\\\"⟷\\\",\\\"LongLeftRightArrow\\\":\\\"⟷\\\",\\\"Longleftrightarrow\\\":\\\"⟺\\\",\\\"longmapsto\\\":\\\"⟼\\\",\\\"longrightarrow\\\":\\\"⟶\\\",\\\"LongRightArrow\\\":\\\"⟶\\\",\\\"Longrightarrow\\\":\\\"⟹\\\",\\\"looparrowleft\\\":\\\"↫\\\",\\\"looparrowright\\\":\\\"↬\\\",\\\"lopar\\\":\\\"⦅\\\",\\\"Lopf\\\":\\\"𝕃\\\",\\\"lopf\\\":\\\"𝕝\\\",\\\"loplus\\\":\\\"⨭\\\",\\\"lotimes\\\":\\\"⨴\\\",\\\"lowast\\\":\\\"∗\\\",\\\"lowbar\\\":\\\"_\\\",\\\"LowerLeftArrow\\\":\\\"↙\\\",\\\"LowerRightArrow\\\":\\\"↘\\\",\\\"loz\\\":\\\"◊\\\",\\\"lozenge\\\":\\\"◊\\\",\\\"lozf\\\":\\\"⧫\\\",\\\"lpar\\\":\\\"(\\\",\\\"lparlt\\\":\\\"⦓\\\",\\\"lrarr\\\":\\\"⇆\\\",\\\"lrcorner\\\":\\\"⌟\\\",\\\"lrhar\\\":\\\"⇋\\\",\\\"lrhard\\\":\\\"⥭\\\",\\\"lrm\\\":\\\"‎\\\",\\\"lrtri\\\":\\\"⊿\\\",\\\"lsaquo\\\":\\\"‹\\\",\\\"lscr\\\":\\\"𝓁\\\",\\\"Lscr\\\":\\\"ℒ\\\",\\\"lsh\\\":\\\"↰\\\",\\\"Lsh\\\":\\\"↰\\\",\\\"lsim\\\":\\\"≲\\\",\\\"lsime\\\":\\\"⪍\\\",\\\"lsimg\\\":\\\"⪏\\\",\\\"lsqb\\\":\\\"[\\\",\\\"lsquo\\\":\\\"‘\\\",\\\"lsquor\\\":\\\"‚\\\",\\\"Lstrok\\\":\\\"Ł\\\",\\\"lstrok\\\":\\\"ł\\\",\\\"ltcc\\\":\\\"⪦\\\",\\\"ltcir\\\":\\\"⩹\\\",\\\"lt\\\":\\\"<\\\",\\\"LT\\\":\\\"<\\\",\\\"Lt\\\":\\\"≪\\\",\\\"ltdot\\\":\\\"⋖\\\",\\\"lthree\\\":\\\"⋋\\\",\\\"ltimes\\\":\\\"⋉\\\",\\\"ltlarr\\\":\\\"⥶\\\",\\\"ltquest\\\":\\\"⩻\\\",\\\"ltri\\\":\\\"◃\\\",\\\"ltrie\\\":\\\"⊴\\\",\\\"ltrif\\\":\\\"◂\\\",\\\"ltrPar\\\":\\\"⦖\\\",\\\"lurdshar\\\":\\\"⥊\\\",\\\"luruhar\\\":\\\"⥦\\\",\\\"lvertneqq\\\":\\\"≨︀\\\",\\\"lvnE\\\":\\\"≨︀\\\",\\\"macr\\\":\\\"¯\\\",\\\"male\\\":\\\"♂\\\",\\\"malt\\\":\\\"✠\\\",\\\"maltese\\\":\\\"✠\\\",\\\"Map\\\":\\\"⤅\\\",\\\"map\\\":\\\"↦\\\",\\\"mapsto\\\":\\\"↦\\\",\\\"mapstodown\\\":\\\"↧\\\",\\\"mapstoleft\\\":\\\"↤\\\",\\\"mapstoup\\\":\\\"↥\\\",\\\"marker\\\":\\\"▮\\\",\\\"mcomma\\\":\\\"⨩\\\",\\\"Mcy\\\":\\\"М\\\",\\\"mcy\\\":\\\"м\\\",\\\"mdash\\\":\\\"—\\\",\\\"mDDot\\\":\\\"∺\\\",\\\"measuredangle\\\":\\\"∡\\\",\\\"MediumSpace\\\":\\\" \\\",\\\"Mellintrf\\\":\\\"ℳ\\\",\\\"Mfr\\\":\\\"𝔐\\\",\\\"mfr\\\":\\\"𝔪\\\",\\\"mho\\\":\\\"℧\\\",\\\"micro\\\":\\\"µ\\\",\\\"midast\\\":\\\"*\\\",\\\"midcir\\\":\\\"⫰\\\",\\\"mid\\\":\\\"∣\\\",\\\"middot\\\":\\\"·\\\",\\\"minusb\\\":\\\"⊟\\\",\\\"minus\\\":\\\"−\\\",\\\"minusd\\\":\\\"∸\\\",\\\"minusdu\\\":\\\"⨪\\\",\\\"MinusPlus\\\":\\\"∓\\\",\\\"mlcp\\\":\\\"⫛\\\",\\\"mldr\\\":\\\"…\\\",\\\"mnplus\\\":\\\"∓\\\",\\\"models\\\":\\\"⊧\\\",\\\"Mopf\\\":\\\"𝕄\\\",\\\"mopf\\\":\\\"𝕞\\\",\\\"mp\\\":\\\"∓\\\",\\\"mscr\\\":\\\"𝓂\\\",\\\"Mscr\\\":\\\"ℳ\\\",\\\"mstpos\\\":\\\"∾\\\",\\\"Mu\\\":\\\"Μ\\\",\\\"mu\\\":\\\"μ\\\",\\\"multimap\\\":\\\"⊸\\\",\\\"mumap\\\":\\\"⊸\\\",\\\"nabla\\\":\\\"∇\\\",\\\"Nacute\\\":\\\"Ń\\\",\\\"nacute\\\":\\\"ń\\\",\\\"nang\\\":\\\"∠⃒\\\",\\\"nap\\\":\\\"≉\\\",\\\"napE\\\":\\\"⩰̸\\\",\\\"napid\\\":\\\"≋̸\\\",\\\"napos\\\":\\\"ŉ\\\",\\\"napprox\\\":\\\"≉\\\",\\\"natural\\\":\\\"♮\\\",\\\"naturals\\\":\\\"ℕ\\\",\\\"natur\\\":\\\"♮\\\",\\\"nbsp\\\":\\\" \\\",\\\"nbump\\\":\\\"≎̸\\\",\\\"nbumpe\\\":\\\"≏̸\\\",\\\"ncap\\\":\\\"⩃\\\",\\\"Ncaron\\\":\\\"Ň\\\",\\\"ncaron\\\":\\\"ň\\\",\\\"Ncedil\\\":\\\"Ņ\\\",\\\"ncedil\\\":\\\"ņ\\\",\\\"ncong\\\":\\\"≇\\\",\\\"ncongdot\\\":\\\"⩭̸\\\",\\\"ncup\\\":\\\"⩂\\\",\\\"Ncy\\\":\\\"Н\\\",\\\"ncy\\\":\\\"н\\\",\\\"ndash\\\":\\\"–\\\",\\\"nearhk\\\":\\\"⤤\\\",\\\"nearr\\\":\\\"↗\\\",\\\"neArr\\\":\\\"⇗\\\",\\\"nearrow\\\":\\\"↗\\\",\\\"ne\\\":\\\"≠\\\",\\\"nedot\\\":\\\"≐̸\\\",\\\"NegativeMediumSpace\\\":\\\"​\\\",\\\"NegativeThickSpace\\\":\\\"​\\\",\\\"NegativeThinSpace\\\":\\\"​\\\",\\\"NegativeVeryThinSpace\\\":\\\"​\\\",\\\"nequiv\\\":\\\"≢\\\",\\\"nesear\\\":\\\"⤨\\\",\\\"nesim\\\":\\\"≂̸\\\",\\\"NestedGreaterGreater\\\":\\\"≫\\\",\\\"NestedLessLess\\\":\\\"≪\\\",\\\"NewLine\\\":\\\"\\\\n\\\",\\\"nexist\\\":\\\"∄\\\",\\\"nexists\\\":\\\"∄\\\",\\\"Nfr\\\":\\\"𝔑\\\",\\\"nfr\\\":\\\"𝔫\\\",\\\"ngE\\\":\\\"≧̸\\\",\\\"nge\\\":\\\"≱\\\",\\\"ngeq\\\":\\\"≱\\\",\\\"ngeqq\\\":\\\"≧̸\\\",\\\"ngeqslant\\\":\\\"⩾̸\\\",\\\"nges\\\":\\\"⩾̸\\\",\\\"nGg\\\":\\\"⋙̸\\\",\\\"ngsim\\\":\\\"≵\\\",\\\"nGt\\\":\\\"≫⃒\\\",\\\"ngt\\\":\\\"≯\\\",\\\"ngtr\\\":\\\"≯\\\",\\\"nGtv\\\":\\\"≫̸\\\",\\\"nharr\\\":\\\"↮\\\",\\\"nhArr\\\":\\\"⇎\\\",\\\"nhpar\\\":\\\"⫲\\\",\\\"ni\\\":\\\"∋\\\",\\\"nis\\\":\\\"⋼\\\",\\\"nisd\\\":\\\"⋺\\\",\\\"niv\\\":\\\"∋\\\",\\\"NJcy\\\":\\\"Њ\\\",\\\"njcy\\\":\\\"њ\\\",\\\"nlarr\\\":\\\"↚\\\",\\\"nlArr\\\":\\\"⇍\\\",\\\"nldr\\\":\\\"‥\\\",\\\"nlE\\\":\\\"≦̸\\\",\\\"nle\\\":\\\"≰\\\",\\\"nleftarrow\\\":\\\"↚\\\",\\\"nLeftarrow\\\":\\\"⇍\\\",\\\"nleftrightarrow\\\":\\\"↮\\\",\\\"nLeftrightarrow\\\":\\\"⇎\\\",\\\"nleq\\\":\\\"≰\\\",\\\"nleqq\\\":\\\"≦̸\\\",\\\"nleqslant\\\":\\\"⩽̸\\\",\\\"nles\\\":\\\"⩽̸\\\",\\\"nless\\\":\\\"≮\\\",\\\"nLl\\\":\\\"⋘̸\\\",\\\"nlsim\\\":\\\"≴\\\",\\\"nLt\\\":\\\"≪⃒\\\",\\\"nlt\\\":\\\"≮\\\",\\\"nltri\\\":\\\"⋪\\\",\\\"nltrie\\\":\\\"⋬\\\",\\\"nLtv\\\":\\\"≪̸\\\",\\\"nmid\\\":\\\"∤\\\",\\\"NoBreak\\\":\\\"⁠\\\",\\\"NonBreakingSpace\\\":\\\" \\\",\\\"nopf\\\":\\\"𝕟\\\",\\\"Nopf\\\":\\\"ℕ\\\",\\\"Not\\\":\\\"⫬\\\",\\\"not\\\":\\\"¬\\\",\\\"NotCongruent\\\":\\\"≢\\\",\\\"NotCupCap\\\":\\\"≭\\\",\\\"NotDoubleVerticalBar\\\":\\\"∦\\\",\\\"NotElement\\\":\\\"∉\\\",\\\"NotEqual\\\":\\\"≠\\\",\\\"NotEqualTilde\\\":\\\"≂̸\\\",\\\"NotExists\\\":\\\"∄\\\",\\\"NotGreater\\\":\\\"≯\\\",\\\"NotGreaterEqual\\\":\\\"≱\\\",\\\"NotGreaterFullEqual\\\":\\\"≧̸\\\",\\\"NotGreaterGreater\\\":\\\"≫̸\\\",\\\"NotGreaterLess\\\":\\\"≹\\\",\\\"NotGreaterSlantEqual\\\":\\\"⩾̸\\\",\\\"NotGreaterTilde\\\":\\\"≵\\\",\\\"NotHumpDownHump\\\":\\\"≎̸\\\",\\\"NotHumpEqual\\\":\\\"≏̸\\\",\\\"notin\\\":\\\"∉\\\",\\\"notindot\\\":\\\"⋵̸\\\",\\\"notinE\\\":\\\"⋹̸\\\",\\\"notinva\\\":\\\"∉\\\",\\\"notinvb\\\":\\\"⋷\\\",\\\"notinvc\\\":\\\"⋶\\\",\\\"NotLeftTriangleBar\\\":\\\"⧏̸\\\",\\\"NotLeftTriangle\\\":\\\"⋪\\\",\\\"NotLeftTriangleEqual\\\":\\\"⋬\\\",\\\"NotLess\\\":\\\"≮\\\",\\\"NotLessEqual\\\":\\\"≰\\\",\\\"NotLessGreater\\\":\\\"≸\\\",\\\"NotLessLess\\\":\\\"≪̸\\\",\\\"NotLessSlantEqual\\\":\\\"⩽̸\\\",\\\"NotLessTilde\\\":\\\"≴\\\",\\\"NotNestedGreaterGreater\\\":\\\"⪢̸\\\",\\\"NotNestedLessLess\\\":\\\"⪡̸\\\",\\\"notni\\\":\\\"∌\\\",\\\"notniva\\\":\\\"∌\\\",\\\"notnivb\\\":\\\"⋾\\\",\\\"notnivc\\\":\\\"⋽\\\",\\\"NotPrecedes\\\":\\\"⊀\\\",\\\"NotPrecedesEqual\\\":\\\"⪯̸\\\",\\\"NotPrecedesSlantEqual\\\":\\\"⋠\\\",\\\"NotReverseElement\\\":\\\"∌\\\",\\\"NotRightTriangleBar\\\":\\\"⧐̸\\\",\\\"NotRightTriangle\\\":\\\"⋫\\\",\\\"NotRightTriangleEqual\\\":\\\"⋭\\\",\\\"NotSquareSubset\\\":\\\"⊏̸\\\",\\\"NotSquareSubsetEqual\\\":\\\"⋢\\\",\\\"NotSquareSuperset\\\":\\\"⊐̸\\\",\\\"NotSquareSupersetEqual\\\":\\\"⋣\\\",\\\"NotSubset\\\":\\\"⊂⃒\\\",\\\"NotSubsetEqual\\\":\\\"⊈\\\",\\\"NotSucceeds\\\":\\\"⊁\\\",\\\"NotSucceedsEqual\\\":\\\"⪰̸\\\",\\\"NotSucceedsSlantEqual\\\":\\\"⋡\\\",\\\"NotSucceedsTilde\\\":\\\"≿̸\\\",\\\"NotSuperset\\\":\\\"⊃⃒\\\",\\\"NotSupersetEqual\\\":\\\"⊉\\\",\\\"NotTilde\\\":\\\"≁\\\",\\\"NotTildeEqual\\\":\\\"≄\\\",\\\"NotTildeFullEqual\\\":\\\"≇\\\",\\\"NotTildeTilde\\\":\\\"≉\\\",\\\"NotVerticalBar\\\":\\\"∤\\\",\\\"nparallel\\\":\\\"∦\\\",\\\"npar\\\":\\\"∦\\\",\\\"nparsl\\\":\\\"⫽⃥\\\",\\\"npart\\\":\\\"∂̸\\\",\\\"npolint\\\":\\\"⨔\\\",\\\"npr\\\":\\\"⊀\\\",\\\"nprcue\\\":\\\"⋠\\\",\\\"nprec\\\":\\\"⊀\\\",\\\"npreceq\\\":\\\"⪯̸\\\",\\\"npre\\\":\\\"⪯̸\\\",\\\"nrarrc\\\":\\\"⤳̸\\\",\\\"nrarr\\\":\\\"↛\\\",\\\"nrArr\\\":\\\"⇏\\\",\\\"nrarrw\\\":\\\"↝̸\\\",\\\"nrightarrow\\\":\\\"↛\\\",\\\"nRightarrow\\\":\\\"⇏\\\",\\\"nrtri\\\":\\\"⋫\\\",\\\"nrtrie\\\":\\\"⋭\\\",\\\"nsc\\\":\\\"⊁\\\",\\\"nsccue\\\":\\\"⋡\\\",\\\"nsce\\\":\\\"⪰̸\\\",\\\"Nscr\\\":\\\"𝒩\\\",\\\"nscr\\\":\\\"𝓃\\\",\\\"nshortmid\\\":\\\"∤\\\",\\\"nshortparallel\\\":\\\"∦\\\",\\\"nsim\\\":\\\"≁\\\",\\\"nsime\\\":\\\"≄\\\",\\\"nsimeq\\\":\\\"≄\\\",\\\"nsmid\\\":\\\"∤\\\",\\\"nspar\\\":\\\"∦\\\",\\\"nsqsube\\\":\\\"⋢\\\",\\\"nsqsupe\\\":\\\"⋣\\\",\\\"nsub\\\":\\\"⊄\\\",\\\"nsubE\\\":\\\"⫅̸\\\",\\\"nsube\\\":\\\"⊈\\\",\\\"nsubset\\\":\\\"⊂⃒\\\",\\\"nsubseteq\\\":\\\"⊈\\\",\\\"nsubseteqq\\\":\\\"⫅̸\\\",\\\"nsucc\\\":\\\"⊁\\\",\\\"nsucceq\\\":\\\"⪰̸\\\",\\\"nsup\\\":\\\"⊅\\\",\\\"nsupE\\\":\\\"⫆̸\\\",\\\"nsupe\\\":\\\"⊉\\\",\\\"nsupset\\\":\\\"⊃⃒\\\",\\\"nsupseteq\\\":\\\"⊉\\\",\\\"nsupseteqq\\\":\\\"⫆̸\\\",\\\"ntgl\\\":\\\"≹\\\",\\\"Ntilde\\\":\\\"Ñ\\\",\\\"ntilde\\\":\\\"ñ\\\",\\\"ntlg\\\":\\\"≸\\\",\\\"ntriangleleft\\\":\\\"⋪\\\",\\\"ntrianglelefteq\\\":\\\"⋬\\\",\\\"ntriangleright\\\":\\\"⋫\\\",\\\"ntrianglerighteq\\\":\\\"⋭\\\",\\\"Nu\\\":\\\"Ν\\\",\\\"nu\\\":\\\"ν\\\",\\\"num\\\":\\\"#\\\",\\\"numero\\\":\\\"№\\\",\\\"numsp\\\":\\\" \\\",\\\"nvap\\\":\\\"≍⃒\\\",\\\"nvdash\\\":\\\"⊬\\\",\\\"nvDash\\\":\\\"⊭\\\",\\\"nVdash\\\":\\\"⊮\\\",\\\"nVDash\\\":\\\"⊯\\\",\\\"nvge\\\":\\\"≥⃒\\\",\\\"nvgt\\\":\\\">⃒\\\",\\\"nvHarr\\\":\\\"⤄\\\",\\\"nvinfin\\\":\\\"⧞\\\",\\\"nvlArr\\\":\\\"⤂\\\",\\\"nvle\\\":\\\"≤⃒\\\",\\\"nvlt\\\":\\\"<⃒\\\",\\\"nvltrie\\\":\\\"⊴⃒\\\",\\\"nvrArr\\\":\\\"⤃\\\",\\\"nvrtrie\\\":\\\"⊵⃒\\\",\\\"nvsim\\\":\\\"∼⃒\\\",\\\"nwarhk\\\":\\\"⤣\\\",\\\"nwarr\\\":\\\"↖\\\",\\\"nwArr\\\":\\\"⇖\\\",\\\"nwarrow\\\":\\\"↖\\\",\\\"nwnear\\\":\\\"⤧\\\",\\\"Oacute\\\":\\\"Ó\\\",\\\"oacute\\\":\\\"ó\\\",\\\"oast\\\":\\\"⊛\\\",\\\"Ocirc\\\":\\\"Ô\\\",\\\"ocirc\\\":\\\"ô\\\",\\\"ocir\\\":\\\"⊚\\\",\\\"Ocy\\\":\\\"О\\\",\\\"ocy\\\":\\\"о\\\",\\\"odash\\\":\\\"⊝\\\",\\\"Odblac\\\":\\\"Ő\\\",\\\"odblac\\\":\\\"ő\\\",\\\"odiv\\\":\\\"⨸\\\",\\\"odot\\\":\\\"⊙\\\",\\\"odsold\\\":\\\"⦼\\\",\\\"OElig\\\":\\\"Œ\\\",\\\"oelig\\\":\\\"œ\\\",\\\"ofcir\\\":\\\"⦿\\\",\\\"Ofr\\\":\\\"𝔒\\\",\\\"ofr\\\":\\\"𝔬\\\",\\\"ogon\\\":\\\"˛\\\",\\\"Ograve\\\":\\\"Ò\\\",\\\"ograve\\\":\\\"ò\\\",\\\"ogt\\\":\\\"⧁\\\",\\\"ohbar\\\":\\\"⦵\\\",\\\"ohm\\\":\\\"Ω\\\",\\\"oint\\\":\\\"∮\\\",\\\"olarr\\\":\\\"↺\\\",\\\"olcir\\\":\\\"⦾\\\",\\\"olcross\\\":\\\"⦻\\\",\\\"oline\\\":\\\"‾\\\",\\\"olt\\\":\\\"⧀\\\",\\\"Omacr\\\":\\\"Ō\\\",\\\"omacr\\\":\\\"ō\\\",\\\"Omega\\\":\\\"Ω\\\",\\\"omega\\\":\\\"ω\\\",\\\"Omicron\\\":\\\"Ο\\\",\\\"omicron\\\":\\\"ο\\\",\\\"omid\\\":\\\"⦶\\\",\\\"ominus\\\":\\\"⊖\\\",\\\"Oopf\\\":\\\"𝕆\\\",\\\"oopf\\\":\\\"𝕠\\\",\\\"opar\\\":\\\"⦷\\\",\\\"OpenCurlyDoubleQuote\\\":\\\"“\\\",\\\"OpenCurlyQuote\\\":\\\"‘\\\",\\\"operp\\\":\\\"⦹\\\",\\\"oplus\\\":\\\"⊕\\\",\\\"orarr\\\":\\\"↻\\\",\\\"Or\\\":\\\"⩔\\\",\\\"or\\\":\\\"∨\\\",\\\"ord\\\":\\\"⩝\\\",\\\"order\\\":\\\"ℴ\\\",\\\"orderof\\\":\\\"ℴ\\\",\\\"ordf\\\":\\\"ª\\\",\\\"ordm\\\":\\\"º\\\",\\\"origof\\\":\\\"⊶\\\",\\\"oror\\\":\\\"⩖\\\",\\\"orslope\\\":\\\"⩗\\\",\\\"orv\\\":\\\"⩛\\\",\\\"oS\\\":\\\"Ⓢ\\\",\\\"Oscr\\\":\\\"𝒪\\\",\\\"oscr\\\":\\\"ℴ\\\",\\\"Oslash\\\":\\\"Ø\\\",\\\"oslash\\\":\\\"ø\\\",\\\"osol\\\":\\\"⊘\\\",\\\"Otilde\\\":\\\"Õ\\\",\\\"otilde\\\":\\\"õ\\\",\\\"otimesas\\\":\\\"⨶\\\",\\\"Otimes\\\":\\\"⨷\\\",\\\"otimes\\\":\\\"⊗\\\",\\\"Ouml\\\":\\\"Ö\\\",\\\"ouml\\\":\\\"ö\\\",\\\"ovbar\\\":\\\"⌽\\\",\\\"OverBar\\\":\\\"‾\\\",\\\"OverBrace\\\":\\\"⏞\\\",\\\"OverBracket\\\":\\\"⎴\\\",\\\"OverParenthesis\\\":\\\"⏜\\\",\\\"para\\\":\\\"¶\\\",\\\"parallel\\\":\\\"∥\\\",\\\"par\\\":\\\"∥\\\",\\\"parsim\\\":\\\"⫳\\\",\\\"parsl\\\":\\\"⫽\\\",\\\"part\\\":\\\"∂\\\",\\\"PartialD\\\":\\\"∂\\\",\\\"Pcy\\\":\\\"П\\\",\\\"pcy\\\":\\\"п\\\",\\\"percnt\\\":\\\"%\\\",\\\"period\\\":\\\".\\\",\\\"permil\\\":\\\"‰\\\",\\\"perp\\\":\\\"⊥\\\",\\\"pertenk\\\":\\\"‱\\\",\\\"Pfr\\\":\\\"𝔓\\\",\\\"pfr\\\":\\\"𝔭\\\",\\\"Phi\\\":\\\"Φ\\\",\\\"phi\\\":\\\"φ\\\",\\\"phiv\\\":\\\"ϕ\\\",\\\"phmmat\\\":\\\"ℳ\\\",\\\"phone\\\":\\\"☎\\\",\\\"Pi\\\":\\\"Π\\\",\\\"pi\\\":\\\"π\\\",\\\"pitchfork\\\":\\\"⋔\\\",\\\"piv\\\":\\\"ϖ\\\",\\\"planck\\\":\\\"ℏ\\\",\\\"planckh\\\":\\\"ℎ\\\",\\\"plankv\\\":\\\"ℏ\\\",\\\"plusacir\\\":\\\"⨣\\\",\\\"plusb\\\":\\\"⊞\\\",\\\"pluscir\\\":\\\"⨢\\\",\\\"plus\\\":\\\"+\\\",\\\"plusdo\\\":\\\"∔\\\",\\\"plusdu\\\":\\\"⨥\\\",\\\"pluse\\\":\\\"⩲\\\",\\\"PlusMinus\\\":\\\"±\\\",\\\"plusmn\\\":\\\"±\\\",\\\"plussim\\\":\\\"⨦\\\",\\\"plustwo\\\":\\\"⨧\\\",\\\"pm\\\":\\\"±\\\",\\\"Poincareplane\\\":\\\"ℌ\\\",\\\"pointint\\\":\\\"⨕\\\",\\\"popf\\\":\\\"𝕡\\\",\\\"Popf\\\":\\\"ℙ\\\",\\\"pound\\\":\\\"£\\\",\\\"prap\\\":\\\"⪷\\\",\\\"Pr\\\":\\\"⪻\\\",\\\"pr\\\":\\\"≺\\\",\\\"prcue\\\":\\\"≼\\\",\\\"precapprox\\\":\\\"⪷\\\",\\\"prec\\\":\\\"≺\\\",\\\"preccurlyeq\\\":\\\"≼\\\",\\\"Precedes\\\":\\\"≺\\\",\\\"PrecedesEqual\\\":\\\"⪯\\\",\\\"PrecedesSlantEqual\\\":\\\"≼\\\",\\\"PrecedesTilde\\\":\\\"≾\\\",\\\"preceq\\\":\\\"⪯\\\",\\\"precnapprox\\\":\\\"⪹\\\",\\\"precneqq\\\":\\\"⪵\\\",\\\"precnsim\\\":\\\"⋨\\\",\\\"pre\\\":\\\"⪯\\\",\\\"prE\\\":\\\"⪳\\\",\\\"precsim\\\":\\\"≾\\\",\\\"prime\\\":\\\"′\\\",\\\"Prime\\\":\\\"″\\\",\\\"primes\\\":\\\"ℙ\\\",\\\"prnap\\\":\\\"⪹\\\",\\\"prnE\\\":\\\"⪵\\\",\\\"prnsim\\\":\\\"⋨\\\",\\\"prod\\\":\\\"∏\\\",\\\"Product\\\":\\\"∏\\\",\\\"profalar\\\":\\\"⌮\\\",\\\"profline\\\":\\\"⌒\\\",\\\"profsurf\\\":\\\"⌓\\\",\\\"prop\\\":\\\"∝\\\",\\\"Proportional\\\":\\\"∝\\\",\\\"Proportion\\\":\\\"∷\\\",\\\"propto\\\":\\\"∝\\\",\\\"prsim\\\":\\\"≾\\\",\\\"prurel\\\":\\\"⊰\\\",\\\"Pscr\\\":\\\"𝒫\\\",\\\"pscr\\\":\\\"𝓅\\\",\\\"Psi\\\":\\\"Ψ\\\",\\\"psi\\\":\\\"ψ\\\",\\\"puncsp\\\":\\\" \\\",\\\"Qfr\\\":\\\"𝔔\\\",\\\"qfr\\\":\\\"𝔮\\\",\\\"qint\\\":\\\"⨌\\\",\\\"qopf\\\":\\\"𝕢\\\",\\\"Qopf\\\":\\\"ℚ\\\",\\\"qprime\\\":\\\"⁗\\\",\\\"Qscr\\\":\\\"𝒬\\\",\\\"qscr\\\":\\\"𝓆\\\",\\\"quaternions\\\":\\\"ℍ\\\",\\\"quatint\\\":\\\"⨖\\\",\\\"quest\\\":\\\"?\\\",\\\"questeq\\\":\\\"≟\\\",\\\"quot\\\":\\\"\\\\\\\"\\\",\\\"QUOT\\\":\\\"\\\\\\\"\\\",\\\"rAarr\\\":\\\"⇛\\\",\\\"race\\\":\\\"∽̱\\\",\\\"Racute\\\":\\\"Ŕ\\\",\\\"racute\\\":\\\"ŕ\\\",\\\"radic\\\":\\\"√\\\",\\\"raemptyv\\\":\\\"⦳\\\",\\\"rang\\\":\\\"⟩\\\",\\\"Rang\\\":\\\"⟫\\\",\\\"rangd\\\":\\\"⦒\\\",\\\"range\\\":\\\"⦥\\\",\\\"rangle\\\":\\\"⟩\\\",\\\"raquo\\\":\\\"»\\\",\\\"rarrap\\\":\\\"⥵\\\",\\\"rarrb\\\":\\\"⇥\\\",\\\"rarrbfs\\\":\\\"⤠\\\",\\\"rarrc\\\":\\\"⤳\\\",\\\"rarr\\\":\\\"→\\\",\\\"Rarr\\\":\\\"↠\\\",\\\"rArr\\\":\\\"⇒\\\",\\\"rarrfs\\\":\\\"⤞\\\",\\\"rarrhk\\\":\\\"↪\\\",\\\"rarrlp\\\":\\\"↬\\\",\\\"rarrpl\\\":\\\"⥅\\\",\\\"rarrsim\\\":\\\"⥴\\\",\\\"Rarrtl\\\":\\\"⤖\\\",\\\"rarrtl\\\":\\\"↣\\\",\\\"rarrw\\\":\\\"↝\\\",\\\"ratail\\\":\\\"⤚\\\",\\\"rAtail\\\":\\\"⤜\\\",\\\"ratio\\\":\\\"∶\\\",\\\"rationals\\\":\\\"ℚ\\\",\\\"rbarr\\\":\\\"⤍\\\",\\\"rBarr\\\":\\\"⤏\\\",\\\"RBarr\\\":\\\"⤐\\\",\\\"rbbrk\\\":\\\"❳\\\",\\\"rbrace\\\":\\\"}\\\",\\\"rbrack\\\":\\\"]\\\",\\\"rbrke\\\":\\\"⦌\\\",\\\"rbrksld\\\":\\\"⦎\\\",\\\"rbrkslu\\\":\\\"⦐\\\",\\\"Rcaron\\\":\\\"Ř\\\",\\\"rcaron\\\":\\\"ř\\\",\\\"Rcedil\\\":\\\"Ŗ\\\",\\\"rcedil\\\":\\\"ŗ\\\",\\\"rceil\\\":\\\"⌉\\\",\\\"rcub\\\":\\\"}\\\",\\\"Rcy\\\":\\\"Р\\\",\\\"rcy\\\":\\\"р\\\",\\\"rdca\\\":\\\"⤷\\\",\\\"rdldhar\\\":\\\"⥩\\\",\\\"rdquo\\\":\\\"”\\\",\\\"rdquor\\\":\\\"”\\\",\\\"rdsh\\\":\\\"↳\\\",\\\"real\\\":\\\"ℜ\\\",\\\"realine\\\":\\\"ℛ\\\",\\\"realpart\\\":\\\"ℜ\\\",\\\"reals\\\":\\\"ℝ\\\",\\\"Re\\\":\\\"ℜ\\\",\\\"rect\\\":\\\"▭\\\",\\\"reg\\\":\\\"®\\\",\\\"REG\\\":\\\"®\\\",\\\"ReverseElement\\\":\\\"∋\\\",\\\"ReverseEquilibrium\\\":\\\"⇋\\\",\\\"ReverseUpEquilibrium\\\":\\\"⥯\\\",\\\"rfisht\\\":\\\"⥽\\\",\\\"rfloor\\\":\\\"⌋\\\",\\\"rfr\\\":\\\"𝔯\\\",\\\"Rfr\\\":\\\"ℜ\\\",\\\"rHar\\\":\\\"⥤\\\",\\\"rhard\\\":\\\"⇁\\\",\\\"rharu\\\":\\\"⇀\\\",\\\"rharul\\\":\\\"⥬\\\",\\\"Rho\\\":\\\"Ρ\\\",\\\"rho\\\":\\\"ρ\\\",\\\"rhov\\\":\\\"ϱ\\\",\\\"RightAngleBracket\\\":\\\"⟩\\\",\\\"RightArrowBar\\\":\\\"⇥\\\",\\\"rightarrow\\\":\\\"→\\\",\\\"RightArrow\\\":\\\"→\\\",\\\"Rightarrow\\\":\\\"⇒\\\",\\\"RightArrowLeftArrow\\\":\\\"⇄\\\",\\\"rightarrowtail\\\":\\\"↣\\\",\\\"RightCeiling\\\":\\\"⌉\\\",\\\"RightDoubleBracket\\\":\\\"⟧\\\",\\\"RightDownTeeVector\\\":\\\"⥝\\\",\\\"RightDownVectorBar\\\":\\\"⥕\\\",\\\"RightDownVector\\\":\\\"⇂\\\",\\\"RightFloor\\\":\\\"⌋\\\",\\\"rightharpoondown\\\":\\\"⇁\\\",\\\"rightharpoonup\\\":\\\"⇀\\\",\\\"rightleftarrows\\\":\\\"⇄\\\",\\\"rightleftharpoons\\\":\\\"⇌\\\",\\\"rightrightarrows\\\":\\\"⇉\\\",\\\"rightsquigarrow\\\":\\\"↝\\\",\\\"RightTeeArrow\\\":\\\"↦\\\",\\\"RightTee\\\":\\\"⊢\\\",\\\"RightTeeVector\\\":\\\"⥛\\\",\\\"rightthreetimes\\\":\\\"⋌\\\",\\\"RightTriangleBar\\\":\\\"⧐\\\",\\\"RightTriangle\\\":\\\"⊳\\\",\\\"RightTriangleEqual\\\":\\\"⊵\\\",\\\"RightUpDownVector\\\":\\\"⥏\\\",\\\"RightUpTeeVector\\\":\\\"⥜\\\",\\\"RightUpVectorBar\\\":\\\"⥔\\\",\\\"RightUpVector\\\":\\\"↾\\\",\\\"RightVectorBar\\\":\\\"⥓\\\",\\\"RightVector\\\":\\\"⇀\\\",\\\"ring\\\":\\\"˚\\\",\\\"risingdotseq\\\":\\\"≓\\\",\\\"rlarr\\\":\\\"⇄\\\",\\\"rlhar\\\":\\\"⇌\\\",\\\"rlm\\\":\\\"‏\\\",\\\"rmoustache\\\":\\\"⎱\\\",\\\"rmoust\\\":\\\"⎱\\\",\\\"rnmid\\\":\\\"⫮\\\",\\\"roang\\\":\\\"⟭\\\",\\\"roarr\\\":\\\"⇾\\\",\\\"robrk\\\":\\\"⟧\\\",\\\"ropar\\\":\\\"⦆\\\",\\\"ropf\\\":\\\"𝕣\\\",\\\"Ropf\\\":\\\"ℝ\\\",\\\"roplus\\\":\\\"⨮\\\",\\\"rotimes\\\":\\\"⨵\\\",\\\"RoundImplies\\\":\\\"⥰\\\",\\\"rpar\\\":\\\")\\\",\\\"rpargt\\\":\\\"⦔\\\",\\\"rppolint\\\":\\\"⨒\\\",\\\"rrarr\\\":\\\"⇉\\\",\\\"Rrightarrow\\\":\\\"⇛\\\",\\\"rsaquo\\\":\\\"›\\\",\\\"rscr\\\":\\\"𝓇\\\",\\\"Rscr\\\":\\\"ℛ\\\",\\\"rsh\\\":\\\"↱\\\",\\\"Rsh\\\":\\\"↱\\\",\\\"rsqb\\\":\\\"]\\\",\\\"rsquo\\\":\\\"’\\\",\\\"rsquor\\\":\\\"’\\\",\\\"rthree\\\":\\\"⋌\\\",\\\"rtimes\\\":\\\"⋊\\\",\\\"rtri\\\":\\\"▹\\\",\\\"rtrie\\\":\\\"⊵\\\",\\\"rtrif\\\":\\\"▸\\\",\\\"rtriltri\\\":\\\"⧎\\\",\\\"RuleDelayed\\\":\\\"⧴\\\",\\\"ruluhar\\\":\\\"⥨\\\",\\\"rx\\\":\\\"℞\\\",\\\"Sacute\\\":\\\"Ś\\\",\\\"sacute\\\":\\\"ś\\\",\\\"sbquo\\\":\\\"‚\\\",\\\"scap\\\":\\\"⪸\\\",\\\"Scaron\\\":\\\"Š\\\",\\\"scaron\\\":\\\"š\\\",\\\"Sc\\\":\\\"⪼\\\",\\\"sc\\\":\\\"≻\\\",\\\"sccue\\\":\\\"≽\\\",\\\"sce\\\":\\\"⪰\\\",\\\"scE\\\":\\\"⪴\\\",\\\"Scedil\\\":\\\"Ş\\\",\\\"scedil\\\":\\\"ş\\\",\\\"Scirc\\\":\\\"Ŝ\\\",\\\"scirc\\\":\\\"ŝ\\\",\\\"scnap\\\":\\\"⪺\\\",\\\"scnE\\\":\\\"⪶\\\",\\\"scnsim\\\":\\\"⋩\\\",\\\"scpolint\\\":\\\"⨓\\\",\\\"scsim\\\":\\\"≿\\\",\\\"Scy\\\":\\\"С\\\",\\\"scy\\\":\\\"с\\\",\\\"sdotb\\\":\\\"⊡\\\",\\\"sdot\\\":\\\"⋅\\\",\\\"sdote\\\":\\\"⩦\\\",\\\"searhk\\\":\\\"⤥\\\",\\\"searr\\\":\\\"↘\\\",\\\"seArr\\\":\\\"⇘\\\",\\\"searrow\\\":\\\"↘\\\",\\\"sect\\\":\\\"§\\\",\\\"semi\\\":\\\";\\\",\\\"seswar\\\":\\\"⤩\\\",\\\"setminus\\\":\\\"∖\\\",\\\"setmn\\\":\\\"∖\\\",\\\"sext\\\":\\\"✶\\\",\\\"Sfr\\\":\\\"𝔖\\\",\\\"sfr\\\":\\\"𝔰\\\",\\\"sfrown\\\":\\\"⌢\\\",\\\"sharp\\\":\\\"♯\\\",\\\"SHCHcy\\\":\\\"Щ\\\",\\\"shchcy\\\":\\\"щ\\\",\\\"SHcy\\\":\\\"Ш\\\",\\\"shcy\\\":\\\"ш\\\",\\\"ShortDownArrow\\\":\\\"↓\\\",\\\"ShortLeftArrow\\\":\\\"←\\\",\\\"shortmid\\\":\\\"∣\\\",\\\"shortparallel\\\":\\\"∥\\\",\\\"ShortRightArrow\\\":\\\"→\\\",\\\"ShortUpArrow\\\":\\\"↑\\\",\\\"shy\\\":\\\"­\\\",\\\"Sigma\\\":\\\"Σ\\\",\\\"sigma\\\":\\\"σ\\\",\\\"sigmaf\\\":\\\"ς\\\",\\\"sigmav\\\":\\\"ς\\\",\\\"sim\\\":\\\"∼\\\",\\\"simdot\\\":\\\"⩪\\\",\\\"sime\\\":\\\"≃\\\",\\\"simeq\\\":\\\"≃\\\",\\\"simg\\\":\\\"⪞\\\",\\\"simgE\\\":\\\"⪠\\\",\\\"siml\\\":\\\"⪝\\\",\\\"simlE\\\":\\\"⪟\\\",\\\"simne\\\":\\\"≆\\\",\\\"simplus\\\":\\\"⨤\\\",\\\"simrarr\\\":\\\"⥲\\\",\\\"slarr\\\":\\\"←\\\",\\\"SmallCircle\\\":\\\"∘\\\",\\\"smallsetminus\\\":\\\"∖\\\",\\\"smashp\\\":\\\"⨳\\\",\\\"smeparsl\\\":\\\"⧤\\\",\\\"smid\\\":\\\"∣\\\",\\\"smile\\\":\\\"⌣\\\",\\\"smt\\\":\\\"⪪\\\",\\\"smte\\\":\\\"⪬\\\",\\\"smtes\\\":\\\"⪬︀\\\",\\\"SOFTcy\\\":\\\"Ь\\\",\\\"softcy\\\":\\\"ь\\\",\\\"solbar\\\":\\\"⌿\\\",\\\"solb\\\":\\\"⧄\\\",\\\"sol\\\":\\\"/\\\",\\\"Sopf\\\":\\\"𝕊\\\",\\\"sopf\\\":\\\"𝕤\\\",\\\"spades\\\":\\\"♠\\\",\\\"spadesuit\\\":\\\"♠\\\",\\\"spar\\\":\\\"∥\\\",\\\"sqcap\\\":\\\"⊓\\\",\\\"sqcaps\\\":\\\"⊓︀\\\",\\\"sqcup\\\":\\\"⊔\\\",\\\"sqcups\\\":\\\"⊔︀\\\",\\\"Sqrt\\\":\\\"√\\\",\\\"sqsub\\\":\\\"⊏\\\",\\\"sqsube\\\":\\\"⊑\\\",\\\"sqsubset\\\":\\\"⊏\\\",\\\"sqsubseteq\\\":\\\"⊑\\\",\\\"sqsup\\\":\\\"⊐\\\",\\\"sqsupe\\\":\\\"⊒\\\",\\\"sqsupset\\\":\\\"⊐\\\",\\\"sqsupseteq\\\":\\\"⊒\\\",\\\"square\\\":\\\"□\\\",\\\"Square\\\":\\\"□\\\",\\\"SquareIntersection\\\":\\\"⊓\\\",\\\"SquareSubset\\\":\\\"⊏\\\",\\\"SquareSubsetEqual\\\":\\\"⊑\\\",\\\"SquareSuperset\\\":\\\"⊐\\\",\\\"SquareSupersetEqual\\\":\\\"⊒\\\",\\\"SquareUnion\\\":\\\"⊔\\\",\\\"squarf\\\":\\\"▪\\\",\\\"squ\\\":\\\"□\\\",\\\"squf\\\":\\\"▪\\\",\\\"srarr\\\":\\\"→\\\",\\\"Sscr\\\":\\\"𝒮\\\",\\\"sscr\\\":\\\"𝓈\\\",\\\"ssetmn\\\":\\\"∖\\\",\\\"ssmile\\\":\\\"⌣\\\",\\\"sstarf\\\":\\\"⋆\\\",\\\"Star\\\":\\\"⋆\\\",\\\"star\\\":\\\"☆\\\",\\\"starf\\\":\\\"★\\\",\\\"straightepsilon\\\":\\\"ϵ\\\",\\\"straightphi\\\":\\\"ϕ\\\",\\\"strns\\\":\\\"¯\\\",\\\"sub\\\":\\\"⊂\\\",\\\"Sub\\\":\\\"⋐\\\",\\\"subdot\\\":\\\"⪽\\\",\\\"subE\\\":\\\"⫅\\\",\\\"sube\\\":\\\"⊆\\\",\\\"subedot\\\":\\\"⫃\\\",\\\"submult\\\":\\\"⫁\\\",\\\"subnE\\\":\\\"⫋\\\",\\\"subne\\\":\\\"⊊\\\",\\\"subplus\\\":\\\"⪿\\\",\\\"subrarr\\\":\\\"⥹\\\",\\\"subset\\\":\\\"⊂\\\",\\\"Subset\\\":\\\"⋐\\\",\\\"subseteq\\\":\\\"⊆\\\",\\\"subseteqq\\\":\\\"⫅\\\",\\\"SubsetEqual\\\":\\\"⊆\\\",\\\"subsetneq\\\":\\\"⊊\\\",\\\"subsetneqq\\\":\\\"⫋\\\",\\\"subsim\\\":\\\"⫇\\\",\\\"subsub\\\":\\\"⫕\\\",\\\"subsup\\\":\\\"⫓\\\",\\\"succapprox\\\":\\\"⪸\\\",\\\"succ\\\":\\\"≻\\\",\\\"succcurlyeq\\\":\\\"≽\\\",\\\"Succeeds\\\":\\\"≻\\\",\\\"SucceedsEqual\\\":\\\"⪰\\\",\\\"SucceedsSlantEqual\\\":\\\"≽\\\",\\\"SucceedsTilde\\\":\\\"≿\\\",\\\"succeq\\\":\\\"⪰\\\",\\\"succnapprox\\\":\\\"⪺\\\",\\\"succneqq\\\":\\\"⪶\\\",\\\"succnsim\\\":\\\"⋩\\\",\\\"succsim\\\":\\\"≿\\\",\\\"SuchThat\\\":\\\"∋\\\",\\\"sum\\\":\\\"∑\\\",\\\"Sum\\\":\\\"∑\\\",\\\"sung\\\":\\\"♪\\\",\\\"sup1\\\":\\\"¹\\\",\\\"sup2\\\":\\\"²\\\",\\\"sup3\\\":\\\"³\\\",\\\"sup\\\":\\\"⊃\\\",\\\"Sup\\\":\\\"⋑\\\",\\\"supdot\\\":\\\"⪾\\\",\\\"supdsub\\\":\\\"⫘\\\",\\\"supE\\\":\\\"⫆\\\",\\\"supe\\\":\\\"⊇\\\",\\\"supedot\\\":\\\"⫄\\\",\\\"Superset\\\":\\\"⊃\\\",\\\"SupersetEqual\\\":\\\"⊇\\\",\\\"suphsol\\\":\\\"⟉\\\",\\\"suphsub\\\":\\\"⫗\\\",\\\"suplarr\\\":\\\"⥻\\\",\\\"supmult\\\":\\\"⫂\\\",\\\"supnE\\\":\\\"⫌\\\",\\\"supne\\\":\\\"⊋\\\",\\\"supplus\\\":\\\"⫀\\\",\\\"supset\\\":\\\"⊃\\\",\\\"Supset\\\":\\\"⋑\\\",\\\"supseteq\\\":\\\"⊇\\\",\\\"supseteqq\\\":\\\"⫆\\\",\\\"supsetneq\\\":\\\"⊋\\\",\\\"supsetneqq\\\":\\\"⫌\\\",\\\"supsim\\\":\\\"⫈\\\",\\\"supsub\\\":\\\"⫔\\\",\\\"supsup\\\":\\\"⫖\\\",\\\"swarhk\\\":\\\"⤦\\\",\\\"swarr\\\":\\\"↙\\\",\\\"swArr\\\":\\\"⇙\\\",\\\"swarrow\\\":\\\"↙\\\",\\\"swnwar\\\":\\\"⤪\\\",\\\"szlig\\\":\\\"ß\\\",\\\"Tab\\\":\\\"\\\\t\\\",\\\"target\\\":\\\"⌖\\\",\\\"Tau\\\":\\\"Τ\\\",\\\"tau\\\":\\\"τ\\\",\\\"tbrk\\\":\\\"⎴\\\",\\\"Tcaron\\\":\\\"Ť\\\",\\\"tcaron\\\":\\\"ť\\\",\\\"Tcedil\\\":\\\"Ţ\\\",\\\"tcedil\\\":\\\"ţ\\\",\\\"Tcy\\\":\\\"Т\\\",\\\"tcy\\\":\\\"т\\\",\\\"tdot\\\":\\\"⃛\\\",\\\"telrec\\\":\\\"⌕\\\",\\\"Tfr\\\":\\\"𝔗\\\",\\\"tfr\\\":\\\"𝔱\\\",\\\"there4\\\":\\\"∴\\\",\\\"therefore\\\":\\\"∴\\\",\\\"Therefore\\\":\\\"∴\\\",\\\"Theta\\\":\\\"Θ\\\",\\\"theta\\\":\\\"θ\\\",\\\"thetasym\\\":\\\"ϑ\\\",\\\"thetav\\\":\\\"ϑ\\\",\\\"thickapprox\\\":\\\"≈\\\",\\\"thicksim\\\":\\\"∼\\\",\\\"ThickSpace\\\":\\\"  \\\",\\\"ThinSpace\\\":\\\" \\\",\\\"thinsp\\\":\\\" \\\",\\\"thkap\\\":\\\"≈\\\",\\\"thksim\\\":\\\"∼\\\",\\\"THORN\\\":\\\"Þ\\\",\\\"thorn\\\":\\\"þ\\\",\\\"tilde\\\":\\\"˜\\\",\\\"Tilde\\\":\\\"∼\\\",\\\"TildeEqual\\\":\\\"≃\\\",\\\"TildeFullEqual\\\":\\\"≅\\\",\\\"TildeTilde\\\":\\\"≈\\\",\\\"timesbar\\\":\\\"⨱\\\",\\\"timesb\\\":\\\"⊠\\\",\\\"times\\\":\\\"×\\\",\\\"timesd\\\":\\\"⨰\\\",\\\"tint\\\":\\\"∭\\\",\\\"toea\\\":\\\"⤨\\\",\\\"topbot\\\":\\\"⌶\\\",\\\"topcir\\\":\\\"⫱\\\",\\\"top\\\":\\\"⊤\\\",\\\"Topf\\\":\\\"𝕋\\\",\\\"topf\\\":\\\"𝕥\\\",\\\"topfork\\\":\\\"⫚\\\",\\\"tosa\\\":\\\"⤩\\\",\\\"tprime\\\":\\\"‴\\\",\\\"trade\\\":\\\"™\\\",\\\"TRADE\\\":\\\"™\\\",\\\"triangle\\\":\\\"▵\\\",\\\"triangledown\\\":\\\"▿\\\",\\\"triangleleft\\\":\\\"◃\\\",\\\"trianglelefteq\\\":\\\"⊴\\\",\\\"triangleq\\\":\\\"≜\\\",\\\"triangleright\\\":\\\"▹\\\",\\\"trianglerighteq\\\":\\\"⊵\\\",\\\"tridot\\\":\\\"◬\\\",\\\"trie\\\":\\\"≜\\\",\\\"triminus\\\":\\\"⨺\\\",\\\"TripleDot\\\":\\\"⃛\\\",\\\"triplus\\\":\\\"⨹\\\",\\\"trisb\\\":\\\"⧍\\\",\\\"tritime\\\":\\\"⨻\\\",\\\"trpezium\\\":\\\"⏢\\\",\\\"Tscr\\\":\\\"𝒯\\\",\\\"tscr\\\":\\\"𝓉\\\",\\\"TScy\\\":\\\"Ц\\\",\\\"tscy\\\":\\\"ц\\\",\\\"TSHcy\\\":\\\"Ћ\\\",\\\"tshcy\\\":\\\"ћ\\\",\\\"Tstrok\\\":\\\"Ŧ\\\",\\\"tstrok\\\":\\\"ŧ\\\",\\\"twixt\\\":\\\"≬\\\",\\\"twoheadleftarrow\\\":\\\"↞\\\",\\\"twoheadrightarrow\\\":\\\"↠\\\",\\\"Uacute\\\":\\\"Ú\\\",\\\"uacute\\\":\\\"ú\\\",\\\"uarr\\\":\\\"↑\\\",\\\"Uarr\\\":\\\"↟\\\",\\\"uArr\\\":\\\"⇑\\\",\\\"Uarrocir\\\":\\\"⥉\\\",\\\"Ubrcy\\\":\\\"Ў\\\",\\\"ubrcy\\\":\\\"ў\\\",\\\"Ubreve\\\":\\\"Ŭ\\\",\\\"ubreve\\\":\\\"ŭ\\\",\\\"Ucirc\\\":\\\"Û\\\",\\\"ucirc\\\":\\\"û\\\",\\\"Ucy\\\":\\\"У\\\",\\\"ucy\\\":\\\"у\\\",\\\"udarr\\\":\\\"⇅\\\",\\\"Udblac\\\":\\\"Ű\\\",\\\"udblac\\\":\\\"ű\\\",\\\"udhar\\\":\\\"⥮\\\",\\\"ufisht\\\":\\\"⥾\\\",\\\"Ufr\\\":\\\"𝔘\\\",\\\"ufr\\\":\\\"𝔲\\\",\\\"Ugrave\\\":\\\"Ù\\\",\\\"ugrave\\\":\\\"ù\\\",\\\"uHar\\\":\\\"⥣\\\",\\\"uharl\\\":\\\"↿\\\",\\\"uharr\\\":\\\"↾\\\",\\\"uhblk\\\":\\\"▀\\\",\\\"ulcorn\\\":\\\"⌜\\\",\\\"ulcorner\\\":\\\"⌜\\\",\\\"ulcrop\\\":\\\"⌏\\\",\\\"ultri\\\":\\\"◸\\\",\\\"Umacr\\\":\\\"Ū\\\",\\\"umacr\\\":\\\"ū\\\",\\\"uml\\\":\\\"¨\\\",\\\"UnderBar\\\":\\\"_\\\",\\\"UnderBrace\\\":\\\"⏟\\\",\\\"UnderBracket\\\":\\\"⎵\\\",\\\"UnderParenthesis\\\":\\\"⏝\\\",\\\"Union\\\":\\\"⋃\\\",\\\"UnionPlus\\\":\\\"⊎\\\",\\\"Uogon\\\":\\\"Ų\\\",\\\"uogon\\\":\\\"ų\\\",\\\"Uopf\\\":\\\"𝕌\\\",\\\"uopf\\\":\\\"𝕦\\\",\\\"UpArrowBar\\\":\\\"⤒\\\",\\\"uparrow\\\":\\\"↑\\\",\\\"UpArrow\\\":\\\"↑\\\",\\\"Uparrow\\\":\\\"⇑\\\",\\\"UpArrowDownArrow\\\":\\\"⇅\\\",\\\"updownarrow\\\":\\\"↕\\\",\\\"UpDownArrow\\\":\\\"↕\\\",\\\"Updownarrow\\\":\\\"⇕\\\",\\\"UpEquilibrium\\\":\\\"⥮\\\",\\\"upharpoonleft\\\":\\\"↿\\\",\\\"upharpoonright\\\":\\\"↾\\\",\\\"uplus\\\":\\\"⊎\\\",\\\"UpperLeftArrow\\\":\\\"↖\\\",\\\"UpperRightArrow\\\":\\\"↗\\\",\\\"upsi\\\":\\\"υ\\\",\\\"Upsi\\\":\\\"ϒ\\\",\\\"upsih\\\":\\\"ϒ\\\",\\\"Upsilon\\\":\\\"Υ\\\",\\\"upsilon\\\":\\\"υ\\\",\\\"UpTeeArrow\\\":\\\"↥\\\",\\\"UpTee\\\":\\\"⊥\\\",\\\"upuparrows\\\":\\\"⇈\\\",\\\"urcorn\\\":\\\"⌝\\\",\\\"urcorner\\\":\\\"⌝\\\",\\\"urcrop\\\":\\\"⌎\\\",\\\"Uring\\\":\\\"Ů\\\",\\\"uring\\\":\\\"ů\\\",\\\"urtri\\\":\\\"◹\\\",\\\"Uscr\\\":\\\"𝒰\\\",\\\"uscr\\\":\\\"𝓊\\\",\\\"utdot\\\":\\\"⋰\\\",\\\"Utilde\\\":\\\"Ũ\\\",\\\"utilde\\\":\\\"ũ\\\",\\\"utri\\\":\\\"▵\\\",\\\"utrif\\\":\\\"▴\\\",\\\"uuarr\\\":\\\"⇈\\\",\\\"Uuml\\\":\\\"Ü\\\",\\\"uuml\\\":\\\"ü\\\",\\\"uwangle\\\":\\\"⦧\\\",\\\"vangrt\\\":\\\"⦜\\\",\\\"varepsilon\\\":\\\"ϵ\\\",\\\"varkappa\\\":\\\"ϰ\\\",\\\"varnothing\\\":\\\"∅\\\",\\\"varphi\\\":\\\"ϕ\\\",\\\"varpi\\\":\\\"ϖ\\\",\\\"varpropto\\\":\\\"∝\\\",\\\"varr\\\":\\\"↕\\\",\\\"vArr\\\":\\\"⇕\\\",\\\"varrho\\\":\\\"ϱ\\\",\\\"varsigma\\\":\\\"ς\\\",\\\"varsubsetneq\\\":\\\"⊊︀\\\",\\\"varsubsetneqq\\\":\\\"⫋︀\\\",\\\"varsupsetneq\\\":\\\"⊋︀\\\",\\\"varsupsetneqq\\\":\\\"⫌︀\\\",\\\"vartheta\\\":\\\"ϑ\\\",\\\"vartriangleleft\\\":\\\"⊲\\\",\\\"vartriangleright\\\":\\\"⊳\\\",\\\"vBar\\\":\\\"⫨\\\",\\\"Vbar\\\":\\\"⫫\\\",\\\"vBarv\\\":\\\"⫩\\\",\\\"Vcy\\\":\\\"В\\\",\\\"vcy\\\":\\\"в\\\",\\\"vdash\\\":\\\"⊢\\\",\\\"vDash\\\":\\\"⊨\\\",\\\"Vdash\\\":\\\"⊩\\\",\\\"VDash\\\":\\\"⊫\\\",\\\"Vdashl\\\":\\\"⫦\\\",\\\"veebar\\\":\\\"⊻\\\",\\\"vee\\\":\\\"∨\\\",\\\"Vee\\\":\\\"⋁\\\",\\\"veeeq\\\":\\\"≚\\\",\\\"vellip\\\":\\\"⋮\\\",\\\"verbar\\\":\\\"|\\\",\\\"Verbar\\\":\\\"‖\\\",\\\"vert\\\":\\\"|\\\",\\\"Vert\\\":\\\"‖\\\",\\\"VerticalBar\\\":\\\"∣\\\",\\\"VerticalLine\\\":\\\"|\\\",\\\"VerticalSeparator\\\":\\\"❘\\\",\\\"VerticalTilde\\\":\\\"≀\\\",\\\"VeryThinSpace\\\":\\\" \\\",\\\"Vfr\\\":\\\"𝔙\\\",\\\"vfr\\\":\\\"𝔳\\\",\\\"vltri\\\":\\\"⊲\\\",\\\"vnsub\\\":\\\"⊂⃒\\\",\\\"vnsup\\\":\\\"⊃⃒\\\",\\\"Vopf\\\":\\\"𝕍\\\",\\\"vopf\\\":\\\"𝕧\\\",\\\"vprop\\\":\\\"∝\\\",\\\"vrtri\\\":\\\"⊳\\\",\\\"Vscr\\\":\\\"𝒱\\\",\\\"vscr\\\":\\\"𝓋\\\",\\\"vsubnE\\\":\\\"⫋︀\\\",\\\"vsubne\\\":\\\"⊊︀\\\",\\\"vsupnE\\\":\\\"⫌︀\\\",\\\"vsupne\\\":\\\"⊋︀\\\",\\\"Vvdash\\\":\\\"⊪\\\",\\\"vzigzag\\\":\\\"⦚\\\",\\\"Wcirc\\\":\\\"Ŵ\\\",\\\"wcirc\\\":\\\"ŵ\\\",\\\"wedbar\\\":\\\"⩟\\\",\\\"wedge\\\":\\\"∧\\\",\\\"Wedge\\\":\\\"⋀\\\",\\\"wedgeq\\\":\\\"≙\\\",\\\"weierp\\\":\\\"℘\\\",\\\"Wfr\\\":\\\"𝔚\\\",\\\"wfr\\\":\\\"𝔴\\\",\\\"Wopf\\\":\\\"𝕎\\\",\\\"wopf\\\":\\\"𝕨\\\",\\\"wp\\\":\\\"℘\\\",\\\"wr\\\":\\\"≀\\\",\\\"wreath\\\":\\\"≀\\\",\\\"Wscr\\\":\\\"𝒲\\\",\\\"wscr\\\":\\\"𝓌\\\",\\\"xcap\\\":\\\"⋂\\\",\\\"xcirc\\\":\\\"◯\\\",\\\"xcup\\\":\\\"⋃\\\",\\\"xdtri\\\":\\\"▽\\\",\\\"Xfr\\\":\\\"𝔛\\\",\\\"xfr\\\":\\\"𝔵\\\",\\\"xharr\\\":\\\"⟷\\\",\\\"xhArr\\\":\\\"⟺\\\",\\\"Xi\\\":\\\"Ξ\\\",\\\"xi\\\":\\\"ξ\\\",\\\"xlarr\\\":\\\"⟵\\\",\\\"xlArr\\\":\\\"⟸\\\",\\\"xmap\\\":\\\"⟼\\\",\\\"xnis\\\":\\\"⋻\\\",\\\"xodot\\\":\\\"⨀\\\",\\\"Xopf\\\":\\\"𝕏\\\",\\\"xopf\\\":\\\"𝕩\\\",\\\"xoplus\\\":\\\"⨁\\\",\\\"xotime\\\":\\\"⨂\\\",\\\"xrarr\\\":\\\"⟶\\\",\\\"xrArr\\\":\\\"⟹\\\",\\\"Xscr\\\":\\\"𝒳\\\",\\\"xscr\\\":\\\"𝓍\\\",\\\"xsqcup\\\":\\\"⨆\\\",\\\"xuplus\\\":\\\"⨄\\\",\\\"xutri\\\":\\\"△\\\",\\\"xvee\\\":\\\"⋁\\\",\\\"xwedge\\\":\\\"⋀\\\",\\\"Yacute\\\":\\\"Ý\\\",\\\"yacute\\\":\\\"ý\\\",\\\"YAcy\\\":\\\"Я\\\",\\\"yacy\\\":\\\"я\\\",\\\"Ycirc\\\":\\\"Ŷ\\\",\\\"ycirc\\\":\\\"ŷ\\\",\\\"Ycy\\\":\\\"Ы\\\",\\\"ycy\\\":\\\"ы\\\",\\\"yen\\\":\\\"¥\\\",\\\"Yfr\\\":\\\"𝔜\\\",\\\"yfr\\\":\\\"𝔶\\\",\\\"YIcy\\\":\\\"Ї\\\",\\\"yicy\\\":\\\"ї\\\",\\\"Yopf\\\":\\\"𝕐\\\",\\\"yopf\\\":\\\"𝕪\\\",\\\"Yscr\\\":\\\"𝒴\\\",\\\"yscr\\\":\\\"𝓎\\\",\\\"YUcy\\\":\\\"Ю\\\",\\\"yucy\\\":\\\"ю\\\",\\\"yuml\\\":\\\"ÿ\\\",\\\"Yuml\\\":\\\"Ÿ\\\",\\\"Zacute\\\":\\\"Ź\\\",\\\"zacute\\\":\\\"ź\\\",\\\"Zcaron\\\":\\\"Ž\\\",\\\"zcaron\\\":\\\"ž\\\",\\\"Zcy\\\":\\\"З\\\",\\\"zcy\\\":\\\"з\\\",\\\"Zdot\\\":\\\"Ż\\\",\\\"zdot\\\":\\\"ż\\\",\\\"zeetrf\\\":\\\"ℨ\\\",\\\"ZeroWidthSpace\\\":\\\"​\\\",\\\"Zeta\\\":\\\"Ζ\\\",\\\"zeta\\\":\\\"ζ\\\",\\\"zfr\\\":\\\"𝔷\\\",\\\"Zfr\\\":\\\"ℨ\\\",\\\"ZHcy\\\":\\\"Ж\\\",\\\"zhcy\\\":\\\"ж\\\",\\\"zigrarr\\\":\\\"⇝\\\",\\\"zopf\\\":\\\"𝕫\\\",\\\"Zopf\\\":\\\"ℤ\\\",\\\"Zscr\\\":\\\"𝒵\\\",\\\"zscr\\\":\\\"𝓏\\\",\\\"zwj\\\":\\\"‍\\\",\\\"zwnj\\\":\\\"‌\\\"}\");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/entities.json?");

/***/ }),

/***/ "./node_modules/entities/lib/maps/legacy.json":
/*!****************************************************!*\
  !*** ./node_modules/entities/lib/maps/legacy.json ***!
  \****************************************************/
/*! exports provided: Aacute, aacute, Acirc, acirc, acute, AElig, aelig, Agrave, agrave, amp, AMP, Aring, aring, Atilde, atilde, Auml, auml, brvbar, Ccedil, ccedil, cedil, cent, copy, COPY, curren, deg, divide, Eacute, eacute, Ecirc, ecirc, Egrave, egrave, ETH, eth, Euml, euml, frac12, frac14, frac34, gt, GT, Iacute, iacute, Icirc, icirc, iexcl, Igrave, igrave, iquest, Iuml, iuml, laquo, lt, LT, macr, micro, middot, nbsp, not, Ntilde, ntilde, Oacute, oacute, Ocirc, ocirc, Ograve, ograve, ordf, ordm, Oslash, oslash, Otilde, otilde, Ouml, ouml, para, plusmn, pound, quot, QUOT, raquo, reg, REG, sect, shy, sup1, sup2, sup3, szlig, THORN, thorn, times, Uacute, uacute, Ucirc, ucirc, Ugrave, ugrave, uml, Uuml, uuml, Yacute, yacute, yen, yuml, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"Aacute\\\":\\\"Á\\\",\\\"aacute\\\":\\\"á\\\",\\\"Acirc\\\":\\\"Â\\\",\\\"acirc\\\":\\\"â\\\",\\\"acute\\\":\\\"´\\\",\\\"AElig\\\":\\\"Æ\\\",\\\"aelig\\\":\\\"æ\\\",\\\"Agrave\\\":\\\"À\\\",\\\"agrave\\\":\\\"à\\\",\\\"amp\\\":\\\"&\\\",\\\"AMP\\\":\\\"&\\\",\\\"Aring\\\":\\\"Å\\\",\\\"aring\\\":\\\"å\\\",\\\"Atilde\\\":\\\"Ã\\\",\\\"atilde\\\":\\\"ã\\\",\\\"Auml\\\":\\\"Ä\\\",\\\"auml\\\":\\\"ä\\\",\\\"brvbar\\\":\\\"¦\\\",\\\"Ccedil\\\":\\\"Ç\\\",\\\"ccedil\\\":\\\"ç\\\",\\\"cedil\\\":\\\"¸\\\",\\\"cent\\\":\\\"¢\\\",\\\"copy\\\":\\\"©\\\",\\\"COPY\\\":\\\"©\\\",\\\"curren\\\":\\\"¤\\\",\\\"deg\\\":\\\"°\\\",\\\"divide\\\":\\\"÷\\\",\\\"Eacute\\\":\\\"É\\\",\\\"eacute\\\":\\\"é\\\",\\\"Ecirc\\\":\\\"Ê\\\",\\\"ecirc\\\":\\\"ê\\\",\\\"Egrave\\\":\\\"È\\\",\\\"egrave\\\":\\\"è\\\",\\\"ETH\\\":\\\"Ð\\\",\\\"eth\\\":\\\"ð\\\",\\\"Euml\\\":\\\"Ë\\\",\\\"euml\\\":\\\"ë\\\",\\\"frac12\\\":\\\"½\\\",\\\"frac14\\\":\\\"¼\\\",\\\"frac34\\\":\\\"¾\\\",\\\"gt\\\":\\\">\\\",\\\"GT\\\":\\\">\\\",\\\"Iacute\\\":\\\"Í\\\",\\\"iacute\\\":\\\"í\\\",\\\"Icirc\\\":\\\"Î\\\",\\\"icirc\\\":\\\"î\\\",\\\"iexcl\\\":\\\"¡\\\",\\\"Igrave\\\":\\\"Ì\\\",\\\"igrave\\\":\\\"ì\\\",\\\"iquest\\\":\\\"¿\\\",\\\"Iuml\\\":\\\"Ï\\\",\\\"iuml\\\":\\\"ï\\\",\\\"laquo\\\":\\\"«\\\",\\\"lt\\\":\\\"<\\\",\\\"LT\\\":\\\"<\\\",\\\"macr\\\":\\\"¯\\\",\\\"micro\\\":\\\"µ\\\",\\\"middot\\\":\\\"·\\\",\\\"nbsp\\\":\\\" \\\",\\\"not\\\":\\\"¬\\\",\\\"Ntilde\\\":\\\"Ñ\\\",\\\"ntilde\\\":\\\"ñ\\\",\\\"Oacute\\\":\\\"Ó\\\",\\\"oacute\\\":\\\"ó\\\",\\\"Ocirc\\\":\\\"Ô\\\",\\\"ocirc\\\":\\\"ô\\\",\\\"Ograve\\\":\\\"Ò\\\",\\\"ograve\\\":\\\"ò\\\",\\\"ordf\\\":\\\"ª\\\",\\\"ordm\\\":\\\"º\\\",\\\"Oslash\\\":\\\"Ø\\\",\\\"oslash\\\":\\\"ø\\\",\\\"Otilde\\\":\\\"Õ\\\",\\\"otilde\\\":\\\"õ\\\",\\\"Ouml\\\":\\\"Ö\\\",\\\"ouml\\\":\\\"ö\\\",\\\"para\\\":\\\"¶\\\",\\\"plusmn\\\":\\\"±\\\",\\\"pound\\\":\\\"£\\\",\\\"quot\\\":\\\"\\\\\\\"\\\",\\\"QUOT\\\":\\\"\\\\\\\"\\\",\\\"raquo\\\":\\\"»\\\",\\\"reg\\\":\\\"®\\\",\\\"REG\\\":\\\"®\\\",\\\"sect\\\":\\\"§\\\",\\\"shy\\\":\\\"­\\\",\\\"sup1\\\":\\\"¹\\\",\\\"sup2\\\":\\\"²\\\",\\\"sup3\\\":\\\"³\\\",\\\"szlig\\\":\\\"ß\\\",\\\"THORN\\\":\\\"Þ\\\",\\\"thorn\\\":\\\"þ\\\",\\\"times\\\":\\\"×\\\",\\\"Uacute\\\":\\\"Ú\\\",\\\"uacute\\\":\\\"ú\\\",\\\"Ucirc\\\":\\\"Û\\\",\\\"ucirc\\\":\\\"û\\\",\\\"Ugrave\\\":\\\"Ù\\\",\\\"ugrave\\\":\\\"ù\\\",\\\"uml\\\":\\\"¨\\\",\\\"Uuml\\\":\\\"Ü\\\",\\\"uuml\\\":\\\"ü\\\",\\\"Yacute\\\":\\\"Ý\\\",\\\"yacute\\\":\\\"ý\\\",\\\"yen\\\":\\\"¥\\\",\\\"yuml\\\":\\\"ÿ\\\"}\");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/legacy.json?");

/***/ }),

/***/ "./node_modules/entities/lib/maps/xml.json":
/*!*************************************************!*\
  !*** ./node_modules/entities/lib/maps/xml.json ***!
  \*************************************************/
/*! exports provided: amp, apos, gt, lt, quot, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"amp\\\":\\\"&\\\",\\\"apos\\\":\\\"'\\\",\\\"gt\\\":\\\">\\\",\\\"lt\\\":\\\"<\\\",\\\"quot\\\":\\\"\\\\\\\"\\\"}\");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/xml.json?");

/***/ }),

/***/ "./node_modules/htmlparser2/lib/FeedHandler.js":
/*!*****************************************************!*\
  !*** ./node_modules/htmlparser2/lib/FeedHandler.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseFeed = exports.FeedHandler = void 0;\nvar domhandler_1 = __importDefault(__webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\"));\nvar DomUtils = __importStar(__webpack_require__(/*! domutils */ \"./node_modules/domutils/lib/index.js\"));\nvar Parser_1 = __webpack_require__(/*! ./Parser */ \"./node_modules/htmlparser2/lib/Parser.js\");\nvar FeedItemMediaMedium;\n(function (FeedItemMediaMedium) {\n    FeedItemMediaMedium[FeedItemMediaMedium[\"image\"] = 0] = \"image\";\n    FeedItemMediaMedium[FeedItemMediaMedium[\"audio\"] = 1] = \"audio\";\n    FeedItemMediaMedium[FeedItemMediaMedium[\"video\"] = 2] = \"video\";\n    FeedItemMediaMedium[FeedItemMediaMedium[\"document\"] = 3] = \"document\";\n    FeedItemMediaMedium[FeedItemMediaMedium[\"executable\"] = 4] = \"executable\";\n})(FeedItemMediaMedium || (FeedItemMediaMedium = {}));\nvar FeedItemMediaExpression;\n(function (FeedItemMediaExpression) {\n    FeedItemMediaExpression[FeedItemMediaExpression[\"sample\"] = 0] = \"sample\";\n    FeedItemMediaExpression[FeedItemMediaExpression[\"full\"] = 1] = \"full\";\n    FeedItemMediaExpression[FeedItemMediaExpression[\"nonstop\"] = 2] = \"nonstop\";\n})(FeedItemMediaExpression || (FeedItemMediaExpression = {}));\n// TODO: Consume data as it is coming in\nvar FeedHandler = /** @class */ (function (_super) {\n    __extends(FeedHandler, _super);\n    /**\n     *\n     * @param callback\n     * @param options\n     */\n    function FeedHandler(callback, options) {\n        var _this = this;\n        if (typeof callback === \"object\") {\n            callback = undefined;\n            options = callback;\n        }\n        _this = _super.call(this, callback, options) || this;\n        return _this;\n    }\n    FeedHandler.prototype.onend = function () {\n        var _a, _b;\n        var feedRoot = getOneElement(isValidFeed, this.dom);\n        if (!feedRoot) {\n            this.handleCallback(new Error(\"couldn't find root of feed\"));\n            return;\n        }\n        var feed = {};\n        if (feedRoot.name === \"feed\") {\n            var childs = feedRoot.children;\n            feed.type = \"atom\";\n            addConditionally(feed, \"id\", \"id\", childs);\n            addConditionally(feed, \"title\", \"title\", childs);\n            var href = getAttribute(\"href\", getOneElement(\"link\", childs));\n            if (href) {\n                feed.link = href;\n            }\n            addConditionally(feed, \"description\", \"subtitle\", childs);\n            var updated = fetch(\"updated\", childs);\n            if (updated) {\n                feed.updated = new Date(updated);\n            }\n            addConditionally(feed, \"author\", \"email\", childs, true);\n            feed.items = getElements(\"entry\", childs).map(function (item) {\n                var entry = {};\n                var children = item.children;\n                addConditionally(entry, \"id\", \"id\", children);\n                addConditionally(entry, \"title\", \"title\", children);\n                var href = getAttribute(\"href\", getOneElement(\"link\", children));\n                if (href) {\n                    entry.link = href;\n                }\n                var description = fetch(\"summary\", children) || fetch(\"content\", children);\n                if (description) {\n                    entry.description = description;\n                }\n                var pubDate = fetch(\"updated\", children);\n                if (pubDate) {\n                    entry.pubDate = new Date(pubDate);\n                }\n                entry.media = getMediaElements(children);\n                return entry;\n            });\n        }\n        else {\n            var childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n            feed.type = feedRoot.name.substr(0, 3);\n            feed.id = \"\";\n            addConditionally(feed, \"title\", \"title\", childs);\n            addConditionally(feed, \"link\", \"link\", childs);\n            addConditionally(feed, \"description\", \"description\", childs);\n            var updated = fetch(\"lastBuildDate\", childs);\n            if (updated) {\n                feed.updated = new Date(updated);\n            }\n            addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n            feed.items = getElements(\"item\", feedRoot.children).map(function (item) {\n                var entry = {};\n                var children = item.children;\n                addConditionally(entry, \"id\", \"guid\", children);\n                addConditionally(entry, \"title\", \"title\", children);\n                addConditionally(entry, \"link\", \"link\", children);\n                addConditionally(entry, \"description\", \"description\", children);\n                var pubDate = fetch(\"pubDate\", children);\n                if (pubDate)\n                    entry.pubDate = new Date(pubDate);\n                entry.media = getMediaElements(children);\n                return entry;\n            });\n        }\n        this.feed = feed;\n        this.handleCallback(null);\n    };\n    return FeedHandler;\n}(domhandler_1.default));\nexports.FeedHandler = FeedHandler;\nfunction getMediaElements(where) {\n    return getElements(\"media:content\", where).map(function (elem) {\n        var media = {\n            medium: elem.attribs.medium,\n            isDefault: !!elem.attribs.isDefault,\n        };\n        if (elem.attribs.url) {\n            media.url = elem.attribs.url;\n        }\n        if (elem.attribs.fileSize) {\n            media.fileSize = parseInt(elem.attribs.fileSize, 10);\n        }\n        if (elem.attribs.type) {\n            media.type = elem.attribs.type;\n        }\n        if (elem.attribs.expression) {\n            media.expression = elem.attribs\n                .expression;\n        }\n        if (elem.attribs.bitrate) {\n            media.bitrate = parseInt(elem.attribs.bitrate, 10);\n        }\n        if (elem.attribs.framerate) {\n            media.framerate = parseInt(elem.attribs.framerate, 10);\n        }\n        if (elem.attribs.samplingrate) {\n            media.samplingrate = parseInt(elem.attribs.samplingrate, 10);\n        }\n        if (elem.attribs.channels) {\n            media.channels = parseInt(elem.attribs.channels, 10);\n        }\n        if (elem.attribs.duration) {\n            media.duration = parseInt(elem.attribs.duration, 10);\n        }\n        if (elem.attribs.height) {\n            media.height = parseInt(elem.attribs.height, 10);\n        }\n        if (elem.attribs.width) {\n            media.width = parseInt(elem.attribs.width, 10);\n        }\n        if (elem.attribs.lang) {\n            media.lang = elem.attribs.lang;\n        }\n        return media;\n    });\n}\nfunction getElements(tagName, where) {\n    return DomUtils.getElementsByTagName(tagName, where, true);\n}\nfunction getOneElement(tagName, node) {\n    return DomUtils.getElementsByTagName(tagName, node, true, 1)[0];\n}\nfunction fetch(tagName, where, recurse) {\n    if (recurse === void 0) { recurse = false; }\n    return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();\n}\nfunction getAttribute(name, elem) {\n    if (!elem) {\n        return null;\n    }\n    var attribs = elem.attribs;\n    return attribs[name];\n}\nfunction addConditionally(obj, prop, what, where, recurse) {\n    if (recurse === void 0) { recurse = false; }\n    var tmp = fetch(what, where, recurse);\n    if (tmp)\n        obj[prop] = tmp;\n}\nfunction isValidFeed(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n}\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this option, you should set `xmlMode` to `true`.\n */\nfunction parseFeed(feed, options) {\n    if (options === void 0) { options = { xmlMode: true }; }\n    var handler = new FeedHandler(options);\n    new Parser_1.Parser(handler, options).end(feed);\n    return handler.feed;\n}\nexports.parseFeed = parseFeed;\n\n\n//# sourceURL=webpack:///./node_modules/htmlparser2/lib/FeedHandler.js?");

/***/ }),

/***/ "./node_modules/htmlparser2/lib/Parser.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Parser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Parser = void 0;\nvar Tokenizer_1 = __importDefault(__webpack_require__(/*! ./Tokenizer */ \"./node_modules/htmlparser2/lib/Tokenizer.js\"));\nvar formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\",\n]);\nvar pTag = new Set([\"p\"]);\nvar openImpliesClose = {\n    tr: new Set([\"tr\", \"th\", \"td\"]),\n    th: new Set([\"th\"]),\n    td: new Set([\"thead\", \"th\", \"td\"]),\n    body: new Set([\"head\", \"link\", \"script\"]),\n    li: new Set([\"li\"]),\n    p: pTag,\n    h1: pTag,\n    h2: pTag,\n    h3: pTag,\n    h4: pTag,\n    h5: pTag,\n    h6: pTag,\n    select: formTags,\n    input: formTags,\n    output: formTags,\n    button: formTags,\n    datalist: formTags,\n    textarea: formTags,\n    option: new Set([\"option\"]),\n    optgroup: new Set([\"optgroup\", \"option\"]),\n    dd: new Set([\"dt\", \"dd\"]),\n    dt: new Set([\"dt\", \"dd\"]),\n    address: pTag,\n    article: pTag,\n    aside: pTag,\n    blockquote: pTag,\n    details: pTag,\n    div: pTag,\n    dl: pTag,\n    fieldset: pTag,\n    figcaption: pTag,\n    figure: pTag,\n    footer: pTag,\n    form: pTag,\n    header: pTag,\n    hr: pTag,\n    main: pTag,\n    nav: pTag,\n    ol: pTag,\n    pre: pTag,\n    section: pTag,\n    table: pTag,\n    ul: pTag,\n    rt: new Set([\"rt\", \"rp\"]),\n    rp: new Set([\"rt\", \"rp\"]),\n    tbody: new Set([\"thead\", \"tbody\"]),\n    tfoot: new Set([\"thead\", \"tbody\"]),\n};\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\",\n]);\nvar foreignContextElements = new Set([\"math\", \"svg\"]);\nvar htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\",\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ (function () {\n    function Parser(cbs, options) {\n        if (options === void 0) { options = {}; }\n        var _a, _b, _c, _d, _e;\n        /** The start index of the last event. */\n        this.startIndex = 0;\n        /** The end index of the last event. */\n        this.endIndex = null;\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.options = options;\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames =\n            (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    Parser.prototype.updatePosition = function (initialOffset) {\n        if (this.endIndex === null) {\n            if (this.tokenizer.sectionStart <= initialOffset) {\n                this.startIndex = 0;\n            }\n            else {\n                this.startIndex = this.tokenizer.sectionStart - initialOffset;\n            }\n        }\n        else {\n            this.startIndex = this.endIndex + 1;\n        }\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n    };\n    // Tokenizer event handlers\n    Parser.prototype.ontext = function (data) {\n        var _a, _b;\n        this.updatePosition(1);\n        this.endIndex--;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n    };\n    Parser.prototype.onopentagname = function (name) {\n        var _a, _b;\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.tagname = name;\n        if (!this.options.xmlMode &&\n            Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {\n            var el = void 0;\n            while (this.stack.length > 0 &&\n                openImpliesClose[name].has((el = this.stack[this.stack.length - 1]))) {\n                this.onclosetag(el);\n            }\n        }\n        if (this.options.xmlMode || !voidElements.has(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            }\n            else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);\n        if (this.cbs.onopentag)\n            this.attribs = {};\n    };\n    Parser.prototype.onopentagend = function () {\n        var _a, _b;\n        this.updatePosition(1);\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs);\n            this.attribs = null;\n        }\n        if (!this.options.xmlMode &&\n            this.cbs.onclosetag &&\n            voidElements.has(this.tagname)) {\n            this.cbs.onclosetag(this.tagname);\n        }\n        this.tagname = \"\";\n    };\n    Parser.prototype.onclosetag = function (name) {\n        this.updatePosition(1);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) ||\n            htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (this.stack.length &&\n            (this.options.xmlMode || !voidElements.has(name))) {\n            var pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    pos = this.stack.length - pos;\n                    while (pos--) {\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop());\n                    }\n                }\n                else\n                    this.stack.length = pos;\n            }\n            else if (name === \"p\" && !this.options.xmlMode) {\n                this.onopentagname(name);\n                this.closeCurrentTag();\n            }\n        }\n        else if (!this.options.xmlMode && (name === \"br\" || name === \"p\")) {\n            this.onopentagname(name);\n            this.closeCurrentTag();\n        }\n    };\n    Parser.prototype.onselfclosingtag = function () {\n        if (this.options.xmlMode ||\n            this.options.recognizeSelfClosing ||\n            this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag();\n        }\n        else {\n            this.onopentagend();\n        }\n    };\n    Parser.prototype.closeCurrentTag = function () {\n        var _a, _b;\n        var name = this.tagname;\n        this.onopentagend();\n        /*\n         * Self-closing tags will be on the top of the stack\n         * (cheaper check than in onclosetag)\n         */\n        if (this.stack[this.stack.length - 1] === name) {\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name);\n            this.stack.pop();\n        }\n    };\n    Parser.prototype.onattribname = function (name) {\n        if (this.lowerCaseAttributeNames) {\n            name = name.toLowerCase();\n        }\n        this.attribname = name;\n    };\n    Parser.prototype.onattribdata = function (value) {\n        this.attribvalue += value;\n    };\n    Parser.prototype.onattribend = function (quote) {\n        var _a, _b;\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);\n        if (this.attribs &&\n            !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n    };\n    Parser.prototype.getInstructionName = function (value) {\n        var idx = value.search(reNameEnd);\n        var name = idx < 0 ? value : value.substr(0, idx);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    Parser.prototype.ondeclaration = function (value) {\n        if (this.cbs.onprocessinginstruction) {\n            var name_1 = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"!\" + name_1, \"!\" + value);\n        }\n    };\n    Parser.prototype.onprocessinginstruction = function (value) {\n        if (this.cbs.onprocessinginstruction) {\n            var name_2 = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"?\" + name_2, \"?\" + value);\n        }\n    };\n    Parser.prototype.oncomment = function (value) {\n        var _a, _b, _c, _d;\n        this.updatePosition(4);\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n    };\n    Parser.prototype.oncdata = function (value) {\n        var _a, _b, _c, _d, _e, _f;\n        this.updatePosition(1);\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        }\n        else {\n            this.oncomment(\"[CDATA[\" + value + \"]]\");\n        }\n    };\n    Parser.prototype.onerror = function (err) {\n        var _a, _b;\n        (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    };\n    Parser.prototype.onend = function () {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))\n                ;\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */\n    Parser.prototype.reset = function () {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribs = null;\n        this.stack = [];\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n    };\n    /**\n     * Resets the parser, then parses a complete document and\n     * pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */\n    Parser.prototype.parseComplete = function (data) {\n        this.reset();\n        this.end(data);\n    };\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */\n    Parser.prototype.write = function (chunk) {\n        this.tokenizer.write(chunk);\n    };\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */\n    Parser.prototype.end = function (chunk) {\n        this.tokenizer.end(chunk);\n    };\n    /**\n     * Pauses parsing. The parser won't emit events until `resume` is called.\n     */\n    Parser.prototype.pause = function () {\n        this.tokenizer.pause();\n    };\n    /**\n     * Resumes parsing after `pause` was called.\n     */\n    Parser.prototype.resume = function () {\n        this.tokenizer.resume();\n    };\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.parseChunk = function (chunk) {\n        this.write(chunk);\n    };\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.done = function (chunk) {\n        this.end(chunk);\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n\n\n//# sourceURL=webpack:///./node_modules/htmlparser2/lib/Parser.js?");

/***/ }),

/***/ "./node_modules/htmlparser2/lib/Tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Tokenizer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_codepoint_1 = __importDefault(__webpack_require__(/*! entities/lib/decode_codepoint */ \"./node_modules/entities/lib/decode_codepoint.js\"));\nvar entities_json_1 = __importDefault(__webpack_require__(/*! entities/lib/maps/entities.json */ \"./node_modules/entities/lib/maps/entities.json\"));\nvar legacy_json_1 = __importDefault(__webpack_require__(/*! entities/lib/maps/legacy.json */ \"./node_modules/entities/lib/maps/legacy.json\"));\nvar xml_json_1 = __importDefault(__webpack_require__(/*! entities/lib/maps/xml.json */ \"./node_modules/entities/lib/maps/xml.json\"));\nfunction whitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\nfunction isASCIIAlpha(c) {\n    return (c >= \"a\" && c <= \"z\") || (c >= \"A\" && c <= \"Z\");\n}\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n    var lower = upper.toLowerCase();\n    if (upper === lower) {\n        return function (t, c) {\n            if (c === lower) {\n                t._state = SUCCESS;\n            }\n            else {\n                t._state = FAILURE;\n                t._index--;\n            }\n        };\n    }\n    return function (t, c) {\n        if (c === lower || c === upper) {\n            t._state = SUCCESS;\n        }\n        else {\n            t._state = FAILURE;\n            t._index--;\n        }\n    };\n}\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n    var lower = upper.toLowerCase();\n    return function (t, c) {\n        if (c === lower || c === upper) {\n            t._state = NEXT_STATE;\n        }\n        else {\n            t._state = 3 /* InTagName */;\n            t._index--; // Consume the token again\n        }\n    };\n}\nvar stateBeforeCdata1 = ifElseState(\"C\", 24 /* BeforeCdata2 */, 16 /* InDeclaration */);\nvar stateBeforeCdata2 = ifElseState(\"D\", 25 /* BeforeCdata3 */, 16 /* InDeclaration */);\nvar stateBeforeCdata3 = ifElseState(\"A\", 26 /* BeforeCdata4 */, 16 /* InDeclaration */);\nvar stateBeforeCdata4 = ifElseState(\"T\", 27 /* BeforeCdata5 */, 16 /* InDeclaration */);\nvar stateBeforeCdata5 = ifElseState(\"A\", 28 /* BeforeCdata6 */, 16 /* InDeclaration */);\nvar stateBeforeScript1 = consumeSpecialNameChar(\"R\", 35 /* BeforeScript2 */);\nvar stateBeforeScript2 = consumeSpecialNameChar(\"I\", 36 /* BeforeScript3 */);\nvar stateBeforeScript3 = consumeSpecialNameChar(\"P\", 37 /* BeforeScript4 */);\nvar stateBeforeScript4 = consumeSpecialNameChar(\"T\", 38 /* BeforeScript5 */);\nvar stateAfterScript1 = ifElseState(\"R\", 40 /* AfterScript2 */, 1 /* Text */);\nvar stateAfterScript2 = ifElseState(\"I\", 41 /* AfterScript3 */, 1 /* Text */);\nvar stateAfterScript3 = ifElseState(\"P\", 42 /* AfterScript4 */, 1 /* Text */);\nvar stateAfterScript4 = ifElseState(\"T\", 43 /* AfterScript5 */, 1 /* Text */);\nvar stateBeforeStyle1 = consumeSpecialNameChar(\"Y\", 45 /* BeforeStyle2 */);\nvar stateBeforeStyle2 = consumeSpecialNameChar(\"L\", 46 /* BeforeStyle3 */);\nvar stateBeforeStyle3 = consumeSpecialNameChar(\"E\", 47 /* BeforeStyle4 */);\nvar stateAfterStyle1 = ifElseState(\"Y\", 49 /* AfterStyle2 */, 1 /* Text */);\nvar stateAfterStyle2 = ifElseState(\"L\", 50 /* AfterStyle3 */, 1 /* Text */);\nvar stateAfterStyle3 = ifElseState(\"E\", 51 /* AfterStyle4 */, 1 /* Text */);\nvar stateBeforeSpecialT = consumeSpecialNameChar(\"I\", 54 /* BeforeTitle1 */);\nvar stateBeforeTitle1 = consumeSpecialNameChar(\"T\", 55 /* BeforeTitle2 */);\nvar stateBeforeTitle2 = consumeSpecialNameChar(\"L\", 56 /* BeforeTitle3 */);\nvar stateBeforeTitle3 = consumeSpecialNameChar(\"E\", 57 /* BeforeTitle4 */);\nvar stateAfterSpecialTEnd = ifElseState(\"I\", 58 /* AfterTitle1 */, 1 /* Text */);\nvar stateAfterTitle1 = ifElseState(\"T\", 59 /* AfterTitle2 */, 1 /* Text */);\nvar stateAfterTitle2 = ifElseState(\"L\", 60 /* AfterTitle3 */, 1 /* Text */);\nvar stateAfterTitle3 = ifElseState(\"E\", 61 /* AfterTitle4 */, 1 /* Text */);\nvar stateBeforeEntity = ifElseState(\"#\", 63 /* BeforeNumericEntity */, 64 /* InNamedEntity */);\nvar stateBeforeNumericEntity = ifElseState(\"X\", 66 /* InHexEntity */, 65 /* InNumericEntity */);\nvar Tokenizer = /** @class */ (function () {\n    function Tokenizer(options, cbs) {\n        var _a;\n        /** The current state the tokenizer is in. */\n        this._state = 1 /* Text */;\n        /** The read buffer. */\n        this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */\n        this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */\n        this._index = 0;\n        /**\n         * Data that has already been processed will be removed from the buffer occasionally.\n         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n         */\n        this.bufferOffset = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n        this.baseState = 1 /* Text */;\n        /** For special parsing behavior inside of script and style tags. */\n        this.special = 1 /* None */;\n        /** Indicates whether the tokenizer has been paused. */\n        this.running = true;\n        /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n        this.ended = false;\n        this.cbs = cbs;\n        this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);\n        this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;\n    }\n    Tokenizer.prototype.reset = function () {\n        this._state = 1 /* Text */;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this._index = 0;\n        this.bufferOffset = 0;\n        this.baseState = 1 /* Text */;\n        this.special = 1 /* None */;\n        this.running = true;\n        this.ended = false;\n    };\n    Tokenizer.prototype.write = function (chunk) {\n        if (this.ended)\n            this.cbs.onerror(Error(\".write() after done!\"));\n        this.buffer += chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function (chunk) {\n        if (this.ended)\n            this.cbs.onerror(Error(\".end() after done!\"));\n        if (chunk)\n            this.write(chunk);\n        this.ended = true;\n        if (this.running)\n            this.finish();\n    };\n    Tokenizer.prototype.pause = function () {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function () {\n        this.running = true;\n        if (this._index < this.buffer.length) {\n            this.parse();\n        }\n        if (this.ended) {\n            this.finish();\n        }\n    };\n    /**\n     * The current index within all of the written data.\n     */\n    Tokenizer.prototype.getAbsoluteIndex = function () {\n        return this.bufferOffset + this._index;\n    };\n    Tokenizer.prototype.stateText = function (c) {\n        if (c === \"<\") {\n            if (this._index > this.sectionStart) {\n                this.cbs.ontext(this.getSection());\n            }\n            this._state = 2 /* BeforeTagName */;\n            this.sectionStart = this._index;\n        }\n        else if (this.decodeEntities &&\n            c === \"&\" &&\n            (this.special === 1 /* None */ || this.special === 4 /* Title */)) {\n            if (this._index > this.sectionStart) {\n                this.cbs.ontext(this.getSection());\n            }\n            this.baseState = 1 /* Text */;\n            this._state = 62 /* BeforeEntity */;\n            this.sectionStart = this._index;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */\n    Tokenizer.prototype.isTagStartChar = function (c) {\n        return (isASCIIAlpha(c) ||\n            (this.xmlMode && !whitespace(c) && c !== \"/\" && c !== \">\"));\n    };\n    Tokenizer.prototype.stateBeforeTagName = function (c) {\n        if (c === \"/\") {\n            this._state = 5 /* BeforeClosingTagName */;\n        }\n        else if (c === \"<\") {\n            this.cbs.ontext(this.getSection());\n            this.sectionStart = this._index;\n        }\n        else if (c === \">\" ||\n            this.special !== 1 /* None */ ||\n            whitespace(c)) {\n            this._state = 1 /* Text */;\n        }\n        else if (c === \"!\") {\n            this._state = 15 /* BeforeDeclaration */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === \"?\") {\n            this._state = 17 /* InProcessingInstruction */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (!this.isTagStartChar(c)) {\n            this._state = 1 /* Text */;\n        }\n        else {\n            this._state =\n                !this.xmlMode && (c === \"s\" || c === \"S\")\n                    ? 32 /* BeforeSpecialS */\n                    : !this.xmlMode && (c === \"t\" || c === \"T\")\n                        ? 52 /* BeforeSpecialT */\n                        : 3 /* InTagName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function (c) {\n        if (c === \"/\" || c === \">\" || whitespace(c)) {\n            this.emitToken(\"onopentagname\");\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n        if (whitespace(c)) {\n            // Ignore\n        }\n        else if (c === \">\") {\n            this._state = 1 /* Text */;\n        }\n        else if (this.special !== 1 /* None */) {\n            if (this.special !== 4 /* Title */ && (c === \"s\" || c === \"S\")) {\n                this._state = 33 /* BeforeSpecialSEnd */;\n            }\n            else if (this.special === 4 /* Title */ &&\n                (c === \"t\" || c === \"T\")) {\n                this._state = 53 /* BeforeSpecialTEnd */;\n            }\n            else {\n                this._state = 1 /* Text */;\n                this._index--;\n            }\n        }\n        else if (!this.isTagStartChar(c)) {\n            this._state = 20 /* InSpecialComment */;\n            this.sectionStart = this._index;\n        }\n        else {\n            this._state = 6 /* InClosingTagName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function (c) {\n        if (c === \">\" || whitespace(c)) {\n            this.emitToken(\"onclosetag\");\n            this._state = 7 /* AfterClosingTagName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n        // Skip everything until \">\"\n        if (c === \">\") {\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n        if (c === \">\") {\n            this.cbs.onopentagend();\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === \"/\") {\n            this._state = 4 /* InSelfClosingTag */;\n        }\n        else if (!whitespace(c)) {\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n        if (c === \">\") {\n            this.cbs.onselfclosingtag();\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n            this.special = 1 /* None */; // Reset special state, in case of self-closing special tags\n        }\n        else if (!whitespace(c)) {\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function (c) {\n        if (c === \"=\" || c === \"/\" || c === \">\" || whitespace(c)) {\n            this.cbs.onattribname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 10 /* AfterAttributeName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function (c) {\n        if (c === \"=\") {\n            this._state = 11 /* BeforeAttributeValue */;\n        }\n        else if (c === \"/\" || c === \">\") {\n            this.cbs.onattribend(undefined);\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n        else if (!whitespace(c)) {\n            this.cbs.onattribend(undefined);\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n        if (c === '\"') {\n            this._state = 12 /* InAttributeValueDq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === \"'\") {\n            this._state = 13 /* InAttributeValueSq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (!whitespace(c)) {\n            this._state = 14 /* InAttributeValueNq */;\n            this.sectionStart = this._index;\n            this._index--; // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n        if (c === quote) {\n            this.emitToken(\"onattribdata\");\n            this.cbs.onattribend(quote);\n            this._state = 8 /* BeforeAttributeName */;\n        }\n        else if (this.decodeEntities && c === \"&\") {\n            this.emitToken(\"onattribdata\");\n            this.baseState = this._state;\n            this._state = 62 /* BeforeEntity */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n        this.handleInAttributeValue(c, '\"');\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n        this.handleInAttributeValue(c, \"'\");\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n        if (whitespace(c) || c === \">\") {\n            this.emitToken(\"onattribdata\");\n            this.cbs.onattribend(null);\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n        else if (this.decodeEntities && c === \"&\") {\n            this.emitToken(\"onattribdata\");\n            this.baseState = this._state;\n            this._state = 62 /* BeforeEntity */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n        this._state =\n            c === \"[\"\n                ? 23 /* BeforeCdata1 */\n                : c === \"-\"\n                    ? 18 /* BeforeComment */\n                    : 16 /* InDeclaration */;\n    };\n    Tokenizer.prototype.stateInDeclaration = function (c) {\n        if (c === \">\") {\n            this.cbs.ondeclaration(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n        if (c === \">\") {\n            this.cbs.onprocessinginstruction(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function (c) {\n        if (c === \"-\") {\n            this._state = 19 /* InComment */;\n            this.sectionStart = this._index + 1;\n        }\n        else {\n            this._state = 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInComment = function (c) {\n        if (c === \"-\")\n            this._state = 21 /* AfterComment1 */;\n    };\n    Tokenizer.prototype.stateInSpecialComment = function (c) {\n        if (c === \">\") {\n            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateAfterComment1 = function (c) {\n        if (c === \"-\") {\n            this._state = 22 /* AfterComment2 */;\n        }\n        else {\n            this._state = 19 /* InComment */;\n        }\n    };\n    Tokenizer.prototype.stateAfterComment2 = function (c) {\n        if (c === \">\") {\n            // Remove 2 trailing chars\n            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c !== \"-\") {\n            this._state = 19 /* InComment */;\n        }\n        // Else: stay in AFTER_COMMENT_2 (`--->`)\n    };\n    Tokenizer.prototype.stateBeforeCdata6 = function (c) {\n        if (c === \"[\") {\n            this._state = 29 /* InCdata */;\n            this.sectionStart = this._index + 1;\n        }\n        else {\n            this._state = 16 /* InDeclaration */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateInCdata = function (c) {\n        if (c === \"]\")\n            this._state = 30 /* AfterCdata1 */;\n    };\n    Tokenizer.prototype.stateAfterCdata1 = function (c) {\n        if (c === \"]\")\n            this._state = 31 /* AfterCdata2 */;\n        else\n            this._state = 29 /* InCdata */;\n    };\n    Tokenizer.prototype.stateAfterCdata2 = function (c) {\n        if (c === \">\") {\n            // Remove 2 trailing chars\n            this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c !== \"]\") {\n            this._state = 29 /* InCdata */;\n        }\n        // Else: stay in AFTER_CDATA_2 (`]]]>`)\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n        if (c === \"c\" || c === \"C\") {\n            this._state = 34 /* BeforeScript1 */;\n        }\n        else if (c === \"t\" || c === \"T\") {\n            this._state = 44 /* BeforeStyle1 */;\n        }\n        else {\n            this._state = 3 /* InTagName */;\n            this._index--; // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {\n        if (this.special === 2 /* Script */ && (c === \"c\" || c === \"C\")) {\n            this._state = 39 /* AfterScript1 */;\n        }\n        else if (this.special === 3 /* Style */ && (c === \"t\" || c === \"T\")) {\n            this._state = 48 /* AfterStyle1 */;\n        }\n        else\n            this._state = 1 /* Text */;\n    };\n    Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {\n        if (c === \"/\" || c === \">\" || whitespace(c)) {\n            this.special = special;\n        }\n        this._state = 3 /* InTagName */;\n        this._index--; // Consume the token again\n    };\n    Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {\n        if (c === \">\" || whitespace(c)) {\n            this.special = 1 /* None */;\n            this._state = 6 /* InClosingTagName */;\n            this.sectionStart = this._index - sectionStartOffset;\n            this._index--; // Reconsume the token\n        }\n        else\n            this._state = 1 /* Text */;\n    };\n    // For entities terminated with a semicolon\n    Tokenizer.prototype.parseFixedEntity = function (map) {\n        if (map === void 0) { map = this.xmlMode ? xml_json_1.default : entities_json_1.default; }\n        // Offset = 1\n        if (this.sectionStart + 1 < this._index) {\n            var entity = this.buffer.substring(this.sectionStart + 1, this._index);\n            if (Object.prototype.hasOwnProperty.call(map, entity)) {\n                this.emitPartial(map[entity]);\n                this.sectionStart = this._index + 1;\n            }\n        }\n    };\n    // Parses legacy entities (without trailing semicolon)\n    Tokenizer.prototype.parseLegacyEntity = function () {\n        var start = this.sectionStart + 1;\n        // The max length of legacy entities is 6\n        var limit = Math.min(this._index - start, 6);\n        while (limit >= 2) {\n            // The min length of legacy entities is 2\n            var entity = this.buffer.substr(start, limit);\n            if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {\n                this.emitPartial(legacy_json_1.default[entity]);\n                this.sectionStart += limit + 1;\n                return;\n            }\n            limit--;\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function (c) {\n        if (c === \";\") {\n            this.parseFixedEntity();\n            // Retry as legacy entity if entity wasn't parsed\n            if (this.baseState === 1 /* Text */ &&\n                this.sectionStart + 1 < this._index &&\n                !this.xmlMode) {\n                this.parseLegacyEntity();\n            }\n            this._state = this.baseState;\n        }\n        else if ((c < \"0\" || c > \"9\") && !isASCIIAlpha(c)) {\n            if (this.xmlMode || this.sectionStart + 1 === this._index) {\n                // Ignore\n            }\n            else if (this.baseState !== 1 /* Text */) {\n                if (c !== \"=\") {\n                    // Parse as legacy entity, without allowing additional characters.\n                    this.parseFixedEntity(legacy_json_1.default);\n                }\n            }\n            else {\n                this.parseLegacyEntity();\n            }\n            this._state = this.baseState;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {\n        var sectionStart = this.sectionStart + offset;\n        if (sectionStart !== this._index) {\n            // Parse entity\n            var entity = this.buffer.substring(sectionStart, this._index);\n            var parsed = parseInt(entity, base);\n            this.emitPartial(decode_codepoint_1.default(parsed));\n            this.sectionStart = strict ? this._index + 1 : this._index;\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function (c) {\n        if (c === \";\") {\n            this.decodeNumericEntity(2, 10, true);\n        }\n        else if (c < \"0\" || c > \"9\") {\n            if (!this.xmlMode) {\n                this.decodeNumericEntity(2, 10, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function (c) {\n        if (c === \";\") {\n            this.decodeNumericEntity(3, 16, true);\n        }\n        else if ((c < \"a\" || c > \"f\") &&\n            (c < \"A\" || c > \"F\") &&\n            (c < \"0\" || c > \"9\")) {\n            if (!this.xmlMode) {\n                this.decodeNumericEntity(3, 16, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.cleanup = function () {\n        if (this.sectionStart < 0) {\n            this.buffer = \"\";\n            this.bufferOffset += this._index;\n            this._index = 0;\n        }\n        else if (this.running) {\n            if (this._state === 1 /* Text */) {\n                if (this.sectionStart !== this._index) {\n                    this.cbs.ontext(this.buffer.substr(this.sectionStart));\n                }\n                this.buffer = \"\";\n                this.bufferOffset += this._index;\n                this._index = 0;\n            }\n            else if (this.sectionStart === this._index) {\n                // The section just started\n                this.buffer = \"\";\n                this.bufferOffset += this._index;\n                this._index = 0;\n            }\n            else {\n                // Remove everything unnecessary\n                this.buffer = this.buffer.substr(this.sectionStart);\n                this._index -= this.sectionStart;\n                this.bufferOffset += this.sectionStart;\n            }\n            this.sectionStart = 0;\n        }\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */\n    Tokenizer.prototype.parse = function () {\n        while (this._index < this.buffer.length && this.running) {\n            var c = this.buffer.charAt(this._index);\n            if (this._state === 1 /* Text */) {\n                this.stateText(c);\n            }\n            else if (this._state === 12 /* InAttributeValueDq */) {\n                this.stateInAttributeValueDoubleQuotes(c);\n            }\n            else if (this._state === 9 /* InAttributeName */) {\n                this.stateInAttributeName(c);\n            }\n            else if (this._state === 19 /* InComment */) {\n                this.stateInComment(c);\n            }\n            else if (this._state === 20 /* InSpecialComment */) {\n                this.stateInSpecialComment(c);\n            }\n            else if (this._state === 8 /* BeforeAttributeName */) {\n                this.stateBeforeAttributeName(c);\n            }\n            else if (this._state === 3 /* InTagName */) {\n                this.stateInTagName(c);\n            }\n            else if (this._state === 6 /* InClosingTagName */) {\n                this.stateInClosingTagName(c);\n            }\n            else if (this._state === 2 /* BeforeTagName */) {\n                this.stateBeforeTagName(c);\n            }\n            else if (this._state === 10 /* AfterAttributeName */) {\n                this.stateAfterAttributeName(c);\n            }\n            else if (this._state === 13 /* InAttributeValueSq */) {\n                this.stateInAttributeValueSingleQuotes(c);\n            }\n            else if (this._state === 11 /* BeforeAttributeValue */) {\n                this.stateBeforeAttributeValue(c);\n            }\n            else if (this._state === 5 /* BeforeClosingTagName */) {\n                this.stateBeforeClosingTagName(c);\n            }\n            else if (this._state === 7 /* AfterClosingTagName */) {\n                this.stateAfterClosingTagName(c);\n            }\n            else if (this._state === 32 /* BeforeSpecialS */) {\n                this.stateBeforeSpecialS(c);\n            }\n            else if (this._state === 21 /* AfterComment1 */) {\n                this.stateAfterComment1(c);\n            }\n            else if (this._state === 14 /* InAttributeValueNq */) {\n                this.stateInAttributeValueNoQuotes(c);\n            }\n            else if (this._state === 4 /* InSelfClosingTag */) {\n                this.stateInSelfClosingTag(c);\n            }\n            else if (this._state === 16 /* InDeclaration */) {\n                this.stateInDeclaration(c);\n            }\n            else if (this._state === 15 /* BeforeDeclaration */) {\n                this.stateBeforeDeclaration(c);\n            }\n            else if (this._state === 22 /* AfterComment2 */) {\n                this.stateAfterComment2(c);\n            }\n            else if (this._state === 18 /* BeforeComment */) {\n                this.stateBeforeComment(c);\n            }\n            else if (this._state === 33 /* BeforeSpecialSEnd */) {\n                this.stateBeforeSpecialSEnd(c);\n            }\n            else if (this._state === 53 /* BeforeSpecialTEnd */) {\n                stateAfterSpecialTEnd(this, c);\n            }\n            else if (this._state === 39 /* AfterScript1 */) {\n                stateAfterScript1(this, c);\n            }\n            else if (this._state === 40 /* AfterScript2 */) {\n                stateAfterScript2(this, c);\n            }\n            else if (this._state === 41 /* AfterScript3 */) {\n                stateAfterScript3(this, c);\n            }\n            else if (this._state === 34 /* BeforeScript1 */) {\n                stateBeforeScript1(this, c);\n            }\n            else if (this._state === 35 /* BeforeScript2 */) {\n                stateBeforeScript2(this, c);\n            }\n            else if (this._state === 36 /* BeforeScript3 */) {\n                stateBeforeScript3(this, c);\n            }\n            else if (this._state === 37 /* BeforeScript4 */) {\n                stateBeforeScript4(this, c);\n            }\n            else if (this._state === 38 /* BeforeScript5 */) {\n                this.stateBeforeSpecialLast(c, 2 /* Script */);\n            }\n            else if (this._state === 42 /* AfterScript4 */) {\n                stateAfterScript4(this, c);\n            }\n            else if (this._state === 43 /* AfterScript5 */) {\n                this.stateAfterSpecialLast(c, 6);\n            }\n            else if (this._state === 44 /* BeforeStyle1 */) {\n                stateBeforeStyle1(this, c);\n            }\n            else if (this._state === 29 /* InCdata */) {\n                this.stateInCdata(c);\n            }\n            else if (this._state === 45 /* BeforeStyle2 */) {\n                stateBeforeStyle2(this, c);\n            }\n            else if (this._state === 46 /* BeforeStyle3 */) {\n                stateBeforeStyle3(this, c);\n            }\n            else if (this._state === 47 /* BeforeStyle4 */) {\n                this.stateBeforeSpecialLast(c, 3 /* Style */);\n            }\n            else if (this._state === 48 /* AfterStyle1 */) {\n                stateAfterStyle1(this, c);\n            }\n            else if (this._state === 49 /* AfterStyle2 */) {\n                stateAfterStyle2(this, c);\n            }\n            else if (this._state === 50 /* AfterStyle3 */) {\n                stateAfterStyle3(this, c);\n            }\n            else if (this._state === 51 /* AfterStyle4 */) {\n                this.stateAfterSpecialLast(c, 5);\n            }\n            else if (this._state === 52 /* BeforeSpecialT */) {\n                stateBeforeSpecialT(this, c);\n            }\n            else if (this._state === 54 /* BeforeTitle1 */) {\n                stateBeforeTitle1(this, c);\n            }\n            else if (this._state === 55 /* BeforeTitle2 */) {\n                stateBeforeTitle2(this, c);\n            }\n            else if (this._state === 56 /* BeforeTitle3 */) {\n                stateBeforeTitle3(this, c);\n            }\n            else if (this._state === 57 /* BeforeTitle4 */) {\n                this.stateBeforeSpecialLast(c, 4 /* Title */);\n            }\n            else if (this._state === 58 /* AfterTitle1 */) {\n                stateAfterTitle1(this, c);\n            }\n            else if (this._state === 59 /* AfterTitle2 */) {\n                stateAfterTitle2(this, c);\n            }\n            else if (this._state === 60 /* AfterTitle3 */) {\n                stateAfterTitle3(this, c);\n            }\n            else if (this._state === 61 /* AfterTitle4 */) {\n                this.stateAfterSpecialLast(c, 5);\n            }\n            else if (this._state === 17 /* InProcessingInstruction */) {\n                this.stateInProcessingInstruction(c);\n            }\n            else if (this._state === 64 /* InNamedEntity */) {\n                this.stateInNamedEntity(c);\n            }\n            else if (this._state === 23 /* BeforeCdata1 */) {\n                stateBeforeCdata1(this, c);\n            }\n            else if (this._state === 62 /* BeforeEntity */) {\n                stateBeforeEntity(this, c);\n            }\n            else if (this._state === 24 /* BeforeCdata2 */) {\n                stateBeforeCdata2(this, c);\n            }\n            else if (this._state === 25 /* BeforeCdata3 */) {\n                stateBeforeCdata3(this, c);\n            }\n            else if (this._state === 30 /* AfterCdata1 */) {\n                this.stateAfterCdata1(c);\n            }\n            else if (this._state === 31 /* AfterCdata2 */) {\n                this.stateAfterCdata2(c);\n            }\n            else if (this._state === 26 /* BeforeCdata4 */) {\n                stateBeforeCdata4(this, c);\n            }\n            else if (this._state === 27 /* BeforeCdata5 */) {\n                stateBeforeCdata5(this, c);\n            }\n            else if (this._state === 28 /* BeforeCdata6 */) {\n                this.stateBeforeCdata6(c);\n            }\n            else if (this._state === 66 /* InHexEntity */) {\n                this.stateInHexEntity(c);\n            }\n            else if (this._state === 65 /* InNumericEntity */) {\n                this.stateInNumericEntity(c);\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            }\n            else if (this._state === 63 /* BeforeNumericEntity */) {\n                stateBeforeNumericEntity(this, c);\n            }\n            else {\n                this.cbs.onerror(Error(\"unknown _state\"), this._state);\n            }\n            this._index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function () {\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this._index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    Tokenizer.prototype.handleTrailingData = function () {\n        var data = this.buffer.substr(this.sectionStart);\n        if (this._state === 29 /* InCdata */ ||\n            this._state === 30 /* AfterCdata1 */ ||\n            this._state === 31 /* AfterCdata2 */) {\n            this.cbs.oncdata(data);\n        }\n        else if (this._state === 19 /* InComment */ ||\n            this._state === 21 /* AfterComment1 */ ||\n            this._state === 22 /* AfterComment2 */) {\n            this.cbs.oncomment(data);\n        }\n        else if (this._state === 64 /* InNamedEntity */ && !this.xmlMode) {\n            this.parseLegacyEntity();\n            if (this.sectionStart < this._index) {\n                this._state = this.baseState;\n                this.handleTrailingData();\n            }\n        }\n        else if (this._state === 65 /* InNumericEntity */ && !this.xmlMode) {\n            this.decodeNumericEntity(2, 10, false);\n            if (this.sectionStart < this._index) {\n                this._state = this.baseState;\n                this.handleTrailingData();\n            }\n        }\n        else if (this._state === 66 /* InHexEntity */ && !this.xmlMode) {\n            this.decodeNumericEntity(3, 16, false);\n            if (this.sectionStart < this._index) {\n                this._state = this.baseState;\n                this.handleTrailingData();\n            }\n        }\n        else if (this._state !== 3 /* InTagName */ &&\n            this._state !== 8 /* BeforeAttributeName */ &&\n            this._state !== 11 /* BeforeAttributeValue */ &&\n            this._state !== 10 /* AfterAttributeName */ &&\n            this._state !== 9 /* InAttributeName */ &&\n            this._state !== 13 /* InAttributeValueSq */ &&\n            this._state !== 12 /* InAttributeValueDq */ &&\n            this._state !== 14 /* InAttributeValueNq */ &&\n            this._state !== 6 /* InClosingTagName */) {\n            this.cbs.ontext(data);\n        }\n        /*\n         * Else, ignore remaining data\n         * TODO add a way to remove current tag\n         */\n    };\n    Tokenizer.prototype.getSection = function () {\n        return this.buffer.substring(this.sectionStart, this._index);\n    };\n    Tokenizer.prototype.emitToken = function (name) {\n        this.cbs[name](this.getSection());\n        this.sectionStart = -1;\n    };\n    Tokenizer.prototype.emitPartial = function (value) {\n        if (this.baseState !== 1 /* Text */) {\n            this.cbs.onattribdata(value); // TODO implement the new event\n        }\n        else {\n            this.cbs.ontext(value);\n        }\n    };\n    return Tokenizer;\n}());\nexports.default = Tokenizer;\n\n\n//# sourceURL=webpack:///./node_modules/htmlparser2/lib/Tokenizer.js?");

/***/ }),

/***/ "./node_modules/htmlparser2/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/htmlparser2/lib/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;\nvar Parser_1 = __webpack_require__(/*! ./Parser */ \"./node_modules/htmlparser2/lib/Parser.js\");\nObject.defineProperty(exports, \"Parser\", { enumerable: true, get: function () { return Parser_1.Parser; } });\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"DomHandler\", { enumerable: true, get: function () { return domhandler_1.DomHandler; } });\nObject.defineProperty(exports, \"DefaultHandler\", { enumerable: true, get: function () { return domhandler_1.DomHandler; } });\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nfunction parseDocument(data, options) {\n    var handler = new domhandler_1.DomHandler(undefined, options);\n    new Parser_1.Parser(handler, options).end(data);\n    return handler.root;\n}\nexports.parseDocument = parseDocument;\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nfunction parseDOM(data, options) {\n    return parseDocument(data, options).children;\n}\nexports.parseDOM = parseDOM;\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nfunction createDomStream(cb, options, elementCb) {\n    var handler = new domhandler_1.DomHandler(cb, options, elementCb);\n    return new Parser_1.Parser(handler, options);\n}\nexports.createDomStream = createDomStream;\nvar Tokenizer_1 = __webpack_require__(/*! ./Tokenizer */ \"./node_modules/htmlparser2/lib/Tokenizer.js\");\nObject.defineProperty(exports, \"Tokenizer\", { enumerable: true, get: function () { return __importDefault(Tokenizer_1).default; } });\nvar ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"./node_modules/domelementtype/lib/index.js\"));\nexports.ElementType = ElementType;\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\n__exportStar(__webpack_require__(/*! ./FeedHandler */ \"./node_modules/htmlparser2/lib/FeedHandler.js\"), exports);\nexports.DomUtils = __importStar(__webpack_require__(/*! domutils */ \"./node_modules/domutils/lib/index.js\"));\nvar FeedHandler_1 = __webpack_require__(/*! ./FeedHandler */ \"./node_modules/htmlparser2/lib/FeedHandler.js\");\nObject.defineProperty(exports, \"RssHandler\", { enumerable: true, get: function () { return FeedHandler_1.FeedHandler; } });\n\n\n//# sourceURL=webpack:///./node_modules/htmlparser2/lib/index.js?");

/***/ }),

/***/ "./node_modules/nth-check/lib/compile.js":
/*!***********************************************!*\
  !*** ./node_modules/nth-check/lib/compile.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generate = exports.compile = void 0;\nvar boolbase_1 = __importDefault(__webpack_require__(/*! boolbase */ \"./node_modules/boolbase/index.js\"));\n/**\n * Returns a function that checks if an elements index matches the given rule\n * highly optimized to return the fastest solution.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A highly optimized function that returns whether an index matches the nth-check.\n * @example\n *\n * ```js\n * const check = nthCheck.compile([2, 3]);\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n * ```\n */\nfunction compile(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    /*\n     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n     * Besides, the specification states that no elements are\n     * matched when `a` and `b` are 0.\n     *\n     * `b < 0` here as we subtracted 1 from `b` above.\n     */\n    if (b < 0 && a <= 0)\n        return boolbase_1.default.falseFunc;\n    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n    if (a === -1)\n        return function (index) { return index <= b; };\n    if (a === 0)\n        return function (index) { return index === b; };\n    // When `b <= 0` and `a === 1`, they match any element.\n    if (a === 1)\n        return b < 0 ? boolbase_1.default.trueFunc : function (index) { return index >= b; };\n    /*\n     * Otherwise, modulo can be used to check if there is a match.\n     *\n     * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n     */\n    var absA = Math.abs(a);\n    // Get `b mod a`, + a if this is negative.\n    var bMod = ((b % absA) + absA) % absA;\n    return a > 1\n        ? function (index) { return index >= b && index % absA === bMod; }\n        : function (index) { return index <= b && index % absA === bMod; };\n}\nexports.compile = compile;\n/**\n * Returns a function that produces a monotonously increasing sequence of indices.\n *\n * If the sequence has an end, the returned function will return `null` after\n * the last index in the sequence.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing (2n+3)</caption>\n *\n * ```js\n * const gen = nthCheck.generate([2, 3])\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value (-2n+10)</caption>\n *\n * ```js\n *\n * const gen = nthCheck.generate([-2, 5]);\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */\nfunction generate(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    var n = 0;\n    // Make sure to always return an increasing sequence\n    if (a < 0) {\n        var aPos_1 = -a;\n        // Get `b mod a`\n        var minValue_1 = ((b % aPos_1) + aPos_1) % aPos_1;\n        return function () {\n            var val = minValue_1 + aPos_1 * n++;\n            return val > b ? null : val;\n        };\n    }\n    if (a === 0)\n        return b < 0\n            ? // There are no result — always return `null`\n                function () { return null; }\n            : // Return `b` exactly once\n                function () { return (n++ === 0 ? b : null); };\n    if (b < 0) {\n        b += a * Math.ceil(-b / a);\n    }\n    return function () { return a * n++ + b; };\n}\nexports.generate = generate;\n//# sourceMappingURL=compile.js.map\n\n//# sourceURL=webpack:///./node_modules/nth-check/lib/compile.js?");

/***/ }),

/***/ "./node_modules/nth-check/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/nth-check/lib/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sequence = exports.generate = exports.compile = exports.parse = void 0;\nvar parse_js_1 = __webpack_require__(/*! ./parse.js */ \"./node_modules/nth-check/lib/parse.js\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parse_js_1.parse; } });\nvar compile_js_1 = __webpack_require__(/*! ./compile.js */ \"./node_modules/nth-check/lib/compile.js\");\nObject.defineProperty(exports, \"compile\", { enumerable: true, get: function () { return compile_js_1.compile; } });\nObject.defineProperty(exports, \"generate\", { enumerable: true, get: function () { return compile_js_1.generate; } });\n/**\n * Parses and compiles a formula to a highly optimized function.\n * Combination of {@link parse} and {@link compile}.\n *\n * If the formula doesn't match any elements,\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\n * Otherwise, a function accepting an _index_ is returned, which returns\n * whether or not the passed _index_ matches the formula.\n *\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\n *\n * @param formula The formula to compile.\n * @example\n * const check = nthCheck(\"2n+3\");\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n */\nfunction nthCheck(formula) {\n    return (0, compile_js_1.compile)((0, parse_js_1.parse)(formula));\n}\nexports.default = nthCheck;\n/**\n * Parses and compiles a formula to a generator that produces a sequence of indices.\n * Combination of {@link parse} and {@link generate}.\n *\n * @param formula The formula to compile.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing</caption>\n *\n * ```js\n * const gen = nthCheck.sequence('2n+3')\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value</caption>\n *\n * ```js\n *\n * const gen = nthCheck.sequence('-2n+5');\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */\nfunction sequence(formula) {\n    return (0, compile_js_1.generate)((0, parse_js_1.parse)(formula));\n}\nexports.sequence = sequence;\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/nth-check/lib/index.js?");

/***/ }),

/***/ "./node_modules/nth-check/lib/parse.js":
/*!*********************************************!*\
  !*** ./node_modules/nth-check/lib/parse.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nvar whitespace = new Set([9, 10, 12, 13, 32]);\nvar ZERO = \"0\".charCodeAt(0);\nvar NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\nfunction parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n        return [2, 0];\n    }\n    else if (formula === \"odd\") {\n        return [2, 1];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    var idx = 0;\n    var a = 0;\n    var sign = readSign();\n    var number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n        idx++;\n        a = sign * (number !== null && number !== void 0 ? number : 1);\n        skipWhitespace();\n        if (idx < formula.length) {\n            sign = readSign();\n            skipWhitespace();\n            number = readNumber();\n        }\n        else {\n            sign = number = 0;\n        }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n        throw new Error(\"n-th rule couldn't be parsed ('\".concat(formula, \"')\"));\n    }\n    return [a, sign * number];\n    function readSign() {\n        if (formula.charAt(idx) === \"-\") {\n            idx++;\n            return -1;\n        }\n        if (formula.charAt(idx) === \"+\") {\n            idx++;\n        }\n        return 1;\n    }\n    function readNumber() {\n        var start = idx;\n        var value = 0;\n        while (idx < formula.length &&\n            formula.charCodeAt(idx) >= ZERO &&\n            formula.charCodeAt(idx) <= NINE) {\n            value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n            idx++;\n        }\n        // Return `null` if we didn't read anything.\n        return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n        while (idx < formula.length &&\n            whitespace.has(formula.charCodeAt(idx))) {\n            idx++;\n        }\n    }\n}\nexports.parse = parse;\n//# sourceMappingURL=parse.js.map\n\n//# sourceURL=webpack:///./node_modules/nth-check/lib/parse.js?");

/***/ }),

/***/ "./node_modules/parse5-htmlparser2-tree-adapter/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/parse5-htmlparser2-tree-adapter/lib/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst doctype = __webpack_require__(/*! parse5/lib/common/doctype */ \"./node_modules/parse5/lib/common/doctype.js\");\nconst { DOCUMENT_MODE } = __webpack_require__(/*! parse5/lib/common/html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Conversion tables for DOM Level1 structure emulation\nconst nodeTypes = {\n    element: 1,\n    text: 3,\n    cdata: 4,\n    comment: 8\n};\n\nconst nodePropertyShorthands = {\n    tagName: 'name',\n    childNodes: 'children',\n    parentNode: 'parent',\n    previousSibling: 'prev',\n    nextSibling: 'next',\n    nodeValue: 'data'\n};\n\n//Node\nclass Node {\n    constructor(props) {\n        for (const key of Object.keys(props)) {\n            this[key] = props[key];\n        }\n    }\n\n    get firstChild() {\n        const children = this.children;\n\n        return (children && children[0]) || null;\n    }\n\n    get lastChild() {\n        const children = this.children;\n\n        return (children && children[children.length - 1]) || null;\n    }\n\n    get nodeType() {\n        return nodeTypes[this.type] || nodeTypes.element;\n    }\n}\n\nObject.keys(nodePropertyShorthands).forEach(key => {\n    const shorthand = nodePropertyShorthands[key];\n\n    Object.defineProperty(Node.prototype, key, {\n        get: function() {\n            return this[shorthand] || null;\n        },\n        set: function(val) {\n            this[shorthand] = val;\n            return val;\n        }\n    });\n});\n\n//Node construction\nexports.createDocument = function() {\n    return new Node({\n        type: 'root',\n        name: 'root',\n        parent: null,\n        prev: null,\n        next: null,\n        children: [],\n        'x-mode': DOCUMENT_MODE.NO_QUIRKS\n    });\n};\n\nexports.createDocumentFragment = function() {\n    return new Node({\n        type: 'root',\n        name: 'root',\n        parent: null,\n        prev: null,\n        next: null,\n        children: []\n    });\n};\n\nexports.createElement = function(tagName, namespaceURI, attrs) {\n    const attribs = Object.create(null);\n    const attribsNamespace = Object.create(null);\n    const attribsPrefix = Object.create(null);\n\n    for (let i = 0; i < attrs.length; i++) {\n        const attrName = attrs[i].name;\n\n        attribs[attrName] = attrs[i].value;\n        attribsNamespace[attrName] = attrs[i].namespace;\n        attribsPrefix[attrName] = attrs[i].prefix;\n    }\n\n    return new Node({\n        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',\n        name: tagName,\n        namespace: namespaceURI,\n        attribs: attribs,\n        'x-attribsNamespace': attribsNamespace,\n        'x-attribsPrefix': attribsPrefix,\n        children: [],\n        parent: null,\n        prev: null,\n        next: null\n    });\n};\n\nexports.createCommentNode = function(data) {\n    return new Node({\n        type: 'comment',\n        data: data,\n        parent: null,\n        prev: null,\n        next: null\n    });\n};\n\nconst createTextNode = function(value) {\n    return new Node({\n        type: 'text',\n        data: value,\n        parent: null,\n        prev: null,\n        next: null\n    });\n};\n\n//Tree mutation\nconst appendChild = (exports.appendChild = function(parentNode, newNode) {\n    const prev = parentNode.children[parentNode.children.length - 1];\n\n    if (prev) {\n        prev.next = newNode;\n        newNode.prev = prev;\n    }\n\n    parentNode.children.push(newNode);\n    newNode.parent = parentNode;\n});\n\nconst insertBefore = (exports.insertBefore = function(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.children.indexOf(referenceNode);\n    const prev = referenceNode.prev;\n\n    if (prev) {\n        prev.next = newNode;\n        newNode.prev = prev;\n    }\n\n    referenceNode.prev = newNode;\n    newNode.next = referenceNode;\n\n    parentNode.children.splice(insertionIdx, 0, newNode);\n    newNode.parent = parentNode;\n});\n\nexports.setTemplateContent = function(templateElement, contentElement) {\n    appendChild(templateElement, contentElement);\n};\n\nexports.getTemplateContent = function(templateElement) {\n    return templateElement.children[0];\n};\n\nexports.setDocumentType = function(document, name, publicId, systemId) {\n    const data = doctype.serializeContent(name, publicId, systemId);\n    let doctypeNode = null;\n\n    for (let i = 0; i < document.children.length; i++) {\n        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {\n            doctypeNode = document.children[i];\n            break;\n        }\n    }\n\n    if (doctypeNode) {\n        doctypeNode.data = data;\n        doctypeNode['x-name'] = name;\n        doctypeNode['x-publicId'] = publicId;\n        doctypeNode['x-systemId'] = systemId;\n    } else {\n        appendChild(\n            document,\n            new Node({\n                type: 'directive',\n                name: '!doctype',\n                data: data,\n                'x-name': name,\n                'x-publicId': publicId,\n                'x-systemId': systemId\n            })\n        );\n    }\n};\n\nexports.setDocumentMode = function(document, mode) {\n    document['x-mode'] = mode;\n};\n\nexports.getDocumentMode = function(document) {\n    return document['x-mode'];\n};\n\nexports.detachNode = function(node) {\n    if (node.parent) {\n        const idx = node.parent.children.indexOf(node);\n        const prev = node.prev;\n        const next = node.next;\n\n        node.prev = null;\n        node.next = null;\n\n        if (prev) {\n            prev.next = next;\n        }\n\n        if (next) {\n            next.prev = prev;\n        }\n\n        node.parent.children.splice(idx, 1);\n        node.parent = null;\n    }\n};\n\nexports.insertText = function(parentNode, text) {\n    const lastChild = parentNode.children[parentNode.children.length - 1];\n\n    if (lastChild && lastChild.type === 'text') {\n        lastChild.data += text;\n    } else {\n        appendChild(parentNode, createTextNode(text));\n    }\n};\n\nexports.insertTextBefore = function(parentNode, text, referenceNode) {\n    const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n\n    if (prevNode && prevNode.type === 'text') {\n        prevNode.data += text;\n    } else {\n        insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n};\n\nexports.adoptAttributes = function(recipient, attrs) {\n    for (let i = 0; i < attrs.length; i++) {\n        const attrName = attrs[i].name;\n\n        if (typeof recipient.attribs[attrName] === 'undefined') {\n            recipient.attribs[attrName] = attrs[i].value;\n            recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;\n            recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;\n        }\n    }\n};\n\n//Tree traversing\nexports.getFirstChild = function(node) {\n    return node.children[0];\n};\n\nexports.getChildNodes = function(node) {\n    return node.children;\n};\n\nexports.getParentNode = function(node) {\n    return node.parent;\n};\n\nexports.getAttrList = function(element) {\n    const attrList = [];\n\n    for (const name in element.attribs) {\n        attrList.push({\n            name: name,\n            value: element.attribs[name],\n            namespace: element['x-attribsNamespace'][name],\n            prefix: element['x-attribsPrefix'][name]\n        });\n    }\n\n    return attrList;\n};\n\n//Node data\nexports.getTagName = function(element) {\n    return element.name;\n};\n\nexports.getNamespaceURI = function(element) {\n    return element.namespace;\n};\n\nexports.getTextNodeContent = function(textNode) {\n    return textNode.data;\n};\n\nexports.getCommentNodeContent = function(commentNode) {\n    return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function(doctypeNode) {\n    return doctypeNode['x-name'];\n};\n\nexports.getDocumentTypeNodePublicId = function(doctypeNode) {\n    return doctypeNode['x-publicId'];\n};\n\nexports.getDocumentTypeNodeSystemId = function(doctypeNode) {\n    return doctypeNode['x-systemId'];\n};\n\n//Node types\nexports.isTextNode = function(node) {\n    return node.type === 'text';\n};\n\nexports.isCommentNode = function(node) {\n    return node.type === 'comment';\n};\n\nexports.isDocumentTypeNode = function(node) {\n    return node.type === 'directive' && node.name === '!doctype';\n};\n\nexports.isElementNode = function(node) {\n    return !!node.attribs;\n};\n\n// Source code location\nexports.setNodeSourceCodeLocation = function(node, location) {\n    node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function(node) {\n    return node.sourceCodeLocation;\n};\n\nexports.updateNodeSourceCodeLocation = function(node, endLocation) {\n    node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5-htmlparser2-tree-adapter/lib/index.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/common/doctype.js":
/*!***************************************************!*\
  !*** ./node_modules/parse5/lib/common/doctype.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { DOCUMENT_MODE } = __webpack_require__(/*! ./html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\n\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//'\n];\n\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//'\n]);\n\nconst QUIRKS_MODE_PUBLIC_IDS = ['-//w3o//dtd w3 html strict 3.0//en//', '-/w3c/dtd html 4.0 transitional/en', 'html'];\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\n\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//'\n]);\n\n//Utils\nfunction enquoteDoctypeId(id) {\n    const quote = id.indexOf('\"') !== -1 ? \"'\" : '\"';\n\n    return quote + id + quote;\n}\n\nfunction hasPrefix(publicId, prefixes) {\n    for (let i = 0; i < prefixes.length; i++) {\n        if (publicId.indexOf(prefixes[i]) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n//API\nexports.isConforming = function(token) {\n    return (\n        token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID)\n    );\n};\n\nexports.getDocumentMode = function(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n\n    const systemId = token.systemId;\n\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n\n    let publicId = token.publicId;\n\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n\n        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n\n    return DOCUMENT_MODE.NO_QUIRKS;\n};\n\nexports.serializeContent = function(name, publicId, systemId) {\n    let str = '!DOCTYPE ';\n\n    if (name) {\n        str += name;\n    }\n\n    if (publicId) {\n        str += ' PUBLIC ' + enquoteDoctypeId(publicId);\n    } else if (systemId) {\n        str += ' SYSTEM';\n    }\n\n    if (systemId !== null) {\n        str += ' ' + enquoteDoctypeId(systemId);\n    }\n\n    return str;\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/common/doctype.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/common/error-codes.js":
/*!*******************************************************!*\
  !*** ./node_modules/parse5/lib/common/error-codes.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    controlCharacterInInputStream: 'control-character-in-input-stream',\n    noncharacterInInputStream: 'noncharacter-in-input-stream',\n    surrogateInInputStream: 'surrogate-in-input-stream',\n    nonVoidHtmlElementStartTagWithTrailingSolidus: 'non-void-html-element-start-tag-with-trailing-solidus',\n    endTagWithAttributes: 'end-tag-with-attributes',\n    endTagWithTrailingSolidus: 'end-tag-with-trailing-solidus',\n    unexpectedSolidusInTag: 'unexpected-solidus-in-tag',\n    unexpectedNullCharacter: 'unexpected-null-character',\n    unexpectedQuestionMarkInsteadOfTagName: 'unexpected-question-mark-instead-of-tag-name',\n    invalidFirstCharacterOfTagName: 'invalid-first-character-of-tag-name',\n    unexpectedEqualsSignBeforeAttributeName: 'unexpected-equals-sign-before-attribute-name',\n    missingEndTagName: 'missing-end-tag-name',\n    unexpectedCharacterInAttributeName: 'unexpected-character-in-attribute-name',\n    unknownNamedCharacterReference: 'unknown-named-character-reference',\n    missingSemicolonAfterCharacterReference: 'missing-semicolon-after-character-reference',\n    unexpectedCharacterAfterDoctypeSystemIdentifier: 'unexpected-character-after-doctype-system-identifier',\n    unexpectedCharacterInUnquotedAttributeValue: 'unexpected-character-in-unquoted-attribute-value',\n    eofBeforeTagName: 'eof-before-tag-name',\n    eofInTag: 'eof-in-tag',\n    missingAttributeValue: 'missing-attribute-value',\n    missingWhitespaceBetweenAttributes: 'missing-whitespace-between-attributes',\n    missingWhitespaceAfterDoctypePublicKeyword: 'missing-whitespace-after-doctype-public-keyword',\n    missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:\n        'missing-whitespace-between-doctype-public-and-system-identifiers',\n    missingWhitespaceAfterDoctypeSystemKeyword: 'missing-whitespace-after-doctype-system-keyword',\n    missingQuoteBeforeDoctypePublicIdentifier: 'missing-quote-before-doctype-public-identifier',\n    missingQuoteBeforeDoctypeSystemIdentifier: 'missing-quote-before-doctype-system-identifier',\n    missingDoctypePublicIdentifier: 'missing-doctype-public-identifier',\n    missingDoctypeSystemIdentifier: 'missing-doctype-system-identifier',\n    abruptDoctypePublicIdentifier: 'abrupt-doctype-public-identifier',\n    abruptDoctypeSystemIdentifier: 'abrupt-doctype-system-identifier',\n    cdataInHtmlContent: 'cdata-in-html-content',\n    incorrectlyOpenedComment: 'incorrectly-opened-comment',\n    eofInScriptHtmlCommentLikeText: 'eof-in-script-html-comment-like-text',\n    eofInDoctype: 'eof-in-doctype',\n    nestedComment: 'nested-comment',\n    abruptClosingOfEmptyComment: 'abrupt-closing-of-empty-comment',\n    eofInComment: 'eof-in-comment',\n    incorrectlyClosedComment: 'incorrectly-closed-comment',\n    eofInCdata: 'eof-in-cdata',\n    absenceOfDigitsInNumericCharacterReference: 'absence-of-digits-in-numeric-character-reference',\n    nullCharacterReference: 'null-character-reference',\n    surrogateCharacterReference: 'surrogate-character-reference',\n    characterReferenceOutsideUnicodeRange: 'character-reference-outside-unicode-range',\n    controlCharacterReference: 'control-character-reference',\n    noncharacterCharacterReference: 'noncharacter-character-reference',\n    missingWhitespaceBeforeDoctypeName: 'missing-whitespace-before-doctype-name',\n    missingDoctypeName: 'missing-doctype-name',\n    invalidCharacterSequenceAfterDoctypeName: 'invalid-character-sequence-after-doctype-name',\n    duplicateAttribute: 'duplicate-attribute',\n    nonConformingDoctype: 'non-conforming-doctype',\n    missingDoctype: 'missing-doctype',\n    misplacedDoctype: 'misplaced-doctype',\n    endTagWithoutMatchingOpenElement: 'end-tag-without-matching-open-element',\n    closingOfElementWithOpenChildElements: 'closing-of-element-with-open-child-elements',\n    disallowedContentInNoscriptInHead: 'disallowed-content-in-noscript-in-head',\n    openElementsLeftAfterEof: 'open-elements-left-after-eof',\n    abandonedHeadElementChild: 'abandoned-head-element-child',\n    misplacedStartTagForHeadElement: 'misplaced-start-tag-for-head-element',\n    nestedNoscriptInHead: 'nested-noscript-in-head',\n    eofInElementThatCanContainOnlyText: 'eof-in-element-that-can-contain-only-text'\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/common/error-codes.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/common/foreign-content.js":
/*!***********************************************************!*\
  !*** ./node_modules/parse5/lib/common/foreign-content.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Tokenizer = __webpack_require__(/*! ../tokenizer */ \"./node_modules/parse5/lib/tokenizer/index.js\");\nconst HTML = __webpack_require__(/*! ./html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\nconst ATTRS = HTML.ATTRS;\n\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml'\n};\n\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = {\n    attributename: 'attributeName',\n    attributetype: 'attributeType',\n    basefrequency: 'baseFrequency',\n    baseprofile: 'baseProfile',\n    calcmode: 'calcMode',\n    clippathunits: 'clipPathUnits',\n    diffuseconstant: 'diffuseConstant',\n    edgemode: 'edgeMode',\n    filterunits: 'filterUnits',\n    glyphref: 'glyphRef',\n    gradienttransform: 'gradientTransform',\n    gradientunits: 'gradientUnits',\n    kernelmatrix: 'kernelMatrix',\n    kernelunitlength: 'kernelUnitLength',\n    keypoints: 'keyPoints',\n    keysplines: 'keySplines',\n    keytimes: 'keyTimes',\n    lengthadjust: 'lengthAdjust',\n    limitingconeangle: 'limitingConeAngle',\n    markerheight: 'markerHeight',\n    markerunits: 'markerUnits',\n    markerwidth: 'markerWidth',\n    maskcontentunits: 'maskContentUnits',\n    maskunits: 'maskUnits',\n    numoctaves: 'numOctaves',\n    pathlength: 'pathLength',\n    patterncontentunits: 'patternContentUnits',\n    patterntransform: 'patternTransform',\n    patternunits: 'patternUnits',\n    pointsatx: 'pointsAtX',\n    pointsaty: 'pointsAtY',\n    pointsatz: 'pointsAtZ',\n    preservealpha: 'preserveAlpha',\n    preserveaspectratio: 'preserveAspectRatio',\n    primitiveunits: 'primitiveUnits',\n    refx: 'refX',\n    refy: 'refY',\n    repeatcount: 'repeatCount',\n    repeatdur: 'repeatDur',\n    requiredextensions: 'requiredExtensions',\n    requiredfeatures: 'requiredFeatures',\n    specularconstant: 'specularConstant',\n    specularexponent: 'specularExponent',\n    spreadmethod: 'spreadMethod',\n    startoffset: 'startOffset',\n    stddeviation: 'stdDeviation',\n    stitchtiles: 'stitchTiles',\n    surfacescale: 'surfaceScale',\n    systemlanguage: 'systemLanguage',\n    tablevalues: 'tableValues',\n    targetx: 'targetX',\n    targety: 'targetY',\n    textlength: 'textLength',\n    viewbox: 'viewBox',\n    viewtarget: 'viewTarget',\n    xchannelselector: 'xChannelSelector',\n    ychannelselector: 'yChannelSelector',\n    zoomandpan: 'zoomAndPan'\n};\n\nconst XML_ATTRS_ADJUSTMENT_MAP = {\n    'xlink:actuate': { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK },\n    'xlink:arcrole': { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK },\n    'xlink:href': { prefix: 'xlink', name: 'href', namespace: NS.XLINK },\n    'xlink:role': { prefix: 'xlink', name: 'role', namespace: NS.XLINK },\n    'xlink:show': { prefix: 'xlink', name: 'show', namespace: NS.XLINK },\n    'xlink:title': { prefix: 'xlink', name: 'title', namespace: NS.XLINK },\n    'xlink:type': { prefix: 'xlink', name: 'type', namespace: NS.XLINK },\n    'xml:base': { prefix: 'xml', name: 'base', namespace: NS.XML },\n    'xml:lang': { prefix: 'xml', name: 'lang', namespace: NS.XML },\n    'xml:space': { prefix: 'xml', name: 'space', namespace: NS.XML },\n    xmlns: { prefix: '', name: 'xmlns', namespace: NS.XMLNS },\n    'xmlns:xlink': { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }\n};\n\n//SVG tag names adjustment map\nconst SVG_TAG_NAMES_ADJUSTMENT_MAP = (exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {\n    altglyph: 'altGlyph',\n    altglyphdef: 'altGlyphDef',\n    altglyphitem: 'altGlyphItem',\n    animatecolor: 'animateColor',\n    animatemotion: 'animateMotion',\n    animatetransform: 'animateTransform',\n    clippath: 'clipPath',\n    feblend: 'feBlend',\n    fecolormatrix: 'feColorMatrix',\n    fecomponenttransfer: 'feComponentTransfer',\n    fecomposite: 'feComposite',\n    feconvolvematrix: 'feConvolveMatrix',\n    fediffuselighting: 'feDiffuseLighting',\n    fedisplacementmap: 'feDisplacementMap',\n    fedistantlight: 'feDistantLight',\n    feflood: 'feFlood',\n    fefunca: 'feFuncA',\n    fefuncb: 'feFuncB',\n    fefuncg: 'feFuncG',\n    fefuncr: 'feFuncR',\n    fegaussianblur: 'feGaussianBlur',\n    feimage: 'feImage',\n    femerge: 'feMerge',\n    femergenode: 'feMergeNode',\n    femorphology: 'feMorphology',\n    feoffset: 'feOffset',\n    fepointlight: 'fePointLight',\n    fespecularlighting: 'feSpecularLighting',\n    fespotlight: 'feSpotLight',\n    fetile: 'feTile',\n    feturbulence: 'feTurbulence',\n    foreignobject: 'foreignObject',\n    glyphref: 'glyphRef',\n    lineargradient: 'linearGradient',\n    radialgradient: 'radialGradient',\n    textpath: 'textPath'\n});\n\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = {\n    [$.B]: true,\n    [$.BIG]: true,\n    [$.BLOCKQUOTE]: true,\n    [$.BODY]: true,\n    [$.BR]: true,\n    [$.CENTER]: true,\n    [$.CODE]: true,\n    [$.DD]: true,\n    [$.DIV]: true,\n    [$.DL]: true,\n    [$.DT]: true,\n    [$.EM]: true,\n    [$.EMBED]: true,\n    [$.H1]: true,\n    [$.H2]: true,\n    [$.H3]: true,\n    [$.H4]: true,\n    [$.H5]: true,\n    [$.H6]: true,\n    [$.HEAD]: true,\n    [$.HR]: true,\n    [$.I]: true,\n    [$.IMG]: true,\n    [$.LI]: true,\n    [$.LISTING]: true,\n    [$.MENU]: true,\n    [$.META]: true,\n    [$.NOBR]: true,\n    [$.OL]: true,\n    [$.P]: true,\n    [$.PRE]: true,\n    [$.RUBY]: true,\n    [$.S]: true,\n    [$.SMALL]: true,\n    [$.SPAN]: true,\n    [$.STRONG]: true,\n    [$.STRIKE]: true,\n    [$.SUB]: true,\n    [$.SUP]: true,\n    [$.TABLE]: true,\n    [$.TT]: true,\n    [$.U]: true,\n    [$.UL]: true,\n    [$.VAR]: true\n};\n\n//Check exit from foreign content\nexports.causesExit = function(startTagToken) {\n    const tn = startTagToken.tagName;\n    const isFontWithAttrs =\n        tn === $.FONT &&\n        (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||\n            Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||\n            Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);\n\n    return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];\n};\n\n//Token adjustments\nexports.adjustTokenMathMLAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n};\n\nexports.adjustTokenSVGAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];\n\n        if (adjustedAttrName) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n};\n\nexports.adjustTokenXMLAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];\n\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n};\n\nexports.adjustTokenSVGTagName = function(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];\n\n    if (adjustedTagName) {\n        token.tagName = adjustedTagName;\n    }\n};\n\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\n\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\n\nexports.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {\n    if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {\n        return true;\n    }\n\n    if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {\n        return true;\n    }\n\n    return false;\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/common/foreign-content.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/common/html.js":
/*!************************************************!*\
  !*** ./node_modules/parse5/lib/common/html.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst NS = (exports.NAMESPACES = {\n    HTML: 'http://www.w3.org/1999/xhtml',\n    MATHML: 'http://www.w3.org/1998/Math/MathML',\n    SVG: 'http://www.w3.org/2000/svg',\n    XLINK: 'http://www.w3.org/1999/xlink',\n    XML: 'http://www.w3.org/XML/1998/namespace',\n    XMLNS: 'http://www.w3.org/2000/xmlns/'\n});\n\nexports.ATTRS = {\n    TYPE: 'type',\n    ACTION: 'action',\n    ENCODING: 'encoding',\n    PROMPT: 'prompt',\n    NAME: 'name',\n    COLOR: 'color',\n    FACE: 'face',\n    SIZE: 'size'\n};\n\nexports.DOCUMENT_MODE = {\n    NO_QUIRKS: 'no-quirks',\n    QUIRKS: 'quirks',\n    LIMITED_QUIRKS: 'limited-quirks'\n};\n\nconst $ = (exports.TAG_NAMES = {\n    A: 'a',\n    ADDRESS: 'address',\n    ANNOTATION_XML: 'annotation-xml',\n    APPLET: 'applet',\n    AREA: 'area',\n    ARTICLE: 'article',\n    ASIDE: 'aside',\n\n    B: 'b',\n    BASE: 'base',\n    BASEFONT: 'basefont',\n    BGSOUND: 'bgsound',\n    BIG: 'big',\n    BLOCKQUOTE: 'blockquote',\n    BODY: 'body',\n    BR: 'br',\n    BUTTON: 'button',\n\n    CAPTION: 'caption',\n    CENTER: 'center',\n    CODE: 'code',\n    COL: 'col',\n    COLGROUP: 'colgroup',\n\n    DD: 'dd',\n    DESC: 'desc',\n    DETAILS: 'details',\n    DIALOG: 'dialog',\n    DIR: 'dir',\n    DIV: 'div',\n    DL: 'dl',\n    DT: 'dt',\n\n    EM: 'em',\n    EMBED: 'embed',\n\n    FIELDSET: 'fieldset',\n    FIGCAPTION: 'figcaption',\n    FIGURE: 'figure',\n    FONT: 'font',\n    FOOTER: 'footer',\n    FOREIGN_OBJECT: 'foreignObject',\n    FORM: 'form',\n    FRAME: 'frame',\n    FRAMESET: 'frameset',\n\n    H1: 'h1',\n    H2: 'h2',\n    H3: 'h3',\n    H4: 'h4',\n    H5: 'h5',\n    H6: 'h6',\n    HEAD: 'head',\n    HEADER: 'header',\n    HGROUP: 'hgroup',\n    HR: 'hr',\n    HTML: 'html',\n\n    I: 'i',\n    IMG: 'img',\n    IMAGE: 'image',\n    INPUT: 'input',\n    IFRAME: 'iframe',\n\n    KEYGEN: 'keygen',\n\n    LABEL: 'label',\n    LI: 'li',\n    LINK: 'link',\n    LISTING: 'listing',\n\n    MAIN: 'main',\n    MALIGNMARK: 'malignmark',\n    MARQUEE: 'marquee',\n    MATH: 'math',\n    MENU: 'menu',\n    META: 'meta',\n    MGLYPH: 'mglyph',\n    MI: 'mi',\n    MO: 'mo',\n    MN: 'mn',\n    MS: 'ms',\n    MTEXT: 'mtext',\n\n    NAV: 'nav',\n    NOBR: 'nobr',\n    NOFRAMES: 'noframes',\n    NOEMBED: 'noembed',\n    NOSCRIPT: 'noscript',\n\n    OBJECT: 'object',\n    OL: 'ol',\n    OPTGROUP: 'optgroup',\n    OPTION: 'option',\n\n    P: 'p',\n    PARAM: 'param',\n    PLAINTEXT: 'plaintext',\n    PRE: 'pre',\n\n    RB: 'rb',\n    RP: 'rp',\n    RT: 'rt',\n    RTC: 'rtc',\n    RUBY: 'ruby',\n\n    S: 's',\n    SCRIPT: 'script',\n    SECTION: 'section',\n    SELECT: 'select',\n    SOURCE: 'source',\n    SMALL: 'small',\n    SPAN: 'span',\n    STRIKE: 'strike',\n    STRONG: 'strong',\n    STYLE: 'style',\n    SUB: 'sub',\n    SUMMARY: 'summary',\n    SUP: 'sup',\n\n    TABLE: 'table',\n    TBODY: 'tbody',\n    TEMPLATE: 'template',\n    TEXTAREA: 'textarea',\n    TFOOT: 'tfoot',\n    TD: 'td',\n    TH: 'th',\n    THEAD: 'thead',\n    TITLE: 'title',\n    TR: 'tr',\n    TRACK: 'track',\n    TT: 'tt',\n\n    U: 'u',\n    UL: 'ul',\n\n    SVG: 'svg',\n\n    VAR: 'var',\n\n    WBR: 'wbr',\n\n    XMP: 'xmp'\n});\n\nexports.SPECIAL_ELEMENTS = {\n    [NS.HTML]: {\n        [$.ADDRESS]: true,\n        [$.APPLET]: true,\n        [$.AREA]: true,\n        [$.ARTICLE]: true,\n        [$.ASIDE]: true,\n        [$.BASE]: true,\n        [$.BASEFONT]: true,\n        [$.BGSOUND]: true,\n        [$.BLOCKQUOTE]: true,\n        [$.BODY]: true,\n        [$.BR]: true,\n        [$.BUTTON]: true,\n        [$.CAPTION]: true,\n        [$.CENTER]: true,\n        [$.COL]: true,\n        [$.COLGROUP]: true,\n        [$.DD]: true,\n        [$.DETAILS]: true,\n        [$.DIR]: true,\n        [$.DIV]: true,\n        [$.DL]: true,\n        [$.DT]: true,\n        [$.EMBED]: true,\n        [$.FIELDSET]: true,\n        [$.FIGCAPTION]: true,\n        [$.FIGURE]: true,\n        [$.FOOTER]: true,\n        [$.FORM]: true,\n        [$.FRAME]: true,\n        [$.FRAMESET]: true,\n        [$.H1]: true,\n        [$.H2]: true,\n        [$.H3]: true,\n        [$.H4]: true,\n        [$.H5]: true,\n        [$.H6]: true,\n        [$.HEAD]: true,\n        [$.HEADER]: true,\n        [$.HGROUP]: true,\n        [$.HR]: true,\n        [$.HTML]: true,\n        [$.IFRAME]: true,\n        [$.IMG]: true,\n        [$.INPUT]: true,\n        [$.LI]: true,\n        [$.LINK]: true,\n        [$.LISTING]: true,\n        [$.MAIN]: true,\n        [$.MARQUEE]: true,\n        [$.MENU]: true,\n        [$.META]: true,\n        [$.NAV]: true,\n        [$.NOEMBED]: true,\n        [$.NOFRAMES]: true,\n        [$.NOSCRIPT]: true,\n        [$.OBJECT]: true,\n        [$.OL]: true,\n        [$.P]: true,\n        [$.PARAM]: true,\n        [$.PLAINTEXT]: true,\n        [$.PRE]: true,\n        [$.SCRIPT]: true,\n        [$.SECTION]: true,\n        [$.SELECT]: true,\n        [$.SOURCE]: true,\n        [$.STYLE]: true,\n        [$.SUMMARY]: true,\n        [$.TABLE]: true,\n        [$.TBODY]: true,\n        [$.TD]: true,\n        [$.TEMPLATE]: true,\n        [$.TEXTAREA]: true,\n        [$.TFOOT]: true,\n        [$.TH]: true,\n        [$.THEAD]: true,\n        [$.TITLE]: true,\n        [$.TR]: true,\n        [$.TRACK]: true,\n        [$.UL]: true,\n        [$.WBR]: true,\n        [$.XMP]: true\n    },\n    [NS.MATHML]: {\n        [$.MI]: true,\n        [$.MO]: true,\n        [$.MN]: true,\n        [$.MS]: true,\n        [$.MTEXT]: true,\n        [$.ANNOTATION_XML]: true\n    },\n    [NS.SVG]: {\n        [$.TITLE]: true,\n        [$.FOREIGN_OBJECT]: true,\n        [$.DESC]: true\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/common/html.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/common/unicode.js":
/*!***************************************************!*\
  !*** ./node_modules/parse5/lib/common/unicode.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst UNDEFINED_CODE_POINTS = [\n    0xfffe,\n    0xffff,\n    0x1fffe,\n    0x1ffff,\n    0x2fffe,\n    0x2ffff,\n    0x3fffe,\n    0x3ffff,\n    0x4fffe,\n    0x4ffff,\n    0x5fffe,\n    0x5ffff,\n    0x6fffe,\n    0x6ffff,\n    0x7fffe,\n    0x7ffff,\n    0x8fffe,\n    0x8ffff,\n    0x9fffe,\n    0x9ffff,\n    0xafffe,\n    0xaffff,\n    0xbfffe,\n    0xbffff,\n    0xcfffe,\n    0xcffff,\n    0xdfffe,\n    0xdffff,\n    0xefffe,\n    0xeffff,\n    0xffffe,\n    0xfffff,\n    0x10fffe,\n    0x10ffff\n];\n\nexports.REPLACEMENT_CHARACTER = '\\uFFFD';\n\nexports.CODE_POINTS = {\n    EOF: -1,\n    NULL: 0x00,\n    TABULATION: 0x09,\n    CARRIAGE_RETURN: 0x0d,\n    LINE_FEED: 0x0a,\n    FORM_FEED: 0x0c,\n    SPACE: 0x20,\n    EXCLAMATION_MARK: 0x21,\n    QUOTATION_MARK: 0x22,\n    NUMBER_SIGN: 0x23,\n    AMPERSAND: 0x26,\n    APOSTROPHE: 0x27,\n    HYPHEN_MINUS: 0x2d,\n    SOLIDUS: 0x2f,\n    DIGIT_0: 0x30,\n    DIGIT_9: 0x39,\n    SEMICOLON: 0x3b,\n    LESS_THAN_SIGN: 0x3c,\n    EQUALS_SIGN: 0x3d,\n    GREATER_THAN_SIGN: 0x3e,\n    QUESTION_MARK: 0x3f,\n    LATIN_CAPITAL_A: 0x41,\n    LATIN_CAPITAL_F: 0x46,\n    LATIN_CAPITAL_X: 0x58,\n    LATIN_CAPITAL_Z: 0x5a,\n    RIGHT_SQUARE_BRACKET: 0x5d,\n    GRAVE_ACCENT: 0x60,\n    LATIN_SMALL_A: 0x61,\n    LATIN_SMALL_F: 0x66,\n    LATIN_SMALL_X: 0x78,\n    LATIN_SMALL_Z: 0x7a,\n    REPLACEMENT_CHARACTER: 0xfffd\n};\n\nexports.CODE_POINT_SEQUENCES = {\n    DASH_DASH_STRING: [0x2d, 0x2d], //--\n    DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE\n    CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b], //[CDATA[\n    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script\n    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43], //PUBLIC\n    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM\n};\n\n//Surrogates\nexports.isSurrogate = function(cp) {\n    return cp >= 0xd800 && cp <= 0xdfff;\n};\n\nexports.isSurrogatePair = function(cp) {\n    return cp >= 0xdc00 && cp <= 0xdfff;\n};\n\nexports.getSurrogatePairCodePoint = function(cp1, cp2) {\n    return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;\n};\n\n//NOTE: excluding NULL and ASCII whitespace\nexports.isControlCodePoint = function(cp) {\n    return (\n        (cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f)\n    );\n};\n\nexports.isUndefinedCodePoint = function(cp) {\n    return (cp >= 0xfdd0 && cp <= 0xfdef) || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/common/unicode.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/error-reporting/mixin-base.js":
/*!**************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/error-reporting/mixin-base.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\n\nclass ErrorReportingMixinBase extends Mixin {\n    constructor(host, opts) {\n        super(host);\n\n        this.posTracker = null;\n        this.onParseError = opts.onParseError;\n    }\n\n    _setErrorLocation(err) {\n        err.startLine = err.endLine = this.posTracker.line;\n        err.startCol = err.endCol = this.posTracker.col;\n        err.startOffset = err.endOffset = this.posTracker.offset;\n    }\n\n    _reportError(code) {\n        const err = {\n            code: code,\n            startLine: -1,\n            startCol: -1,\n            startOffset: -1,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n\n        this._setErrorLocation(err);\n        this.onParseError(err);\n    }\n\n    _getOverriddenMethods(mxn) {\n        return {\n            _err(code) {\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingMixinBase;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/error-reporting/mixin-base.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js":
/*!****************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ErrorReportingMixinBase = __webpack_require__(/*! ./mixin-base */ \"./node_modules/parse5/lib/extensions/error-reporting/mixin-base.js\");\nconst ErrorReportingTokenizerMixin = __webpack_require__(/*! ./tokenizer-mixin */ \"./node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js\");\nconst LocationInfoTokenizerMixin = __webpack_require__(/*! ../location-info/tokenizer-mixin */ \"./node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js\");\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\n\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n    constructor(parser, opts) {\n        super(parser, opts);\n\n        this.opts = opts;\n        this.ctLoc = null;\n        this.locBeforeToken = false;\n    }\n\n    _setErrorLocation(err) {\n        if (this.ctLoc) {\n            err.startLine = this.ctLoc.startLine;\n            err.startCol = this.ctLoc.startCol;\n            err.startOffset = this.ctLoc.startOffset;\n\n            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n            },\n\n            _processInputToken(token) {\n                mxn.ctLoc = token.location;\n\n                orig._processInputToken.call(this, token);\n            },\n\n            _err(code, options) {\n                mxn.locBeforeToken = options && options.beforeToken;\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingParserMixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ErrorReportingMixinBase = __webpack_require__(/*! ./mixin-base */ \"./node_modules/parse5/lib/extensions/error-reporting/mixin-base.js\");\nconst PositionTrackingPreprocessorMixin = __webpack_require__(/*! ../position-tracking/preprocessor-mixin */ \"./node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js\");\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\n\nclass ErrorReportingPreprocessorMixin extends ErrorReportingMixinBase {\n    constructor(preprocessor, opts) {\n        super(preprocessor, opts);\n\n        this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);\n        this.lastErrOffset = -1;\n    }\n\n    _reportError(code) {\n        //NOTE: avoid reporting error twice on advance/retreat\n        if (this.lastErrOffset !== this.posTracker.offset) {\n            this.lastErrOffset = this.posTracker.offset;\n            super._reportError(code);\n        }\n    }\n}\n\nmodule.exports = ErrorReportingPreprocessorMixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst ErrorReportingMixinBase = __webpack_require__(/*! ./mixin-base */ \"./node_modules/parse5/lib/extensions/error-reporting/mixin-base.js\");\nconst ErrorReportingPreprocessorMixin = __webpack_require__(/*! ./preprocessor-mixin */ \"./node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js\");\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\n\nclass ErrorReportingTokenizerMixin extends ErrorReportingMixinBase {\n    constructor(tokenizer, opts) {\n        super(tokenizer, opts);\n\n        const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);\n\n        this.posTracker = preprocessorMixin.posTracker;\n    }\n}\n\nmodule.exports = ErrorReportingTokenizerMixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\n\nclass LocationInfoOpenElementStackMixin extends Mixin {\n    constructor(stack, opts) {\n        super(stack);\n\n        this.onItemPop = opts.onItemPop;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            pop() {\n                mxn.onItemPop(this.current);\n                orig.pop.call(this);\n            },\n\n            popAllUpToHtmlElement() {\n                for (let i = this.stackTop; i > 0; i--) {\n                    mxn.onItemPop(this.items[i]);\n                }\n\n                orig.popAllUpToHtmlElement.call(this);\n            },\n\n            remove(element) {\n                mxn.onItemPop(this.current);\n                orig.remove.call(this, element);\n            }\n        };\n    }\n}\n\nmodule.exports = LocationInfoOpenElementStackMixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/location-info/parser-mixin.js":
/*!**************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/location-info/parser-mixin.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\nconst Tokenizer = __webpack_require__(/*! ../../tokenizer */ \"./node_modules/parse5/lib/tokenizer/index.js\");\nconst LocationInfoTokenizerMixin = __webpack_require__(/*! ./tokenizer-mixin */ \"./node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js\");\nconst LocationInfoOpenElementStackMixin = __webpack_require__(/*! ./open-element-stack-mixin */ \"./node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js\");\nconst HTML = __webpack_require__(/*! ../../common/html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\n\nclass LocationInfoParserMixin extends Mixin {\n    constructor(parser) {\n        super(parser);\n\n        this.parser = parser;\n        this.treeAdapter = this.parser.treeAdapter;\n        this.posTracker = null;\n        this.lastStartTagToken = null;\n        this.lastFosterParentingLocation = null;\n        this.currentToken = null;\n    }\n\n    _setStartLocation(element) {\n        let loc = null;\n\n        if (this.lastStartTagToken) {\n            loc = Object.assign({}, this.lastStartTagToken.location);\n            loc.startTag = this.lastStartTagToken.location;\n        }\n\n        this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n\n    _setEndLocation(element, closingToken) {\n        const loc = this.treeAdapter.getNodeSourceCodeLocation(element);\n\n        if (loc) {\n            if (closingToken.location) {\n                const ctLoc = closingToken.location;\n                const tn = this.treeAdapter.getTagName(element);\n\n                // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n                // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n                const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\n                const endLoc = {};\n                if (isClosingEndTag) {\n                    endLoc.endTag = Object.assign({}, ctLoc);\n                    endLoc.endLine = ctLoc.endLine;\n                    endLoc.endCol = ctLoc.endCol;\n                    endLoc.endOffset = ctLoc.endOffset;\n                } else {\n                    endLoc.endLine = ctLoc.startLine;\n                    endLoc.endCol = ctLoc.startCol;\n                    endLoc.endOffset = ctLoc.startOffset;\n                }\n\n                this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n            }\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                mxn.lastStartTagToken = null;\n                mxn.lastFosterParentingLocation = null;\n                mxn.currentToken = null;\n\n                const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n\n                mxn.posTracker = tokenizerMixin.posTracker;\n\n                Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\n                    onItemPop: function(element) {\n                        mxn._setEndLocation(element, mxn.currentToken);\n                    }\n                });\n            },\n\n            _runParsingLoop(scriptHandler) {\n                orig._runParsingLoop.call(this, scriptHandler);\n\n                // NOTE: generate location info for elements\n                // that remains on open element stack\n                for (let i = this.openElements.stackTop; i >= 0; i--) {\n                    mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\n                }\n            },\n\n            //Token processing\n            _processTokenInForeignContent(token) {\n                mxn.currentToken = token;\n                orig._processTokenInForeignContent.call(this, token);\n            },\n\n            _processToken(token) {\n                mxn.currentToken = token;\n                orig._processToken.call(this, token);\n\n                //NOTE: <body> and <html> are never popped from the stack, so we need to updated\n                //their end location explicitly.\n                const requireExplicitUpdate =\n                    token.type === Tokenizer.END_TAG_TOKEN &&\n                    (token.tagName === $.HTML || (token.tagName === $.BODY && this.openElements.hasInScope($.BODY)));\n\n                if (requireExplicitUpdate) {\n                    for (let i = this.openElements.stackTop; i >= 0; i--) {\n                        const element = this.openElements.items[i];\n\n                        if (this.treeAdapter.getTagName(element) === token.tagName) {\n                            mxn._setEndLocation(element, token);\n                            break;\n                        }\n                    }\n                }\n            },\n\n            //Doctype\n            _setDocumentType(token) {\n                orig._setDocumentType.call(this, token);\n\n                const documentChildren = this.treeAdapter.getChildNodes(this.document);\n                const cnLength = documentChildren.length;\n\n                for (let i = 0; i < cnLength; i++) {\n                    const node = documentChildren[i];\n\n                    if (this.treeAdapter.isDocumentTypeNode(node)) {\n                        this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\n                        break;\n                    }\n                }\n            },\n\n            //Elements\n            _attachElementToTree(element) {\n                //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\n                //So we will use token location stored in this methods for the element.\n                mxn._setStartLocation(element);\n                mxn.lastStartTagToken = null;\n                orig._attachElementToTree.call(this, element);\n            },\n\n            _appendElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._appendElement.call(this, token, namespaceURI);\n            },\n\n            _insertElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._insertElement.call(this, token, namespaceURI);\n            },\n\n            _insertTemplate(token) {\n                mxn.lastStartTagToken = token;\n                orig._insertTemplate.call(this, token);\n\n                const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\n\n                this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\n            },\n\n            _insertFakeRootElement() {\n                orig._insertFakeRootElement.call(this);\n                this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\n            },\n\n            //Comments\n            _appendCommentNode(token, parent) {\n                orig._appendCommentNode.call(this, token, parent);\n\n                const children = this.treeAdapter.getChildNodes(parent);\n                const commentNode = children[children.length - 1];\n\n                this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n            },\n\n            //Text\n            _findFosterParentingLocation() {\n                //NOTE: store last foster parenting location, so we will be able to find inserted text\n                //in case of foster parenting\n                mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\n\n                return mxn.lastFosterParentingLocation;\n            },\n\n            _insertCharacters(token) {\n                orig._insertCharacters.call(this, token);\n\n                const hasFosterParent = this._shouldFosterParentOnInsertion();\n\n                const parent =\n                    (hasFosterParent && mxn.lastFosterParentingLocation.parent) ||\n                    this.openElements.currentTmplContent ||\n                    this.openElements.current;\n\n                const siblings = this.treeAdapter.getChildNodes(parent);\n\n                const textNodeIdx =\n                    hasFosterParent && mxn.lastFosterParentingLocation.beforeElement\n                        ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1\n                        : siblings.length - 1;\n\n                const textNode = siblings[textNodeIdx];\n\n                //NOTE: if we have location assigned by another token, then just update end position\n                const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n\n                if (tnLoc) {\n                    const { endLine, endCol, endOffset } = token.location;\n                    this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n                } else {\n                    this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n                }\n            }\n        };\n    }\n}\n\nmodule.exports = LocationInfoParserMixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/location-info/parser-mixin.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\nconst Tokenizer = __webpack_require__(/*! ../../tokenizer */ \"./node_modules/parse5/lib/tokenizer/index.js\");\nconst PositionTrackingPreprocessorMixin = __webpack_require__(/*! ../position-tracking/preprocessor-mixin */ \"./node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js\");\n\nclass LocationInfoTokenizerMixin extends Mixin {\n    constructor(tokenizer) {\n        super(tokenizer);\n\n        this.tokenizer = tokenizer;\n        this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);\n        this.currentAttrLocation = null;\n        this.ctLoc = null;\n    }\n\n    _getCurrentLocation() {\n        return {\n            startLine: this.posTracker.line,\n            startCol: this.posTracker.col,\n            startOffset: this.posTracker.offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n    }\n\n    _attachCurrentAttrLocationInfo() {\n        this.currentAttrLocation.endLine = this.posTracker.line;\n        this.currentAttrLocation.endCol = this.posTracker.col;\n        this.currentAttrLocation.endOffset = this.posTracker.offset;\n\n        const currentToken = this.tokenizer.currentToken;\n        const currentAttr = this.tokenizer.currentAttr;\n\n        if (!currentToken.location.attrs) {\n            currentToken.location.attrs = Object.create(null);\n        }\n\n        currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        const methods = {\n            _createStartTagToken() {\n                orig._createStartTagToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createEndTagToken() {\n                orig._createEndTagToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createCommentToken() {\n                orig._createCommentToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createDoctypeToken(initialName) {\n                orig._createDoctypeToken.call(this, initialName);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createCharacterToken(type, ch) {\n                orig._createCharacterToken.call(this, type, ch);\n                this.currentCharacterToken.location = mxn.ctLoc;\n            },\n\n            _createEOFToken() {\n                orig._createEOFToken.call(this);\n                this.currentToken.location = mxn._getCurrentLocation();\n            },\n\n            _createAttr(attrNameFirstCh) {\n                orig._createAttr.call(this, attrNameFirstCh);\n                mxn.currentAttrLocation = mxn._getCurrentLocation();\n            },\n\n            _leaveAttrName(toState) {\n                orig._leaveAttrName.call(this, toState);\n                mxn._attachCurrentAttrLocationInfo();\n            },\n\n            _leaveAttrValue(toState) {\n                orig._leaveAttrValue.call(this, toState);\n                mxn._attachCurrentAttrLocationInfo();\n            },\n\n            _emitCurrentToken() {\n                const ctLoc = this.currentToken.location;\n\n                //NOTE: if we have pending character token make it's end location equal to the\n                //current token's start location.\n                if (this.currentCharacterToken) {\n                    this.currentCharacterToken.location.endLine = ctLoc.startLine;\n                    this.currentCharacterToken.location.endCol = ctLoc.startCol;\n                    this.currentCharacterToken.location.endOffset = ctLoc.startOffset;\n                }\n\n                if (this.currentToken.type === Tokenizer.EOF_TOKEN) {\n                    ctLoc.endLine = ctLoc.startLine;\n                    ctLoc.endCol = ctLoc.startCol;\n                    ctLoc.endOffset = ctLoc.startOffset;\n                } else {\n                    ctLoc.endLine = mxn.posTracker.line;\n                    ctLoc.endCol = mxn.posTracker.col + 1;\n                    ctLoc.endOffset = mxn.posTracker.offset + 1;\n                }\n\n                orig._emitCurrentToken.call(this);\n            },\n\n            _emitCurrentCharacterToken() {\n                const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;\n\n                //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),\n                //then set it's location at the current preprocessor position.\n                //We don't need to increment preprocessor position, since character token\n                //emission is always forced by the start of the next character token here.\n                //So, we already have advanced position.\n                if (ctLoc && ctLoc.endOffset === -1) {\n                    ctLoc.endLine = mxn.posTracker.line;\n                    ctLoc.endCol = mxn.posTracker.col;\n                    ctLoc.endOffset = mxn.posTracker.offset;\n                }\n\n                orig._emitCurrentCharacterToken.call(this);\n            }\n        };\n\n        //NOTE: patch initial states for each mode to obtain token start position\n        Object.keys(Tokenizer.MODE).forEach(modeName => {\n            const state = Tokenizer.MODE[modeName];\n\n            methods[state] = function(cp) {\n                mxn.ctLoc = mxn._getCurrentLocation();\n                orig[state].call(this, cp);\n            };\n        });\n\n        return methods;\n    }\n}\n\nmodule.exports = LocationInfoTokenizerMixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js":
/*!************************************************************************************!*\
  !*** ./node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Mixin = __webpack_require__(/*! ../../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\n\nclass PositionTrackingPreprocessorMixin extends Mixin {\n    constructor(preprocessor) {\n        super(preprocessor);\n\n        this.preprocessor = preprocessor;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n\n        this.offset = 0;\n        this.col = 0;\n        this.line = 1;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            advance() {\n                const pos = this.pos + 1;\n                const ch = this.html[pos];\n\n                //NOTE: LF should be in the last column of the line\n                if (mxn.isEol) {\n                    mxn.isEol = false;\n                    mxn.line++;\n                    mxn.lineStartPos = pos;\n                }\n\n                if (ch === '\\n' || (ch === '\\r' && this.html[pos + 1] !== '\\n')) {\n                    mxn.isEol = true;\n                }\n\n                mxn.col = pos - mxn.lineStartPos + 1;\n                mxn.offset = mxn.droppedBufferSize + pos;\n\n                return orig.advance.call(this);\n            },\n\n            retreat() {\n                orig.retreat.call(this);\n\n                mxn.isEol = false;\n                mxn.col = this.pos - mxn.lineStartPos + 1;\n            },\n\n            dropParsedChunk() {\n                const prevPos = this.pos;\n\n                orig.dropParsedChunk.call(this);\n\n                const reduction = prevPos - this.pos;\n\n                mxn.lineStartPos -= reduction;\n                mxn.droppedBufferSize += reduction;\n                mxn.offset = mxn.droppedBufferSize + this.pos;\n            }\n        };\n    }\n}\n\nmodule.exports = PositionTrackingPreprocessorMixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/index.js":
/*!******************************************!*\
  !*** ./node_modules/parse5/lib/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Parser = __webpack_require__(/*! ./parser */ \"./node_modules/parse5/lib/parser/index.js\");\nconst Serializer = __webpack_require__(/*! ./serializer */ \"./node_modules/parse5/lib/serializer/index.js\");\n\n// Shorthands\nexports.parse = function parse(html, options) {\n    const parser = new Parser(options);\n\n    return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === 'string') {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n\n    const parser = new Parser(options);\n\n    return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function(node, options) {\n    const serializer = new Serializer(node, options);\n\n    return serializer.serialize();\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/index.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/parser/formatting-element-list.js":
/*!*******************************************************************!*\
  !*** ./node_modules/parse5/lib/parser/formatting-element-list.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n//Const\nconst NOAH_ARK_CAPACITY = 3;\n\n//List of formatting elements\nclass FormattingElementList {\n    constructor(treeAdapter) {\n        this.length = 0;\n        this.entries = [];\n        this.treeAdapter = treeAdapter;\n        this.bookmark = null;\n    }\n\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement) {\n        const candidates = [];\n\n        if (this.length >= NOAH_ARK_CAPACITY) {\n            const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;\n            const neTagName = this.treeAdapter.getTagName(newElement);\n            const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n\n            for (let i = this.length - 1; i >= 0; i--) {\n                const entry = this.entries[i];\n\n                if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                    break;\n                }\n\n                const element = entry.element;\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n\n                const isCandidate =\n                    this.treeAdapter.getTagName(element) === neTagName &&\n                    this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&\n                    elementAttrs.length === neAttrsLength;\n\n                if (isCandidate) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n\n        return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;\n    }\n\n    _ensureNoahArkCondition(newElement) {\n        const candidates = this._getNoahArkConditionCandidates(newElement);\n        let cLength = candidates.length;\n\n        if (cLength) {\n            const neAttrs = this.treeAdapter.getAttrList(newElement);\n            const neAttrsLength = neAttrs.length;\n            const neAttrsMap = Object.create(null);\n\n            //NOTE: build attrs map for the new element so we can perform fast lookups\n            for (let i = 0; i < neAttrsLength; i++) {\n                const neAttr = neAttrs[i];\n\n                neAttrsMap[neAttr.name] = neAttr.value;\n            }\n\n            for (let i = 0; i < neAttrsLength; i++) {\n                for (let j = 0; j < cLength; j++) {\n                    const cAttr = candidates[j].attrs[i];\n\n                    if (neAttrsMap[cAttr.name] !== cAttr.value) {\n                        candidates.splice(j, 1);\n                        cLength--;\n                    }\n\n                    if (candidates.length < NOAH_ARK_CAPACITY) {\n                        return;\n                    }\n                }\n            }\n\n            //NOTE: remove bottommost candidates until Noah's Ark condition will not be met\n            for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {\n                this.entries.splice(candidates[i].idx, 1);\n                this.length--;\n            }\n        }\n    }\n\n    //Mutations\n    insertMarker() {\n        this.entries.push({ type: FormattingElementList.MARKER_ENTRY });\n        this.length++;\n    }\n\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n\n        this.entries.push({\n            type: FormattingElementList.ELEMENT_ENTRY,\n            element: element,\n            token: token\n        });\n\n        this.length++;\n    }\n\n    insertElementAfterBookmark(element, token) {\n        let bookmarkIdx = this.length - 1;\n\n        for (; bookmarkIdx >= 0; bookmarkIdx--) {\n            if (this.entries[bookmarkIdx] === this.bookmark) {\n                break;\n            }\n        }\n\n        this.entries.splice(bookmarkIdx + 1, 0, {\n            type: FormattingElementList.ELEMENT_ENTRY,\n            element: element,\n            token: token\n        });\n\n        this.length++;\n    }\n\n    removeEntry(entry) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (this.entries[i] === entry) {\n                this.entries.splice(i, 1);\n                this.length--;\n                break;\n            }\n        }\n    }\n\n    clearToLastMarker() {\n        while (this.length) {\n            const entry = this.entries.pop();\n\n            this.length--;\n\n            if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                break;\n            }\n        }\n    }\n\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            const entry = this.entries[i];\n\n            if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                return null;\n            }\n\n            if (this.treeAdapter.getTagName(entry.element) === tagName) {\n                return entry;\n            }\n        }\n\n        return null;\n    }\n\n    getElementEntry(element) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            const entry = this.entries[i];\n\n            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {\n                return entry;\n            }\n        }\n\n        return null;\n    }\n}\n\n//Entry types\nFormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';\nFormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';\n\nmodule.exports = FormattingElementList;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/parser/formatting-element-list.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/parser/index.js":
/*!*************************************************!*\
  !*** ./node_modules/parse5/lib/parser/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Tokenizer = __webpack_require__(/*! ../tokenizer */ \"./node_modules/parse5/lib/tokenizer/index.js\");\nconst OpenElementStack = __webpack_require__(/*! ./open-element-stack */ \"./node_modules/parse5/lib/parser/open-element-stack.js\");\nconst FormattingElementList = __webpack_require__(/*! ./formatting-element-list */ \"./node_modules/parse5/lib/parser/formatting-element-list.js\");\nconst LocationInfoParserMixin = __webpack_require__(/*! ../extensions/location-info/parser-mixin */ \"./node_modules/parse5/lib/extensions/location-info/parser-mixin.js\");\nconst ErrorReportingParserMixin = __webpack_require__(/*! ../extensions/error-reporting/parser-mixin */ \"./node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js\");\nconst Mixin = __webpack_require__(/*! ../utils/mixin */ \"./node_modules/parse5/lib/utils/mixin.js\");\nconst defaultTreeAdapter = __webpack_require__(/*! ../tree-adapters/default */ \"./node_modules/parse5/lib/tree-adapters/default.js\");\nconst mergeOptions = __webpack_require__(/*! ../utils/merge-options */ \"./node_modules/parse5/lib/utils/merge-options.js\");\nconst doctype = __webpack_require__(/*! ../common/doctype */ \"./node_modules/parse5/lib/common/doctype.js\");\nconst foreignContent = __webpack_require__(/*! ../common/foreign-content */ \"./node_modules/parse5/lib/common/foreign-content.js\");\nconst ERR = __webpack_require__(/*! ../common/error-codes */ \"./node_modules/parse5/lib/common/error-codes.js\");\nconst unicode = __webpack_require__(/*! ../common/unicode */ \"./node_modules/parse5/lib/common/unicode.js\");\nconst HTML = __webpack_require__(/*! ../common/html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\nconst ATTRS = HTML.ATTRS;\n\nconst DEFAULT_OPTIONS = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    onParseError: null,\n    treeAdapter: defaultTreeAdapter\n};\n\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n\n//Insertion modes\nconst INITIAL_MODE = 'INITIAL_MODE';\nconst BEFORE_HTML_MODE = 'BEFORE_HTML_MODE';\nconst BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE';\nconst IN_HEAD_MODE = 'IN_HEAD_MODE';\nconst IN_HEAD_NO_SCRIPT_MODE = 'IN_HEAD_NO_SCRIPT_MODE';\nconst AFTER_HEAD_MODE = 'AFTER_HEAD_MODE';\nconst IN_BODY_MODE = 'IN_BODY_MODE';\nconst TEXT_MODE = 'TEXT_MODE';\nconst IN_TABLE_MODE = 'IN_TABLE_MODE';\nconst IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE';\nconst IN_CAPTION_MODE = 'IN_CAPTION_MODE';\nconst IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE';\nconst IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE';\nconst IN_ROW_MODE = 'IN_ROW_MODE';\nconst IN_CELL_MODE = 'IN_CELL_MODE';\nconst IN_SELECT_MODE = 'IN_SELECT_MODE';\nconst IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE';\nconst IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE';\nconst AFTER_BODY_MODE = 'AFTER_BODY_MODE';\nconst IN_FRAMESET_MODE = 'IN_FRAMESET_MODE';\nconst AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE';\nconst AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE';\nconst AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';\n\n//Insertion mode reset map\nconst INSERTION_MODE_RESET_MAP = {\n    [$.TR]: IN_ROW_MODE,\n    [$.TBODY]: IN_TABLE_BODY_MODE,\n    [$.THEAD]: IN_TABLE_BODY_MODE,\n    [$.TFOOT]: IN_TABLE_BODY_MODE,\n    [$.CAPTION]: IN_CAPTION_MODE,\n    [$.COLGROUP]: IN_COLUMN_GROUP_MODE,\n    [$.TABLE]: IN_TABLE_MODE,\n    [$.BODY]: IN_BODY_MODE,\n    [$.FRAMESET]: IN_FRAMESET_MODE\n};\n\n//Template insertion mode switch map\nconst TEMPLATE_INSERTION_MODE_SWITCH_MAP = {\n    [$.CAPTION]: IN_TABLE_MODE,\n    [$.COLGROUP]: IN_TABLE_MODE,\n    [$.TBODY]: IN_TABLE_MODE,\n    [$.TFOOT]: IN_TABLE_MODE,\n    [$.THEAD]: IN_TABLE_MODE,\n    [$.COL]: IN_COLUMN_GROUP_MODE,\n    [$.TR]: IN_TABLE_BODY_MODE,\n    [$.TD]: IN_ROW_MODE,\n    [$.TH]: IN_ROW_MODE\n};\n\n//Token handlers map for insertion modes\nconst TOKEN_HANDLERS = {\n    [INITIAL_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,\n        [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,\n        [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,\n        [Tokenizer.EOF_TOKEN]: tokenInInitialMode\n    },\n    [BEFORE_HTML_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,\n        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,\n        [Tokenizer.EOF_TOKEN]: tokenBeforeHtml\n    },\n    [BEFORE_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,\n        [Tokenizer.EOF_TOKEN]: tokenBeforeHead\n    },\n    [IN_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagInHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagInHead,\n        [Tokenizer.EOF_TOKEN]: tokenInHead\n    },\n    [IN_HEAD_NO_SCRIPT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,\n        [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,\n        [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript\n    },\n    [AFTER_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,\n        [Tokenizer.EOF_TOKEN]: tokenAfterHead\n    },\n    [IN_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagInBody,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [TEXT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: ignoreToken,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: ignoreToken,\n        [Tokenizer.END_TAG_TOKEN]: endTagInText,\n        [Tokenizer.EOF_TOKEN]: eofInText\n    },\n    [IN_TABLE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTable,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTable,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TABLE_TEXT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTableText,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,\n        [Tokenizer.COMMENT_TOKEN]: tokenInTableText,\n        [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,\n        [Tokenizer.START_TAG_TOKEN]: tokenInTableText,\n        [Tokenizer.END_TAG_TOKEN]: tokenInTableText,\n        [Tokenizer.EOF_TOKEN]: tokenInTableText\n    },\n    [IN_CAPTION_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInCaption,\n        [Tokenizer.END_TAG_TOKEN]: endTagInCaption,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_COLUMN_GROUP_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,\n        [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TABLE_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_ROW_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInRow,\n        [Tokenizer.END_TAG_TOKEN]: endTagInRow,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_CELL_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInCell,\n        [Tokenizer.END_TAG_TOKEN]: endTagInCell,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_SELECT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInSelect,\n        [Tokenizer.END_TAG_TOKEN]: endTagInSelect,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_SELECT_IN_TABLE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,\n        [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TEMPLATE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,\n        [Tokenizer.EOF_TOKEN]: eofInTemplate\n    },\n    [AFTER_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [IN_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,\n        [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_AFTER_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,\n        [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_AFTER_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,\n        [Tokenizer.END_TAG_TOKEN]: ignoreToken,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    }\n};\n\n//Parser\nclass Parser {\n    constructor(options) {\n        this.options = mergeOptions(DEFAULT_OPTIONS, options);\n\n        this.treeAdapter = this.options.treeAdapter;\n        this.pendingScript = null;\n\n        if (this.options.sourceCodeLocationInfo) {\n            Mixin.install(this, LocationInfoParserMixin);\n        }\n\n        if (this.options.onParseError) {\n            Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });\n        }\n    }\n\n    // API\n    parse(html) {\n        const document = this.treeAdapter.createDocument();\n\n        this._bootstrap(document, null);\n        this.tokenizer.write(html, true);\n        this._runParsingLoop(null);\n\n        return document;\n    }\n\n    parseFragment(html, fragmentContext) {\n        //NOTE: use <template> element as a fragment context if context element was not provided,\n        //so we will parse in \"forgiving\" manner\n        if (!fragmentContext) {\n            fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);\n        }\n\n        //NOTE: create fake element which will be used as 'document' for fragment parsing.\n        //This is important for jsdom there 'document' can't be recreated, therefore\n        //fragment parsing causes messing of the main `document`.\n        const documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);\n\n        this._bootstrap(documentMock, fragmentContext);\n\n        if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {\n            this._pushTmplInsertionMode(IN_TEMPLATE_MODE);\n        }\n\n        this._initTokenizerForFragmentParsing();\n        this._insertFakeRootElement();\n        this._resetInsertionMode();\n        this._findFormInFragmentContext();\n        this.tokenizer.write(html, true);\n        this._runParsingLoop(null);\n\n        const rootElement = this.treeAdapter.getFirstChild(documentMock);\n        const fragment = this.treeAdapter.createDocumentFragment();\n\n        this._adoptNodes(rootElement, fragment);\n\n        return fragment;\n    }\n\n    //Bootstrap parser\n    _bootstrap(document, fragmentContext) {\n        this.tokenizer = new Tokenizer(this.options);\n\n        this.stopped = false;\n\n        this.insertionMode = INITIAL_MODE;\n        this.originalInsertionMode = '';\n\n        this.document = document;\n        this.fragmentContext = fragmentContext;\n\n        this.headElement = null;\n        this.formElement = null;\n\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n\n        this.tmplInsertionModeStack = [];\n        this.tmplInsertionModeStackTop = -1;\n        this.currentTmplInsertionMode = null;\n\n        this.pendingCharacterTokens = [];\n        this.hasNonWhitespacePendingCharacterToken = false;\n\n        this.framesetOk = true;\n        this.skipNextNewLine = false;\n        this.fosterParentingEnabled = false;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    //Parsing loop\n    _runParsingLoop(scriptHandler) {\n        while (!this.stopped) {\n            this._setupTokenizerCDATAMode();\n\n            const token = this.tokenizer.getNextToken();\n\n            if (token.type === Tokenizer.HIBERNATION_TOKEN) {\n                break;\n            }\n\n            if (this.skipNextNewLine) {\n                this.skipNextNewLine = false;\n\n                if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\\n') {\n                    if (token.chars.length === 1) {\n                        continue;\n                    }\n\n                    token.chars = token.chars.substr(1);\n                }\n            }\n\n            this._processInputToken(token);\n\n            if (scriptHandler && this.pendingScript) {\n                break;\n            }\n        }\n    }\n\n    runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {\n        this._runParsingLoop(scriptHandler);\n\n        if (scriptHandler && this.pendingScript) {\n            const script = this.pendingScript;\n\n            this.pendingScript = null;\n\n            scriptHandler(script);\n\n            return;\n        }\n\n        if (writeCallback) {\n            writeCallback();\n        }\n    }\n\n    //Text parsing\n    _setupTokenizerCDATAMode() {\n        const current = this._getAdjustedCurrentElement();\n\n        this.tokenizer.allowCDATA =\n            current &&\n            current !== this.document &&\n            this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&\n            !this._isIntegrationPoint(current);\n    }\n\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = TEXT_MODE;\n    }\n\n    switchToPlaintextParsing() {\n        this.insertionMode = TEXT_MODE;\n        this.originalInsertionMode = IN_BODY_MODE;\n        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n    }\n\n    //Fragment parsing\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n\n        do {\n            if (this.treeAdapter.getTagName(node) === $.FORM) {\n                this.formElement = node;\n                break;\n            }\n\n            node = this.treeAdapter.getParentNode(node);\n        } while (node);\n    }\n\n    _initTokenizerForFragmentParsing() {\n        if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {\n            const tn = this.treeAdapter.getTagName(this.fragmentContext);\n\n            if (tn === $.TITLE || tn === $.TEXTAREA) {\n                this.tokenizer.state = Tokenizer.MODE.RCDATA;\n            } else if (\n                tn === $.STYLE ||\n                tn === $.XMP ||\n                tn === $.IFRAME ||\n                tn === $.NOEMBED ||\n                tn === $.NOFRAMES ||\n                tn === $.NOSCRIPT\n            ) {\n                this.tokenizer.state = Tokenizer.MODE.RAWTEXT;\n            } else if (tn === $.SCRIPT) {\n                this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;\n            } else if (tn === $.PLAINTEXT) {\n                this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n            }\n        }\n    }\n\n    //Tree mutation\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n    }\n\n    _attachElementToTree(element) {\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        } else {\n            const parent = this.openElements.currentTmplContent || this.openElements.current;\n\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n        this._attachElementToTree(element);\n    }\n\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n        this._attachElementToTree(element);\n        this.openElements.push(element);\n    }\n\n    _insertFakeElement(tagName) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n\n        this._attachElementToTree(element);\n        this.openElements.push(element);\n    }\n\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl);\n        this.openElements.push(tmpl);\n    }\n\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement($.HTML, NS.HTML, []);\n\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element);\n    }\n\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n\n        this.treeAdapter.appendChild(parent, commentNode);\n    }\n\n    _insertCharacters(token) {\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentText(token.chars);\n        } else {\n            const parent = this.openElements.currentTmplContent || this.openElements.current;\n\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n    }\n\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n\n    //Token processing\n    _shouldProcessTokenInForeignContent(token) {\n        const current = this._getAdjustedCurrentElement();\n\n        if (!current || current === this.document) {\n            return false;\n        }\n\n        const ns = this.treeAdapter.getNamespaceURI(current);\n\n        if (ns === NS.HTML) {\n            return false;\n        }\n\n        if (\n            this.treeAdapter.getTagName(current) === $.ANNOTATION_XML &&\n            ns === NS.MATHML &&\n            token.type === Tokenizer.START_TAG_TOKEN &&\n            token.tagName === $.SVG\n        ) {\n            return false;\n        }\n\n        const isCharacterToken =\n            token.type === Tokenizer.CHARACTER_TOKEN ||\n            token.type === Tokenizer.NULL_CHARACTER_TOKEN ||\n            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n\n        const isMathMLTextStartTag =\n            token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;\n\n        if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {\n            return false;\n        }\n\n        if (\n            (token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) &&\n            this._isIntegrationPoint(current, NS.HTML)\n        ) {\n            return false;\n        }\n\n        return token.type !== Tokenizer.EOF_TOKEN;\n    }\n\n    _processToken(token) {\n        TOKEN_HANDLERS[this.insertionMode][token.type](this, token);\n    }\n\n    _processTokenInBodyMode(token) {\n        TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);\n    }\n\n    _processTokenInForeignContent(token) {\n        if (token.type === Tokenizer.CHARACTER_TOKEN) {\n            characterInForeignContent(this, token);\n        } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {\n            nullCharacterInForeignContent(this, token);\n        } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {\n            insertCharacters(this, token);\n        } else if (token.type === Tokenizer.COMMENT_TOKEN) {\n            appendComment(this, token);\n        } else if (token.type === Tokenizer.START_TAG_TOKEN) {\n            startTagInForeignContent(this, token);\n        } else if (token.type === Tokenizer.END_TAG_TOKEN) {\n            endTagInForeignContent(this, token);\n        }\n    }\n\n    _processInputToken(token) {\n        if (this._shouldProcessTokenInForeignContent(token)) {\n            this._processTokenInForeignContent(token);\n        } else {\n            this._processToken(token);\n        }\n\n        if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {\n            this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n\n    //Integration points\n    _isIntegrationPoint(element, foreignNS) {\n        const tn = this.treeAdapter.getTagName(element);\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n\n        return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);\n    }\n\n    //Active formatting elements reconstruction\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.length;\n\n        if (listLength) {\n            let unopenIdx = listLength;\n            let entry = null;\n\n            do {\n                unopenIdx--;\n                entry = this.activeFormattingElements.entries[unopenIdx];\n\n                if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {\n                    unopenIdx++;\n                    break;\n                }\n            } while (unopenIdx > 0);\n\n            for (let i = unopenIdx; i < listLength; i++) {\n                entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n\n    //Close elements\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = IN_ROW_MODE;\n    }\n\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n\n    //Insertion modes\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {\n            let element = this.openElements.items[i];\n\n            if (i === 0) {\n                last = true;\n\n                if (this.fragmentContext) {\n                    element = this.fragmentContext;\n                }\n            }\n\n            const tn = this.treeAdapter.getTagName(element);\n            const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];\n\n            if (newInsertionMode) {\n                this.insertionMode = newInsertionMode;\n                break;\n            } else if (!last && (tn === $.TD || tn === $.TH)) {\n                this.insertionMode = IN_CELL_MODE;\n                break;\n            } else if (!last && tn === $.HEAD) {\n                this.insertionMode = IN_HEAD_MODE;\n                break;\n            } else if (tn === $.SELECT) {\n                this._resetInsertionModeForSelect(i);\n                break;\n            } else if (tn === $.TEMPLATE) {\n                this.insertionMode = this.currentTmplInsertionMode;\n                break;\n            } else if (tn === $.HTML) {\n                this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;\n                break;\n            } else if (last) {\n                this.insertionMode = IN_BODY_MODE;\n                break;\n            }\n        }\n    }\n\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const ancestor = this.openElements.items[i];\n                const tn = this.treeAdapter.getTagName(ancestor);\n\n                if (tn === $.TEMPLATE) {\n                    break;\n                } else if (tn === $.TABLE) {\n                    this.insertionMode = IN_SELECT_IN_TABLE_MODE;\n                    return;\n                }\n            }\n        }\n\n        this.insertionMode = IN_SELECT_MODE;\n    }\n\n    _pushTmplInsertionMode(mode) {\n        this.tmplInsertionModeStack.push(mode);\n        this.tmplInsertionModeStackTop++;\n        this.currentTmplInsertionMode = mode;\n    }\n\n    _popTmplInsertionMode() {\n        this.tmplInsertionModeStack.pop();\n        this.tmplInsertionModeStackTop--;\n        this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];\n    }\n\n    //Foster parenting\n    _isElementCausesFosterParenting(element) {\n        const tn = this.treeAdapter.getTagName(element);\n\n        return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;\n    }\n\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);\n    }\n\n    _findFosterParentingLocation() {\n        const location = {\n            parent: null,\n            beforeElement: null\n        };\n\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            const tn = this.treeAdapter.getTagName(openElement);\n            const ns = this.treeAdapter.getNamespaceURI(openElement);\n\n            if (tn === $.TEMPLATE && ns === NS.HTML) {\n                location.parent = this.treeAdapter.getTemplateContent(openElement);\n                break;\n            } else if (tn === $.TABLE) {\n                location.parent = this.treeAdapter.getParentNode(openElement);\n\n                if (location.parent) {\n                    location.beforeElement = openElement;\n                } else {\n                    location.parent = this.openElements.items[i - 1];\n                }\n\n                break;\n            }\n        }\n\n        if (!location.parent) {\n            location.parent = this.openElements.items[0];\n        }\n\n        return location;\n    }\n\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        } else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n\n    _fosterParentText(chars) {\n        const location = this._findFosterParentingLocation();\n\n        if (location.beforeElement) {\n            this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);\n        } else {\n            this.treeAdapter.insertText(location.parent, chars);\n        }\n    }\n\n    //Special elements\n    _isSpecialElement(element) {\n        const tn = this.treeAdapter.getTagName(element);\n        const ns = this.treeAdapter.getNamespaceURI(element);\n\n        return HTML.SPECIAL_ELEMENTS[ns][tn];\n    }\n}\n\nmodule.exports = Parser;\n\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        } else if (!p.openElements.hasInScope(token.tagName)) {\n            formattingElementEntry = null;\n        }\n    } else {\n        genericEndTagInBody(p, token);\n    }\n\n    return formattingElementEntry;\n}\n\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n\n        if (p._isSpecialElement(element)) {\n            furthestBlock = element;\n        }\n    }\n\n    if (!furthestBlock) {\n        p.openElements.popUntilElementPopped(formattingElementEntry.element);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n\n    return furthestBlock;\n}\n\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n\n            p.openElements.remove(element);\n        } else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n\n    return lastElement;\n}\n\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n\n    return newElement;\n}\n\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    if (p._isElementCausesFosterParenting(commonAncestor)) {\n        p._fosterParentElement(lastElement);\n    } else {\n        const tn = p.treeAdapter.getTagName(commonAncestor);\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n\n        if (tn === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const token = formattingElementEntry.token;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement);\n}\n\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    let formattingElementEntry;\n\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);\n\n        if (!formattingElementEntry) {\n            break;\n        }\n\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n\n        if (!furthestBlock) {\n            break;\n        }\n\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n\n        p.treeAdapter.detachNode(lastElement);\n        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n\n//Generic token handlers\n//------------------------------------------------------------------\nfunction ignoreToken() {\n    //NOTE: do nothing =)\n}\n\nfunction misplacedDoctype(p) {\n    p._err(ERR.misplacedDoctype);\n}\n\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);\n}\n\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\n\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\n\nfunction insertCharacters(p, token) {\n    p._insertCharacters(token);\n}\n\nfunction stopParsing(p) {\n    p.stopped = true;\n}\n\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n\n    const mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n\n    if (!doctype.isConforming(token)) {\n        p._err(ERR.nonConformingDoctype);\n    }\n\n    p.treeAdapter.setDocumentMode(p.document, mode);\n\n    p.insertionMode = BEFORE_HTML_MODE;\n}\n\nfunction tokenInInitialMode(p, token) {\n    p._err(ERR.missingDoctype, { beforeToken: true });\n    p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = BEFORE_HTML_MODE;\n    p._processToken(token);\n}\n\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagName === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = BEFORE_HEAD_MODE;\n    } else {\n        tokenBeforeHtml(p, token);\n    }\n}\n\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\n\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = BEFORE_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.HEAD) {\n        p._insertElement(token, NS.HTML);\n        p.headElement = p.openElements.current;\n        p.insertionMode = IN_HEAD_MODE;\n    } else {\n        tokenBeforeHead(p, token);\n    }\n}\n\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement($.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = IN_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.TITLE) {\n        p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);\n    } else if (tn === $.NOSCRIPT) {\n        if (p.options.scriptingEnabled) {\n            p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n        } else {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;\n        }\n    } else if (tn === $.NOFRAMES || tn === $.STYLE) {\n        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n    } else if (tn === $.SCRIPT) {\n        p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);\n    } else if (tn === $.TEMPLATE) {\n        p._insertTemplate(token, NS.HTML);\n        p.activeFormattingElements.insertMarker();\n        p.framesetOk = false;\n        p.insertionMode = IN_TEMPLATE_MODE;\n        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);\n    } else if (tn === $.HEAD) {\n        p._err(ERR.misplacedStartTagForHeadElement);\n    } else {\n        tokenInHead(p, token);\n    }\n}\n\nfunction endTagInHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HEAD) {\n        p.openElements.pop();\n        p.insertionMode = AFTER_HEAD_MODE;\n    } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {\n        tokenInHead(p, token);\n    } else if (tn === $.TEMPLATE) {\n        if (p.openElements.tmplCount > 0) {\n            p.openElements.generateImpliedEndTagsThoroughly();\n\n            if (p.openElements.currentTagName !== $.TEMPLATE) {\n                p._err(ERR.closingOfElementWithOpenChildElements);\n            }\n\n            p.openElements.popUntilTagNamePopped($.TEMPLATE);\n            p.activeFormattingElements.clearToLastMarker();\n            p._popTmplInsertionMode();\n            p._resetInsertionMode();\n        } else {\n            p._err(ERR.endTagWithoutMatchingOpenElement);\n        }\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = AFTER_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.HEAD ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.STYLE\n    ) {\n        startTagInHead(p, token);\n    } else if (tn === $.NOSCRIPT) {\n        p._err(ERR.nestedNoscriptInHead);\n    } else {\n        tokenInHeadNoScript(p, token);\n    }\n}\n\nfunction endTagInHeadNoScript(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.NOSCRIPT) {\n        p.openElements.pop();\n        p.insertionMode = IN_HEAD_MODE;\n    } else if (tn === $.BR) {\n        tokenInHeadNoScript(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenInHeadNoScript(p, token) {\n    const errCode =\n        token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n\n    p._err(errCode);\n    p.openElements.pop();\n    p.insertionMode = IN_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.BODY) {\n        p._insertElement(token, NS.HTML);\n        p.framesetOk = false;\n        p.insertionMode = IN_BODY_MODE;\n    } else if (tn === $.FRAMESET) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_FRAMESET_MODE;\n    } else if (\n        tn === $.BASE ||\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.SCRIPT ||\n        tn === $.STYLE ||\n        tn === $.TEMPLATE ||\n        tn === $.TITLE\n    ) {\n        p._err(ERR.abandonedHeadElementChild);\n        p.openElements.push(p.headElement);\n        startTagInHead(p, token);\n        p.openElements.remove(p.headElement);\n    } else if (tn === $.HEAD) {\n        p._err(ERR.misplacedStartTagForHeadElement);\n    } else {\n        tokenAfterHead(p, token);\n    }\n}\n\nfunction endTagAfterHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenAfterHead(p, token);\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement($.BODY);\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\n\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\n\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\n\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\n\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_FRAMESET_MODE;\n    }\n}\n\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    const tn = p.openElements.currentTagName;\n\n    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n        p.openElements.pop();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\n\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n\n        p._insertElement(token, NS.HTML);\n\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\n\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n\n    const tn = token.tagName;\n\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const element = p.openElements.items[i];\n        const elementTn = p.treeAdapter.getTagName(element);\n        let closeTn = null;\n\n        if (tn === $.LI && elementTn === $.LI) {\n            closeTn = $.LI;\n        } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {\n            closeTn = elementTn;\n        }\n\n        if (closeTn) {\n            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);\n            p.openElements.popUntilTagNamePopped(closeTn);\n            break;\n        }\n\n        if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {\n            break;\n        }\n    }\n\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n}\n\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\n\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);\n\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\n\nfunction tableStartTagInBody(p, token) {\n    if (\n        p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS &&\n        p.openElements.hasInButtonScope($.P)\n    ) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = IN_TABLE_MODE;\n}\n\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\n\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n\n    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);\n\n    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {\n        p.framesetOk = false;\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\n\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\n\nfunction imageStartTagInBody(p, token) {\n    token.tagName = $.IMG;\n    areaStartTagInBody(p, token);\n}\n\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = Tokenizer.MODE.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = TEXT_MODE;\n}\n\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as a rawtext.\nfunction noembedStartTagInBody(p, token) {\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n\n    if (\n        p.insertionMode === IN_TABLE_MODE ||\n        p.insertionMode === IN_CAPTION_MODE ||\n        p.insertionMode === IN_TABLE_BODY_MODE ||\n        p.insertionMode === IN_ROW_MODE ||\n        p.insertionMode === IN_CELL_MODE\n    ) {\n        p.insertionMode = IN_SELECT_IN_TABLE_MODE;\n    } else {\n        p.insertionMode = IN_SELECT_MODE;\n    }\n}\n\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagName === $.OPTION) {\n        p.openElements.pop();\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\n\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction menuStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    } else {\n        p._insertElement(token, NS.MATHML);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    } else {\n        p._insertElement(token, NS.SVG);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction startTagInBody(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 1:\n            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.P) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.A) {\n                aStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 2:\n            if (tn === $.DL || tn === $.OL || tn === $.UL) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n                numberedHeaderStartTagInBody(p, token);\n            } else if (tn === $.LI || tn === $.DD || tn === $.DT) {\n                listItemStartTagInBody(p, token);\n            } else if (tn === $.EM || tn === $.TT) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.BR) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.HR) {\n                hrStartTagInBody(p, token);\n            } else if (tn === $.RB) {\n                rbStartTagInBody(p, token);\n            } else if (tn === $.RT || tn === $.RP) {\n                rtStartTagInBody(p, token);\n            } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.PRE) {\n                preStartTagInBody(p, token);\n            } else if (tn === $.BIG) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.IMG || tn === $.WBR) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.XMP) {\n                xmpStartTagInBody(p, token);\n            } else if (tn === $.SVG) {\n                svgStartTagInBody(p, token);\n            } else if (tn === $.RTC) {\n                rbStartTagInBody(p, token);\n            } else if (tn !== $.COL) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.HTML) {\n                htmlStartTagInBody(p, token);\n            } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {\n                startTagInHead(p, token);\n            } else if (tn === $.BODY) {\n                bodyStartTagInBody(p, token);\n            } else if (tn === $.MAIN || tn === $.MENU) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.FORM) {\n                formStartTagInBody(p, token);\n            } else if (tn === $.CODE || tn === $.FONT) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.NOBR) {\n                nobrStartTagInBody(p, token);\n            } else if (tn === $.AREA) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.MATH) {\n                mathStartTagInBody(p, token);\n            } else if (tn === $.MENU) {\n                menuStartTagInBody(p, token);\n            } else if (tn !== $.HEAD) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.STYLE || tn === $.TITLE) {\n                startTagInHead(p, token);\n            } else if (tn === $.ASIDE) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.SMALL) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.TABLE) {\n                tableStartTagInBody(p, token);\n            } else if (tn === $.EMBED) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.INPUT) {\n                inputStartTagInBody(p, token);\n            } else if (tn === $.PARAM || tn === $.TRACK) {\n                paramStartTagInBody(p, token);\n            } else if (tn === $.IMAGE) {\n                imageStartTagInBody(p, token);\n            } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (tn === $.SCRIPT) {\n                startTagInHead(p, token);\n            } else if (\n                tn === $.CENTER ||\n                tn === $.FIGURE ||\n                tn === $.FOOTER ||\n                tn === $.HEADER ||\n                tn === $.HGROUP ||\n                tn === $.DIALOG\n            ) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.BUTTON) {\n                buttonStartTagInBody(p, token);\n            } else if (tn === $.STRIKE || tn === $.STRONG) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.APPLET || tn === $.OBJECT) {\n                appletStartTagInBody(p, token);\n            } else if (tn === $.KEYGEN) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.SOURCE) {\n                paramStartTagInBody(p, token);\n            } else if (tn === $.IFRAME) {\n                iframeStartTagInBody(p, token);\n            } else if (tn === $.SELECT) {\n                selectStartTagInBody(p, token);\n            } else if (tn === $.OPTION) {\n                optgroupStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (tn === $.BGSOUND) {\n                startTagInHead(p, token);\n            } else if (\n                tn === $.DETAILS ||\n                tn === $.ADDRESS ||\n                tn === $.ARTICLE ||\n                tn === $.SECTION ||\n                tn === $.SUMMARY\n            ) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.LISTING) {\n                preStartTagInBody(p, token);\n            } else if (tn === $.MARQUEE) {\n                appletStartTagInBody(p, token);\n            } else if (tn === $.NOEMBED) {\n                noembedStartTagInBody(p, token);\n            } else if (tn !== $.CAPTION) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.BASEFONT) {\n                startTagInHead(p, token);\n            } else if (tn === $.FRAMESET) {\n                framesetStartTagInBody(p, token);\n            } else if (tn === $.FIELDSET) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.TEXTAREA) {\n                textareaStartTagInBody(p, token);\n            } else if (tn === $.TEMPLATE) {\n                startTagInHead(p, token);\n            } else if (tn === $.NOSCRIPT) {\n                if (p.options.scriptingEnabled) {\n                    noembedStartTagInBody(p, token);\n                } else {\n                    genericStartTagInBody(p, token);\n                }\n            } else if (tn === $.OPTGROUP) {\n                optgroupStartTagInBody(p, token);\n            } else if (tn !== $.COLGROUP) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 9:\n            if (tn === $.PLAINTEXT) {\n                plaintextStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 10:\n            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {\n                addressStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        default:\n            genericStartTagInBody(p, token);\n    }\n}\n\nfunction bodyEndTagInBody(p) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = AFTER_BODY_MODE;\n    }\n}\n\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = AFTER_BODY_MODE;\n        p._processToken(token);\n    }\n}\n\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\n\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const formElement = p.formElement;\n\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        } else {\n            p.openElements.remove(formElement);\n        }\n    }\n}\n\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement($.P);\n    }\n\n    p._closePElement();\n}\n\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\n\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\n\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\n\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\n\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement($.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\n\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (p.treeAdapter.getTagName(element) === tn) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tn);\n            p.openElements.popUntilElementPopped(element);\n            break;\n        }\n\n        if (p._isSpecialElement(element)) {\n            break;\n        }\n    }\n}\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction endTagInBody(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 1:\n            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.P) {\n                pEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 2:\n            if (tn === $.DL || tn === $.UL || tn === $.OL) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.LI) {\n                liEndTagInBody(p, token);\n            } else if (tn === $.DD || tn === $.DT) {\n                ddEndTagInBody(p, token);\n            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n                numberedHeaderEndTagInBody(p, token);\n            } else if (tn === $.BR) {\n                brEndTagInBody(p, token);\n            } else if (tn === $.EM || tn === $.TT) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.BIG) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.BODY) {\n                bodyEndTagInBody(p, token);\n            } else if (tn === $.HTML) {\n                htmlEndTagInBody(p, token);\n            } else if (tn === $.FORM) {\n                formEndTagInBody(p, token);\n            } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.MAIN || tn === $.MENU) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.ASIDE) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.SMALL) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (\n                tn === $.CENTER ||\n                tn === $.FIGURE ||\n                tn === $.FOOTER ||\n                tn === $.HEADER ||\n                tn === $.HGROUP ||\n                tn === $.DIALOG\n            ) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.APPLET || tn === $.OBJECT) {\n                appletEndTagInBody(p, token);\n            } else if (tn === $.STRIKE || tn === $.STRONG) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (\n                tn === $.ADDRESS ||\n                tn === $.ARTICLE ||\n                tn === $.DETAILS ||\n                tn === $.SECTION ||\n                tn === $.SUMMARY ||\n                tn === $.LISTING\n            ) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.MARQUEE) {\n                appletEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.FIELDSET) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.TEMPLATE) {\n                endTagInHead(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 10:\n            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        default:\n            genericEndTagInBody(p, token);\n    }\n}\n\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStackTop > -1) {\n        eofInTemplate(p, token);\n    } else {\n        p.stopped = true;\n    }\n}\n\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    if (token.tagName === $.SCRIPT) {\n        p.pendingScript = p.openElements.current;\n    }\n\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\n\nfunction eofInText(p, token) {\n    p._err(ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    const curTn = p.openElements.currentTagName;\n\n    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {\n        p.pendingCharacterTokens = [];\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = IN_TABLE_TEXT_MODE;\n        p._processToken(token);\n    } else {\n        tokenInTable(p, token);\n    }\n}\n\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_CAPTION_MODE;\n}\n\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_COLUMN_GROUP_MODE;\n}\n\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement($.COLGROUP);\n    p.insertionMode = IN_COLUMN_GROUP_MODE;\n    p._processToken(token);\n}\n\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_TABLE_BODY_MODE;\n}\n\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement($.TBODY);\n    p.insertionMode = IN_TABLE_BODY_MODE;\n    p._processToken(token);\n}\n\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processToken(token);\n    }\n}\n\nfunction inputStartTagInTable(p, token) {\n    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);\n\n    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {\n        p._appendElement(token, NS.HTML);\n    } else {\n        tokenInTable(p, token);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\n\nfunction startTagInTable(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 2:\n            if (tn === $.TD || tn === $.TH || tn === $.TR) {\n                tdStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.COL) {\n                colStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.FORM) {\n                formStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.TABLE) {\n                tableStartTagInTable(p, token);\n            } else if (tn === $.STYLE) {\n                startTagInHead(p, token);\n            } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n                tbodyStartTagInTable(p, token);\n            } else if (tn === $.INPUT) {\n                inputStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (tn === $.SCRIPT) {\n                startTagInHead(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (tn === $.CAPTION) {\n                captionStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.COLGROUP) {\n                colgroupStartTagInTable(p, token);\n            } else if (tn === $.TEMPLATE) {\n                startTagInHead(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        default:\n            tokenInTable(p, token);\n    }\n}\n\nfunction endTagInTable(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.TABLE)) {\n            p.openElements.popUntilTagNamePopped($.TABLE);\n            p._resetInsertionMode();\n        }\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else if (\n        tn !== $.BODY &&\n        tn !== $.CAPTION &&\n        tn !== $.COL &&\n        tn !== $.COLGROUP &&\n        tn !== $.HTML &&\n        tn !== $.TBODY &&\n        tn !== $.TD &&\n        tn !== $.TFOOT &&\n        tn !== $.TH &&\n        tn !== $.THEAD &&\n        tn !== $.TR\n    ) {\n        tokenInTable(p, token);\n    }\n}\n\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n\n    p.fosterParentingEnabled = true;\n    p._processTokenInBodyMode(token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\n\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\n\nfunction tokenInTableText(p, token) {\n    let i = 0;\n\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    } else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCaption(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TD ||\n        tn === $.TFOOT ||\n        tn === $.TH ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\n\nfunction endTagInCaption(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.CAPTION || tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_TABLE_MODE;\n\n            if (tn === $.TABLE) {\n                p._processToken(token);\n            }\n        }\n    } else if (\n        tn !== $.BODY &&\n        tn !== $.COL &&\n        tn !== $.COLGROUP &&\n        tn !== $.HTML &&\n        tn !== $.TBODY &&\n        tn !== $.TD &&\n        tn !== $.TFOOT &&\n        tn !== $.TH &&\n        tn !== $.THEAD &&\n        tn !== $.TR\n    ) {\n        endTagInBody(p, token);\n    }\n}\n\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.COL) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.TEMPLATE) {\n        startTagInHead(p, token);\n    } else {\n        tokenInColumnGroup(p, token);\n    }\n}\n\nfunction endTagInColumnGroup(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.COLGROUP) {\n        if (p.openElements.currentTagName === $.COLGROUP) {\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n        }\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else if (tn !== $.COL) {\n        tokenInColumnGroup(p, token);\n    }\n}\n\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagName === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = IN_TABLE_MODE;\n        p._processToken(token);\n    }\n}\n\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TR) {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_ROW_MODE;\n    } else if (tn === $.TH || tn === $.TD) {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertFakeElement($.TR);\n        p.insertionMode = IN_ROW_MODE;\n        p._processToken(token);\n    } else if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD\n    ) {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInTable(p, token);\n    }\n}\n\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n        }\n    } else if (tn === $.TABLE) {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else if (\n        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||\n        (tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR)\n    ) {\n        endTagInTable(p, token);\n    }\n}\n\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TH || tn === $.TD) {\n        p.openElements.clearBackToTableRowContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_CELL_MODE;\n        p.activeFormattingElements.insertMarker();\n    } else if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInTable(p, token);\n    }\n}\n\nfunction endTagInRow(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TR) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n        }\n    } else if (tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n        if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else if (\n        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||\n        (tn !== $.HTML && tn !== $.TD && tn !== $.TH)\n    ) {\n        endTagInTable(p, token);\n    }\n}\n\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TD ||\n        tn === $.TFOOT ||\n        tn === $.TH ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            p._processToken(token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\n\nfunction endTagInCell(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TD || tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped(tn);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_ROW_MODE;\n        }\n    } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p._closeTableCell();\n            p._processToken(token);\n        }\n    } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {\n        endTagInBody(p, token);\n    }\n}\n\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.OPTION) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.OPTGROUP) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagName === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {\n        if (p.openElements.hasInSelectScope($.SELECT)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n\n            if (tn !== $.SELECT) {\n                p._processToken(token);\n            }\n        }\n    } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagInSelect(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.OPTGROUP) {\n        const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];\n        const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);\n\n        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagName === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n    } else if (tn === $.OPTION) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n    } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    }\n}\n\n//12.2.5.4.17 The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH\n    ) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processToken(token);\n    } else {\n        startTagInSelect(p, token);\n    }\n}\n\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH\n    ) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p._processToken(token);\n        }\n    } else {\n        endTagInSelect(p, token);\n    }\n}\n\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.BASE ||\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.SCRIPT ||\n        tn === $.STYLE ||\n        tn === $.TEMPLATE ||\n        tn === $.TITLE\n    ) {\n        startTagInHead(p, token);\n    } else {\n        const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;\n\n        p._popTmplInsertionMode();\n        p._pushTmplInsertionMode(newInsertionMode);\n        p.insertionMode = newInsertionMode;\n        p._processToken(token);\n    }\n}\n\nfunction endTagInTemplate(p, token) {\n    if (token.tagName === $.TEMPLATE) {\n        endTagInHead(p, token);\n    }\n}\n\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p._popTmplInsertionMode();\n        p._resetInsertionMode();\n        p._processToken(token);\n    } else {\n        p.stopped = true;\n    }\n}\n\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\n\nfunction endTagAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = AFTER_AFTER_BODY_MODE;\n        }\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\n\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.FRAMESET) {\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.FRAME) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagInFrameset(p, token) {\n    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n\n        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {\n            p.insertionMode = AFTER_FRAMESET_MODE;\n        }\n    }\n}\n\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagName === $.HTML) {\n        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;\n    }\n}\n\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterAfterBody(p, token);\n    }\n}\n\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\n\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\n\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token) && !p.fragmentContext) {\n        while (\n            p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n            !p._isIntegrationPoint(p.openElements.current)\n        ) {\n            p.openElements.pop();\n        }\n\n        p._processToken(token);\n    } else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        } else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n\n        foreignContent.adjustTokenXMLAttrs(token);\n\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        } else {\n            p._insertElement(token, currentNs);\n        }\n\n        token.ackSelfClosing = true;\n    }\n}\n\nfunction endTagInForeignContent(p, token) {\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._processToken(token);\n            break;\n        }\n\n        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {\n            p.openElements.popUntilElementPopped(element);\n            break;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/parser/index.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/parser/open-element-stack.js":
/*!**************************************************************!*\
  !*** ./node_modules/parse5/lib/parser/open-element-stack.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst HTML = __webpack_require__(/*! ../common/html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\n\n//Element utils\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction isImpliedEndTagRequired(tn) {\n    switch (tn.length) {\n        case 1:\n            return tn === $.P;\n\n        case 2:\n            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;\n\n        case 3:\n            return tn === $.RTC;\n\n        case 6:\n            return tn === $.OPTION;\n\n        case 8:\n            return tn === $.OPTGROUP;\n    }\n\n    return false;\n}\n\nfunction isImpliedEndTagRequiredThoroughly(tn) {\n    switch (tn.length) {\n        case 1:\n            return tn === $.P;\n\n        case 2:\n            return (\n                tn === $.RB ||\n                tn === $.RP ||\n                tn === $.RT ||\n                tn === $.DD ||\n                tn === $.DT ||\n                tn === $.LI ||\n                tn === $.TD ||\n                tn === $.TH ||\n                tn === $.TR\n            );\n\n        case 3:\n            return tn === $.RTC;\n\n        case 5:\n            return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;\n\n        case 6:\n            return tn === $.OPTION;\n\n        case 7:\n            return tn === $.CAPTION;\n\n        case 8:\n            return tn === $.OPTGROUP || tn === $.COLGROUP;\n    }\n\n    return false;\n}\n\nfunction isScopingElement(tn, ns) {\n    switch (tn.length) {\n        case 2:\n            if (tn === $.TD || tn === $.TH) {\n                return ns === NS.HTML;\n            } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {\n                return ns === NS.MATHML;\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.HTML) {\n                return ns === NS.HTML;\n            } else if (tn === $.DESC) {\n                return ns === NS.SVG;\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.TABLE) {\n                return ns === NS.HTML;\n            } else if (tn === $.MTEXT) {\n                return ns === NS.MATHML;\n            } else if (tn === $.TITLE) {\n                return ns === NS.SVG;\n            }\n\n            break;\n\n        case 6:\n            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;\n\n        case 7:\n            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;\n\n        case 8:\n            return tn === $.TEMPLATE && ns === NS.HTML;\n\n        case 13:\n            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;\n\n        case 14:\n            return tn === $.ANNOTATION_XML && ns === NS.MATHML;\n    }\n\n    return false;\n}\n\n//Stack of open elements\nclass OpenElementStack {\n    constructor(document, treeAdapter) {\n        this.stackTop = -1;\n        this.items = [];\n        this.current = document;\n        this.currentTagName = null;\n        this.currentTmplContent = null;\n        this.tmplCount = 0;\n        this.treeAdapter = treeAdapter;\n    }\n\n    //Index of element\n    _indexOf(element) {\n        let idx = -1;\n\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.items[i] === element) {\n                idx = i;\n                break;\n            }\n        }\n        return idx;\n    }\n\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);\n\n        this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;\n    }\n\n    //Mutations\n    push(element) {\n        this.items[++this.stackTop] = element;\n        this._updateCurrentElement();\n\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n    }\n\n    pop() {\n        this.stackTop--;\n\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n\n        this._updateCurrentElement();\n    }\n\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n\n        this.items[idx] = newElement;\n\n        if (idx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n    }\n\n    insertAfter(referenceElement, newElement) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n\n        this.items.splice(insertionIdx, 0, newElement);\n\n        if (insertionIdx === ++this.stackTop) {\n            this._updateCurrentElement();\n        }\n    }\n\n    popUntilTagNamePopped(tagName) {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (tn === tagName && ns === NS.HTML) {\n                break;\n            }\n        }\n    }\n\n    popUntilElementPopped(element) {\n        while (this.stackTop > -1) {\n            const poppedElement = this.current;\n\n            this.pop();\n\n            if (poppedElement === element) {\n                break;\n            }\n        }\n    }\n\n    popUntilNumberedHeaderPopped() {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (\n                tn === $.H1 ||\n                tn === $.H2 ||\n                tn === $.H3 ||\n                tn === $.H4 ||\n                tn === $.H5 ||\n                (tn === $.H6 && ns === NS.HTML)\n            ) {\n                break;\n            }\n        }\n    }\n\n    popUntilTableCellPopped() {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (tn === $.TD || (tn === $.TH && ns === NS.HTML)) {\n                break;\n            }\n        }\n    }\n\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.stackTop = 0;\n        this._updateCurrentElement();\n    }\n\n    clearBackToTableContext() {\n        while (\n            (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    clearBackToTableBodyContext() {\n        while (\n            (this.currentTagName !== $.TBODY &&\n                this.currentTagName !== $.TFOOT &&\n                this.currentTagName !== $.THEAD &&\n                this.currentTagName !== $.TEMPLATE &&\n                this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    clearBackToTableRowContext() {\n        while (\n            (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    remove(element) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.items[i] === element) {\n                this.items.splice(i, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                break;\n            }\n        }\n    }\n\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        const element = this.items[1];\n\n        return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;\n    }\n\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n\n    getCommonAncestor(element) {\n        let elementIdx = this._indexOf(element);\n\n        return --elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.currentTagName === $.HTML;\n    }\n\n    //Element in scope\n    hasInScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if (isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (\n                (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) &&\n                ns === NS.HTML\n            ) {\n                return true;\n            }\n\n            if (isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInListItemScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if (((tn === $.UL || tn === $.OL) && ns === NS.HTML) || isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInButtonScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if ((tn === $.BUTTON && ns === NS.HTML) || isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === tagName) {\n                return true;\n            }\n\n            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {\n                return true;\n            }\n\n            if (tn === $.TABLE || tn === $.HTML) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === tagName) {\n                return true;\n            }\n\n            if (tn !== $.OPTION && tn !== $.OPTGROUP) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (isImpliedEndTagRequired(this.currentTagName)) {\n            this.pop();\n        }\n    }\n\n    generateImpliedEndTagsThoroughly() {\n        while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {\n            this.pop();\n        }\n    }\n\n    generateImpliedEndTagsWithExclusion(exclusionTagName) {\n        while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {\n            this.pop();\n        }\n    }\n}\n\nmodule.exports = OpenElementStack;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/parser/open-element-stack.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/serializer/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/parse5/lib/serializer/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst defaultTreeAdapter = __webpack_require__(/*! ../tree-adapters/default */ \"./node_modules/parse5/lib/tree-adapters/default.js\");\nconst mergeOptions = __webpack_require__(/*! ../utils/merge-options */ \"./node_modules/parse5/lib/utils/merge-options.js\");\nconst doctype = __webpack_require__(/*! ../common/doctype */ \"./node_modules/parse5/lib/common/doctype.js\");\nconst HTML = __webpack_require__(/*! ../common/html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\n\n//Default serializer options\nconst DEFAULT_OPTIONS = {\n    treeAdapter: defaultTreeAdapter\n};\n\n//Escaping regexes\nconst AMP_REGEX = /&/g;\nconst NBSP_REGEX = /\\u00a0/g;\nconst DOUBLE_QUOTE_REGEX = /\"/g;\nconst LT_REGEX = /</g;\nconst GT_REGEX = />/g;\n\n//Serializer\nclass Serializer {\n    constructor(node, options) {\n        this.options = mergeOptions(DEFAULT_OPTIONS, options);\n        this.treeAdapter = this.options.treeAdapter;\n\n        this.html = '';\n        this.startNode = node;\n    }\n\n    //API\n    serialize() {\n        this._serializeChildNodes(this.startNode);\n\n        return this.html;\n    }\n\n    //Internals\n    _serializeChildNodes(parentNode) {\n        const childNodes = this.treeAdapter.getChildNodes(parentNode);\n\n        if (childNodes) {\n            for (let i = 0, cnLength = childNodes.length; i < cnLength; i++) {\n                const currentNode = childNodes[i];\n\n                if (this.treeAdapter.isElementNode(currentNode)) {\n                    this._serializeElement(currentNode);\n                } else if (this.treeAdapter.isTextNode(currentNode)) {\n                    this._serializeTextNode(currentNode);\n                } else if (this.treeAdapter.isCommentNode(currentNode)) {\n                    this._serializeCommentNode(currentNode);\n                } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {\n                    this._serializeDocumentTypeNode(currentNode);\n                }\n            }\n        }\n    }\n\n    _serializeElement(node) {\n        const tn = this.treeAdapter.getTagName(node);\n        const ns = this.treeAdapter.getNamespaceURI(node);\n\n        this.html += '<' + tn;\n        this._serializeAttributes(node);\n        this.html += '>';\n\n        if (\n            tn !== $.AREA &&\n            tn !== $.BASE &&\n            tn !== $.BASEFONT &&\n            tn !== $.BGSOUND &&\n            tn !== $.BR &&\n            tn !== $.COL &&\n            tn !== $.EMBED &&\n            tn !== $.FRAME &&\n            tn !== $.HR &&\n            tn !== $.IMG &&\n            tn !== $.INPUT &&\n            tn !== $.KEYGEN &&\n            tn !== $.LINK &&\n            tn !== $.META &&\n            tn !== $.PARAM &&\n            tn !== $.SOURCE &&\n            tn !== $.TRACK &&\n            tn !== $.WBR\n        ) {\n            const childNodesHolder =\n                tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;\n\n            this._serializeChildNodes(childNodesHolder);\n            this.html += '</' + tn + '>';\n        }\n    }\n\n    _serializeAttributes(node) {\n        const attrs = this.treeAdapter.getAttrList(node);\n\n        for (let i = 0, attrsLength = attrs.length; i < attrsLength; i++) {\n            const attr = attrs[i];\n            const value = Serializer.escapeString(attr.value, true);\n\n            this.html += ' ';\n\n            if (!attr.namespace) {\n                this.html += attr.name;\n            } else if (attr.namespace === NS.XML) {\n                this.html += 'xml:' + attr.name;\n            } else if (attr.namespace === NS.XMLNS) {\n                if (attr.name !== 'xmlns') {\n                    this.html += 'xmlns:';\n                }\n\n                this.html += attr.name;\n            } else if (attr.namespace === NS.XLINK) {\n                this.html += 'xlink:' + attr.name;\n            } else {\n                this.html += attr.prefix + ':' + attr.name;\n            }\n\n            this.html += '=\"' + value + '\"';\n        }\n    }\n\n    _serializeTextNode(node) {\n        const content = this.treeAdapter.getTextNodeContent(node);\n        const parent = this.treeAdapter.getParentNode(node);\n        let parentTn = void 0;\n\n        if (parent && this.treeAdapter.isElementNode(parent)) {\n            parentTn = this.treeAdapter.getTagName(parent);\n        }\n\n        if (\n            parentTn === $.STYLE ||\n            parentTn === $.SCRIPT ||\n            parentTn === $.XMP ||\n            parentTn === $.IFRAME ||\n            parentTn === $.NOEMBED ||\n            parentTn === $.NOFRAMES ||\n            parentTn === $.PLAINTEXT ||\n            parentTn === $.NOSCRIPT\n        ) {\n            this.html += content;\n        } else {\n            this.html += Serializer.escapeString(content, false);\n        }\n    }\n\n    _serializeCommentNode(node) {\n        this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';\n    }\n\n    _serializeDocumentTypeNode(node) {\n        const name = this.treeAdapter.getDocumentTypeNodeName(node);\n\n        this.html += '<' + doctype.serializeContent(name, null, null) + '>';\n    }\n}\n\n// NOTE: used in tests and by rewriting stream\nSerializer.escapeString = function(str, attrMode) {\n    str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');\n\n    if (attrMode) {\n        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');\n    } else {\n        str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n    }\n\n    return str;\n};\n\nmodule.exports = Serializer;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/serializer/index.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/tokenizer/index.js":
/*!****************************************************!*\
  !*** ./node_modules/parse5/lib/tokenizer/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Preprocessor = __webpack_require__(/*! ./preprocessor */ \"./node_modules/parse5/lib/tokenizer/preprocessor.js\");\nconst unicode = __webpack_require__(/*! ../common/unicode */ \"./node_modules/parse5/lib/common/unicode.js\");\nconst neTree = __webpack_require__(/*! ./named-entity-data */ \"./node_modules/parse5/lib/tokenizer/named-entity-data.js\");\nconst ERR = __webpack_require__(/*! ../common/error-codes */ \"./node_modules/parse5/lib/common/error-codes.js\");\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/tokenizer/index.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/tokenizer/named-entity-data.js":
/*!****************************************************************!*\
  !*** ./node_modules/parse5/lib/tokenizer/named-entity-data.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n//NOTE: this file contains auto-generated array mapped radix tree that is used for the named entity references consumption\n//(details: https://github.com/inikulin/parse5/tree/master/scripts/generate-named-entity-data/README.md)\nmodule.exports = new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4000,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,10000,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13000,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/tokenizer/named-entity-data.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/tokenizer/preprocessor.js":
/*!***********************************************************!*\
  !*** ./node_modules/parse5/lib/tokenizer/preprocessor.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst unicode = __webpack_require__(/*! ../common/unicode */ \"./node_modules/parse5/lib/common/unicode.js\");\nconst ERR = __webpack_require__(/*! ../common/error-codes */ \"./node_modules/parse5/lib/common/error-codes.js\");\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/tokenizer/preprocessor.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/tree-adapters/default.js":
/*!**********************************************************!*\
  !*** ./node_modules/parse5/lib/tree-adapters/default.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { DOCUMENT_MODE } = __webpack_require__(/*! ../common/html */ \"./node_modules/parse5/lib/common/html.js\");\n\n//Node construction\nexports.createDocument = function() {\n    return {\n        nodeName: '#document',\n        mode: DOCUMENT_MODE.NO_QUIRKS,\n        childNodes: []\n    };\n};\n\nexports.createDocumentFragment = function() {\n    return {\n        nodeName: '#document-fragment',\n        childNodes: []\n    };\n};\n\nexports.createElement = function(tagName, namespaceURI, attrs) {\n    return {\n        nodeName: tagName,\n        tagName: tagName,\n        attrs: attrs,\n        namespaceURI: namespaceURI,\n        childNodes: [],\n        parentNode: null\n    };\n};\n\nexports.createCommentNode = function(data) {\n    return {\n        nodeName: '#comment',\n        data: data,\n        parentNode: null\n    };\n};\n\nconst createTextNode = function(value) {\n    return {\n        nodeName: '#text',\n        value: value,\n        parentNode: null\n    };\n};\n\n//Tree mutation\nconst appendChild = (exports.appendChild = function(parentNode, newNode) {\n    parentNode.childNodes.push(newNode);\n    newNode.parentNode = parentNode;\n});\n\nconst insertBefore = (exports.insertBefore = function(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n\n    parentNode.childNodes.splice(insertionIdx, 0, newNode);\n    newNode.parentNode = parentNode;\n});\n\nexports.setTemplateContent = function(templateElement, contentElement) {\n    templateElement.content = contentElement;\n};\n\nexports.getTemplateContent = function(templateElement) {\n    return templateElement.content;\n};\n\nexports.setDocumentType = function(document, name, publicId, systemId) {\n    let doctypeNode = null;\n\n    for (let i = 0; i < document.childNodes.length; i++) {\n        if (document.childNodes[i].nodeName === '#documentType') {\n            doctypeNode = document.childNodes[i];\n            break;\n        }\n    }\n\n    if (doctypeNode) {\n        doctypeNode.name = name;\n        doctypeNode.publicId = publicId;\n        doctypeNode.systemId = systemId;\n    } else {\n        appendChild(document, {\n            nodeName: '#documentType',\n            name: name,\n            publicId: publicId,\n            systemId: systemId\n        });\n    }\n};\n\nexports.setDocumentMode = function(document, mode) {\n    document.mode = mode;\n};\n\nexports.getDocumentMode = function(document) {\n    return document.mode;\n};\n\nexports.detachNode = function(node) {\n    if (node.parentNode) {\n        const idx = node.parentNode.childNodes.indexOf(node);\n\n        node.parentNode.childNodes.splice(idx, 1);\n        node.parentNode = null;\n    }\n};\n\nexports.insertText = function(parentNode, text) {\n    if (parentNode.childNodes.length) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n\n        if (prevNode.nodeName === '#text') {\n            prevNode.value += text;\n            return;\n        }\n    }\n\n    appendChild(parentNode, createTextNode(text));\n};\n\nexports.insertTextBefore = function(parentNode, text, referenceNode) {\n    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n\n    if (prevNode && prevNode.nodeName === '#text') {\n        prevNode.value += text;\n    } else {\n        insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n};\n\nexports.adoptAttributes = function(recipient, attrs) {\n    const recipientAttrsMap = [];\n\n    for (let i = 0; i < recipient.attrs.length; i++) {\n        recipientAttrsMap.push(recipient.attrs[i].name);\n    }\n\n    for (let j = 0; j < attrs.length; j++) {\n        if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {\n            recipient.attrs.push(attrs[j]);\n        }\n    }\n};\n\n//Tree traversing\nexports.getFirstChild = function(node) {\n    return node.childNodes[0];\n};\n\nexports.getChildNodes = function(node) {\n    return node.childNodes;\n};\n\nexports.getParentNode = function(node) {\n    return node.parentNode;\n};\n\nexports.getAttrList = function(element) {\n    return element.attrs;\n};\n\n//Node data\nexports.getTagName = function(element) {\n    return element.tagName;\n};\n\nexports.getNamespaceURI = function(element) {\n    return element.namespaceURI;\n};\n\nexports.getTextNodeContent = function(textNode) {\n    return textNode.value;\n};\n\nexports.getCommentNodeContent = function(commentNode) {\n    return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function(doctypeNode) {\n    return doctypeNode.name;\n};\n\nexports.getDocumentTypeNodePublicId = function(doctypeNode) {\n    return doctypeNode.publicId;\n};\n\nexports.getDocumentTypeNodeSystemId = function(doctypeNode) {\n    return doctypeNode.systemId;\n};\n\n//Node types\nexports.isTextNode = function(node) {\n    return node.nodeName === '#text';\n};\n\nexports.isCommentNode = function(node) {\n    return node.nodeName === '#comment';\n};\n\nexports.isDocumentTypeNode = function(node) {\n    return node.nodeName === '#documentType';\n};\n\nexports.isElementNode = function(node) {\n    return !!node.tagName;\n};\n\n// Source code location\nexports.setNodeSourceCodeLocation = function(node, location) {\n    node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function(node) {\n    return node.sourceCodeLocation;\n};\n\nexports.updateNodeSourceCodeLocation = function(node, endLocation) {\n    node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/tree-adapters/default.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/utils/merge-options.js":
/*!********************************************************!*\
  !*** ./node_modules/parse5/lib/utils/merge-options.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function mergeOptions(defaults, options) {\n    options = options || Object.create(null);\n\n    return [defaults, options].reduce((merged, optObj) => {\n        Object.keys(optObj).forEach(key => {\n            merged[key] = optObj[key];\n        });\n\n        return merged;\n    }, Object.create(null));\n};\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/utils/merge-options.js?");

/***/ }),

/***/ "./node_modules/parse5/lib/utils/mixin.js":
/*!************************************************!*\
  !*** ./node_modules/parse5/lib/utils/mixin.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nclass Mixin {\n    constructor(host) {\n        const originalMethods = {};\n        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);\n\n        for (const key of Object.keys(overriddenMethods)) {\n            if (typeof overriddenMethods[key] === 'function') {\n                originalMethods[key] = host[key];\n                host[key] = overriddenMethods[key];\n            }\n        }\n    }\n\n    _getOverriddenMethods() {\n        throw new Error('Not implemented');\n    }\n}\n\nMixin.install = function(host, Ctor, opts) {\n    if (!host.__mixins) {\n        host.__mixins = [];\n    }\n\n    for (let i = 0; i < host.__mixins.length; i++) {\n        if (host.__mixins[i].constructor === Ctor) {\n            return host.__mixins[i];\n        }\n    }\n\n    const mixin = new Ctor(host, opts);\n\n    host.__mixins.push(mixin);\n\n    return mixin;\n};\n\nmodule.exports = Mixin;\n\n\n//# sourceURL=webpack:///./node_modules/parse5/lib/utils/mixin.js?");

/***/ })

}]);