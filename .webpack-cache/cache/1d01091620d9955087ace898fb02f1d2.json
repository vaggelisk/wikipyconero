{"remainingRequest":"/home/kantro/WebstormProjects/wikipyconero/node_modules/babel-loader/lib/index.js??ref--0-1!/home/kantro/WebstormProjects/wikipyconero/node_modules/webpack-modernizr-loader/index.js!/home/kantro/WebstormProjects/wikipyconero/client/.modernizrrc.js","dependencies":[{"path":"/home/kantro/WebstormProjects/wikipyconero/client/.modernizrrc.js","mtime":1695287603859},{"path":"/home/kantro/WebstormProjects/wikipyconero/.babelrc","mtime":1695287603859},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/cache-loader/dist/cjs.js","mtime":1694896091905},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/babel-loader/lib/index.js","mtime":1694896091857},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/webpack-modernizr-loader/index.js","mtime":1695231288404}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}