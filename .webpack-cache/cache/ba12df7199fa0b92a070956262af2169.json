{"remainingRequest":"/home/kantro/WebstormProjects/wikipyconero/node_modules/babel-loader/lib/index.js??ref--0-1!/home/kantro/WebstormProjects/wikipyconero/node_modules/vuetify/lib/util/colorUtils.js","dependencies":[{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/vuetify/lib/util/colorUtils.js","mtime":1695231284816},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/cache-loader/dist/cjs.js","mtime":1694896091905},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/babel-loader/lib/index.js","mtime":1694896091857}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gVXRpbGl0aWVzCmltcG9ydCB7IGNvbnNvbGVXYXJuIH0gZnJvbSAnLi9jb25zb2xlJzsKaW1wb3J0IHsgY2h1bmssIHBhZEVuZCB9IGZyb20gJy4vaGVscGVycyc7CmltcG9ydCB7IHRvWFlaIH0gZnJvbSAnLi9jb2xvci90cmFuc2Zvcm1TUkdCJzsKZXhwb3J0IGZ1bmN0aW9uIGlzQ3NzQ29sb3IoY29sb3IpIHsKICByZXR1cm4gISFjb2xvciAmJiAhIWNvbG9yLm1hdGNoKC9eKCN8dmFyXCgtLXwocmdifGhzbClhP1woKS8pOwp9CmV4cG9ydCBmdW5jdGlvbiBjb2xvclRvSW50KGNvbG9yKSB7CiAgbGV0IHJnYjsKICBpZiAodHlwZW9mIGNvbG9yID09PSAnbnVtYmVyJykgewogICAgcmdiID0gY29sb3I7CiAgfSBlbHNlIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7CiAgICBsZXQgYyA9IGNvbG9yWzBdID09PSAnIycgPyBjb2xvci5zdWJzdHJpbmcoMSkgOiBjb2xvcjsKICAgIGlmIChjLmxlbmd0aCA9PT0gMykgewogICAgICBjID0gYy5zcGxpdCgnJykubWFwKGNoYXIgPT4gY2hhciArIGNoYXIpLmpvaW4oJycpOwogICAgfQogICAgaWYgKGMubGVuZ3RoICE9PSA2KSB7CiAgICAgIGNvbnNvbGVXYXJuKGAnJHtjb2xvcn0nIGlzIG5vdCBhIHZhbGlkIHJnYiBjb2xvcmApOwogICAgfQogICAgcmdiID0gcGFyc2VJbnQoYywgMTYpOwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDb2xvcnMgY2FuIG9ubHkgYmUgbnVtYmVycyBvciBzdHJpbmdzLCByZWNpZXZlZCAke2NvbG9yID09IG51bGwgPyBjb2xvciA6IGNvbG9yLmNvbnN0cnVjdG9yLm5hbWV9IGluc3RlYWRgKTsKICB9CiAgaWYgKHJnYiA8IDApIHsKICAgIGNvbnNvbGVXYXJuKGBDb2xvcnMgY2Fubm90IGJlIG5lZ2F0aXZlOiAnJHtjb2xvcn0nYCk7CiAgICByZ2IgPSAwOwogIH0gZWxzZSBpZiAocmdiID4gMHhmZmZmZmYgfHwgaXNOYU4ocmdiKSkgewogICAgY29uc29sZVdhcm4oYCcke2NvbG9yfScgaXMgbm90IGEgdmFsaWQgcmdiIGNvbG9yYCk7CiAgICByZ2IgPSAweGZmZmZmZjsKICB9CiAgcmV0dXJuIHJnYjsKfQpleHBvcnQgZnVuY3Rpb24gY2xhc3NUb0hleChjb2xvciwgY29sb3JzLCBjdXJyZW50VGhlbWUpIHsKICBjb25zdCBbY29sb3JOYW1lLCBjb2xvck1vZGlmaWVyXSA9IGNvbG9yLnRvU3RyaW5nKCkudHJpbSgpLnJlcGxhY2UoJy0nLCAnJykuc3BsaXQoJyAnLCAyKTsKICBsZXQgaGV4Q29sb3IgPSAnJzsKICBpZiAoY29sb3JOYW1lICYmIGNvbG9yTmFtZSBpbiBjb2xvcnMpIHsKICAgIGlmIChjb2xvck1vZGlmaWVyICYmIGNvbG9yTW9kaWZpZXIgaW4gY29sb3JzW2NvbG9yTmFtZV0pIHsKICAgICAgaGV4Q29sb3IgPSBjb2xvcnNbY29sb3JOYW1lXVtjb2xvck1vZGlmaWVyXTsKICAgIH0gZWxzZSBpZiAoJ2Jhc2UnIGluIGNvbG9yc1tjb2xvck5hbWVdKSB7CiAgICAgIGhleENvbG9yID0gY29sb3JzW2NvbG9yTmFtZV0uYmFzZTsKICAgIH0KICB9IGVsc2UgaWYgKGNvbG9yTmFtZSAmJiBjb2xvck5hbWUgaW4gY3VycmVudFRoZW1lKSB7CiAgICBoZXhDb2xvciA9IGN1cnJlbnRUaGVtZVtjb2xvck5hbWVdOwogIH0KICByZXR1cm4gaGV4Q29sb3I7Cn0KZXhwb3J0IGZ1bmN0aW9uIGludFRvSGV4KGNvbG9yKSB7CiAgbGV0IGhleENvbG9yID0gY29sb3IudG9TdHJpbmcoMTYpOwogIGlmIChoZXhDb2xvci5sZW5ndGggPCA2KSBoZXhDb2xvciA9ICcwJy5yZXBlYXQoNiAtIGhleENvbG9yLmxlbmd0aCkgKyBoZXhDb2xvcjsKICByZXR1cm4gJyMnICsgaGV4Q29sb3I7Cn0KZXhwb3J0IGZ1bmN0aW9uIGNvbG9yVG9IZXgoY29sb3IpIHsKICByZXR1cm4gaW50VG9IZXgoY29sb3JUb0ludChjb2xvcikpOwp9Ci8qKgogKiBDb252ZXJ0cyBIU1ZBIHRvIFJHQkEuIEJhc2VkIG9uIGZvcm11bGEgZnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfYW5kX0hTVgogKgogKiBAcGFyYW0gY29sb3IgSFNWQSBjb2xvciBhcyBhbiBhcnJheSBbMC0zNjAsIDAtMSwgMC0xLCAwLTFdCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIEhTVkF0b1JHQkEoaHN2YSkgewogIGNvbnN0IHsKICAgIGgsCiAgICBzLAogICAgdiwKICAgIGEKICB9ID0gaHN2YTsKICBjb25zdCBmID0gbiA9PiB7CiAgICBjb25zdCBrID0gKG4gKyBoIC8gNjApICUgNjsKICAgIHJldHVybiB2IC0gdiAqIHMgKiBNYXRoLm1heChNYXRoLm1pbihrLCA0IC0gaywgMSksIDApOwogIH07CiAgY29uc3QgcmdiID0gW2YoNSksIGYoMyksIGYoMSldLm1hcCh2ID0+IE1hdGgucm91bmQodiAqIDI1NSkpOwogIHJldHVybiB7CiAgICByOiByZ2JbMF0sCiAgICBnOiByZ2JbMV0sCiAgICBiOiByZ2JbMl0sCiAgICBhCiAgfTsKfQovKioKICogQ29udmVydHMgUkdCQSB0byBIU1ZBLiBCYXNlZCBvbiBmb3JtdWxhIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFNMX2FuZF9IU1YKICoKICogQHBhcmFtIGNvbG9yIFJHQkEgY29sb3IgYXMgYW4gYXJyYXkgWzAtMjU1LCAwLTI1NSwgMC0yNTUsIDAtMV0KICovCgpleHBvcnQgZnVuY3Rpb24gUkdCQXRvSFNWQShyZ2JhKSB7CiAgaWYgKCFyZ2JhKSByZXR1cm4gewogICAgaDogMCwKICAgIHM6IDEsCiAgICB2OiAxLAogICAgYTogMQogIH07CiAgY29uc3QgciA9IHJnYmEuciAvIDI1NTsKICBjb25zdCBnID0gcmdiYS5nIC8gMjU1OwogIGNvbnN0IGIgPSByZ2JhLmIgLyAyNTU7CiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7CiAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7CiAgbGV0IGggPSAwOwogIGlmIChtYXggIT09IG1pbikgewogICAgaWYgKG1heCA9PT0gcikgewogICAgICBoID0gNjAgKiAoMCArIChnIC0gYikgLyAobWF4IC0gbWluKSk7CiAgICB9IGVsc2UgaWYgKG1heCA9PT0gZykgewogICAgICBoID0gNjAgKiAoMiArIChiIC0gcikgLyAobWF4IC0gbWluKSk7CiAgICB9IGVsc2UgaWYgKG1heCA9PT0gYikgewogICAgICBoID0gNjAgKiAoNCArIChyIC0gZykgLyAobWF4IC0gbWluKSk7CiAgICB9CiAgfQogIGlmIChoIDwgMCkgaCA9IGggKyAzNjA7CiAgY29uc3QgcyA9IG1heCA9PT0gMCA/IDAgOiAobWF4IC0gbWluKSAvIG1heDsKICBjb25zdCBoc3YgPSBbaCwgcywgbWF4XTsKICByZXR1cm4gewogICAgaDogaHN2WzBdLAogICAgczogaHN2WzFdLAogICAgdjogaHN2WzJdLAogICAgYTogcmdiYS5hCiAgfTsKfQpleHBvcnQgZnVuY3Rpb24gSFNWQXRvSFNMQShoc3ZhKSB7CiAgY29uc3QgewogICAgaCwKICAgIHMsCiAgICB2LAogICAgYQogIH0gPSBoc3ZhOwogIGNvbnN0IGwgPSB2IC0gdiAqIHMgLyAyOwogIGNvbnN0IHNwcmltZSA9IGwgPT09IDEgfHwgbCA9PT0gMCA/IDAgOiAodiAtIGwpIC8gTWF0aC5taW4obCwgMSAtIGwpOwogIHJldHVybiB7CiAgICBoLAogICAgczogc3ByaW1lLAogICAgbCwKICAgIGEKICB9Owp9CmV4cG9ydCBmdW5jdGlvbiBIU0xBdG9IU1ZBKGhzbCkgewogIGNvbnN0IHsKICAgIGgsCiAgICBzLAogICAgbCwKICAgIGEKICB9ID0gaHNsOwogIGNvbnN0IHYgPSBsICsgcyAqIE1hdGgubWluKGwsIDEgLSBsKTsKICBjb25zdCBzcHJpbWUgPSB2ID09PSAwID8gMCA6IDIgLSAyICogbCAvIHY7CiAgcmV0dXJuIHsKICAgIGgsCiAgICBzOiBzcHJpbWUsCiAgICB2LAogICAgYQogIH07Cn0KZXhwb3J0IGZ1bmN0aW9uIFJHQkF0b0NTUyhyZ2JhKSB7CiAgcmV0dXJuIGByZ2JhKCR7cmdiYS5yfSwgJHtyZ2JhLmd9LCAke3JnYmEuYn0sICR7cmdiYS5hfSlgOwp9CmV4cG9ydCBmdW5jdGlvbiBSR0J0b0NTUyhyZ2JhKSB7CiAgcmV0dXJuIFJHQkF0b0NTUyh7CiAgICAuLi5yZ2JhLAogICAgYTogMQogIH0pOwp9CmV4cG9ydCBmdW5jdGlvbiBSR0JBdG9IZXgocmdiYSkgewogIGNvbnN0IHRvSGV4ID0gdiA9PiB7CiAgICBjb25zdCBoID0gTWF0aC5yb3VuZCh2KS50b1N0cmluZygxNik7CiAgICByZXR1cm4gKCcwMCcuc3Vic3RyKDAsIDIgLSBoLmxlbmd0aCkgKyBoKS50b1VwcGVyQ2FzZSgpOwogIH07CiAgcmV0dXJuIGAjJHtbdG9IZXgocmdiYS5yKSwgdG9IZXgocmdiYS5nKSwgdG9IZXgocmdiYS5iKSwgdG9IZXgoTWF0aC5yb3VuZChyZ2JhLmEgKiAyNTUpKV0uam9pbignJyl9YDsKfQpleHBvcnQgZnVuY3Rpb24gSGV4VG9SR0JBKGhleCkgewogIGNvbnN0IHJnYmEgPSBjaHVuayhoZXguc2xpY2UoMSksIDIpLm1hcChjID0+IHBhcnNlSW50KGMsIDE2KSk7CiAgcmV0dXJuIHsKICAgIHI6IHJnYmFbMF0sCiAgICBnOiByZ2JhWzFdLAogICAgYjogcmdiYVsyXSwKICAgIGE6IE1hdGgucm91bmQocmdiYVszXSAvIDI1NSAqIDEwMCkgLyAxMDAKICB9Owp9CmV4cG9ydCBmdW5jdGlvbiBIZXhUb0hTVkEoaGV4KSB7CiAgY29uc3QgcmdiID0gSGV4VG9SR0JBKGhleCk7CiAgcmV0dXJuIFJHQkF0b0hTVkEocmdiKTsKfQpleHBvcnQgZnVuY3Rpb24gSFNWQXRvSGV4KGhzdmEpIHsKICByZXR1cm4gUkdCQXRvSGV4KEhTVkF0b1JHQkEoaHN2YSkpOwp9CmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhleChoZXgpIHsKICBpZiAoaGV4LnN0YXJ0c1dpdGgoJyMnKSkgewogICAgaGV4ID0gaGV4LnNsaWNlKDEpOwogIH0KICBoZXggPSBoZXgucmVwbGFjZSgvKFteMC05YS1mXSkvZ2ksICdGJyk7CiAgaWYgKGhleC5sZW5ndGggPT09IDMgfHwgaGV4Lmxlbmd0aCA9PT0gNCkgewogICAgaGV4ID0gaGV4LnNwbGl0KCcnKS5tYXAoeCA9PiB4ICsgeCkuam9pbignJyk7CiAgfQogIGlmIChoZXgubGVuZ3RoID09PSA2KSB7CiAgICBoZXggPSBwYWRFbmQoaGV4LCA4LCAnRicpOwogIH0gZWxzZSB7CiAgICBoZXggPSBwYWRFbmQocGFkRW5kKGhleCwgNiksIDgsICdGJyk7CiAgfQogIHJldHVybiBgIyR7aGV4fWAudG9VcHBlckNhc2UoKS5zdWJzdHIoMCwgOSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR3JhZGllbnQoZ3JhZGllbnQsIGNvbG9ycywgY3VycmVudFRoZW1lKSB7CiAgcmV0dXJuIGdyYWRpZW50LnJlcGxhY2UoLyhbYS16XSsoXHNbYS16XSstWzEtNV0pPykoPz0kfCwpL2dpLCB4ID0+IHsKICAgIHJldHVybiBjbGFzc1RvSGV4KHgsIGNvbG9ycywgY3VycmVudFRoZW1lKSB8fCB4OwogIH0pLnJlcGxhY2UoLyhyZ2JhXCgpI1swLTlhLWZdKyg/PSwpL2dpLCB4ID0+IHsKICAgIHJldHVybiAncmdiYSgnICsgT2JqZWN0LnZhbHVlcyhIZXhUb1JHQkEocGFyc2VIZXgoeC5yZXBsYWNlKC9yZ2JhXCgvLCAnJykpKSkuc2xpY2UoMCwgMykuam9pbignLCcpOwogIH0pOwp9CmV4cG9ydCBmdW5jdGlvbiBSR0J0b0ludChyZ2JhKSB7CiAgcmV0dXJuIChyZ2JhLnIgPDwgMTYpICsgKHJnYmEuZyA8PCA4KSArIHJnYmEuYjsKfQovKioKICogUmV0dXJucyB0aGUgY29udHJhc3QgcmF0aW8gKDEtMjEpIGJldHdlZW4gdHdvIGNvbG9ycy4KICoKICogQHBhcmFtIGMxIEZpcnN0IGNvbG9yCiAqIEBwYXJhbSBjMiBTZWNvbmQgY29sb3IKICovCgpleHBvcnQgZnVuY3Rpb24gY29udHJhc3RSYXRpbyhjMSwgYzIpIHsKICBjb25zdCBbLCB5MV0gPSB0b1hZWihSR0J0b0ludChjMSkpOwogIGNvbnN0IFssIHkyXSA9IHRvWFlaKFJHQnRvSW50KGMyKSk7CiAgcmV0dXJuIChNYXRoLm1heCh5MSwgeTIpICsgMC4wNSkgLyAoTWF0aC5taW4oeTEsIHkyKSArIDAuMDUpOwp9"},null]}