{"remainingRequest":"/home/kantro/WebstormProjects/wikipyconero/node_modules/babel-loader/lib/index.js??ref--0-1!/home/kantro/WebstormProjects/wikipyconero/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kantro/WebstormProjects/wikipyconero/client/themes/default/components/page.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kantro/WebstormProjects/wikipyconero/client/themes/default/components/page.vue","mtime":1715901451466},{"path":"/home/kantro/WebstormProjects/wikipyconero/.babelrc","mtime":1695287603859},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/cache-loader/dist/cjs.js","mtime":1694896091905},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/babel-loader/lib/index.js","mtime":1694896091857},{"path":"/home/kantro/WebstormProjects/wikipyconero/node_modules/vue-loader/lib/index.js","mtime":1695231282570}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWJvdW5jZSBmcm9tICJsb2Rhc2gvZGVib3VuY2UiOwppbXBvcnQgX2xhc3QgZnJvbSAibG9kYXNoL2xhc3QiOwppbXBvcnQgX2dldCBmcm9tICJsb2Rhc2gvZ2V0IjsKaW1wb3J0IF9yZWR1Y2UgZnJvbSAibG9kYXNoL3JlZHVjZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCgppbXBvcnQgeyBTdGF0dXNJbmRpY2F0b3IgfSBmcm9tICd2dWUtc3RhdHVzLWluZGljYXRvcic7CmltcG9ydCBUYWJzZXQgZnJvbSAnLi90YWJzZXQudnVlJzsKaW1wb3J0IE5hdlNpZGViYXIgZnJvbSAnLi9uYXYtc2lkZWJhci52dWUnOwppbXBvcnQgUHJpc20gZnJvbSAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNvcmUiOwppbXBvcnQgInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jbGlrZSI7CmltcG9ydCAicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW1hcmt1cCI7CmltcG9ydCAicHJpc21qcy9wbHVnaW5zL2xpbmUtbnVtYmVycy9wcmlzbS1saW5lLW51bWJlcnMuY3NzIjsKaW1wb3J0ICJwcmlzbWpzL3BsdWdpbnMvbGluZS1udW1iZXJzL3ByaXNtLWxpbmUtbnVtYmVycyI7CmltcG9ydCAicHJpc21qcy9wbHVnaW5zL2F1dG9sb2FkZXIvcHJpc20tYXV0b2xvYWRlciI7CmltcG9ydCAicHJpc21qcy9wbHVnaW5zL25vcm1hbGl6ZS13aGl0ZXNwYWNlL3ByaXNtLW5vcm1hbGl6ZS13aGl0ZXNwYWNlIjsKaW1wb3J0ICJwcmlzbWpzL3BsdWdpbnMvdG9vbGJhci9wcmlzbS10b29sYmFyLmNzcyI7CmltcG9ydCAicHJpc21qcy9wbHVnaW5zL3Rvb2xiYXIvcHJpc20tdG9vbGJhciI7CmltcG9ydCAicHJpc21qcy9wbHVnaW5zL2NvcHktdG8tY2xpcGJvYXJkL3ByaXNtLWNvcHktdG8tY2xpcGJvYXJkIjsKaW1wb3J0ICJwcmlzbWpzL3RoZW1lcy9wcmlzbS10d2lsaWdodC5jc3MiOwppbXBvcnQgbWVybWFpZCBmcm9tICdtZXJtYWlkJzsKaW1wb3J0IHsgZ2V0LCBzeW5jIH0gZnJvbSAndnVleC1wYXRoaWZ5JzsKaW1wb3J0IENsaXBib2FyZEpTIGZyb20gJ2NsaXBib2FyZCc7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKVnVlLmNvbXBvbmVudCgnVGFic2V0JywgVGFic2V0KTsKUHJpc20ucGx1Z2lucy5hdXRvbG9hZGVyLmxhbmd1YWdlc19wYXRoID0gJy9fYXNzZXRzL2pzL3ByaXNtLyc7ClByaXNtLnBsdWdpbnMuTm9ybWFsaXplV2hpdGVzcGFjZS5zZXREZWZhdWx0cyh7CiAgJ3JlbW92ZS10cmFpbGluZyc6IHRydWUsCiAgJ3JlbW92ZS1pbmRlbnQnOiB0cnVlLAogICdsZWZ0LXRyaW0nOiB0cnVlLAogICdyaWdodC10cmltJzogdHJ1ZSwKICAncmVtb3ZlLWluaXRpYWwtbGluZS1mZWVkJzogdHJ1ZSwKICAndGFicy10by1zcGFjZXMnOiAyCn0pOwpQcmlzbS5wbHVnaW5zLnRvb2xiYXIucmVnaXN0ZXJCdXR0b24oJ2NvcHktdG8tY2xpcGJvYXJkJywgZW52ID0+IHsKICBsZXQgbGlua0NvcHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICBsaW5rQ29weS50ZXh0Q29udGVudCA9ICdDb3B5JzsKICBjb25zdCBjbGlwID0gbmV3IENsaXBib2FyZEpTKGxpbmtDb3B5LCB7CiAgICB0ZXh0OiAoKSA9PiB7CiAgICAgIHJldHVybiBlbnYuY29kZTsKICAgIH0KICB9KTsKICBjbGlwLm9uKCdzdWNjZXNzJywgKCkgPT4gewogICAgbGlua0NvcHkudGV4dENvbnRlbnQgPSAnQ29waWVkISc7CiAgICByZXNldENsaXBib2FyZFRleHQoKTsKICB9KTsKICBjbGlwLm9uKCdlcnJvcicsICgpID0+IHsKICAgIGxpbmtDb3B5LnRleHRDb250ZW50ID0gJ1ByZXNzIEN0cmwrQyB0byBjb3B5JzsKICAgIHJlc2V0Q2xpcGJvYXJkVGV4dCgpOwogIH0pOwogIHJldHVybiBsaW5rQ29weTsKICBmdW5jdGlvbiByZXNldENsaXBib2FyZFRleHQoKSB7CiAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgbGlua0NvcHkudGV4dENvbnRlbnQgPSAnQ29weSc7CiAgICB9LCA1MDAwKTsKICB9Cn0pOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgTmF2U2lkZWJhciwKICAgIFN0YXR1c0luZGljYXRvcgogIH0sCiAgcHJvcHM6IHsKICAgIHBhZ2VJZDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCiAgICBsb2NhbGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnZW4nCiAgICB9LAogICAgcGF0aDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdob21lJwogICAgfSwKICAgIHRpdGxlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ1VudGl0bGVkIFBhZ2UnCiAgICB9LAogICAgZGVzY3JpcHRpb246IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfSwKICAgIGNyZWF0ZWRBdDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9LAogICAgdXBkYXRlZEF0OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICB0YWdzOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiAoKSA9PiBbXQogICAgfSwKICAgIGF1dGhvck5hbWU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnVW5rbm93bicKICAgIH0sCiAgICBhdXRob3JJZDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCiAgICBlZGl0b3I6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfSwKICAgIGlzUHVibGlzaGVkOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgdG9jOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICBzaWRlYmFyOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICBuYXZNb2RlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ01JWEVEJwogICAgfSwKICAgIGNvbW1lbnRzRW5hYmxlZDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGVmZmVjdGl2ZVBlcm1pc3Npb25zOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICBjb21tZW50c0V4dGVybmFsOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgZWRpdFNob3J0Y3V0czogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9LAogICAgZmlsZW5hbWU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG5hdlNob3duOiBmYWxzZSwKICAgICAgbmF2RXhwYW5kZWQ6IGZhbHNlLAogICAgICB1cEJ0blNob3duOiBmYWxzZSwKICAgICAgcGFnZUVkaXRGYWI6IGZhbHNlLAogICAgICBzY3JvbGxPcHRzOiB7CiAgICAgICAgZHVyYXRpb246IDE1MDAsCiAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgIGVhc2luZzogJ2Vhc2VJbk91dEN1YmljJwogICAgICB9LAogICAgICBzY3JvbGxTdHlsZTogewogICAgICAgIHZ1ZXNjcm9sbDoge30sCiAgICAgICAgc2Nyb2xsUGFuZWw6IHsKICAgICAgICAgIGluaXRpYWxTY3JvbGxYOiAwLjAxLAogICAgICAgICAgLy8gZml4IHNjcm9sbGJhciBub3QgZGlzYXBwZWFyaW5nIG9uIGxvYWQKICAgICAgICAgIHNjcm9sbGluZ1g6IGZhbHNlLAogICAgICAgICAgc3BlZWQ6IDUwCiAgICAgICAgfSwKICAgICAgICByYWlsOiB7CiAgICAgICAgICBndXR0ZXJPZkVuZHM6ICcycHgnCiAgICAgICAgfSwKICAgICAgICBiYXI6IHsKICAgICAgICAgIG9ubHlTaG93QmFyT25TY3JvbGw6IGZhbHNlLAogICAgICAgICAgYmFja2dyb3VuZDogJyM0MkE1RjUnLAogICAgICAgICAgaG92ZXJTdHlsZTogewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAnIzY0QjVGNicKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHdpbldpZHRoOiAwCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlzQXV0aGVudGljYXRlZDogZ2V0KCd1c2VyL2F1dGhlbnRpY2F0ZWQnKSwKICAgIGNvbW1lbnRzQ291bnQ6IGdldCgncGFnZS9jb21tZW50c0NvdW50JyksCiAgICBjb21tZW50c1Blcm1zOiBnZXQoJ3BhZ2UvZWZmZWN0aXZlUGVybWlzc2lvbnNAY29tbWVudHMnKSwKICAgIGVkaXRTaG9ydGN1dHNPYmo6IGdldCgncGFnZS9lZGl0U2hvcnRjdXRzJyksCiAgICByYXRpbmc6IHsKICAgICAgZ2V0KCkgewogICAgICAgIHJldHVybiAzLjU7CiAgICAgIH0sCiAgICAgIHNldCh2YWwpIHt9CiAgICB9LAogICAgYnJlYWRjcnVtYnMoKSB7CiAgICAgIHJldHVybiBbewogICAgICAgIHBhdGg6ICcvJywKICAgICAgICBuYW1lOiAnSG9tZScKICAgICAgfV0uY29uY2F0KF9yZWR1Y2UodGhpcy5wYXRoLnNwbGl0KCcvJyksIChyZXN1bHQsIHZhbHVlLCBrZXkpID0+IHsKICAgICAgICByZXN1bHQucHVzaCh7CiAgICAgICAgICBwYXRoOiBfZ2V0KF9sYXN0KHJlc3VsdCksICdwYXRoJywgYC8ke3RoaXMubG9jYWxlfWApICsgYC8ke3ZhbHVlfWAsCiAgICAgICAgICBuYW1lOiB2YWx1ZQogICAgICAgIH0pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0sIFtdKSk7CiAgICB9LAogICAgcGFnZVVybCgpIHsKICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgfSwKICAgIHVwQnRuUG9zaXRpb24oKSB7CiAgICAgIGlmICh0aGlzLiR2dWV0aWZ5LmJyZWFrcG9pbnQubWRBbmRVcCkgewogICAgICAgIHJldHVybiB0aGlzLiR2dWV0aWZ5LnJ0bCA/IGByaWdodDogMjM1cHg7YCA6IGBsZWZ0OiAyMzVweDtgOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLiR2dWV0aWZ5LnJ0bCA/IGByaWdodDogNjVweDtgIDogYGxlZnQ6IDY1cHg7YDsKICAgICAgfQogICAgfSwKICAgIHNpZGViYXJEZWNvZGVkKCkgewogICAgICByZXR1cm4gSlNPTi5wYXJzZShCdWZmZXIuZnJvbSh0aGlzLnNpZGViYXIsICdiYXNlNjQnKS50b1N0cmluZygpKTsKICAgIH0sCiAgICB0b2NEZWNvZGVkKCkgewogICAgICByZXR1cm4gSlNPTi5wYXJzZShCdWZmZXIuZnJvbSh0aGlzLnRvYywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCkpOwogICAgfSwKICAgIHRvY1Bvc2l0aW9uOiBnZXQoJ3NpdGUvdG9jUG9zaXRpb24nKSwKICAgIGhhc0FkbWluUGVybWlzc2lvbjogZ2V0KCdwYWdlL2VmZmVjdGl2ZVBlcm1pc3Npb25zQHN5c3RlbS5tYW5hZ2UnKSwKICAgIGhhc1dyaXRlUGFnZXNQZXJtaXNzaW9uOiBnZXQoJ3BhZ2UvZWZmZWN0aXZlUGVybWlzc2lvbnNAcGFnZXMud3JpdGUnKSwKICAgIGhhc01hbmFnZVBhZ2VzUGVybWlzc2lvbjogZ2V0KCdwYWdlL2VmZmVjdGl2ZVBlcm1pc3Npb25zQHBhZ2VzLm1hbmFnZScpLAogICAgaGFzRGVsZXRlUGFnZXNQZXJtaXNzaW9uOiBnZXQoJ3BhZ2UvZWZmZWN0aXZlUGVybWlzc2lvbnNAcGFnZXMuZGVsZXRlJyksCiAgICBoYXNSZWFkU291cmNlUGVybWlzc2lvbjogZ2V0KCdwYWdlL2VmZmVjdGl2ZVBlcm1pc3Npb25zQHNvdXJjZS5yZWFkJyksCiAgICBoYXNSZWFkSGlzdG9yeVBlcm1pc3Npb246IGdldCgncGFnZS9lZmZlY3RpdmVQZXJtaXNzaW9uc0BoaXN0b3J5LnJlYWQnKSwKICAgIGhhc0FueVBhZ2VQZXJtaXNzaW9ucygpIHsKICAgICAgcmV0dXJuIHRoaXMuaGFzQWRtaW5QZXJtaXNzaW9uIHx8IHRoaXMuaGFzV3JpdGVQYWdlc1Blcm1pc3Npb24gfHwgdGhpcy5oYXNNYW5hZ2VQYWdlc1Blcm1pc3Npb24gfHwgdGhpcy5oYXNEZWxldGVQYWdlc1Blcm1pc3Npb24gfHwgdGhpcy5oYXNSZWFkU291cmNlUGVybWlzc2lvbiB8fCB0aGlzLmhhc1JlYWRIaXN0b3J5UGVybWlzc2lvbjsKICAgIH0sCiAgICBwcmludFZpZXc6IHN5bmMoJ3NpdGUvcHJpbnRWaWV3JyksCiAgICBlZGl0TWVudUV4dGVybmFsVXJsKCkgewogICAgICBpZiAodGhpcy5lZGl0U2hvcnRjdXRzT2JqLmVkaXRNZW51QmFyICYmIHRoaXMuZWRpdFNob3J0Y3V0c09iai5lZGl0TWVudUV4dGVybmFsQnRuKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdFNob3J0Y3V0c09iai5lZGl0TWVudUV4dGVybmFsVXJsLnJlcGxhY2UoJ3tmaWxlbmFtZX0nLCB0aGlzLmZpbGVuYW1lKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJyc7CiAgICAgIH0KICAgIH0KICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLiRzdG9yZS5zZXQoJ3BhZ2UvYXV0aG9ySWQnLCB0aGlzLmF1dGhvcklkKTsKICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS9hdXRob3JOYW1lJywgdGhpcy5hdXRob3JOYW1lKTsKICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS9jcmVhdGVkQXQnLCB0aGlzLmNyZWF0ZWRBdCk7CiAgICB0aGlzLiRzdG9yZS5zZXQoJ3BhZ2UvZGVzY3JpcHRpb24nLCB0aGlzLmRlc2NyaXB0aW9uKTsKICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS9pc1B1Ymxpc2hlZCcsIHRoaXMuaXNQdWJsaXNoZWQpOwogICAgdGhpcy4kc3RvcmUuc2V0KCdwYWdlL2lkJywgdGhpcy5wYWdlSWQpOwogICAgdGhpcy4kc3RvcmUuc2V0KCdwYWdlL2xvY2FsZScsIHRoaXMubG9jYWxlKTsKICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS9wYXRoJywgdGhpcy5wYXRoKTsKICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS90YWdzJywgdGhpcy50YWdzKTsKICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS90aXRsZScsIHRoaXMudGl0bGUpOwogICAgdGhpcy4kc3RvcmUuc2V0KCdwYWdlL2VkaXRvcicsIHRoaXMuZWRpdG9yKTsKICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS91cGRhdGVkQXQnLCB0aGlzLnVwZGF0ZWRBdCk7CiAgICBpZiAodGhpcy5lZmZlY3RpdmVQZXJtaXNzaW9ucykgewogICAgICB0aGlzLiRzdG9yZS5zZXQoJ3BhZ2UvZWZmZWN0aXZlUGVybWlzc2lvbnMnLCBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKHRoaXMuZWZmZWN0aXZlUGVybWlzc2lvbnMsICdiYXNlNjQnKS50b1N0cmluZygpKSk7CiAgICB9CiAgICBpZiAodGhpcy5lZGl0U2hvcnRjdXRzKSB7CiAgICAgIHRoaXMuJHN0b3JlLnNldCgncGFnZS9lZGl0U2hvcnRjdXRzJywgSlNPTi5wYXJzZShCdWZmZXIuZnJvbSh0aGlzLmVkaXRTaG9ydGN1dHMsICdiYXNlNjQnKS50b1N0cmluZygpKSk7CiAgICB9CiAgICB0aGlzLiRzdG9yZS5zZXQoJ3BhZ2UvbW9kZScsICd2aWV3Jyk7CiAgfSwKICBtb3VudGVkKCkgewogICAgaWYgKHRoaXMuJHZ1ZXRpZnkudGhlbWUuZGFyaykgewogICAgICB0aGlzLnNjcm9sbFN0eWxlLmJhci5iYWNrZ3JvdW5kID0gJyM0MjQyNDInOwogICAgfQoKICAgIC8vIC0+IENoZWNrIHNpZGUgbmF2aWdhdGlvbiB2aXNpYmlsaXR5CiAgICB0aGlzLmhhbmRsZVNpZGVOYXZWaXNpYmlsaXR5KCk7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgX2RlYm91bmNlKCgpID0+IHsKICAgICAgdGhpcy5oYW5kbGVTaWRlTmF2VmlzaWJpbGl0eSgpOwogICAgfSwgNTAwKSk7CgogICAgLy8gLT4gSGlnaGxpZ2h0IENvZGUgQmxvY2tzCiAgICBQcmlzbS5oaWdobGlnaHRBbGxVbmRlcih0aGlzLiRyZWZzLmNvbnRhaW5lcik7CgogICAgLy8gLT4gUmVuZGVyIE1lcm1haWQgZGlhZ3JhbXMKICAgIG1lcm1haWQubWVybWFpZEFQSS5pbml0aWFsaXplKHsKICAgICAgc3RhcnRPbkxvYWQ6IHRydWUsCiAgICAgIHRoZW1lOiB0aGlzLiR2dWV0aWZ5LnRoZW1lLmRhcmsgPyBgZGFya2AgOiBgZGVmYXVsdGAKICAgIH0pOwoKICAgIC8vIC0+IEhhbmRsZSBhbmNob3Igc2Nyb2xsaW5nCiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggJiYgd2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoID4gMSkgewogICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykgewogICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgIHRoaXMuJHZ1ZXRpZnkuZ29UbyhkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhhc2gpLCB0aGlzLnNjcm9sbE9wdHMpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gewogICAgICAgICAgdGhpcy4kdnVldGlmeS5nb1RvKGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uaGFzaCksIHRoaXMuc2Nyb2xsT3B0cyk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvLyAtPiBIYW5kbGUgYW5jaG9yIGxpbmtzIHdpdGhpbiB0aGUgcGFnZSBjb250ZW50cwogICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICB0aGlzLiRyZWZzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGBhW2hyZWZePSIjIl0sIGFbaHJlZl49IiR7d2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaGFzaCwgJycpfSMiXWApLmZvckVhY2goZWwgPT4gewogICAgICAgIGVsLm9uY2xpY2sgPSBldiA9PiB7CiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICB0aGlzLiR2dWV0aWZ5LmdvVG8oZGVjb2RlVVJJQ29tcG9uZW50KGV2LmN1cnJlbnRUYXJnZXQuaGFzaCksIHRoaXMuc2Nyb2xsT3B0cyk7CiAgICAgICAgfTsKICAgICAgfSk7CiAgICAgIHdpbmRvdy5ib290Lm5vdGlmeSgncGFnZS1yZWFkeScpOwogICAgfSk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBnb0hvbWUoKSB7CiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oJy8nKTsKICAgIH0sCiAgICB0b2dnbGVOYXZpZ2F0aW9uKCkgewogICAgICB0aGlzLm5hdk9wZW4gPSAhdGhpcy5uYXZPcGVuOwogICAgfSwKICAgIHVwQnRuU2Nyb2xsKCkgewogICAgICBjb25zdCBzY3JvbGxPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDsKICAgICAgdGhpcy51cEJ0blNob3duID0gc2Nyb2xsT2Zmc2V0ID4gd2luZG93LmlubmVySGVpZ2h0ICogMC4zMzsKICAgIH0sCiAgICBwcmludCgpIHsKICAgICAgaWYgKHRoaXMucHJpbnRWaWV3KSB7CiAgICAgICAgdGhpcy5wcmludFZpZXcgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnByaW50VmlldyA9IHRydWU7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgd2luZG93LnByaW50KCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBwYWdlRWRpdCgpIHsKICAgICAgdGhpcy4kcm9vdC4kZW1pdCgncGFnZUVkaXQnLCB0cnVlKTsKICAgIH0sCiAgICBwYWdlSGlzdG9yeSgpIHsKICAgICAgdGhpcy4kcm9vdC4kZW1pdCgncGFnZUhpc3RvcnknKTsKICAgIH0sCiAgICBwYWdlU291cmNlKCkgewogICAgICB0aGlzLiRyb290LiRlbWl0KCdwYWdlU291cmNlJyk7CiAgICB9LAogICAgcGFnZUNvbnZlcnQoKSB7CiAgICAgIHRoaXMuJHJvb3QuJGVtaXQoJ3BhZ2VDb252ZXJ0Jyk7CiAgICB9LAogICAgcGFnZUR1cGxpY2F0ZSgpIHsKICAgICAgdGhpcy4kcm9vdC4kZW1pdCgncGFnZUR1cGxpY2F0ZScpOwogICAgfSwKICAgIHBhZ2VNb3ZlKCkgewogICAgICB0aGlzLiRyb290LiRlbWl0KCdwYWdlTW92ZScpOwogICAgfSwKICAgIHBhZ2VEZWxldGUoKSB7CiAgICAgIHRoaXMuJHJvb3QuJGVtaXQoJ3BhZ2VEZWxldGUnKTsKICAgIH0sCiAgICBoYW5kbGVTaWRlTmF2VmlzaWJpbGl0eSgpIHsKICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID09PSB0aGlzLndpbldpZHRoKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMud2luV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDsKICAgICAgaWYgKHRoaXMuJHZ1ZXRpZnkuYnJlYWtwb2ludC5tZEFuZFVwKSB7CiAgICAgICAgdGhpcy5uYXZTaG93biA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5uYXZTaG93biA9IGZhbHNlOwogICAgICB9CiAgICB9LAogICAgZ29Ub0NvbW1lbnRzKCkgewogICAgICBsZXQgZm9jdXNOZXdDb21tZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTsKICAgICAgdGhpcy4kdnVldGlmeS5nb1RvKCcjZGlzY3Vzc2lvbicsIHRoaXMuc2Nyb2xsT3B0cyk7CiAgICAgIGlmIChmb2N1c05ld0NvbW1lbnQpIHsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGlzY3Vzc2lvbi1uZXcnKS5mb2N1cygpOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},null]}